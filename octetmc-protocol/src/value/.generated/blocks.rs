/// `minecraft:waxed_chiseled_copper` block.
pub mod waxed_chiseled_copper {
    use super::*;

    /// `minecraft:waxed_chiseled_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedChiseledCopper;

    impl WaxedChiseledCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24015)
        }
    }

    impl From<WaxedChiseledCopper> for BlockState {
        #[inline(always)]
        fn from(value : WaxedChiseledCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedChiseledCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedChiseledCopper { }

    impl Block for WaxedChiseledCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:green_stained_glass_pane` block.
pub mod green_stained_glass_pane {
    use super::*;

    /// `minecraft:green_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenStainedGlassPane {
        /// `south` state.
        pub south : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `east` state.
        pub east : bool,
        /// `north` state.
        pub north : bool,
        /// `west` state.
        pub west : bool,
    }

    impl GreenStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.south, self.waterlogged, self.east, self.north, self.west, )) {
                ( true, true, true, true, true, ) => 10597,
                ( true, true, true, true, false, ) => 10598,
                ( true, false, true, true, true, ) => 10599,
                ( true, false, true, true, false, ) => 10600,
                ( false, true, true, true, true, ) => 10601,
                ( false, true, true, true, false, ) => 10602,
                ( false, false, true, true, true, ) => 10603,
                ( false, false, true, true, false, ) => 10604,
                ( true, true, true, false, true, ) => 10605,
                ( true, true, true, false, false, ) => 10606,
                ( true, false, true, false, true, ) => 10607,
                ( true, false, true, false, false, ) => 10608,
                ( false, true, true, false, true, ) => 10609,
                ( false, true, true, false, false, ) => 10610,
                ( false, false, true, false, true, ) => 10611,
                ( false, false, true, false, false, ) => 10612,
                ( true, true, false, true, true, ) => 10613,
                ( true, true, false, true, false, ) => 10614,
                ( true, false, false, true, true, ) => 10615,
                ( true, false, false, true, false, ) => 10616,
                ( false, true, false, true, true, ) => 10617,
                ( false, true, false, true, false, ) => 10618,
                ( false, false, false, true, true, ) => 10619,
                ( false, false, false, true, false, ) => 10620,
                ( true, true, false, false, true, ) => 10621,
                ( true, true, false, false, false, ) => 10622,
                ( true, false, false, false, true, ) => 10623,
                ( true, false, false, false, false, ) => 10624,
                ( false, true, false, false, true, ) => 10625,
                ( false, true, false, false, false, ) => 10626,
                ( false, false, false, false, true, ) => 10627,
                ( false, false, false, false, false, ) => 10628,
            })
        }
    }

    impl From<GreenStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : GreenStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenStainedGlassPane { }

    impl Block for GreenStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            south : false,
            waterlogged : false,
            east : false,
            north : false,
            west : false,
        };
    }

}

/// `minecraft:emerald_ore` block.
pub mod emerald_ore {
    use super::*;

    /// `minecraft:emerald_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct EmeraldOre;

    impl EmeraldOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(8295)
        }
    }

    impl From<EmeraldOre> for BlockState {
        #[inline(always)]
        fn from(value : EmeraldOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for EmeraldOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for EmeraldOre { }

    impl Block for EmeraldOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:polished_deepslate_slab` block.
pub mod polished_deepslate_slab {
    use super::*;

    /// `minecraft:polished_deepslate_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedDeepslateSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl PolishedDeepslateSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 26491,
                ( Kind::Top, false, ) => 26492,
                ( Kind::Bottom, true, ) => 26493,
                ( Kind::Bottom, false, ) => 26494,
                ( Kind::Double, true, ) => 26495,
                ( Kind::Double, false, ) => 26496,
            })
        }
    }

    impl From<PolishedDeepslateSlab> for BlockState {
        #[inline(always)]
        fn from(value : PolishedDeepslateSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedDeepslateSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedDeepslateSlab { }

    impl Block for PolishedDeepslateSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:polished_granite` block.
pub mod polished_granite {
    use super::*;

    /// `minecraft:polished_granite` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedGranite;

    impl PolishedGranite {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(3)
        }
    }

    impl From<PolishedGranite> for BlockState {
        #[inline(always)]
        fn from(value : PolishedGranite) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedGranite {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedGranite { }

    impl Block for PolishedGranite {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:grass_block` block.
pub mod grass_block {
    use super::*;

    /// `minecraft:grass_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrassBlock {
        /// `snowy` state.
        pub snowy : bool,
    }

    impl GrassBlock {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.snowy, )) {
                ( true, ) => 8,
                ( false, ) => 9,
            })
        }
    }

    impl From<GrassBlock> for BlockState {
        #[inline(always)]
        fn from(value : GrassBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrassBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrassBlock { }

    impl Block for GrassBlock {
        const DEFAULT_STATE : Self = Self {
            snowy : false,
        };
    }

}

/// `minecraft:acacia_wall_hanging_sign` block.
pub mod acacia_wall_hanging_sign {
    use super::*;

    /// `minecraft:acacia_wall_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaWallHangingSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl AcaciaWallHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 5730,
                ( false, Facing::North, ) => 5731,
                ( true, Facing::South, ) => 5732,
                ( false, Facing::South, ) => 5733,
                ( true, Facing::West, ) => 5734,
                ( false, Facing::West, ) => 5735,
                ( true, Facing::East, ) => 5736,
                ( false, Facing::East, ) => 5737,
            })
        }
    }

    impl From<AcaciaWallHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaWallHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaWallHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaWallHangingSign { }

    impl Block for AcaciaWallHangingSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:lime_concrete_powder` block.
pub mod lime_concrete_powder {
    use super::*;

    /// `minecraft:lime_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeConcretePowder;

    impl LimeConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13772)
        }
    }

    impl From<LimeConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : LimeConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeConcretePowder { }

    impl Block for LimeConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:oak_wall_sign` block.
pub mod oak_wall_sign {
    use super::*;

    /// `minecraft:oak_wall_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakWallSign {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl OakWallSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 4858,
                ( Facing::North, false, ) => 4859,
                ( Facing::South, true, ) => 4860,
                ( Facing::South, false, ) => 4861,
                ( Facing::West, true, ) => 4862,
                ( Facing::West, false, ) => 4863,
                ( Facing::East, true, ) => 4864,
                ( Facing::East, false, ) => 4865,
            })
        }
    }

    impl From<OakWallSign> for BlockState {
        #[inline(always)]
        fn from(value : OakWallSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakWallSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakWallSign { }

    impl Block for OakWallSign {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:cyan_glazed_terracotta` block.
pub mod cyan_glazed_terracotta {
    use super::*;

    /// `minecraft:cyan_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CyanGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13723,
                ( Facing::South, ) => 13724,
                ( Facing::West, ) => 13725,
                ( Facing::East, ) => 13726,
            })
        }
    }

    impl From<CyanGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : CyanGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanGlazedTerracotta { }

    impl Block for CyanGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:turtle_egg` block.
pub mod turtle_egg {
    use super::*;

    /// `minecraft:turtle_egg` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TurtleEgg {
        /// `eggs` state.
        pub eggs : Eggs,
        /// `hatch` state.
        pub hatch : Hatch,
    }

    /// `eggs` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Eggs {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Eggs { }
    impl BlockProperty for Eggs { }

    /// `hatch` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hatch {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
    }
    impl crate::Sealed for Hatch { }
    impl BlockProperty for Hatch { }

    impl TurtleEgg {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.eggs, self.hatch, )) {
                ( Eggs::N1, Hatch::N0, ) => 13811,
                ( Eggs::N1, Hatch::N1, ) => 13812,
                ( Eggs::N1, Hatch::N2, ) => 13813,
                ( Eggs::N2, Hatch::N0, ) => 13814,
                ( Eggs::N2, Hatch::N1, ) => 13815,
                ( Eggs::N2, Hatch::N2, ) => 13816,
                ( Eggs::N3, Hatch::N0, ) => 13817,
                ( Eggs::N3, Hatch::N1, ) => 13818,
                ( Eggs::N3, Hatch::N2, ) => 13819,
                ( Eggs::N4, Hatch::N0, ) => 13820,
                ( Eggs::N4, Hatch::N1, ) => 13821,
                ( Eggs::N4, Hatch::N2, ) => 13822,
            })
        }
    }

    impl From<TurtleEgg> for BlockState {
        #[inline(always)]
        fn from(value : TurtleEgg) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TurtleEgg {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TurtleEgg { }

    impl Block for TurtleEgg {
        const DEFAULT_STATE : Self = Self {
            eggs : Eggs::N1,
            hatch : Hatch::N0,
        };
    }

}

/// `minecraft:candle_cake` block.
pub mod candle_cake {
    use super::*;

    /// `minecraft:candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl CandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22057,
                ( false, ) => 22058,
            })
        }
    }

    impl From<CandleCake> for BlockState {
        #[inline(always)]
        fn from(value : CandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CandleCake { }

    impl Block for CandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:birch_trapdoor` block.
pub mod birch_trapdoor {
    use super::*;

    /// `minecraft:birch_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchTrapdoor {
        /// `half` state.
        pub half : Half,
        /// `powered` state.
        pub powered : bool,
        /// `open` state.
        pub open : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BirchTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.powered, self.open, self.facing, self.waterlogged, )) {
                ( Half::Top, true, true, Facing::North, true, ) => 6268,
                ( Half::Top, true, true, Facing::North, false, ) => 6269,
                ( Half::Top, false, true, Facing::North, true, ) => 6270,
                ( Half::Top, false, true, Facing::North, false, ) => 6271,
                ( Half::Top, true, false, Facing::North, true, ) => 6272,
                ( Half::Top, true, false, Facing::North, false, ) => 6273,
                ( Half::Top, false, false, Facing::North, true, ) => 6274,
                ( Half::Top, false, false, Facing::North, false, ) => 6275,
                ( Half::Bottom, true, true, Facing::North, true, ) => 6276,
                ( Half::Bottom, true, true, Facing::North, false, ) => 6277,
                ( Half::Bottom, false, true, Facing::North, true, ) => 6278,
                ( Half::Bottom, false, true, Facing::North, false, ) => 6279,
                ( Half::Bottom, true, false, Facing::North, true, ) => 6280,
                ( Half::Bottom, true, false, Facing::North, false, ) => 6281,
                ( Half::Bottom, false, false, Facing::North, true, ) => 6282,
                ( Half::Bottom, false, false, Facing::North, false, ) => 6283,
                ( Half::Top, true, true, Facing::South, true, ) => 6284,
                ( Half::Top, true, true, Facing::South, false, ) => 6285,
                ( Half::Top, false, true, Facing::South, true, ) => 6286,
                ( Half::Top, false, true, Facing::South, false, ) => 6287,
                ( Half::Top, true, false, Facing::South, true, ) => 6288,
                ( Half::Top, true, false, Facing::South, false, ) => 6289,
                ( Half::Top, false, false, Facing::South, true, ) => 6290,
                ( Half::Top, false, false, Facing::South, false, ) => 6291,
                ( Half::Bottom, true, true, Facing::South, true, ) => 6292,
                ( Half::Bottom, true, true, Facing::South, false, ) => 6293,
                ( Half::Bottom, false, true, Facing::South, true, ) => 6294,
                ( Half::Bottom, false, true, Facing::South, false, ) => 6295,
                ( Half::Bottom, true, false, Facing::South, true, ) => 6296,
                ( Half::Bottom, true, false, Facing::South, false, ) => 6297,
                ( Half::Bottom, false, false, Facing::South, true, ) => 6298,
                ( Half::Bottom, false, false, Facing::South, false, ) => 6299,
                ( Half::Top, true, true, Facing::West, true, ) => 6300,
                ( Half::Top, true, true, Facing::West, false, ) => 6301,
                ( Half::Top, false, true, Facing::West, true, ) => 6302,
                ( Half::Top, false, true, Facing::West, false, ) => 6303,
                ( Half::Top, true, false, Facing::West, true, ) => 6304,
                ( Half::Top, true, false, Facing::West, false, ) => 6305,
                ( Half::Top, false, false, Facing::West, true, ) => 6306,
                ( Half::Top, false, false, Facing::West, false, ) => 6307,
                ( Half::Bottom, true, true, Facing::West, true, ) => 6308,
                ( Half::Bottom, true, true, Facing::West, false, ) => 6309,
                ( Half::Bottom, false, true, Facing::West, true, ) => 6310,
                ( Half::Bottom, false, true, Facing::West, false, ) => 6311,
                ( Half::Bottom, true, false, Facing::West, true, ) => 6312,
                ( Half::Bottom, true, false, Facing::West, false, ) => 6313,
                ( Half::Bottom, false, false, Facing::West, true, ) => 6314,
                ( Half::Bottom, false, false, Facing::West, false, ) => 6315,
                ( Half::Top, true, true, Facing::East, true, ) => 6316,
                ( Half::Top, true, true, Facing::East, false, ) => 6317,
                ( Half::Top, false, true, Facing::East, true, ) => 6318,
                ( Half::Top, false, true, Facing::East, false, ) => 6319,
                ( Half::Top, true, false, Facing::East, true, ) => 6320,
                ( Half::Top, true, false, Facing::East, false, ) => 6321,
                ( Half::Top, false, false, Facing::East, true, ) => 6322,
                ( Half::Top, false, false, Facing::East, false, ) => 6323,
                ( Half::Bottom, true, true, Facing::East, true, ) => 6324,
                ( Half::Bottom, true, true, Facing::East, false, ) => 6325,
                ( Half::Bottom, false, true, Facing::East, true, ) => 6326,
                ( Half::Bottom, false, true, Facing::East, false, ) => 6327,
                ( Half::Bottom, true, false, Facing::East, true, ) => 6328,
                ( Half::Bottom, true, false, Facing::East, false, ) => 6329,
                ( Half::Bottom, false, false, Facing::East, true, ) => 6330,
                ( Half::Bottom, false, false, Facing::East, false, ) => 6331,
            })
        }
    }

    impl From<BirchTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : BirchTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchTrapdoor { }

    impl Block for BirchTrapdoor {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            powered : false,
            open : false,
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:dark_oak_door` block.
pub mod dark_oak_door {
    use super::*;

    /// `minecraft:dark_oak_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakDoor {
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `hinge` state.
        pub hinge : Hinge,
        /// `open` state.
        pub open : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    impl DarkOakDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.facing, self.half, self.hinge, self.open, )) {
                ( true, Facing::North, Half::Upper, Hinge::Left, true, ) => 13101,
                ( false, Facing::North, Half::Upper, Hinge::Left, true, ) => 13102,
                ( true, Facing::North, Half::Upper, Hinge::Left, false, ) => 13103,
                ( false, Facing::North, Half::Upper, Hinge::Left, false, ) => 13104,
                ( true, Facing::North, Half::Upper, Hinge::Right, true, ) => 13105,
                ( false, Facing::North, Half::Upper, Hinge::Right, true, ) => 13106,
                ( true, Facing::North, Half::Upper, Hinge::Right, false, ) => 13107,
                ( false, Facing::North, Half::Upper, Hinge::Right, false, ) => 13108,
                ( true, Facing::North, Half::Lower, Hinge::Left, true, ) => 13109,
                ( false, Facing::North, Half::Lower, Hinge::Left, true, ) => 13110,
                ( true, Facing::North, Half::Lower, Hinge::Left, false, ) => 13111,
                ( false, Facing::North, Half::Lower, Hinge::Left, false, ) => 13112,
                ( true, Facing::North, Half::Lower, Hinge::Right, true, ) => 13113,
                ( false, Facing::North, Half::Lower, Hinge::Right, true, ) => 13114,
                ( true, Facing::North, Half::Lower, Hinge::Right, false, ) => 13115,
                ( false, Facing::North, Half::Lower, Hinge::Right, false, ) => 13116,
                ( true, Facing::South, Half::Upper, Hinge::Left, true, ) => 13117,
                ( false, Facing::South, Half::Upper, Hinge::Left, true, ) => 13118,
                ( true, Facing::South, Half::Upper, Hinge::Left, false, ) => 13119,
                ( false, Facing::South, Half::Upper, Hinge::Left, false, ) => 13120,
                ( true, Facing::South, Half::Upper, Hinge::Right, true, ) => 13121,
                ( false, Facing::South, Half::Upper, Hinge::Right, true, ) => 13122,
                ( true, Facing::South, Half::Upper, Hinge::Right, false, ) => 13123,
                ( false, Facing::South, Half::Upper, Hinge::Right, false, ) => 13124,
                ( true, Facing::South, Half::Lower, Hinge::Left, true, ) => 13125,
                ( false, Facing::South, Half::Lower, Hinge::Left, true, ) => 13126,
                ( true, Facing::South, Half::Lower, Hinge::Left, false, ) => 13127,
                ( false, Facing::South, Half::Lower, Hinge::Left, false, ) => 13128,
                ( true, Facing::South, Half::Lower, Hinge::Right, true, ) => 13129,
                ( false, Facing::South, Half::Lower, Hinge::Right, true, ) => 13130,
                ( true, Facing::South, Half::Lower, Hinge::Right, false, ) => 13131,
                ( false, Facing::South, Half::Lower, Hinge::Right, false, ) => 13132,
                ( true, Facing::West, Half::Upper, Hinge::Left, true, ) => 13133,
                ( false, Facing::West, Half::Upper, Hinge::Left, true, ) => 13134,
                ( true, Facing::West, Half::Upper, Hinge::Left, false, ) => 13135,
                ( false, Facing::West, Half::Upper, Hinge::Left, false, ) => 13136,
                ( true, Facing::West, Half::Upper, Hinge::Right, true, ) => 13137,
                ( false, Facing::West, Half::Upper, Hinge::Right, true, ) => 13138,
                ( true, Facing::West, Half::Upper, Hinge::Right, false, ) => 13139,
                ( false, Facing::West, Half::Upper, Hinge::Right, false, ) => 13140,
                ( true, Facing::West, Half::Lower, Hinge::Left, true, ) => 13141,
                ( false, Facing::West, Half::Lower, Hinge::Left, true, ) => 13142,
                ( true, Facing::West, Half::Lower, Hinge::Left, false, ) => 13143,
                ( false, Facing::West, Half::Lower, Hinge::Left, false, ) => 13144,
                ( true, Facing::West, Half::Lower, Hinge::Right, true, ) => 13145,
                ( false, Facing::West, Half::Lower, Hinge::Right, true, ) => 13146,
                ( true, Facing::West, Half::Lower, Hinge::Right, false, ) => 13147,
                ( false, Facing::West, Half::Lower, Hinge::Right, false, ) => 13148,
                ( true, Facing::East, Half::Upper, Hinge::Left, true, ) => 13149,
                ( false, Facing::East, Half::Upper, Hinge::Left, true, ) => 13150,
                ( true, Facing::East, Half::Upper, Hinge::Left, false, ) => 13151,
                ( false, Facing::East, Half::Upper, Hinge::Left, false, ) => 13152,
                ( true, Facing::East, Half::Upper, Hinge::Right, true, ) => 13153,
                ( false, Facing::East, Half::Upper, Hinge::Right, true, ) => 13154,
                ( true, Facing::East, Half::Upper, Hinge::Right, false, ) => 13155,
                ( false, Facing::East, Half::Upper, Hinge::Right, false, ) => 13156,
                ( true, Facing::East, Half::Lower, Hinge::Left, true, ) => 13157,
                ( false, Facing::East, Half::Lower, Hinge::Left, true, ) => 13158,
                ( true, Facing::East, Half::Lower, Hinge::Left, false, ) => 13159,
                ( false, Facing::East, Half::Lower, Hinge::Left, false, ) => 13160,
                ( true, Facing::East, Half::Lower, Hinge::Right, true, ) => 13161,
                ( false, Facing::East, Half::Lower, Hinge::Right, true, ) => 13162,
                ( true, Facing::East, Half::Lower, Hinge::Right, false, ) => 13163,
                ( false, Facing::East, Half::Lower, Hinge::Right, false, ) => 13164,
            })
        }
    }

    impl From<DarkOakDoor> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakDoor { }

    impl Block for DarkOakDoor {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            facing : Facing::North,
            half : Half::Lower,
            hinge : Hinge::Left,
            open : false,
        };
    }

}

/// `minecraft:oak_pressure_plate` block.
pub mod oak_pressure_plate {
    use super::*;

    /// `minecraft:oak_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakPressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl OakPressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 5892,
                ( false, ) => 5893,
            })
        }
    }

    impl From<OakPressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : OakPressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakPressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakPressurePlate { }

    impl Block for OakPressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:brown_carpet` block.
pub mod brown_carpet {
    use super::*;

    /// `minecraft:brown_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownCarpet;

    impl BrownCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11629)
        }
    }

    impl From<BrownCarpet> for BlockState {
        #[inline(always)]
        fn from(value : BrownCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownCarpet { }

    impl Block for BrownCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:deepslate_diamond_ore` block.
pub mod deepslate_diamond_ore {
    use super::*;

    /// `minecraft:deepslate_diamond_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateDiamondOre;

    impl DeepslateDiamondOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(4339)
        }
    }

    impl From<DeepslateDiamondOre> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateDiamondOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateDiamondOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateDiamondOre { }

    impl Block for DeepslateDiamondOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:polished_tuff` block.
pub mod polished_tuff {
    use super::*;

    /// `minecraft:polished_tuff` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedTuff;

    impl PolishedTuff {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(22552)
        }
    }

    impl From<PolishedTuff> for BlockState {
        #[inline(always)]
        fn from(value : PolishedTuff) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedTuff {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedTuff { }

    impl Block for PolishedTuff {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:potted_torchflower` block.
pub mod potted_torchflower {
    use super::*;

    /// `minecraft:potted_torchflower` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedTorchflower;

    impl PottedTorchflower {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9352)
        }
    }

    impl From<PottedTorchflower> for BlockState {
        #[inline(always)]
        fn from(value : PottedTorchflower) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedTorchflower {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedTorchflower { }

    impl Block for PottedTorchflower {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:mangrove_button` block.
pub mod mangrove_button {
    use super::*;

    /// `minecraft:mangrove_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveButton {
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `face` state.
        pub face : Face,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    impl MangroveButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.facing, self.face, )) {
                ( true, Facing::North, Face::Floor, ) => 9588,
                ( false, Facing::North, Face::Floor, ) => 9589,
                ( true, Facing::South, Face::Floor, ) => 9590,
                ( false, Facing::South, Face::Floor, ) => 9591,
                ( true, Facing::West, Face::Floor, ) => 9592,
                ( false, Facing::West, Face::Floor, ) => 9593,
                ( true, Facing::East, Face::Floor, ) => 9594,
                ( false, Facing::East, Face::Floor, ) => 9595,
                ( true, Facing::North, Face::Wall, ) => 9596,
                ( false, Facing::North, Face::Wall, ) => 9597,
                ( true, Facing::South, Face::Wall, ) => 9598,
                ( false, Facing::South, Face::Wall, ) => 9599,
                ( true, Facing::West, Face::Wall, ) => 9600,
                ( false, Facing::West, Face::Wall, ) => 9601,
                ( true, Facing::East, Face::Wall, ) => 9602,
                ( false, Facing::East, Face::Wall, ) => 9603,
                ( true, Facing::North, Face::Ceiling, ) => 9604,
                ( false, Facing::North, Face::Ceiling, ) => 9605,
                ( true, Facing::South, Face::Ceiling, ) => 9606,
                ( false, Facing::South, Face::Ceiling, ) => 9607,
                ( true, Facing::West, Face::Ceiling, ) => 9608,
                ( false, Facing::West, Face::Ceiling, ) => 9609,
                ( true, Facing::East, Face::Ceiling, ) => 9610,
                ( false, Facing::East, Face::Ceiling, ) => 9611,
            })
        }
    }

    impl From<MangroveButton> for BlockState {
        #[inline(always)]
        fn from(value : MangroveButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveButton { }

    impl Block for MangroveButton {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            facing : Facing::North,
            face : Face::Wall,
        };
    }

}

/// `minecraft:tuff_slab` block.
pub mod tuff_slab {
    use super::*;

    /// `minecraft:tuff_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TuffSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl TuffSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 22142,
                ( Kind::Top, false, ) => 22143,
                ( Kind::Bottom, true, ) => 22144,
                ( Kind::Bottom, false, ) => 22145,
                ( Kind::Double, true, ) => 22146,
                ( Kind::Double, false, ) => 22147,
            })
        }
    }

    impl From<TuffSlab> for BlockState {
        #[inline(always)]
        fn from(value : TuffSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TuffSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TuffSlab { }

    impl Block for TuffSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:orange_bed` block.
pub mod orange_bed {
    use super::*;

    /// `minecraft:orange_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeBed {
        /// `facing` state.
        pub facing : Facing,
        /// `occupied` state.
        pub occupied : bool,
        /// `part` state.
        pub part : Part,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    impl OrangeBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.occupied, self.part, )) {
                ( Facing::North, true, Part::Head, ) => 1747,
                ( Facing::North, true, Part::Foot, ) => 1748,
                ( Facing::North, false, Part::Head, ) => 1749,
                ( Facing::North, false, Part::Foot, ) => 1750,
                ( Facing::South, true, Part::Head, ) => 1751,
                ( Facing::South, true, Part::Foot, ) => 1752,
                ( Facing::South, false, Part::Head, ) => 1753,
                ( Facing::South, false, Part::Foot, ) => 1754,
                ( Facing::West, true, Part::Head, ) => 1755,
                ( Facing::West, true, Part::Foot, ) => 1756,
                ( Facing::West, false, Part::Head, ) => 1757,
                ( Facing::West, false, Part::Foot, ) => 1758,
                ( Facing::East, true, Part::Head, ) => 1759,
                ( Facing::East, true, Part::Foot, ) => 1760,
                ( Facing::East, false, Part::Head, ) => 1761,
                ( Facing::East, false, Part::Foot, ) => 1762,
            })
        }
    }

    impl From<OrangeBed> for BlockState {
        #[inline(always)]
        fn from(value : OrangeBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeBed { }

    impl Block for OrangeBed {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            occupied : false,
            part : Part::Foot,
        };
    }

}

/// `minecraft:stone_brick_wall` block.
pub mod stone_brick_wall {
    use super::*;

    /// `minecraft:stone_brick_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StoneBrickWall {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : West,
        /// `south` state.
        pub south : South,
        /// `up` state.
        pub up : bool,
        /// `east` state.
        pub east : East,
        /// `north` state.
        pub north : North,
    }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    impl StoneBrickWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.west, self.south, self.up, self.east, self.north, )) {
                ( true, West::None, South::None, true, East::None, North::None, ) => 16835,
                ( true, West::Low, South::None, true, East::None, North::None, ) => 16836,
                ( true, West::Tall, South::None, true, East::None, North::None, ) => 16837,
                ( false, West::None, South::None, true, East::None, North::None, ) => 16838,
                ( false, West::Low, South::None, true, East::None, North::None, ) => 16839,
                ( false, West::Tall, South::None, true, East::None, North::None, ) => 16840,
                ( true, West::None, South::None, false, East::None, North::None, ) => 16841,
                ( true, West::Low, South::None, false, East::None, North::None, ) => 16842,
                ( true, West::Tall, South::None, false, East::None, North::None, ) => 16843,
                ( false, West::None, South::None, false, East::None, North::None, ) => 16844,
                ( false, West::Low, South::None, false, East::None, North::None, ) => 16845,
                ( false, West::Tall, South::None, false, East::None, North::None, ) => 16846,
                ( true, West::None, South::Low, true, East::None, North::None, ) => 16847,
                ( true, West::Low, South::Low, true, East::None, North::None, ) => 16848,
                ( true, West::Tall, South::Low, true, East::None, North::None, ) => 16849,
                ( false, West::None, South::Low, true, East::None, North::None, ) => 16850,
                ( false, West::Low, South::Low, true, East::None, North::None, ) => 16851,
                ( false, West::Tall, South::Low, true, East::None, North::None, ) => 16852,
                ( true, West::None, South::Low, false, East::None, North::None, ) => 16853,
                ( true, West::Low, South::Low, false, East::None, North::None, ) => 16854,
                ( true, West::Tall, South::Low, false, East::None, North::None, ) => 16855,
                ( false, West::None, South::Low, false, East::None, North::None, ) => 16856,
                ( false, West::Low, South::Low, false, East::None, North::None, ) => 16857,
                ( false, West::Tall, South::Low, false, East::None, North::None, ) => 16858,
                ( true, West::None, South::Tall, true, East::None, North::None, ) => 16859,
                ( true, West::Low, South::Tall, true, East::None, North::None, ) => 16860,
                ( true, West::Tall, South::Tall, true, East::None, North::None, ) => 16861,
                ( false, West::None, South::Tall, true, East::None, North::None, ) => 16862,
                ( false, West::Low, South::Tall, true, East::None, North::None, ) => 16863,
                ( false, West::Tall, South::Tall, true, East::None, North::None, ) => 16864,
                ( true, West::None, South::Tall, false, East::None, North::None, ) => 16865,
                ( true, West::Low, South::Tall, false, East::None, North::None, ) => 16866,
                ( true, West::Tall, South::Tall, false, East::None, North::None, ) => 16867,
                ( false, West::None, South::Tall, false, East::None, North::None, ) => 16868,
                ( false, West::Low, South::Tall, false, East::None, North::None, ) => 16869,
                ( false, West::Tall, South::Tall, false, East::None, North::None, ) => 16870,
                ( true, West::None, South::None, true, East::None, North::Low, ) => 16871,
                ( true, West::Low, South::None, true, East::None, North::Low, ) => 16872,
                ( true, West::Tall, South::None, true, East::None, North::Low, ) => 16873,
                ( false, West::None, South::None, true, East::None, North::Low, ) => 16874,
                ( false, West::Low, South::None, true, East::None, North::Low, ) => 16875,
                ( false, West::Tall, South::None, true, East::None, North::Low, ) => 16876,
                ( true, West::None, South::None, false, East::None, North::Low, ) => 16877,
                ( true, West::Low, South::None, false, East::None, North::Low, ) => 16878,
                ( true, West::Tall, South::None, false, East::None, North::Low, ) => 16879,
                ( false, West::None, South::None, false, East::None, North::Low, ) => 16880,
                ( false, West::Low, South::None, false, East::None, North::Low, ) => 16881,
                ( false, West::Tall, South::None, false, East::None, North::Low, ) => 16882,
                ( true, West::None, South::Low, true, East::None, North::Low, ) => 16883,
                ( true, West::Low, South::Low, true, East::None, North::Low, ) => 16884,
                ( true, West::Tall, South::Low, true, East::None, North::Low, ) => 16885,
                ( false, West::None, South::Low, true, East::None, North::Low, ) => 16886,
                ( false, West::Low, South::Low, true, East::None, North::Low, ) => 16887,
                ( false, West::Tall, South::Low, true, East::None, North::Low, ) => 16888,
                ( true, West::None, South::Low, false, East::None, North::Low, ) => 16889,
                ( true, West::Low, South::Low, false, East::None, North::Low, ) => 16890,
                ( true, West::Tall, South::Low, false, East::None, North::Low, ) => 16891,
                ( false, West::None, South::Low, false, East::None, North::Low, ) => 16892,
                ( false, West::Low, South::Low, false, East::None, North::Low, ) => 16893,
                ( false, West::Tall, South::Low, false, East::None, North::Low, ) => 16894,
                ( true, West::None, South::Tall, true, East::None, North::Low, ) => 16895,
                ( true, West::Low, South::Tall, true, East::None, North::Low, ) => 16896,
                ( true, West::Tall, South::Tall, true, East::None, North::Low, ) => 16897,
                ( false, West::None, South::Tall, true, East::None, North::Low, ) => 16898,
                ( false, West::Low, South::Tall, true, East::None, North::Low, ) => 16899,
                ( false, West::Tall, South::Tall, true, East::None, North::Low, ) => 16900,
                ( true, West::None, South::Tall, false, East::None, North::Low, ) => 16901,
                ( true, West::Low, South::Tall, false, East::None, North::Low, ) => 16902,
                ( true, West::Tall, South::Tall, false, East::None, North::Low, ) => 16903,
                ( false, West::None, South::Tall, false, East::None, North::Low, ) => 16904,
                ( false, West::Low, South::Tall, false, East::None, North::Low, ) => 16905,
                ( false, West::Tall, South::Tall, false, East::None, North::Low, ) => 16906,
                ( true, West::None, South::None, true, East::None, North::Tall, ) => 16907,
                ( true, West::Low, South::None, true, East::None, North::Tall, ) => 16908,
                ( true, West::Tall, South::None, true, East::None, North::Tall, ) => 16909,
                ( false, West::None, South::None, true, East::None, North::Tall, ) => 16910,
                ( false, West::Low, South::None, true, East::None, North::Tall, ) => 16911,
                ( false, West::Tall, South::None, true, East::None, North::Tall, ) => 16912,
                ( true, West::None, South::None, false, East::None, North::Tall, ) => 16913,
                ( true, West::Low, South::None, false, East::None, North::Tall, ) => 16914,
                ( true, West::Tall, South::None, false, East::None, North::Tall, ) => 16915,
                ( false, West::None, South::None, false, East::None, North::Tall, ) => 16916,
                ( false, West::Low, South::None, false, East::None, North::Tall, ) => 16917,
                ( false, West::Tall, South::None, false, East::None, North::Tall, ) => 16918,
                ( true, West::None, South::Low, true, East::None, North::Tall, ) => 16919,
                ( true, West::Low, South::Low, true, East::None, North::Tall, ) => 16920,
                ( true, West::Tall, South::Low, true, East::None, North::Tall, ) => 16921,
                ( false, West::None, South::Low, true, East::None, North::Tall, ) => 16922,
                ( false, West::Low, South::Low, true, East::None, North::Tall, ) => 16923,
                ( false, West::Tall, South::Low, true, East::None, North::Tall, ) => 16924,
                ( true, West::None, South::Low, false, East::None, North::Tall, ) => 16925,
                ( true, West::Low, South::Low, false, East::None, North::Tall, ) => 16926,
                ( true, West::Tall, South::Low, false, East::None, North::Tall, ) => 16927,
                ( false, West::None, South::Low, false, East::None, North::Tall, ) => 16928,
                ( false, West::Low, South::Low, false, East::None, North::Tall, ) => 16929,
                ( false, West::Tall, South::Low, false, East::None, North::Tall, ) => 16930,
                ( true, West::None, South::Tall, true, East::None, North::Tall, ) => 16931,
                ( true, West::Low, South::Tall, true, East::None, North::Tall, ) => 16932,
                ( true, West::Tall, South::Tall, true, East::None, North::Tall, ) => 16933,
                ( false, West::None, South::Tall, true, East::None, North::Tall, ) => 16934,
                ( false, West::Low, South::Tall, true, East::None, North::Tall, ) => 16935,
                ( false, West::Tall, South::Tall, true, East::None, North::Tall, ) => 16936,
                ( true, West::None, South::Tall, false, East::None, North::Tall, ) => 16937,
                ( true, West::Low, South::Tall, false, East::None, North::Tall, ) => 16938,
                ( true, West::Tall, South::Tall, false, East::None, North::Tall, ) => 16939,
                ( false, West::None, South::Tall, false, East::None, North::Tall, ) => 16940,
                ( false, West::Low, South::Tall, false, East::None, North::Tall, ) => 16941,
                ( false, West::Tall, South::Tall, false, East::None, North::Tall, ) => 16942,
                ( true, West::None, South::None, true, East::Low, North::None, ) => 16943,
                ( true, West::Low, South::None, true, East::Low, North::None, ) => 16944,
                ( true, West::Tall, South::None, true, East::Low, North::None, ) => 16945,
                ( false, West::None, South::None, true, East::Low, North::None, ) => 16946,
                ( false, West::Low, South::None, true, East::Low, North::None, ) => 16947,
                ( false, West::Tall, South::None, true, East::Low, North::None, ) => 16948,
                ( true, West::None, South::None, false, East::Low, North::None, ) => 16949,
                ( true, West::Low, South::None, false, East::Low, North::None, ) => 16950,
                ( true, West::Tall, South::None, false, East::Low, North::None, ) => 16951,
                ( false, West::None, South::None, false, East::Low, North::None, ) => 16952,
                ( false, West::Low, South::None, false, East::Low, North::None, ) => 16953,
                ( false, West::Tall, South::None, false, East::Low, North::None, ) => 16954,
                ( true, West::None, South::Low, true, East::Low, North::None, ) => 16955,
                ( true, West::Low, South::Low, true, East::Low, North::None, ) => 16956,
                ( true, West::Tall, South::Low, true, East::Low, North::None, ) => 16957,
                ( false, West::None, South::Low, true, East::Low, North::None, ) => 16958,
                ( false, West::Low, South::Low, true, East::Low, North::None, ) => 16959,
                ( false, West::Tall, South::Low, true, East::Low, North::None, ) => 16960,
                ( true, West::None, South::Low, false, East::Low, North::None, ) => 16961,
                ( true, West::Low, South::Low, false, East::Low, North::None, ) => 16962,
                ( true, West::Tall, South::Low, false, East::Low, North::None, ) => 16963,
                ( false, West::None, South::Low, false, East::Low, North::None, ) => 16964,
                ( false, West::Low, South::Low, false, East::Low, North::None, ) => 16965,
                ( false, West::Tall, South::Low, false, East::Low, North::None, ) => 16966,
                ( true, West::None, South::Tall, true, East::Low, North::None, ) => 16967,
                ( true, West::Low, South::Tall, true, East::Low, North::None, ) => 16968,
                ( true, West::Tall, South::Tall, true, East::Low, North::None, ) => 16969,
                ( false, West::None, South::Tall, true, East::Low, North::None, ) => 16970,
                ( false, West::Low, South::Tall, true, East::Low, North::None, ) => 16971,
                ( false, West::Tall, South::Tall, true, East::Low, North::None, ) => 16972,
                ( true, West::None, South::Tall, false, East::Low, North::None, ) => 16973,
                ( true, West::Low, South::Tall, false, East::Low, North::None, ) => 16974,
                ( true, West::Tall, South::Tall, false, East::Low, North::None, ) => 16975,
                ( false, West::None, South::Tall, false, East::Low, North::None, ) => 16976,
                ( false, West::Low, South::Tall, false, East::Low, North::None, ) => 16977,
                ( false, West::Tall, South::Tall, false, East::Low, North::None, ) => 16978,
                ( true, West::None, South::None, true, East::Low, North::Low, ) => 16979,
                ( true, West::Low, South::None, true, East::Low, North::Low, ) => 16980,
                ( true, West::Tall, South::None, true, East::Low, North::Low, ) => 16981,
                ( false, West::None, South::None, true, East::Low, North::Low, ) => 16982,
                ( false, West::Low, South::None, true, East::Low, North::Low, ) => 16983,
                ( false, West::Tall, South::None, true, East::Low, North::Low, ) => 16984,
                ( true, West::None, South::None, false, East::Low, North::Low, ) => 16985,
                ( true, West::Low, South::None, false, East::Low, North::Low, ) => 16986,
                ( true, West::Tall, South::None, false, East::Low, North::Low, ) => 16987,
                ( false, West::None, South::None, false, East::Low, North::Low, ) => 16988,
                ( false, West::Low, South::None, false, East::Low, North::Low, ) => 16989,
                ( false, West::Tall, South::None, false, East::Low, North::Low, ) => 16990,
                ( true, West::None, South::Low, true, East::Low, North::Low, ) => 16991,
                ( true, West::Low, South::Low, true, East::Low, North::Low, ) => 16992,
                ( true, West::Tall, South::Low, true, East::Low, North::Low, ) => 16993,
                ( false, West::None, South::Low, true, East::Low, North::Low, ) => 16994,
                ( false, West::Low, South::Low, true, East::Low, North::Low, ) => 16995,
                ( false, West::Tall, South::Low, true, East::Low, North::Low, ) => 16996,
                ( true, West::None, South::Low, false, East::Low, North::Low, ) => 16997,
                ( true, West::Low, South::Low, false, East::Low, North::Low, ) => 16998,
                ( true, West::Tall, South::Low, false, East::Low, North::Low, ) => 16999,
                ( false, West::None, South::Low, false, East::Low, North::Low, ) => 17000,
                ( false, West::Low, South::Low, false, East::Low, North::Low, ) => 17001,
                ( false, West::Tall, South::Low, false, East::Low, North::Low, ) => 17002,
                ( true, West::None, South::Tall, true, East::Low, North::Low, ) => 17003,
                ( true, West::Low, South::Tall, true, East::Low, North::Low, ) => 17004,
                ( true, West::Tall, South::Tall, true, East::Low, North::Low, ) => 17005,
                ( false, West::None, South::Tall, true, East::Low, North::Low, ) => 17006,
                ( false, West::Low, South::Tall, true, East::Low, North::Low, ) => 17007,
                ( false, West::Tall, South::Tall, true, East::Low, North::Low, ) => 17008,
                ( true, West::None, South::Tall, false, East::Low, North::Low, ) => 17009,
                ( true, West::Low, South::Tall, false, East::Low, North::Low, ) => 17010,
                ( true, West::Tall, South::Tall, false, East::Low, North::Low, ) => 17011,
                ( false, West::None, South::Tall, false, East::Low, North::Low, ) => 17012,
                ( false, West::Low, South::Tall, false, East::Low, North::Low, ) => 17013,
                ( false, West::Tall, South::Tall, false, East::Low, North::Low, ) => 17014,
                ( true, West::None, South::None, true, East::Low, North::Tall, ) => 17015,
                ( true, West::Low, South::None, true, East::Low, North::Tall, ) => 17016,
                ( true, West::Tall, South::None, true, East::Low, North::Tall, ) => 17017,
                ( false, West::None, South::None, true, East::Low, North::Tall, ) => 17018,
                ( false, West::Low, South::None, true, East::Low, North::Tall, ) => 17019,
                ( false, West::Tall, South::None, true, East::Low, North::Tall, ) => 17020,
                ( true, West::None, South::None, false, East::Low, North::Tall, ) => 17021,
                ( true, West::Low, South::None, false, East::Low, North::Tall, ) => 17022,
                ( true, West::Tall, South::None, false, East::Low, North::Tall, ) => 17023,
                ( false, West::None, South::None, false, East::Low, North::Tall, ) => 17024,
                ( false, West::Low, South::None, false, East::Low, North::Tall, ) => 17025,
                ( false, West::Tall, South::None, false, East::Low, North::Tall, ) => 17026,
                ( true, West::None, South::Low, true, East::Low, North::Tall, ) => 17027,
                ( true, West::Low, South::Low, true, East::Low, North::Tall, ) => 17028,
                ( true, West::Tall, South::Low, true, East::Low, North::Tall, ) => 17029,
                ( false, West::None, South::Low, true, East::Low, North::Tall, ) => 17030,
                ( false, West::Low, South::Low, true, East::Low, North::Tall, ) => 17031,
                ( false, West::Tall, South::Low, true, East::Low, North::Tall, ) => 17032,
                ( true, West::None, South::Low, false, East::Low, North::Tall, ) => 17033,
                ( true, West::Low, South::Low, false, East::Low, North::Tall, ) => 17034,
                ( true, West::Tall, South::Low, false, East::Low, North::Tall, ) => 17035,
                ( false, West::None, South::Low, false, East::Low, North::Tall, ) => 17036,
                ( false, West::Low, South::Low, false, East::Low, North::Tall, ) => 17037,
                ( false, West::Tall, South::Low, false, East::Low, North::Tall, ) => 17038,
                ( true, West::None, South::Tall, true, East::Low, North::Tall, ) => 17039,
                ( true, West::Low, South::Tall, true, East::Low, North::Tall, ) => 17040,
                ( true, West::Tall, South::Tall, true, East::Low, North::Tall, ) => 17041,
                ( false, West::None, South::Tall, true, East::Low, North::Tall, ) => 17042,
                ( false, West::Low, South::Tall, true, East::Low, North::Tall, ) => 17043,
                ( false, West::Tall, South::Tall, true, East::Low, North::Tall, ) => 17044,
                ( true, West::None, South::Tall, false, East::Low, North::Tall, ) => 17045,
                ( true, West::Low, South::Tall, false, East::Low, North::Tall, ) => 17046,
                ( true, West::Tall, South::Tall, false, East::Low, North::Tall, ) => 17047,
                ( false, West::None, South::Tall, false, East::Low, North::Tall, ) => 17048,
                ( false, West::Low, South::Tall, false, East::Low, North::Tall, ) => 17049,
                ( false, West::Tall, South::Tall, false, East::Low, North::Tall, ) => 17050,
                ( true, West::None, South::None, true, East::Tall, North::None, ) => 17051,
                ( true, West::Low, South::None, true, East::Tall, North::None, ) => 17052,
                ( true, West::Tall, South::None, true, East::Tall, North::None, ) => 17053,
                ( false, West::None, South::None, true, East::Tall, North::None, ) => 17054,
                ( false, West::Low, South::None, true, East::Tall, North::None, ) => 17055,
                ( false, West::Tall, South::None, true, East::Tall, North::None, ) => 17056,
                ( true, West::None, South::None, false, East::Tall, North::None, ) => 17057,
                ( true, West::Low, South::None, false, East::Tall, North::None, ) => 17058,
                ( true, West::Tall, South::None, false, East::Tall, North::None, ) => 17059,
                ( false, West::None, South::None, false, East::Tall, North::None, ) => 17060,
                ( false, West::Low, South::None, false, East::Tall, North::None, ) => 17061,
                ( false, West::Tall, South::None, false, East::Tall, North::None, ) => 17062,
                ( true, West::None, South::Low, true, East::Tall, North::None, ) => 17063,
                ( true, West::Low, South::Low, true, East::Tall, North::None, ) => 17064,
                ( true, West::Tall, South::Low, true, East::Tall, North::None, ) => 17065,
                ( false, West::None, South::Low, true, East::Tall, North::None, ) => 17066,
                ( false, West::Low, South::Low, true, East::Tall, North::None, ) => 17067,
                ( false, West::Tall, South::Low, true, East::Tall, North::None, ) => 17068,
                ( true, West::None, South::Low, false, East::Tall, North::None, ) => 17069,
                ( true, West::Low, South::Low, false, East::Tall, North::None, ) => 17070,
                ( true, West::Tall, South::Low, false, East::Tall, North::None, ) => 17071,
                ( false, West::None, South::Low, false, East::Tall, North::None, ) => 17072,
                ( false, West::Low, South::Low, false, East::Tall, North::None, ) => 17073,
                ( false, West::Tall, South::Low, false, East::Tall, North::None, ) => 17074,
                ( true, West::None, South::Tall, true, East::Tall, North::None, ) => 17075,
                ( true, West::Low, South::Tall, true, East::Tall, North::None, ) => 17076,
                ( true, West::Tall, South::Tall, true, East::Tall, North::None, ) => 17077,
                ( false, West::None, South::Tall, true, East::Tall, North::None, ) => 17078,
                ( false, West::Low, South::Tall, true, East::Tall, North::None, ) => 17079,
                ( false, West::Tall, South::Tall, true, East::Tall, North::None, ) => 17080,
                ( true, West::None, South::Tall, false, East::Tall, North::None, ) => 17081,
                ( true, West::Low, South::Tall, false, East::Tall, North::None, ) => 17082,
                ( true, West::Tall, South::Tall, false, East::Tall, North::None, ) => 17083,
                ( false, West::None, South::Tall, false, East::Tall, North::None, ) => 17084,
                ( false, West::Low, South::Tall, false, East::Tall, North::None, ) => 17085,
                ( false, West::Tall, South::Tall, false, East::Tall, North::None, ) => 17086,
                ( true, West::None, South::None, true, East::Tall, North::Low, ) => 17087,
                ( true, West::Low, South::None, true, East::Tall, North::Low, ) => 17088,
                ( true, West::Tall, South::None, true, East::Tall, North::Low, ) => 17089,
                ( false, West::None, South::None, true, East::Tall, North::Low, ) => 17090,
                ( false, West::Low, South::None, true, East::Tall, North::Low, ) => 17091,
                ( false, West::Tall, South::None, true, East::Tall, North::Low, ) => 17092,
                ( true, West::None, South::None, false, East::Tall, North::Low, ) => 17093,
                ( true, West::Low, South::None, false, East::Tall, North::Low, ) => 17094,
                ( true, West::Tall, South::None, false, East::Tall, North::Low, ) => 17095,
                ( false, West::None, South::None, false, East::Tall, North::Low, ) => 17096,
                ( false, West::Low, South::None, false, East::Tall, North::Low, ) => 17097,
                ( false, West::Tall, South::None, false, East::Tall, North::Low, ) => 17098,
                ( true, West::None, South::Low, true, East::Tall, North::Low, ) => 17099,
                ( true, West::Low, South::Low, true, East::Tall, North::Low, ) => 17100,
                ( true, West::Tall, South::Low, true, East::Tall, North::Low, ) => 17101,
                ( false, West::None, South::Low, true, East::Tall, North::Low, ) => 17102,
                ( false, West::Low, South::Low, true, East::Tall, North::Low, ) => 17103,
                ( false, West::Tall, South::Low, true, East::Tall, North::Low, ) => 17104,
                ( true, West::None, South::Low, false, East::Tall, North::Low, ) => 17105,
                ( true, West::Low, South::Low, false, East::Tall, North::Low, ) => 17106,
                ( true, West::Tall, South::Low, false, East::Tall, North::Low, ) => 17107,
                ( false, West::None, South::Low, false, East::Tall, North::Low, ) => 17108,
                ( false, West::Low, South::Low, false, East::Tall, North::Low, ) => 17109,
                ( false, West::Tall, South::Low, false, East::Tall, North::Low, ) => 17110,
                ( true, West::None, South::Tall, true, East::Tall, North::Low, ) => 17111,
                ( true, West::Low, South::Tall, true, East::Tall, North::Low, ) => 17112,
                ( true, West::Tall, South::Tall, true, East::Tall, North::Low, ) => 17113,
                ( false, West::None, South::Tall, true, East::Tall, North::Low, ) => 17114,
                ( false, West::Low, South::Tall, true, East::Tall, North::Low, ) => 17115,
                ( false, West::Tall, South::Tall, true, East::Tall, North::Low, ) => 17116,
                ( true, West::None, South::Tall, false, East::Tall, North::Low, ) => 17117,
                ( true, West::Low, South::Tall, false, East::Tall, North::Low, ) => 17118,
                ( true, West::Tall, South::Tall, false, East::Tall, North::Low, ) => 17119,
                ( false, West::None, South::Tall, false, East::Tall, North::Low, ) => 17120,
                ( false, West::Low, South::Tall, false, East::Tall, North::Low, ) => 17121,
                ( false, West::Tall, South::Tall, false, East::Tall, North::Low, ) => 17122,
                ( true, West::None, South::None, true, East::Tall, North::Tall, ) => 17123,
                ( true, West::Low, South::None, true, East::Tall, North::Tall, ) => 17124,
                ( true, West::Tall, South::None, true, East::Tall, North::Tall, ) => 17125,
                ( false, West::None, South::None, true, East::Tall, North::Tall, ) => 17126,
                ( false, West::Low, South::None, true, East::Tall, North::Tall, ) => 17127,
                ( false, West::Tall, South::None, true, East::Tall, North::Tall, ) => 17128,
                ( true, West::None, South::None, false, East::Tall, North::Tall, ) => 17129,
                ( true, West::Low, South::None, false, East::Tall, North::Tall, ) => 17130,
                ( true, West::Tall, South::None, false, East::Tall, North::Tall, ) => 17131,
                ( false, West::None, South::None, false, East::Tall, North::Tall, ) => 17132,
                ( false, West::Low, South::None, false, East::Tall, North::Tall, ) => 17133,
                ( false, West::Tall, South::None, false, East::Tall, North::Tall, ) => 17134,
                ( true, West::None, South::Low, true, East::Tall, North::Tall, ) => 17135,
                ( true, West::Low, South::Low, true, East::Tall, North::Tall, ) => 17136,
                ( true, West::Tall, South::Low, true, East::Tall, North::Tall, ) => 17137,
                ( false, West::None, South::Low, true, East::Tall, North::Tall, ) => 17138,
                ( false, West::Low, South::Low, true, East::Tall, North::Tall, ) => 17139,
                ( false, West::Tall, South::Low, true, East::Tall, North::Tall, ) => 17140,
                ( true, West::None, South::Low, false, East::Tall, North::Tall, ) => 17141,
                ( true, West::Low, South::Low, false, East::Tall, North::Tall, ) => 17142,
                ( true, West::Tall, South::Low, false, East::Tall, North::Tall, ) => 17143,
                ( false, West::None, South::Low, false, East::Tall, North::Tall, ) => 17144,
                ( false, West::Low, South::Low, false, East::Tall, North::Tall, ) => 17145,
                ( false, West::Tall, South::Low, false, East::Tall, North::Tall, ) => 17146,
                ( true, West::None, South::Tall, true, East::Tall, North::Tall, ) => 17147,
                ( true, West::Low, South::Tall, true, East::Tall, North::Tall, ) => 17148,
                ( true, West::Tall, South::Tall, true, East::Tall, North::Tall, ) => 17149,
                ( false, West::None, South::Tall, true, East::Tall, North::Tall, ) => 17150,
                ( false, West::Low, South::Tall, true, East::Tall, North::Tall, ) => 17151,
                ( false, West::Tall, South::Tall, true, East::Tall, North::Tall, ) => 17152,
                ( true, West::None, South::Tall, false, East::Tall, North::Tall, ) => 17153,
                ( true, West::Low, South::Tall, false, East::Tall, North::Tall, ) => 17154,
                ( true, West::Tall, South::Tall, false, East::Tall, North::Tall, ) => 17155,
                ( false, West::None, South::Tall, false, East::Tall, North::Tall, ) => 17156,
                ( false, West::Low, South::Tall, false, East::Tall, North::Tall, ) => 17157,
                ( false, West::Tall, South::Tall, false, East::Tall, North::Tall, ) => 17158,
            })
        }
    }

    impl From<StoneBrickWall> for BlockState {
        #[inline(always)]
        fn from(value : StoneBrickWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StoneBrickWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StoneBrickWall { }

    impl Block for StoneBrickWall {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            west : West::None,
            south : South::None,
            up : true,
            east : East::None,
            north : North::None,
        };
    }

}

/// `minecraft:diorite_wall` block.
pub mod diorite_wall {
    use super::*;

    /// `minecraft:diorite_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DioriteWall {
        /// `east` state.
        pub east : East,
        /// `north` state.
        pub north : North,
        /// `south` state.
        pub south : South,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `up` state.
        pub up : bool,
        /// `west` state.
        pub west : West,
    }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    impl DioriteWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.north, self.south, self.waterlogged, self.up, self.west, )) {
                ( East::None, North::None, South::None, true, true, West::None, ) => 19103,
                ( East::None, North::None, South::None, true, true, West::Low, ) => 19104,
                ( East::None, North::None, South::None, true, true, West::Tall, ) => 19105,
                ( East::None, North::None, South::None, false, true, West::None, ) => 19106,
                ( East::None, North::None, South::None, false, true, West::Low, ) => 19107,
                ( East::None, North::None, South::None, false, true, West::Tall, ) => 19108,
                ( East::None, North::None, South::None, true, false, West::None, ) => 19109,
                ( East::None, North::None, South::None, true, false, West::Low, ) => 19110,
                ( East::None, North::None, South::None, true, false, West::Tall, ) => 19111,
                ( East::None, North::None, South::None, false, false, West::None, ) => 19112,
                ( East::None, North::None, South::None, false, false, West::Low, ) => 19113,
                ( East::None, North::None, South::None, false, false, West::Tall, ) => 19114,
                ( East::None, North::None, South::Low, true, true, West::None, ) => 19115,
                ( East::None, North::None, South::Low, true, true, West::Low, ) => 19116,
                ( East::None, North::None, South::Low, true, true, West::Tall, ) => 19117,
                ( East::None, North::None, South::Low, false, true, West::None, ) => 19118,
                ( East::None, North::None, South::Low, false, true, West::Low, ) => 19119,
                ( East::None, North::None, South::Low, false, true, West::Tall, ) => 19120,
                ( East::None, North::None, South::Low, true, false, West::None, ) => 19121,
                ( East::None, North::None, South::Low, true, false, West::Low, ) => 19122,
                ( East::None, North::None, South::Low, true, false, West::Tall, ) => 19123,
                ( East::None, North::None, South::Low, false, false, West::None, ) => 19124,
                ( East::None, North::None, South::Low, false, false, West::Low, ) => 19125,
                ( East::None, North::None, South::Low, false, false, West::Tall, ) => 19126,
                ( East::None, North::None, South::Tall, true, true, West::None, ) => 19127,
                ( East::None, North::None, South::Tall, true, true, West::Low, ) => 19128,
                ( East::None, North::None, South::Tall, true, true, West::Tall, ) => 19129,
                ( East::None, North::None, South::Tall, false, true, West::None, ) => 19130,
                ( East::None, North::None, South::Tall, false, true, West::Low, ) => 19131,
                ( East::None, North::None, South::Tall, false, true, West::Tall, ) => 19132,
                ( East::None, North::None, South::Tall, true, false, West::None, ) => 19133,
                ( East::None, North::None, South::Tall, true, false, West::Low, ) => 19134,
                ( East::None, North::None, South::Tall, true, false, West::Tall, ) => 19135,
                ( East::None, North::None, South::Tall, false, false, West::None, ) => 19136,
                ( East::None, North::None, South::Tall, false, false, West::Low, ) => 19137,
                ( East::None, North::None, South::Tall, false, false, West::Tall, ) => 19138,
                ( East::None, North::Low, South::None, true, true, West::None, ) => 19139,
                ( East::None, North::Low, South::None, true, true, West::Low, ) => 19140,
                ( East::None, North::Low, South::None, true, true, West::Tall, ) => 19141,
                ( East::None, North::Low, South::None, false, true, West::None, ) => 19142,
                ( East::None, North::Low, South::None, false, true, West::Low, ) => 19143,
                ( East::None, North::Low, South::None, false, true, West::Tall, ) => 19144,
                ( East::None, North::Low, South::None, true, false, West::None, ) => 19145,
                ( East::None, North::Low, South::None, true, false, West::Low, ) => 19146,
                ( East::None, North::Low, South::None, true, false, West::Tall, ) => 19147,
                ( East::None, North::Low, South::None, false, false, West::None, ) => 19148,
                ( East::None, North::Low, South::None, false, false, West::Low, ) => 19149,
                ( East::None, North::Low, South::None, false, false, West::Tall, ) => 19150,
                ( East::None, North::Low, South::Low, true, true, West::None, ) => 19151,
                ( East::None, North::Low, South::Low, true, true, West::Low, ) => 19152,
                ( East::None, North::Low, South::Low, true, true, West::Tall, ) => 19153,
                ( East::None, North::Low, South::Low, false, true, West::None, ) => 19154,
                ( East::None, North::Low, South::Low, false, true, West::Low, ) => 19155,
                ( East::None, North::Low, South::Low, false, true, West::Tall, ) => 19156,
                ( East::None, North::Low, South::Low, true, false, West::None, ) => 19157,
                ( East::None, North::Low, South::Low, true, false, West::Low, ) => 19158,
                ( East::None, North::Low, South::Low, true, false, West::Tall, ) => 19159,
                ( East::None, North::Low, South::Low, false, false, West::None, ) => 19160,
                ( East::None, North::Low, South::Low, false, false, West::Low, ) => 19161,
                ( East::None, North::Low, South::Low, false, false, West::Tall, ) => 19162,
                ( East::None, North::Low, South::Tall, true, true, West::None, ) => 19163,
                ( East::None, North::Low, South::Tall, true, true, West::Low, ) => 19164,
                ( East::None, North::Low, South::Tall, true, true, West::Tall, ) => 19165,
                ( East::None, North::Low, South::Tall, false, true, West::None, ) => 19166,
                ( East::None, North::Low, South::Tall, false, true, West::Low, ) => 19167,
                ( East::None, North::Low, South::Tall, false, true, West::Tall, ) => 19168,
                ( East::None, North::Low, South::Tall, true, false, West::None, ) => 19169,
                ( East::None, North::Low, South::Tall, true, false, West::Low, ) => 19170,
                ( East::None, North::Low, South::Tall, true, false, West::Tall, ) => 19171,
                ( East::None, North::Low, South::Tall, false, false, West::None, ) => 19172,
                ( East::None, North::Low, South::Tall, false, false, West::Low, ) => 19173,
                ( East::None, North::Low, South::Tall, false, false, West::Tall, ) => 19174,
                ( East::None, North::Tall, South::None, true, true, West::None, ) => 19175,
                ( East::None, North::Tall, South::None, true, true, West::Low, ) => 19176,
                ( East::None, North::Tall, South::None, true, true, West::Tall, ) => 19177,
                ( East::None, North::Tall, South::None, false, true, West::None, ) => 19178,
                ( East::None, North::Tall, South::None, false, true, West::Low, ) => 19179,
                ( East::None, North::Tall, South::None, false, true, West::Tall, ) => 19180,
                ( East::None, North::Tall, South::None, true, false, West::None, ) => 19181,
                ( East::None, North::Tall, South::None, true, false, West::Low, ) => 19182,
                ( East::None, North::Tall, South::None, true, false, West::Tall, ) => 19183,
                ( East::None, North::Tall, South::None, false, false, West::None, ) => 19184,
                ( East::None, North::Tall, South::None, false, false, West::Low, ) => 19185,
                ( East::None, North::Tall, South::None, false, false, West::Tall, ) => 19186,
                ( East::None, North::Tall, South::Low, true, true, West::None, ) => 19187,
                ( East::None, North::Tall, South::Low, true, true, West::Low, ) => 19188,
                ( East::None, North::Tall, South::Low, true, true, West::Tall, ) => 19189,
                ( East::None, North::Tall, South::Low, false, true, West::None, ) => 19190,
                ( East::None, North::Tall, South::Low, false, true, West::Low, ) => 19191,
                ( East::None, North::Tall, South::Low, false, true, West::Tall, ) => 19192,
                ( East::None, North::Tall, South::Low, true, false, West::None, ) => 19193,
                ( East::None, North::Tall, South::Low, true, false, West::Low, ) => 19194,
                ( East::None, North::Tall, South::Low, true, false, West::Tall, ) => 19195,
                ( East::None, North::Tall, South::Low, false, false, West::None, ) => 19196,
                ( East::None, North::Tall, South::Low, false, false, West::Low, ) => 19197,
                ( East::None, North::Tall, South::Low, false, false, West::Tall, ) => 19198,
                ( East::None, North::Tall, South::Tall, true, true, West::None, ) => 19199,
                ( East::None, North::Tall, South::Tall, true, true, West::Low, ) => 19200,
                ( East::None, North::Tall, South::Tall, true, true, West::Tall, ) => 19201,
                ( East::None, North::Tall, South::Tall, false, true, West::None, ) => 19202,
                ( East::None, North::Tall, South::Tall, false, true, West::Low, ) => 19203,
                ( East::None, North::Tall, South::Tall, false, true, West::Tall, ) => 19204,
                ( East::None, North::Tall, South::Tall, true, false, West::None, ) => 19205,
                ( East::None, North::Tall, South::Tall, true, false, West::Low, ) => 19206,
                ( East::None, North::Tall, South::Tall, true, false, West::Tall, ) => 19207,
                ( East::None, North::Tall, South::Tall, false, false, West::None, ) => 19208,
                ( East::None, North::Tall, South::Tall, false, false, West::Low, ) => 19209,
                ( East::None, North::Tall, South::Tall, false, false, West::Tall, ) => 19210,
                ( East::Low, North::None, South::None, true, true, West::None, ) => 19211,
                ( East::Low, North::None, South::None, true, true, West::Low, ) => 19212,
                ( East::Low, North::None, South::None, true, true, West::Tall, ) => 19213,
                ( East::Low, North::None, South::None, false, true, West::None, ) => 19214,
                ( East::Low, North::None, South::None, false, true, West::Low, ) => 19215,
                ( East::Low, North::None, South::None, false, true, West::Tall, ) => 19216,
                ( East::Low, North::None, South::None, true, false, West::None, ) => 19217,
                ( East::Low, North::None, South::None, true, false, West::Low, ) => 19218,
                ( East::Low, North::None, South::None, true, false, West::Tall, ) => 19219,
                ( East::Low, North::None, South::None, false, false, West::None, ) => 19220,
                ( East::Low, North::None, South::None, false, false, West::Low, ) => 19221,
                ( East::Low, North::None, South::None, false, false, West::Tall, ) => 19222,
                ( East::Low, North::None, South::Low, true, true, West::None, ) => 19223,
                ( East::Low, North::None, South::Low, true, true, West::Low, ) => 19224,
                ( East::Low, North::None, South::Low, true, true, West::Tall, ) => 19225,
                ( East::Low, North::None, South::Low, false, true, West::None, ) => 19226,
                ( East::Low, North::None, South::Low, false, true, West::Low, ) => 19227,
                ( East::Low, North::None, South::Low, false, true, West::Tall, ) => 19228,
                ( East::Low, North::None, South::Low, true, false, West::None, ) => 19229,
                ( East::Low, North::None, South::Low, true, false, West::Low, ) => 19230,
                ( East::Low, North::None, South::Low, true, false, West::Tall, ) => 19231,
                ( East::Low, North::None, South::Low, false, false, West::None, ) => 19232,
                ( East::Low, North::None, South::Low, false, false, West::Low, ) => 19233,
                ( East::Low, North::None, South::Low, false, false, West::Tall, ) => 19234,
                ( East::Low, North::None, South::Tall, true, true, West::None, ) => 19235,
                ( East::Low, North::None, South::Tall, true, true, West::Low, ) => 19236,
                ( East::Low, North::None, South::Tall, true, true, West::Tall, ) => 19237,
                ( East::Low, North::None, South::Tall, false, true, West::None, ) => 19238,
                ( East::Low, North::None, South::Tall, false, true, West::Low, ) => 19239,
                ( East::Low, North::None, South::Tall, false, true, West::Tall, ) => 19240,
                ( East::Low, North::None, South::Tall, true, false, West::None, ) => 19241,
                ( East::Low, North::None, South::Tall, true, false, West::Low, ) => 19242,
                ( East::Low, North::None, South::Tall, true, false, West::Tall, ) => 19243,
                ( East::Low, North::None, South::Tall, false, false, West::None, ) => 19244,
                ( East::Low, North::None, South::Tall, false, false, West::Low, ) => 19245,
                ( East::Low, North::None, South::Tall, false, false, West::Tall, ) => 19246,
                ( East::Low, North::Low, South::None, true, true, West::None, ) => 19247,
                ( East::Low, North::Low, South::None, true, true, West::Low, ) => 19248,
                ( East::Low, North::Low, South::None, true, true, West::Tall, ) => 19249,
                ( East::Low, North::Low, South::None, false, true, West::None, ) => 19250,
                ( East::Low, North::Low, South::None, false, true, West::Low, ) => 19251,
                ( East::Low, North::Low, South::None, false, true, West::Tall, ) => 19252,
                ( East::Low, North::Low, South::None, true, false, West::None, ) => 19253,
                ( East::Low, North::Low, South::None, true, false, West::Low, ) => 19254,
                ( East::Low, North::Low, South::None, true, false, West::Tall, ) => 19255,
                ( East::Low, North::Low, South::None, false, false, West::None, ) => 19256,
                ( East::Low, North::Low, South::None, false, false, West::Low, ) => 19257,
                ( East::Low, North::Low, South::None, false, false, West::Tall, ) => 19258,
                ( East::Low, North::Low, South::Low, true, true, West::None, ) => 19259,
                ( East::Low, North::Low, South::Low, true, true, West::Low, ) => 19260,
                ( East::Low, North::Low, South::Low, true, true, West::Tall, ) => 19261,
                ( East::Low, North::Low, South::Low, false, true, West::None, ) => 19262,
                ( East::Low, North::Low, South::Low, false, true, West::Low, ) => 19263,
                ( East::Low, North::Low, South::Low, false, true, West::Tall, ) => 19264,
                ( East::Low, North::Low, South::Low, true, false, West::None, ) => 19265,
                ( East::Low, North::Low, South::Low, true, false, West::Low, ) => 19266,
                ( East::Low, North::Low, South::Low, true, false, West::Tall, ) => 19267,
                ( East::Low, North::Low, South::Low, false, false, West::None, ) => 19268,
                ( East::Low, North::Low, South::Low, false, false, West::Low, ) => 19269,
                ( East::Low, North::Low, South::Low, false, false, West::Tall, ) => 19270,
                ( East::Low, North::Low, South::Tall, true, true, West::None, ) => 19271,
                ( East::Low, North::Low, South::Tall, true, true, West::Low, ) => 19272,
                ( East::Low, North::Low, South::Tall, true, true, West::Tall, ) => 19273,
                ( East::Low, North::Low, South::Tall, false, true, West::None, ) => 19274,
                ( East::Low, North::Low, South::Tall, false, true, West::Low, ) => 19275,
                ( East::Low, North::Low, South::Tall, false, true, West::Tall, ) => 19276,
                ( East::Low, North::Low, South::Tall, true, false, West::None, ) => 19277,
                ( East::Low, North::Low, South::Tall, true, false, West::Low, ) => 19278,
                ( East::Low, North::Low, South::Tall, true, false, West::Tall, ) => 19279,
                ( East::Low, North::Low, South::Tall, false, false, West::None, ) => 19280,
                ( East::Low, North::Low, South::Tall, false, false, West::Low, ) => 19281,
                ( East::Low, North::Low, South::Tall, false, false, West::Tall, ) => 19282,
                ( East::Low, North::Tall, South::None, true, true, West::None, ) => 19283,
                ( East::Low, North::Tall, South::None, true, true, West::Low, ) => 19284,
                ( East::Low, North::Tall, South::None, true, true, West::Tall, ) => 19285,
                ( East::Low, North::Tall, South::None, false, true, West::None, ) => 19286,
                ( East::Low, North::Tall, South::None, false, true, West::Low, ) => 19287,
                ( East::Low, North::Tall, South::None, false, true, West::Tall, ) => 19288,
                ( East::Low, North::Tall, South::None, true, false, West::None, ) => 19289,
                ( East::Low, North::Tall, South::None, true, false, West::Low, ) => 19290,
                ( East::Low, North::Tall, South::None, true, false, West::Tall, ) => 19291,
                ( East::Low, North::Tall, South::None, false, false, West::None, ) => 19292,
                ( East::Low, North::Tall, South::None, false, false, West::Low, ) => 19293,
                ( East::Low, North::Tall, South::None, false, false, West::Tall, ) => 19294,
                ( East::Low, North::Tall, South::Low, true, true, West::None, ) => 19295,
                ( East::Low, North::Tall, South::Low, true, true, West::Low, ) => 19296,
                ( East::Low, North::Tall, South::Low, true, true, West::Tall, ) => 19297,
                ( East::Low, North::Tall, South::Low, false, true, West::None, ) => 19298,
                ( East::Low, North::Tall, South::Low, false, true, West::Low, ) => 19299,
                ( East::Low, North::Tall, South::Low, false, true, West::Tall, ) => 19300,
                ( East::Low, North::Tall, South::Low, true, false, West::None, ) => 19301,
                ( East::Low, North::Tall, South::Low, true, false, West::Low, ) => 19302,
                ( East::Low, North::Tall, South::Low, true, false, West::Tall, ) => 19303,
                ( East::Low, North::Tall, South::Low, false, false, West::None, ) => 19304,
                ( East::Low, North::Tall, South::Low, false, false, West::Low, ) => 19305,
                ( East::Low, North::Tall, South::Low, false, false, West::Tall, ) => 19306,
                ( East::Low, North::Tall, South::Tall, true, true, West::None, ) => 19307,
                ( East::Low, North::Tall, South::Tall, true, true, West::Low, ) => 19308,
                ( East::Low, North::Tall, South::Tall, true, true, West::Tall, ) => 19309,
                ( East::Low, North::Tall, South::Tall, false, true, West::None, ) => 19310,
                ( East::Low, North::Tall, South::Tall, false, true, West::Low, ) => 19311,
                ( East::Low, North::Tall, South::Tall, false, true, West::Tall, ) => 19312,
                ( East::Low, North::Tall, South::Tall, true, false, West::None, ) => 19313,
                ( East::Low, North::Tall, South::Tall, true, false, West::Low, ) => 19314,
                ( East::Low, North::Tall, South::Tall, true, false, West::Tall, ) => 19315,
                ( East::Low, North::Tall, South::Tall, false, false, West::None, ) => 19316,
                ( East::Low, North::Tall, South::Tall, false, false, West::Low, ) => 19317,
                ( East::Low, North::Tall, South::Tall, false, false, West::Tall, ) => 19318,
                ( East::Tall, North::None, South::None, true, true, West::None, ) => 19319,
                ( East::Tall, North::None, South::None, true, true, West::Low, ) => 19320,
                ( East::Tall, North::None, South::None, true, true, West::Tall, ) => 19321,
                ( East::Tall, North::None, South::None, false, true, West::None, ) => 19322,
                ( East::Tall, North::None, South::None, false, true, West::Low, ) => 19323,
                ( East::Tall, North::None, South::None, false, true, West::Tall, ) => 19324,
                ( East::Tall, North::None, South::None, true, false, West::None, ) => 19325,
                ( East::Tall, North::None, South::None, true, false, West::Low, ) => 19326,
                ( East::Tall, North::None, South::None, true, false, West::Tall, ) => 19327,
                ( East::Tall, North::None, South::None, false, false, West::None, ) => 19328,
                ( East::Tall, North::None, South::None, false, false, West::Low, ) => 19329,
                ( East::Tall, North::None, South::None, false, false, West::Tall, ) => 19330,
                ( East::Tall, North::None, South::Low, true, true, West::None, ) => 19331,
                ( East::Tall, North::None, South::Low, true, true, West::Low, ) => 19332,
                ( East::Tall, North::None, South::Low, true, true, West::Tall, ) => 19333,
                ( East::Tall, North::None, South::Low, false, true, West::None, ) => 19334,
                ( East::Tall, North::None, South::Low, false, true, West::Low, ) => 19335,
                ( East::Tall, North::None, South::Low, false, true, West::Tall, ) => 19336,
                ( East::Tall, North::None, South::Low, true, false, West::None, ) => 19337,
                ( East::Tall, North::None, South::Low, true, false, West::Low, ) => 19338,
                ( East::Tall, North::None, South::Low, true, false, West::Tall, ) => 19339,
                ( East::Tall, North::None, South::Low, false, false, West::None, ) => 19340,
                ( East::Tall, North::None, South::Low, false, false, West::Low, ) => 19341,
                ( East::Tall, North::None, South::Low, false, false, West::Tall, ) => 19342,
                ( East::Tall, North::None, South::Tall, true, true, West::None, ) => 19343,
                ( East::Tall, North::None, South::Tall, true, true, West::Low, ) => 19344,
                ( East::Tall, North::None, South::Tall, true, true, West::Tall, ) => 19345,
                ( East::Tall, North::None, South::Tall, false, true, West::None, ) => 19346,
                ( East::Tall, North::None, South::Tall, false, true, West::Low, ) => 19347,
                ( East::Tall, North::None, South::Tall, false, true, West::Tall, ) => 19348,
                ( East::Tall, North::None, South::Tall, true, false, West::None, ) => 19349,
                ( East::Tall, North::None, South::Tall, true, false, West::Low, ) => 19350,
                ( East::Tall, North::None, South::Tall, true, false, West::Tall, ) => 19351,
                ( East::Tall, North::None, South::Tall, false, false, West::None, ) => 19352,
                ( East::Tall, North::None, South::Tall, false, false, West::Low, ) => 19353,
                ( East::Tall, North::None, South::Tall, false, false, West::Tall, ) => 19354,
                ( East::Tall, North::Low, South::None, true, true, West::None, ) => 19355,
                ( East::Tall, North::Low, South::None, true, true, West::Low, ) => 19356,
                ( East::Tall, North::Low, South::None, true, true, West::Tall, ) => 19357,
                ( East::Tall, North::Low, South::None, false, true, West::None, ) => 19358,
                ( East::Tall, North::Low, South::None, false, true, West::Low, ) => 19359,
                ( East::Tall, North::Low, South::None, false, true, West::Tall, ) => 19360,
                ( East::Tall, North::Low, South::None, true, false, West::None, ) => 19361,
                ( East::Tall, North::Low, South::None, true, false, West::Low, ) => 19362,
                ( East::Tall, North::Low, South::None, true, false, West::Tall, ) => 19363,
                ( East::Tall, North::Low, South::None, false, false, West::None, ) => 19364,
                ( East::Tall, North::Low, South::None, false, false, West::Low, ) => 19365,
                ( East::Tall, North::Low, South::None, false, false, West::Tall, ) => 19366,
                ( East::Tall, North::Low, South::Low, true, true, West::None, ) => 19367,
                ( East::Tall, North::Low, South::Low, true, true, West::Low, ) => 19368,
                ( East::Tall, North::Low, South::Low, true, true, West::Tall, ) => 19369,
                ( East::Tall, North::Low, South::Low, false, true, West::None, ) => 19370,
                ( East::Tall, North::Low, South::Low, false, true, West::Low, ) => 19371,
                ( East::Tall, North::Low, South::Low, false, true, West::Tall, ) => 19372,
                ( East::Tall, North::Low, South::Low, true, false, West::None, ) => 19373,
                ( East::Tall, North::Low, South::Low, true, false, West::Low, ) => 19374,
                ( East::Tall, North::Low, South::Low, true, false, West::Tall, ) => 19375,
                ( East::Tall, North::Low, South::Low, false, false, West::None, ) => 19376,
                ( East::Tall, North::Low, South::Low, false, false, West::Low, ) => 19377,
                ( East::Tall, North::Low, South::Low, false, false, West::Tall, ) => 19378,
                ( East::Tall, North::Low, South::Tall, true, true, West::None, ) => 19379,
                ( East::Tall, North::Low, South::Tall, true, true, West::Low, ) => 19380,
                ( East::Tall, North::Low, South::Tall, true, true, West::Tall, ) => 19381,
                ( East::Tall, North::Low, South::Tall, false, true, West::None, ) => 19382,
                ( East::Tall, North::Low, South::Tall, false, true, West::Low, ) => 19383,
                ( East::Tall, North::Low, South::Tall, false, true, West::Tall, ) => 19384,
                ( East::Tall, North::Low, South::Tall, true, false, West::None, ) => 19385,
                ( East::Tall, North::Low, South::Tall, true, false, West::Low, ) => 19386,
                ( East::Tall, North::Low, South::Tall, true, false, West::Tall, ) => 19387,
                ( East::Tall, North::Low, South::Tall, false, false, West::None, ) => 19388,
                ( East::Tall, North::Low, South::Tall, false, false, West::Low, ) => 19389,
                ( East::Tall, North::Low, South::Tall, false, false, West::Tall, ) => 19390,
                ( East::Tall, North::Tall, South::None, true, true, West::None, ) => 19391,
                ( East::Tall, North::Tall, South::None, true, true, West::Low, ) => 19392,
                ( East::Tall, North::Tall, South::None, true, true, West::Tall, ) => 19393,
                ( East::Tall, North::Tall, South::None, false, true, West::None, ) => 19394,
                ( East::Tall, North::Tall, South::None, false, true, West::Low, ) => 19395,
                ( East::Tall, North::Tall, South::None, false, true, West::Tall, ) => 19396,
                ( East::Tall, North::Tall, South::None, true, false, West::None, ) => 19397,
                ( East::Tall, North::Tall, South::None, true, false, West::Low, ) => 19398,
                ( East::Tall, North::Tall, South::None, true, false, West::Tall, ) => 19399,
                ( East::Tall, North::Tall, South::None, false, false, West::None, ) => 19400,
                ( East::Tall, North::Tall, South::None, false, false, West::Low, ) => 19401,
                ( East::Tall, North::Tall, South::None, false, false, West::Tall, ) => 19402,
                ( East::Tall, North::Tall, South::Low, true, true, West::None, ) => 19403,
                ( East::Tall, North::Tall, South::Low, true, true, West::Low, ) => 19404,
                ( East::Tall, North::Tall, South::Low, true, true, West::Tall, ) => 19405,
                ( East::Tall, North::Tall, South::Low, false, true, West::None, ) => 19406,
                ( East::Tall, North::Tall, South::Low, false, true, West::Low, ) => 19407,
                ( East::Tall, North::Tall, South::Low, false, true, West::Tall, ) => 19408,
                ( East::Tall, North::Tall, South::Low, true, false, West::None, ) => 19409,
                ( East::Tall, North::Tall, South::Low, true, false, West::Low, ) => 19410,
                ( East::Tall, North::Tall, South::Low, true, false, West::Tall, ) => 19411,
                ( East::Tall, North::Tall, South::Low, false, false, West::None, ) => 19412,
                ( East::Tall, North::Tall, South::Low, false, false, West::Low, ) => 19413,
                ( East::Tall, North::Tall, South::Low, false, false, West::Tall, ) => 19414,
                ( East::Tall, North::Tall, South::Tall, true, true, West::None, ) => 19415,
                ( East::Tall, North::Tall, South::Tall, true, true, West::Low, ) => 19416,
                ( East::Tall, North::Tall, South::Tall, true, true, West::Tall, ) => 19417,
                ( East::Tall, North::Tall, South::Tall, false, true, West::None, ) => 19418,
                ( East::Tall, North::Tall, South::Tall, false, true, West::Low, ) => 19419,
                ( East::Tall, North::Tall, South::Tall, false, true, West::Tall, ) => 19420,
                ( East::Tall, North::Tall, South::Tall, true, false, West::None, ) => 19421,
                ( East::Tall, North::Tall, South::Tall, true, false, West::Low, ) => 19422,
                ( East::Tall, North::Tall, South::Tall, true, false, West::Tall, ) => 19423,
                ( East::Tall, North::Tall, South::Tall, false, false, West::None, ) => 19424,
                ( East::Tall, North::Tall, South::Tall, false, false, West::Low, ) => 19425,
                ( East::Tall, North::Tall, South::Tall, false, false, West::Tall, ) => 19426,
            })
        }
    }

    impl From<DioriteWall> for BlockState {
        #[inline(always)]
        fn from(value : DioriteWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DioriteWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DioriteWall { }

    impl Block for DioriteWall {
        const DEFAULT_STATE : Self = Self {
            east : East::None,
            north : North::None,
            south : South::None,
            waterlogged : false,
            up : true,
            west : West::None,
        };
    }

}

/// `minecraft:blast_furnace` block.
pub mod blast_furnace {
    use super::*;

    /// `minecraft:blast_furnace` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlastFurnace {
        /// `lit` state.
        pub lit : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BlastFurnace {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, self.facing, )) {
                ( true, Facing::North, ) => 19483,
                ( false, Facing::North, ) => 19484,
                ( true, Facing::South, ) => 19485,
                ( false, Facing::South, ) => 19486,
                ( true, Facing::West, ) => 19487,
                ( false, Facing::West, ) => 19488,
                ( true, Facing::East, ) => 19489,
                ( false, Facing::East, ) => 19490,
            })
        }
    }

    impl From<BlastFurnace> for BlockState {
        #[inline(always)]
        fn from(value : BlastFurnace) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlastFurnace {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlastFurnace { }

    impl Block for BlastFurnace {
        const DEFAULT_STATE : Self = Self {
            lit : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:oak_fence_gate` block.
pub mod oak_fence_gate {
    use super::*;

    /// `minecraft:oak_fence_gate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakFenceGate {
        /// `open` state.
        pub open : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `in_wall` state.
        pub in_wall : bool,
        /// `powered` state.
        pub powered : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl OakFenceGate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.open, self.facing, self.in_wall, self.powered, )) {
                ( true, Facing::North, true, true, ) => 7368,
                ( true, Facing::North, true, false, ) => 7369,
                ( false, Facing::North, true, true, ) => 7370,
                ( false, Facing::North, true, false, ) => 7371,
                ( true, Facing::North, false, true, ) => 7372,
                ( true, Facing::North, false, false, ) => 7373,
                ( false, Facing::North, false, true, ) => 7374,
                ( false, Facing::North, false, false, ) => 7375,
                ( true, Facing::South, true, true, ) => 7376,
                ( true, Facing::South, true, false, ) => 7377,
                ( false, Facing::South, true, true, ) => 7378,
                ( false, Facing::South, true, false, ) => 7379,
                ( true, Facing::South, false, true, ) => 7380,
                ( true, Facing::South, false, false, ) => 7381,
                ( false, Facing::South, false, true, ) => 7382,
                ( false, Facing::South, false, false, ) => 7383,
                ( true, Facing::West, true, true, ) => 7384,
                ( true, Facing::West, true, false, ) => 7385,
                ( false, Facing::West, true, true, ) => 7386,
                ( false, Facing::West, true, false, ) => 7387,
                ( true, Facing::West, false, true, ) => 7388,
                ( true, Facing::West, false, false, ) => 7389,
                ( false, Facing::West, false, true, ) => 7390,
                ( false, Facing::West, false, false, ) => 7391,
                ( true, Facing::East, true, true, ) => 7392,
                ( true, Facing::East, true, false, ) => 7393,
                ( false, Facing::East, true, true, ) => 7394,
                ( false, Facing::East, true, false, ) => 7395,
                ( true, Facing::East, false, true, ) => 7396,
                ( true, Facing::East, false, false, ) => 7397,
                ( false, Facing::East, false, true, ) => 7398,
                ( false, Facing::East, false, false, ) => 7399,
            })
        }
    }

    impl From<OakFenceGate> for BlockState {
        #[inline(always)]
        fn from(value : OakFenceGate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakFenceGate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakFenceGate { }

    impl Block for OakFenceGate {
        const DEFAULT_STATE : Self = Self {
            open : false,
            facing : Facing::North,
            in_wall : false,
            powered : false,
        };
    }

}

/// `minecraft:glowstone` block.
pub mod glowstone {
    use super::*;

    /// `minecraft:glowstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Glowstone;

    impl Glowstone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6042)
        }
    }

    impl From<Glowstone> for BlockState {
        #[inline(always)]
        fn from(value : Glowstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Glowstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Glowstone { }

    impl Block for Glowstone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stripped_pale_oak_wood` block.
pub mod stripped_pale_oak_wood {
    use super::*;

    /// `minecraft:stripped_pale_oak_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedPaleOakWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedPaleOakWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 246,
                ( Axis::Y, ) => 247,
                ( Axis::Z, ) => 248,
            })
        }
    }

    impl From<StrippedPaleOakWood> for BlockState {
        #[inline(always)]
        fn from(value : StrippedPaleOakWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedPaleOakWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedPaleOakWood { }

    impl Block for StrippedPaleOakWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:leaf_litter` block.
pub mod leaf_litter {
    use super::*;

    /// `minecraft:leaf_litter` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LeafLitter {
        /// `segment_amount` state.
        pub segment_amount : SegmentAmount,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `segment_amount` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum SegmentAmount {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for SegmentAmount { }
    impl BlockProperty for SegmentAmount { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl LeafLitter {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.segment_amount, self.facing, )) {
                ( SegmentAmount::N1, Facing::North, ) => 25919,
                ( SegmentAmount::N2, Facing::North, ) => 25920,
                ( SegmentAmount::N3, Facing::North, ) => 25921,
                ( SegmentAmount::N4, Facing::North, ) => 25922,
                ( SegmentAmount::N1, Facing::South, ) => 25923,
                ( SegmentAmount::N2, Facing::South, ) => 25924,
                ( SegmentAmount::N3, Facing::South, ) => 25925,
                ( SegmentAmount::N4, Facing::South, ) => 25926,
                ( SegmentAmount::N1, Facing::West, ) => 25927,
                ( SegmentAmount::N2, Facing::West, ) => 25928,
                ( SegmentAmount::N3, Facing::West, ) => 25929,
                ( SegmentAmount::N4, Facing::West, ) => 25930,
                ( SegmentAmount::N1, Facing::East, ) => 25931,
                ( SegmentAmount::N2, Facing::East, ) => 25932,
                ( SegmentAmount::N3, Facing::East, ) => 25933,
                ( SegmentAmount::N4, Facing::East, ) => 25934,
            })
        }
    }

    impl From<LeafLitter> for BlockState {
        #[inline(always)]
        fn from(value : LeafLitter) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LeafLitter {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LeafLitter { }

    impl Block for LeafLitter {
        const DEFAULT_STATE : Self = Self {
            segment_amount : SegmentAmount::N1,
            facing : Facing::North,
        };
    }

}

/// `minecraft:green_carpet` block.
pub mod green_carpet {
    use super::*;

    /// `minecraft:green_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenCarpet;

    impl GreenCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11630)
        }
    }

    impl From<GreenCarpet> for BlockState {
        #[inline(always)]
        fn from(value : GreenCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenCarpet { }

    impl Block for GreenCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dead_brain_coral_wall_fan` block.
pub mod dead_brain_coral_wall_fan {
    use super::*;

    /// `minecraft:dead_brain_coral_wall_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadBrainCoralWallFan {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DeadBrainCoralWallFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 13916,
                ( Facing::North, false, ) => 13917,
                ( Facing::South, true, ) => 13918,
                ( Facing::South, false, ) => 13919,
                ( Facing::West, true, ) => 13920,
                ( Facing::West, false, ) => 13921,
                ( Facing::East, true, ) => 13922,
                ( Facing::East, false, ) => 13923,
            })
        }
    }

    impl From<DeadBrainCoralWallFan> for BlockState {
        #[inline(always)]
        fn from(value : DeadBrainCoralWallFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadBrainCoralWallFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadBrainCoralWallFan { }

    impl Block for DeadBrainCoralWallFan {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : true,
        };
    }

}

/// `minecraft:frosted_ice` block.
pub mod frosted_ice {
    use super::*;

    /// `minecraft:frosted_ice` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct FrostedIce {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl FrostedIce {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 13562,
                ( Age::N1, ) => 13563,
                ( Age::N2, ) => 13564,
                ( Age::N3, ) => 13565,
            })
        }
    }

    impl From<FrostedIce> for BlockState {
        #[inline(always)]
        fn from(value : FrostedIce) -> Self {
            value.to_block_state()
        }
    }

    impl Default for FrostedIce {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for FrostedIce { }

    impl Block for FrostedIce {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:bamboo_stairs` block.
pub mod bamboo_stairs {
    use super::*;

    /// `minecraft:bamboo_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl BambooStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, self.shape, self.half, )) {
                ( Facing::North, true, Shape::Straight, Half::Top, ) => 11093,
                ( Facing::North, false, Shape::Straight, Half::Top, ) => 11094,
                ( Facing::North, true, Shape::InnerLeft, Half::Top, ) => 11095,
                ( Facing::North, false, Shape::InnerLeft, Half::Top, ) => 11096,
                ( Facing::North, true, Shape::InnerRight, Half::Top, ) => 11097,
                ( Facing::North, false, Shape::InnerRight, Half::Top, ) => 11098,
                ( Facing::North, true, Shape::OuterLeft, Half::Top, ) => 11099,
                ( Facing::North, false, Shape::OuterLeft, Half::Top, ) => 11100,
                ( Facing::North, true, Shape::OuterRight, Half::Top, ) => 11101,
                ( Facing::North, false, Shape::OuterRight, Half::Top, ) => 11102,
                ( Facing::North, true, Shape::Straight, Half::Bottom, ) => 11103,
                ( Facing::North, false, Shape::Straight, Half::Bottom, ) => 11104,
                ( Facing::North, true, Shape::InnerLeft, Half::Bottom, ) => 11105,
                ( Facing::North, false, Shape::InnerLeft, Half::Bottom, ) => 11106,
                ( Facing::North, true, Shape::InnerRight, Half::Bottom, ) => 11107,
                ( Facing::North, false, Shape::InnerRight, Half::Bottom, ) => 11108,
                ( Facing::North, true, Shape::OuterLeft, Half::Bottom, ) => 11109,
                ( Facing::North, false, Shape::OuterLeft, Half::Bottom, ) => 11110,
                ( Facing::North, true, Shape::OuterRight, Half::Bottom, ) => 11111,
                ( Facing::North, false, Shape::OuterRight, Half::Bottom, ) => 11112,
                ( Facing::South, true, Shape::Straight, Half::Top, ) => 11113,
                ( Facing::South, false, Shape::Straight, Half::Top, ) => 11114,
                ( Facing::South, true, Shape::InnerLeft, Half::Top, ) => 11115,
                ( Facing::South, false, Shape::InnerLeft, Half::Top, ) => 11116,
                ( Facing::South, true, Shape::InnerRight, Half::Top, ) => 11117,
                ( Facing::South, false, Shape::InnerRight, Half::Top, ) => 11118,
                ( Facing::South, true, Shape::OuterLeft, Half::Top, ) => 11119,
                ( Facing::South, false, Shape::OuterLeft, Half::Top, ) => 11120,
                ( Facing::South, true, Shape::OuterRight, Half::Top, ) => 11121,
                ( Facing::South, false, Shape::OuterRight, Half::Top, ) => 11122,
                ( Facing::South, true, Shape::Straight, Half::Bottom, ) => 11123,
                ( Facing::South, false, Shape::Straight, Half::Bottom, ) => 11124,
                ( Facing::South, true, Shape::InnerLeft, Half::Bottom, ) => 11125,
                ( Facing::South, false, Shape::InnerLeft, Half::Bottom, ) => 11126,
                ( Facing::South, true, Shape::InnerRight, Half::Bottom, ) => 11127,
                ( Facing::South, false, Shape::InnerRight, Half::Bottom, ) => 11128,
                ( Facing::South, true, Shape::OuterLeft, Half::Bottom, ) => 11129,
                ( Facing::South, false, Shape::OuterLeft, Half::Bottom, ) => 11130,
                ( Facing::South, true, Shape::OuterRight, Half::Bottom, ) => 11131,
                ( Facing::South, false, Shape::OuterRight, Half::Bottom, ) => 11132,
                ( Facing::West, true, Shape::Straight, Half::Top, ) => 11133,
                ( Facing::West, false, Shape::Straight, Half::Top, ) => 11134,
                ( Facing::West, true, Shape::InnerLeft, Half::Top, ) => 11135,
                ( Facing::West, false, Shape::InnerLeft, Half::Top, ) => 11136,
                ( Facing::West, true, Shape::InnerRight, Half::Top, ) => 11137,
                ( Facing::West, false, Shape::InnerRight, Half::Top, ) => 11138,
                ( Facing::West, true, Shape::OuterLeft, Half::Top, ) => 11139,
                ( Facing::West, false, Shape::OuterLeft, Half::Top, ) => 11140,
                ( Facing::West, true, Shape::OuterRight, Half::Top, ) => 11141,
                ( Facing::West, false, Shape::OuterRight, Half::Top, ) => 11142,
                ( Facing::West, true, Shape::Straight, Half::Bottom, ) => 11143,
                ( Facing::West, false, Shape::Straight, Half::Bottom, ) => 11144,
                ( Facing::West, true, Shape::InnerLeft, Half::Bottom, ) => 11145,
                ( Facing::West, false, Shape::InnerLeft, Half::Bottom, ) => 11146,
                ( Facing::West, true, Shape::InnerRight, Half::Bottom, ) => 11147,
                ( Facing::West, false, Shape::InnerRight, Half::Bottom, ) => 11148,
                ( Facing::West, true, Shape::OuterLeft, Half::Bottom, ) => 11149,
                ( Facing::West, false, Shape::OuterLeft, Half::Bottom, ) => 11150,
                ( Facing::West, true, Shape::OuterRight, Half::Bottom, ) => 11151,
                ( Facing::West, false, Shape::OuterRight, Half::Bottom, ) => 11152,
                ( Facing::East, true, Shape::Straight, Half::Top, ) => 11153,
                ( Facing::East, false, Shape::Straight, Half::Top, ) => 11154,
                ( Facing::East, true, Shape::InnerLeft, Half::Top, ) => 11155,
                ( Facing::East, false, Shape::InnerLeft, Half::Top, ) => 11156,
                ( Facing::East, true, Shape::InnerRight, Half::Top, ) => 11157,
                ( Facing::East, false, Shape::InnerRight, Half::Top, ) => 11158,
                ( Facing::East, true, Shape::OuterLeft, Half::Top, ) => 11159,
                ( Facing::East, false, Shape::OuterLeft, Half::Top, ) => 11160,
                ( Facing::East, true, Shape::OuterRight, Half::Top, ) => 11161,
                ( Facing::East, false, Shape::OuterRight, Half::Top, ) => 11162,
                ( Facing::East, true, Shape::Straight, Half::Bottom, ) => 11163,
                ( Facing::East, false, Shape::Straight, Half::Bottom, ) => 11164,
                ( Facing::East, true, Shape::InnerLeft, Half::Bottom, ) => 11165,
                ( Facing::East, false, Shape::InnerLeft, Half::Bottom, ) => 11166,
                ( Facing::East, true, Shape::InnerRight, Half::Bottom, ) => 11167,
                ( Facing::East, false, Shape::InnerRight, Half::Bottom, ) => 11168,
                ( Facing::East, true, Shape::OuterLeft, Half::Bottom, ) => 11169,
                ( Facing::East, false, Shape::OuterLeft, Half::Bottom, ) => 11170,
                ( Facing::East, true, Shape::OuterRight, Half::Bottom, ) => 11171,
                ( Facing::East, false, Shape::OuterRight, Half::Bottom, ) => 11172,
            })
        }
    }

    impl From<BambooStairs> for BlockState {
        #[inline(always)]
        fn from(value : BambooStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooStairs { }

    impl Block for BambooStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
            shape : Shape::Straight,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:short_dry_grass` block.
pub mod short_dry_grass {
    use super::*;

    /// `minecraft:short_dry_grass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ShortDryGrass;

    impl ShortDryGrass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2052)
        }
    }

    impl From<ShortDryGrass> for BlockState {
        #[inline(always)]
        fn from(value : ShortDryGrass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ShortDryGrass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ShortDryGrass { }

    impl Block for ShortDryGrass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:mangrove_trapdoor` block.
pub mod mangrove_trapdoor {
    use super::*;

    /// `minecraft:mangrove_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveTrapdoor {
        /// `half` state.
        pub half : Half,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `powered` state.
        pub powered : bool,
        /// `open` state.
        pub open : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl MangroveTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.waterlogged, self.powered, self.open, self.facing, )) {
                ( Half::Top, true, true, true, Facing::North, ) => 6652,
                ( Half::Top, false, true, true, Facing::North, ) => 6653,
                ( Half::Top, true, false, true, Facing::North, ) => 6654,
                ( Half::Top, false, false, true, Facing::North, ) => 6655,
                ( Half::Top, true, true, false, Facing::North, ) => 6656,
                ( Half::Top, false, true, false, Facing::North, ) => 6657,
                ( Half::Top, true, false, false, Facing::North, ) => 6658,
                ( Half::Top, false, false, false, Facing::North, ) => 6659,
                ( Half::Bottom, true, true, true, Facing::North, ) => 6660,
                ( Half::Bottom, false, true, true, Facing::North, ) => 6661,
                ( Half::Bottom, true, false, true, Facing::North, ) => 6662,
                ( Half::Bottom, false, false, true, Facing::North, ) => 6663,
                ( Half::Bottom, true, true, false, Facing::North, ) => 6664,
                ( Half::Bottom, false, true, false, Facing::North, ) => 6665,
                ( Half::Bottom, true, false, false, Facing::North, ) => 6666,
                ( Half::Bottom, false, false, false, Facing::North, ) => 6667,
                ( Half::Top, true, true, true, Facing::South, ) => 6668,
                ( Half::Top, false, true, true, Facing::South, ) => 6669,
                ( Half::Top, true, false, true, Facing::South, ) => 6670,
                ( Half::Top, false, false, true, Facing::South, ) => 6671,
                ( Half::Top, true, true, false, Facing::South, ) => 6672,
                ( Half::Top, false, true, false, Facing::South, ) => 6673,
                ( Half::Top, true, false, false, Facing::South, ) => 6674,
                ( Half::Top, false, false, false, Facing::South, ) => 6675,
                ( Half::Bottom, true, true, true, Facing::South, ) => 6676,
                ( Half::Bottom, false, true, true, Facing::South, ) => 6677,
                ( Half::Bottom, true, false, true, Facing::South, ) => 6678,
                ( Half::Bottom, false, false, true, Facing::South, ) => 6679,
                ( Half::Bottom, true, true, false, Facing::South, ) => 6680,
                ( Half::Bottom, false, true, false, Facing::South, ) => 6681,
                ( Half::Bottom, true, false, false, Facing::South, ) => 6682,
                ( Half::Bottom, false, false, false, Facing::South, ) => 6683,
                ( Half::Top, true, true, true, Facing::West, ) => 6684,
                ( Half::Top, false, true, true, Facing::West, ) => 6685,
                ( Half::Top, true, false, true, Facing::West, ) => 6686,
                ( Half::Top, false, false, true, Facing::West, ) => 6687,
                ( Half::Top, true, true, false, Facing::West, ) => 6688,
                ( Half::Top, false, true, false, Facing::West, ) => 6689,
                ( Half::Top, true, false, false, Facing::West, ) => 6690,
                ( Half::Top, false, false, false, Facing::West, ) => 6691,
                ( Half::Bottom, true, true, true, Facing::West, ) => 6692,
                ( Half::Bottom, false, true, true, Facing::West, ) => 6693,
                ( Half::Bottom, true, false, true, Facing::West, ) => 6694,
                ( Half::Bottom, false, false, true, Facing::West, ) => 6695,
                ( Half::Bottom, true, true, false, Facing::West, ) => 6696,
                ( Half::Bottom, false, true, false, Facing::West, ) => 6697,
                ( Half::Bottom, true, false, false, Facing::West, ) => 6698,
                ( Half::Bottom, false, false, false, Facing::West, ) => 6699,
                ( Half::Top, true, true, true, Facing::East, ) => 6700,
                ( Half::Top, false, true, true, Facing::East, ) => 6701,
                ( Half::Top, true, false, true, Facing::East, ) => 6702,
                ( Half::Top, false, false, true, Facing::East, ) => 6703,
                ( Half::Top, true, true, false, Facing::East, ) => 6704,
                ( Half::Top, false, true, false, Facing::East, ) => 6705,
                ( Half::Top, true, false, false, Facing::East, ) => 6706,
                ( Half::Top, false, false, false, Facing::East, ) => 6707,
                ( Half::Bottom, true, true, true, Facing::East, ) => 6708,
                ( Half::Bottom, false, true, true, Facing::East, ) => 6709,
                ( Half::Bottom, true, false, true, Facing::East, ) => 6710,
                ( Half::Bottom, false, false, true, Facing::East, ) => 6711,
                ( Half::Bottom, true, true, false, Facing::East, ) => 6712,
                ( Half::Bottom, false, true, false, Facing::East, ) => 6713,
                ( Half::Bottom, true, false, false, Facing::East, ) => 6714,
                ( Half::Bottom, false, false, false, Facing::East, ) => 6715,
            })
        }
    }

    impl From<MangroveTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : MangroveTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveTrapdoor { }

    impl Block for MangroveTrapdoor {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            waterlogged : false,
            powered : false,
            open : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:vault` block.
pub mod vault {
    use super::*;

    /// `minecraft:vault` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Vault {
        /// `vault_state` state.
        pub vault_state : VaultState,
        /// `facing` state.
        pub facing : Facing,
        /// `ominous` state.
        pub ominous : bool,
    }

    /// `vault_state` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum VaultState {
        /// `inactive` variant.
        Inactive,
        /// `active` variant.
        Active,
        /// `unlocking` variant.
        Unlocking,
        /// `ejecting` variant.
        Ejecting,
    }
    impl crate::Sealed for VaultState { }
    impl BlockProperty for VaultState { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Vault {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.vault_state, self.facing, self.ominous, )) {
                ( VaultState::Inactive, Facing::North, true, ) => 27742,
                ( VaultState::Active, Facing::North, true, ) => 27743,
                ( VaultState::Unlocking, Facing::North, true, ) => 27744,
                ( VaultState::Ejecting, Facing::North, true, ) => 27745,
                ( VaultState::Inactive, Facing::North, false, ) => 27746,
                ( VaultState::Active, Facing::North, false, ) => 27747,
                ( VaultState::Unlocking, Facing::North, false, ) => 27748,
                ( VaultState::Ejecting, Facing::North, false, ) => 27749,
                ( VaultState::Inactive, Facing::South, true, ) => 27750,
                ( VaultState::Active, Facing::South, true, ) => 27751,
                ( VaultState::Unlocking, Facing::South, true, ) => 27752,
                ( VaultState::Ejecting, Facing::South, true, ) => 27753,
                ( VaultState::Inactive, Facing::South, false, ) => 27754,
                ( VaultState::Active, Facing::South, false, ) => 27755,
                ( VaultState::Unlocking, Facing::South, false, ) => 27756,
                ( VaultState::Ejecting, Facing::South, false, ) => 27757,
                ( VaultState::Inactive, Facing::West, true, ) => 27758,
                ( VaultState::Active, Facing::West, true, ) => 27759,
                ( VaultState::Unlocking, Facing::West, true, ) => 27760,
                ( VaultState::Ejecting, Facing::West, true, ) => 27761,
                ( VaultState::Inactive, Facing::West, false, ) => 27762,
                ( VaultState::Active, Facing::West, false, ) => 27763,
                ( VaultState::Unlocking, Facing::West, false, ) => 27764,
                ( VaultState::Ejecting, Facing::West, false, ) => 27765,
                ( VaultState::Inactive, Facing::East, true, ) => 27766,
                ( VaultState::Active, Facing::East, true, ) => 27767,
                ( VaultState::Unlocking, Facing::East, true, ) => 27768,
                ( VaultState::Ejecting, Facing::East, true, ) => 27769,
                ( VaultState::Inactive, Facing::East, false, ) => 27770,
                ( VaultState::Active, Facing::East, false, ) => 27771,
                ( VaultState::Unlocking, Facing::East, false, ) => 27772,
                ( VaultState::Ejecting, Facing::East, false, ) => 27773,
            })
        }
    }

    impl From<Vault> for BlockState {
        #[inline(always)]
        fn from(value : Vault) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Vault {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Vault { }

    impl Block for Vault {
        const DEFAULT_STATE : Self = Self {
            vault_state : VaultState::Inactive,
            facing : Facing::North,
            ominous : false,
        };
    }

}

/// `minecraft:gravel` block.
pub mod gravel {
    use super::*;

    /// `minecraft:gravel` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Gravel;

    impl Gravel {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(124)
        }
    }

    impl From<Gravel> for BlockState {
        #[inline(always)]
        fn from(value : Gravel) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Gravel {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Gravel { }

    impl Block for Gravel {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:bell` block.
pub mod bell {
    use super::*;

    /// `minecraft:bell` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Bell {
        /// `attachment` state.
        pub attachment : Attachment,
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
    }

    /// `attachment` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Attachment {
        /// `floor` variant.
        Floor,
        /// `ceiling` variant.
        Ceiling,
        /// `single_wall` variant.
        SingleWall,
        /// `double_wall` variant.
        DoubleWall,
    }
    impl crate::Sealed for Attachment { }
    impl BlockProperty for Attachment { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Bell {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.attachment, self.facing, self.powered, )) {
                ( Attachment::Floor, Facing::North, true, ) => 19526,
                ( Attachment::Floor, Facing::North, false, ) => 19527,
                ( Attachment::Floor, Facing::South, true, ) => 19528,
                ( Attachment::Floor, Facing::South, false, ) => 19529,
                ( Attachment::Floor, Facing::West, true, ) => 19530,
                ( Attachment::Floor, Facing::West, false, ) => 19531,
                ( Attachment::Floor, Facing::East, true, ) => 19532,
                ( Attachment::Floor, Facing::East, false, ) => 19533,
                ( Attachment::Ceiling, Facing::North, true, ) => 19534,
                ( Attachment::Ceiling, Facing::North, false, ) => 19535,
                ( Attachment::Ceiling, Facing::South, true, ) => 19536,
                ( Attachment::Ceiling, Facing::South, false, ) => 19537,
                ( Attachment::Ceiling, Facing::West, true, ) => 19538,
                ( Attachment::Ceiling, Facing::West, false, ) => 19539,
                ( Attachment::Ceiling, Facing::East, true, ) => 19540,
                ( Attachment::Ceiling, Facing::East, false, ) => 19541,
                ( Attachment::SingleWall, Facing::North, true, ) => 19542,
                ( Attachment::SingleWall, Facing::North, false, ) => 19543,
                ( Attachment::SingleWall, Facing::South, true, ) => 19544,
                ( Attachment::SingleWall, Facing::South, false, ) => 19545,
                ( Attachment::SingleWall, Facing::West, true, ) => 19546,
                ( Attachment::SingleWall, Facing::West, false, ) => 19547,
                ( Attachment::SingleWall, Facing::East, true, ) => 19548,
                ( Attachment::SingleWall, Facing::East, false, ) => 19549,
                ( Attachment::DoubleWall, Facing::North, true, ) => 19550,
                ( Attachment::DoubleWall, Facing::North, false, ) => 19551,
                ( Attachment::DoubleWall, Facing::South, true, ) => 19552,
                ( Attachment::DoubleWall, Facing::South, false, ) => 19553,
                ( Attachment::DoubleWall, Facing::West, true, ) => 19554,
                ( Attachment::DoubleWall, Facing::West, false, ) => 19555,
                ( Attachment::DoubleWall, Facing::East, true, ) => 19556,
                ( Attachment::DoubleWall, Facing::East, false, ) => 19557,
            })
        }
    }

    impl From<Bell> for BlockState {
        #[inline(always)]
        fn from(value : Bell) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Bell {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Bell { }

    impl Block for Bell {
        const DEFAULT_STATE : Self = Self {
            attachment : Attachment::Floor,
            facing : Facing::North,
            powered : false,
        };
    }

}

/// `minecraft:oxidized_copper` block.
pub mod oxidized_copper {
    use super::*;

    /// `minecraft:oxidized_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OxidizedCopper;

    impl OxidizedCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24001)
        }
    }

    impl From<OxidizedCopper> for BlockState {
        #[inline(always)]
        fn from(value : OxidizedCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OxidizedCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OxidizedCopper { }

    impl Block for OxidizedCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:prismarine` block.
pub mod prismarine {
    use super::*;

    /// `minecraft:prismarine` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Prismarine;

    impl Prismarine {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11352)
        }
    }

    impl From<Prismarine> for BlockState {
        #[inline(always)]
        fn from(value : Prismarine) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Prismarine {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Prismarine { }

    impl Block for Prismarine {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dark_prismarine_stairs` block.
pub mod dark_prismarine_stairs {
    use super::*;

    /// `minecraft:dark_prismarine_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkPrismarineStairs {
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl DarkPrismarineStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.facing, self.waterlogged, self.shape, )) {
                ( Half::Top, Facing::North, true, Shape::Straight, ) => 11515,
                ( Half::Top, Facing::North, false, Shape::Straight, ) => 11516,
                ( Half::Top, Facing::North, true, Shape::InnerLeft, ) => 11517,
                ( Half::Top, Facing::North, false, Shape::InnerLeft, ) => 11518,
                ( Half::Top, Facing::North, true, Shape::InnerRight, ) => 11519,
                ( Half::Top, Facing::North, false, Shape::InnerRight, ) => 11520,
                ( Half::Top, Facing::North, true, Shape::OuterLeft, ) => 11521,
                ( Half::Top, Facing::North, false, Shape::OuterLeft, ) => 11522,
                ( Half::Top, Facing::North, true, Shape::OuterRight, ) => 11523,
                ( Half::Top, Facing::North, false, Shape::OuterRight, ) => 11524,
                ( Half::Bottom, Facing::North, true, Shape::Straight, ) => 11525,
                ( Half::Bottom, Facing::North, false, Shape::Straight, ) => 11526,
                ( Half::Bottom, Facing::North, true, Shape::InnerLeft, ) => 11527,
                ( Half::Bottom, Facing::North, false, Shape::InnerLeft, ) => 11528,
                ( Half::Bottom, Facing::North, true, Shape::InnerRight, ) => 11529,
                ( Half::Bottom, Facing::North, false, Shape::InnerRight, ) => 11530,
                ( Half::Bottom, Facing::North, true, Shape::OuterLeft, ) => 11531,
                ( Half::Bottom, Facing::North, false, Shape::OuterLeft, ) => 11532,
                ( Half::Bottom, Facing::North, true, Shape::OuterRight, ) => 11533,
                ( Half::Bottom, Facing::North, false, Shape::OuterRight, ) => 11534,
                ( Half::Top, Facing::South, true, Shape::Straight, ) => 11535,
                ( Half::Top, Facing::South, false, Shape::Straight, ) => 11536,
                ( Half::Top, Facing::South, true, Shape::InnerLeft, ) => 11537,
                ( Half::Top, Facing::South, false, Shape::InnerLeft, ) => 11538,
                ( Half::Top, Facing::South, true, Shape::InnerRight, ) => 11539,
                ( Half::Top, Facing::South, false, Shape::InnerRight, ) => 11540,
                ( Half::Top, Facing::South, true, Shape::OuterLeft, ) => 11541,
                ( Half::Top, Facing::South, false, Shape::OuterLeft, ) => 11542,
                ( Half::Top, Facing::South, true, Shape::OuterRight, ) => 11543,
                ( Half::Top, Facing::South, false, Shape::OuterRight, ) => 11544,
                ( Half::Bottom, Facing::South, true, Shape::Straight, ) => 11545,
                ( Half::Bottom, Facing::South, false, Shape::Straight, ) => 11546,
                ( Half::Bottom, Facing::South, true, Shape::InnerLeft, ) => 11547,
                ( Half::Bottom, Facing::South, false, Shape::InnerLeft, ) => 11548,
                ( Half::Bottom, Facing::South, true, Shape::InnerRight, ) => 11549,
                ( Half::Bottom, Facing::South, false, Shape::InnerRight, ) => 11550,
                ( Half::Bottom, Facing::South, true, Shape::OuterLeft, ) => 11551,
                ( Half::Bottom, Facing::South, false, Shape::OuterLeft, ) => 11552,
                ( Half::Bottom, Facing::South, true, Shape::OuterRight, ) => 11553,
                ( Half::Bottom, Facing::South, false, Shape::OuterRight, ) => 11554,
                ( Half::Top, Facing::West, true, Shape::Straight, ) => 11555,
                ( Half::Top, Facing::West, false, Shape::Straight, ) => 11556,
                ( Half::Top, Facing::West, true, Shape::InnerLeft, ) => 11557,
                ( Half::Top, Facing::West, false, Shape::InnerLeft, ) => 11558,
                ( Half::Top, Facing::West, true, Shape::InnerRight, ) => 11559,
                ( Half::Top, Facing::West, false, Shape::InnerRight, ) => 11560,
                ( Half::Top, Facing::West, true, Shape::OuterLeft, ) => 11561,
                ( Half::Top, Facing::West, false, Shape::OuterLeft, ) => 11562,
                ( Half::Top, Facing::West, true, Shape::OuterRight, ) => 11563,
                ( Half::Top, Facing::West, false, Shape::OuterRight, ) => 11564,
                ( Half::Bottom, Facing::West, true, Shape::Straight, ) => 11565,
                ( Half::Bottom, Facing::West, false, Shape::Straight, ) => 11566,
                ( Half::Bottom, Facing::West, true, Shape::InnerLeft, ) => 11567,
                ( Half::Bottom, Facing::West, false, Shape::InnerLeft, ) => 11568,
                ( Half::Bottom, Facing::West, true, Shape::InnerRight, ) => 11569,
                ( Half::Bottom, Facing::West, false, Shape::InnerRight, ) => 11570,
                ( Half::Bottom, Facing::West, true, Shape::OuterLeft, ) => 11571,
                ( Half::Bottom, Facing::West, false, Shape::OuterLeft, ) => 11572,
                ( Half::Bottom, Facing::West, true, Shape::OuterRight, ) => 11573,
                ( Half::Bottom, Facing::West, false, Shape::OuterRight, ) => 11574,
                ( Half::Top, Facing::East, true, Shape::Straight, ) => 11575,
                ( Half::Top, Facing::East, false, Shape::Straight, ) => 11576,
                ( Half::Top, Facing::East, true, Shape::InnerLeft, ) => 11577,
                ( Half::Top, Facing::East, false, Shape::InnerLeft, ) => 11578,
                ( Half::Top, Facing::East, true, Shape::InnerRight, ) => 11579,
                ( Half::Top, Facing::East, false, Shape::InnerRight, ) => 11580,
                ( Half::Top, Facing::East, true, Shape::OuterLeft, ) => 11581,
                ( Half::Top, Facing::East, false, Shape::OuterLeft, ) => 11582,
                ( Half::Top, Facing::East, true, Shape::OuterRight, ) => 11583,
                ( Half::Top, Facing::East, false, Shape::OuterRight, ) => 11584,
                ( Half::Bottom, Facing::East, true, Shape::Straight, ) => 11585,
                ( Half::Bottom, Facing::East, false, Shape::Straight, ) => 11586,
                ( Half::Bottom, Facing::East, true, Shape::InnerLeft, ) => 11587,
                ( Half::Bottom, Facing::East, false, Shape::InnerLeft, ) => 11588,
                ( Half::Bottom, Facing::East, true, Shape::InnerRight, ) => 11589,
                ( Half::Bottom, Facing::East, false, Shape::InnerRight, ) => 11590,
                ( Half::Bottom, Facing::East, true, Shape::OuterLeft, ) => 11591,
                ( Half::Bottom, Facing::East, false, Shape::OuterLeft, ) => 11592,
                ( Half::Bottom, Facing::East, true, Shape::OuterRight, ) => 11593,
                ( Half::Bottom, Facing::East, false, Shape::OuterRight, ) => 11594,
            })
        }
    }

    impl From<DarkPrismarineStairs> for BlockState {
        #[inline(always)]
        fn from(value : DarkPrismarineStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkPrismarineStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkPrismarineStairs { }

    impl Block for DarkPrismarineStairs {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            facing : Facing::North,
            waterlogged : false,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:cyan_stained_glass_pane` block.
pub mod cyan_stained_glass_pane {
    use super::*;

    /// `minecraft:cyan_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanStainedGlassPane {
        /// `south` state.
        pub south : bool,
        /// `east` state.
        pub east : bool,
        /// `west` state.
        pub west : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `north` state.
        pub north : bool,
    }

    impl CyanStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.south, self.east, self.west, self.waterlogged, self.north, )) {
                ( true, true, true, true, true, ) => 10469,
                ( true, true, false, true, true, ) => 10470,
                ( true, true, true, false, true, ) => 10471,
                ( true, true, false, false, true, ) => 10472,
                ( false, true, true, true, true, ) => 10473,
                ( false, true, false, true, true, ) => 10474,
                ( false, true, true, false, true, ) => 10475,
                ( false, true, false, false, true, ) => 10476,
                ( true, true, true, true, false, ) => 10477,
                ( true, true, false, true, false, ) => 10478,
                ( true, true, true, false, false, ) => 10479,
                ( true, true, false, false, false, ) => 10480,
                ( false, true, true, true, false, ) => 10481,
                ( false, true, false, true, false, ) => 10482,
                ( false, true, true, false, false, ) => 10483,
                ( false, true, false, false, false, ) => 10484,
                ( true, false, true, true, true, ) => 10485,
                ( true, false, false, true, true, ) => 10486,
                ( true, false, true, false, true, ) => 10487,
                ( true, false, false, false, true, ) => 10488,
                ( false, false, true, true, true, ) => 10489,
                ( false, false, false, true, true, ) => 10490,
                ( false, false, true, false, true, ) => 10491,
                ( false, false, false, false, true, ) => 10492,
                ( true, false, true, true, false, ) => 10493,
                ( true, false, false, true, false, ) => 10494,
                ( true, false, true, false, false, ) => 10495,
                ( true, false, false, false, false, ) => 10496,
                ( false, false, true, true, false, ) => 10497,
                ( false, false, false, true, false, ) => 10498,
                ( false, false, true, false, false, ) => 10499,
                ( false, false, false, false, false, ) => 10500,
            })
        }
    }

    impl From<CyanStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : CyanStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanStainedGlassPane { }

    impl Block for CyanStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            south : false,
            east : false,
            west : false,
            waterlogged : false,
            north : false,
        };
    }

}

/// `minecraft:oak_wall_hanging_sign` block.
pub mod oak_wall_hanging_sign {
    use super::*;

    /// `minecraft:oak_wall_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakWallHangingSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl OakWallHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 5706,
                ( false, Facing::North, ) => 5707,
                ( true, Facing::South, ) => 5708,
                ( false, Facing::South, ) => 5709,
                ( true, Facing::West, ) => 5710,
                ( false, Facing::West, ) => 5711,
                ( true, Facing::East, ) => 5712,
                ( false, Facing::East, ) => 5713,
            })
        }
    }

    impl From<OakWallHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : OakWallHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakWallHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakWallHangingSign { }

    impl Block for OakWallHangingSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:purple_concrete_powder` block.
pub mod purple_concrete_powder {
    use super::*;

    /// `minecraft:purple_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleConcretePowder;

    impl PurpleConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13777)
        }
    }

    impl From<PurpleConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : PurpleConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleConcretePowder { }

    impl Block for PurpleConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:white_concrete` block.
pub mod white_concrete {
    use super::*;

    /// `minecraft:white_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteConcrete;

    impl WhiteConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13751)
        }
    }

    impl From<WhiteConcrete> for BlockState {
        #[inline(always)]
        fn from(value : WhiteConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteConcrete { }

    impl Block for WhiteConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:yellow_banner` block.
pub mod yellow_banner {
    use super::*;

    /// `minecraft:yellow_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl YellowBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11712,
                ( Rotation::N1, ) => 11713,
                ( Rotation::N2, ) => 11714,
                ( Rotation::N3, ) => 11715,
                ( Rotation::N4, ) => 11716,
                ( Rotation::N5, ) => 11717,
                ( Rotation::N6, ) => 11718,
                ( Rotation::N7, ) => 11719,
                ( Rotation::N8, ) => 11720,
                ( Rotation::N9, ) => 11721,
                ( Rotation::N10, ) => 11722,
                ( Rotation::N11, ) => 11723,
                ( Rotation::N12, ) => 11724,
                ( Rotation::N13, ) => 11725,
                ( Rotation::N14, ) => 11726,
                ( Rotation::N15, ) => 11727,
            })
        }
    }

    impl From<YellowBanner> for BlockState {
        #[inline(always)]
        fn from(value : YellowBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowBanner { }

    impl Block for YellowBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:light_gray_stained_glass` block.
pub mod light_gray_stained_glass {
    use super::*;

    /// `minecraft:light_gray_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayStainedGlass;

    impl LightGrayStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6132)
        }
    }

    impl From<LightGrayStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayStainedGlass { }

    impl Block for LightGrayStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stripped_mangrove_wood` block.
pub mod stripped_mangrove_wood {
    use super::*;

    /// `minecraft:stripped_mangrove_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedMangroveWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedMangroveWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 249,
                ( Axis::Y, ) => 250,
                ( Axis::Z, ) => 251,
            })
        }
    }

    impl From<StrippedMangroveWood> for BlockState {
        #[inline(always)]
        fn from(value : StrippedMangroveWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedMangroveWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedMangroveWood { }

    impl Block for StrippedMangroveWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:tripwire_hook` block.
pub mod tripwire_hook {
    use super::*;

    /// `minecraft:tripwire_hook` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TripwireHook {
        /// `powered` state.
        pub powered : bool,
        /// `attached` state.
        pub attached : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl TripwireHook {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.attached, self.facing, )) {
                ( true, true, Facing::North, ) => 8305,
                ( false, true, Facing::North, ) => 8306,
                ( true, true, Facing::South, ) => 8307,
                ( false, true, Facing::South, ) => 8308,
                ( true, true, Facing::West, ) => 8309,
                ( false, true, Facing::West, ) => 8310,
                ( true, true, Facing::East, ) => 8311,
                ( false, true, Facing::East, ) => 8312,
                ( true, false, Facing::North, ) => 8313,
                ( false, false, Facing::North, ) => 8314,
                ( true, false, Facing::South, ) => 8315,
                ( false, false, Facing::South, ) => 8316,
                ( true, false, Facing::West, ) => 8317,
                ( false, false, Facing::West, ) => 8318,
                ( true, false, Facing::East, ) => 8319,
                ( false, false, Facing::East, ) => 8320,
            })
        }
    }

    impl From<TripwireHook> for BlockState {
        #[inline(always)]
        fn from(value : TripwireHook) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TripwireHook {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TripwireHook { }

    impl Block for TripwireHook {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            attached : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:waxed_weathered_copper_grate` block.
pub mod waxed_weathered_copper_grate {
    use super::*;

    /// `minecraft:waxed_weathered_copper_grate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedWeatheredCopperGrate {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl WaxedWeatheredCopperGrate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 25748,
                ( false, ) => 25749,
            })
        }
    }

    impl From<WaxedWeatheredCopperGrate> for BlockState {
        #[inline(always)]
        fn from(value : WaxedWeatheredCopperGrate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedWeatheredCopperGrate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedWeatheredCopperGrate { }

    impl Block for WaxedWeatheredCopperGrate {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
        };
    }

}

/// `minecraft:purpur_pillar` block.
pub mod purpur_pillar {
    use super::*;

    /// `minecraft:purpur_pillar` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpurPillar {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl PurpurPillar {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 13434,
                ( Axis::Y, ) => 13435,
                ( Axis::Z, ) => 13436,
            })
        }
    }

    impl From<PurpurPillar> for BlockState {
        #[inline(always)]
        fn from(value : PurpurPillar) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpurPillar {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpurPillar { }

    impl Block for PurpurPillar {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:hanging_roots` block.
pub mod hanging_roots {
    use super::*;

    /// `minecraft:hanging_roots` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct HangingRoots {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl HangingRoots {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 25992,
                ( false, ) => 25993,
            })
        }
    }

    impl From<HangingRoots> for BlockState {
        #[inline(always)]
        fn from(value : HangingRoots) -> Self {
            value.to_block_state()
        }
    }

    impl Default for HangingRoots {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for HangingRoots { }

    impl Block for HangingRoots {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
        };
    }

}

/// `minecraft:gray_stained_glass_pane` block.
pub mod gray_stained_glass_pane {
    use super::*;

    /// `minecraft:gray_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayStainedGlassPane {
        /// `north` state.
        pub north : bool,
        /// `east` state.
        pub east : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `south` state.
        pub south : bool,
        /// `west` state.
        pub west : bool,
    }

    impl GrayStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.east, self.waterlogged, self.south, self.west, )) {
                ( true, true, true, true, true, ) => 10405,
                ( true, true, true, true, false, ) => 10406,
                ( true, true, false, true, true, ) => 10407,
                ( true, true, false, true, false, ) => 10408,
                ( true, true, true, false, true, ) => 10409,
                ( true, true, true, false, false, ) => 10410,
                ( true, true, false, false, true, ) => 10411,
                ( true, true, false, false, false, ) => 10412,
                ( false, true, true, true, true, ) => 10413,
                ( false, true, true, true, false, ) => 10414,
                ( false, true, false, true, true, ) => 10415,
                ( false, true, false, true, false, ) => 10416,
                ( false, true, true, false, true, ) => 10417,
                ( false, true, true, false, false, ) => 10418,
                ( false, true, false, false, true, ) => 10419,
                ( false, true, false, false, false, ) => 10420,
                ( true, false, true, true, true, ) => 10421,
                ( true, false, true, true, false, ) => 10422,
                ( true, false, false, true, true, ) => 10423,
                ( true, false, false, true, false, ) => 10424,
                ( true, false, true, false, true, ) => 10425,
                ( true, false, true, false, false, ) => 10426,
                ( true, false, false, false, true, ) => 10427,
                ( true, false, false, false, false, ) => 10428,
                ( false, false, true, true, true, ) => 10429,
                ( false, false, true, true, false, ) => 10430,
                ( false, false, false, true, true, ) => 10431,
                ( false, false, false, true, false, ) => 10432,
                ( false, false, true, false, true, ) => 10433,
                ( false, false, true, false, false, ) => 10434,
                ( false, false, false, false, true, ) => 10435,
                ( false, false, false, false, false, ) => 10436,
            })
        }
    }

    impl From<GrayStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : GrayStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayStainedGlassPane { }

    impl Block for GrayStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            north : false,
            east : false,
            waterlogged : false,
            south : false,
            west : false,
        };
    }

}

/// `minecraft:yellow_stained_glass_pane` block.
pub mod yellow_stained_glass_pane {
    use super::*;

    /// `minecraft:yellow_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowStainedGlassPane {
        /// `east` state.
        pub east : bool,
        /// `west` state.
        pub west : bool,
        /// `north` state.
        pub north : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `south` state.
        pub south : bool,
    }

    impl YellowStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.west, self.north, self.waterlogged, self.south, )) {
                ( true, true, true, true, true, ) => 10309,
                ( true, false, true, true, true, ) => 10310,
                ( true, true, true, false, true, ) => 10311,
                ( true, false, true, false, true, ) => 10312,
                ( true, true, true, true, false, ) => 10313,
                ( true, false, true, true, false, ) => 10314,
                ( true, true, true, false, false, ) => 10315,
                ( true, false, true, false, false, ) => 10316,
                ( true, true, false, true, true, ) => 10317,
                ( true, false, false, true, true, ) => 10318,
                ( true, true, false, false, true, ) => 10319,
                ( true, false, false, false, true, ) => 10320,
                ( true, true, false, true, false, ) => 10321,
                ( true, false, false, true, false, ) => 10322,
                ( true, true, false, false, false, ) => 10323,
                ( true, false, false, false, false, ) => 10324,
                ( false, true, true, true, true, ) => 10325,
                ( false, false, true, true, true, ) => 10326,
                ( false, true, true, false, true, ) => 10327,
                ( false, false, true, false, true, ) => 10328,
                ( false, true, true, true, false, ) => 10329,
                ( false, false, true, true, false, ) => 10330,
                ( false, true, true, false, false, ) => 10331,
                ( false, false, true, false, false, ) => 10332,
                ( false, true, false, true, true, ) => 10333,
                ( false, false, false, true, true, ) => 10334,
                ( false, true, false, false, true, ) => 10335,
                ( false, false, false, false, true, ) => 10336,
                ( false, true, false, true, false, ) => 10337,
                ( false, false, false, true, false, ) => 10338,
                ( false, true, false, false, false, ) => 10339,
                ( false, false, false, false, false, ) => 10340,
            })
        }
    }

    impl From<YellowStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : YellowStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowStainedGlassPane { }

    impl Block for YellowStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            east : false,
            west : false,
            north : false,
            waterlogged : false,
            south : false,
        };
    }

}

/// `minecraft:mangrove_roots` block.
pub mod mangrove_roots {
    use super::*;

    /// `minecraft:mangrove_roots` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveRoots {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl MangroveRoots {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 163,
                ( false, ) => 164,
            })
        }
    }

    impl From<MangroveRoots> for BlockState {
        #[inline(always)]
        fn from(value : MangroveRoots) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveRoots {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveRoots { }

    impl Block for MangroveRoots {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
        };
    }

}

/// `minecraft:red_nether_brick_stairs` block.
pub mod red_nether_brick_stairs {
    use super::*;

    /// `minecraft:red_nether_brick_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedNetherBrickStairs {
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl RedNetherBrickStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.facing, self.waterlogged, self.shape, )) {
                ( Half::Top, Facing::North, true, Shape::Straight, ) => 14897,
                ( Half::Top, Facing::North, false, Shape::Straight, ) => 14898,
                ( Half::Top, Facing::North, true, Shape::InnerLeft, ) => 14899,
                ( Half::Top, Facing::North, false, Shape::InnerLeft, ) => 14900,
                ( Half::Top, Facing::North, true, Shape::InnerRight, ) => 14901,
                ( Half::Top, Facing::North, false, Shape::InnerRight, ) => 14902,
                ( Half::Top, Facing::North, true, Shape::OuterLeft, ) => 14903,
                ( Half::Top, Facing::North, false, Shape::OuterLeft, ) => 14904,
                ( Half::Top, Facing::North, true, Shape::OuterRight, ) => 14905,
                ( Half::Top, Facing::North, false, Shape::OuterRight, ) => 14906,
                ( Half::Bottom, Facing::North, true, Shape::Straight, ) => 14907,
                ( Half::Bottom, Facing::North, false, Shape::Straight, ) => 14908,
                ( Half::Bottom, Facing::North, true, Shape::InnerLeft, ) => 14909,
                ( Half::Bottom, Facing::North, false, Shape::InnerLeft, ) => 14910,
                ( Half::Bottom, Facing::North, true, Shape::InnerRight, ) => 14911,
                ( Half::Bottom, Facing::North, false, Shape::InnerRight, ) => 14912,
                ( Half::Bottom, Facing::North, true, Shape::OuterLeft, ) => 14913,
                ( Half::Bottom, Facing::North, false, Shape::OuterLeft, ) => 14914,
                ( Half::Bottom, Facing::North, true, Shape::OuterRight, ) => 14915,
                ( Half::Bottom, Facing::North, false, Shape::OuterRight, ) => 14916,
                ( Half::Top, Facing::South, true, Shape::Straight, ) => 14917,
                ( Half::Top, Facing::South, false, Shape::Straight, ) => 14918,
                ( Half::Top, Facing::South, true, Shape::InnerLeft, ) => 14919,
                ( Half::Top, Facing::South, false, Shape::InnerLeft, ) => 14920,
                ( Half::Top, Facing::South, true, Shape::InnerRight, ) => 14921,
                ( Half::Top, Facing::South, false, Shape::InnerRight, ) => 14922,
                ( Half::Top, Facing::South, true, Shape::OuterLeft, ) => 14923,
                ( Half::Top, Facing::South, false, Shape::OuterLeft, ) => 14924,
                ( Half::Top, Facing::South, true, Shape::OuterRight, ) => 14925,
                ( Half::Top, Facing::South, false, Shape::OuterRight, ) => 14926,
                ( Half::Bottom, Facing::South, true, Shape::Straight, ) => 14927,
                ( Half::Bottom, Facing::South, false, Shape::Straight, ) => 14928,
                ( Half::Bottom, Facing::South, true, Shape::InnerLeft, ) => 14929,
                ( Half::Bottom, Facing::South, false, Shape::InnerLeft, ) => 14930,
                ( Half::Bottom, Facing::South, true, Shape::InnerRight, ) => 14931,
                ( Half::Bottom, Facing::South, false, Shape::InnerRight, ) => 14932,
                ( Half::Bottom, Facing::South, true, Shape::OuterLeft, ) => 14933,
                ( Half::Bottom, Facing::South, false, Shape::OuterLeft, ) => 14934,
                ( Half::Bottom, Facing::South, true, Shape::OuterRight, ) => 14935,
                ( Half::Bottom, Facing::South, false, Shape::OuterRight, ) => 14936,
                ( Half::Top, Facing::West, true, Shape::Straight, ) => 14937,
                ( Half::Top, Facing::West, false, Shape::Straight, ) => 14938,
                ( Half::Top, Facing::West, true, Shape::InnerLeft, ) => 14939,
                ( Half::Top, Facing::West, false, Shape::InnerLeft, ) => 14940,
                ( Half::Top, Facing::West, true, Shape::InnerRight, ) => 14941,
                ( Half::Top, Facing::West, false, Shape::InnerRight, ) => 14942,
                ( Half::Top, Facing::West, true, Shape::OuterLeft, ) => 14943,
                ( Half::Top, Facing::West, false, Shape::OuterLeft, ) => 14944,
                ( Half::Top, Facing::West, true, Shape::OuterRight, ) => 14945,
                ( Half::Top, Facing::West, false, Shape::OuterRight, ) => 14946,
                ( Half::Bottom, Facing::West, true, Shape::Straight, ) => 14947,
                ( Half::Bottom, Facing::West, false, Shape::Straight, ) => 14948,
                ( Half::Bottom, Facing::West, true, Shape::InnerLeft, ) => 14949,
                ( Half::Bottom, Facing::West, false, Shape::InnerLeft, ) => 14950,
                ( Half::Bottom, Facing::West, true, Shape::InnerRight, ) => 14951,
                ( Half::Bottom, Facing::West, false, Shape::InnerRight, ) => 14952,
                ( Half::Bottom, Facing::West, true, Shape::OuterLeft, ) => 14953,
                ( Half::Bottom, Facing::West, false, Shape::OuterLeft, ) => 14954,
                ( Half::Bottom, Facing::West, true, Shape::OuterRight, ) => 14955,
                ( Half::Bottom, Facing::West, false, Shape::OuterRight, ) => 14956,
                ( Half::Top, Facing::East, true, Shape::Straight, ) => 14957,
                ( Half::Top, Facing::East, false, Shape::Straight, ) => 14958,
                ( Half::Top, Facing::East, true, Shape::InnerLeft, ) => 14959,
                ( Half::Top, Facing::East, false, Shape::InnerLeft, ) => 14960,
                ( Half::Top, Facing::East, true, Shape::InnerRight, ) => 14961,
                ( Half::Top, Facing::East, false, Shape::InnerRight, ) => 14962,
                ( Half::Top, Facing::East, true, Shape::OuterLeft, ) => 14963,
                ( Half::Top, Facing::East, false, Shape::OuterLeft, ) => 14964,
                ( Half::Top, Facing::East, true, Shape::OuterRight, ) => 14965,
                ( Half::Top, Facing::East, false, Shape::OuterRight, ) => 14966,
                ( Half::Bottom, Facing::East, true, Shape::Straight, ) => 14967,
                ( Half::Bottom, Facing::East, false, Shape::Straight, ) => 14968,
                ( Half::Bottom, Facing::East, true, Shape::InnerLeft, ) => 14969,
                ( Half::Bottom, Facing::East, false, Shape::InnerLeft, ) => 14970,
                ( Half::Bottom, Facing::East, true, Shape::InnerRight, ) => 14971,
                ( Half::Bottom, Facing::East, false, Shape::InnerRight, ) => 14972,
                ( Half::Bottom, Facing::East, true, Shape::OuterLeft, ) => 14973,
                ( Half::Bottom, Facing::East, false, Shape::OuterLeft, ) => 14974,
                ( Half::Bottom, Facing::East, true, Shape::OuterRight, ) => 14975,
                ( Half::Bottom, Facing::East, false, Shape::OuterRight, ) => 14976,
            })
        }
    }

    impl From<RedNetherBrickStairs> for BlockState {
        #[inline(always)]
        fn from(value : RedNetherBrickStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedNetherBrickStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedNetherBrickStairs { }

    impl Block for RedNetherBrickStairs {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            facing : Facing::North,
            waterlogged : false,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:stone_button` block.
pub mod stone_button {
    use super::*;

    /// `minecraft:stone_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StoneButton {
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `face` state.
        pub face : Face,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    impl StoneButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.facing, self.face, )) {
                ( true, Facing::North, Face::Floor, ) => 5926,
                ( false, Facing::North, Face::Floor, ) => 5927,
                ( true, Facing::South, Face::Floor, ) => 5928,
                ( false, Facing::South, Face::Floor, ) => 5929,
                ( true, Facing::West, Face::Floor, ) => 5930,
                ( false, Facing::West, Face::Floor, ) => 5931,
                ( true, Facing::East, Face::Floor, ) => 5932,
                ( false, Facing::East, Face::Floor, ) => 5933,
                ( true, Facing::North, Face::Wall, ) => 5934,
                ( false, Facing::North, Face::Wall, ) => 5935,
                ( true, Facing::South, Face::Wall, ) => 5936,
                ( false, Facing::South, Face::Wall, ) => 5937,
                ( true, Facing::West, Face::Wall, ) => 5938,
                ( false, Facing::West, Face::Wall, ) => 5939,
                ( true, Facing::East, Face::Wall, ) => 5940,
                ( false, Facing::East, Face::Wall, ) => 5941,
                ( true, Facing::North, Face::Ceiling, ) => 5942,
                ( false, Facing::North, Face::Ceiling, ) => 5943,
                ( true, Facing::South, Face::Ceiling, ) => 5944,
                ( false, Facing::South, Face::Ceiling, ) => 5945,
                ( true, Facing::West, Face::Ceiling, ) => 5946,
                ( false, Facing::West, Face::Ceiling, ) => 5947,
                ( true, Facing::East, Face::Ceiling, ) => 5948,
                ( false, Facing::East, Face::Ceiling, ) => 5949,
            })
        }
    }

    impl From<StoneButton> for BlockState {
        #[inline(always)]
        fn from(value : StoneButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StoneButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StoneButton { }

    impl Block for StoneButton {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            facing : Facing::North,
            face : Face::Wall,
        };
    }

}

/// `minecraft:wildflowers` block.
pub mod wildflowers {
    use super::*;

    /// `minecraft:wildflowers` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Wildflowers {
        /// `facing` state.
        pub facing : Facing,
        /// `flower_amount` state.
        pub flower_amount : FlowerAmount,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `flower_amount` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum FlowerAmount {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for FlowerAmount { }
    impl BlockProperty for FlowerAmount { }

    impl Wildflowers {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.flower_amount, )) {
                ( Facing::North, FlowerAmount::N1, ) => 25903,
                ( Facing::North, FlowerAmount::N2, ) => 25904,
                ( Facing::North, FlowerAmount::N3, ) => 25905,
                ( Facing::North, FlowerAmount::N4, ) => 25906,
                ( Facing::South, FlowerAmount::N1, ) => 25907,
                ( Facing::South, FlowerAmount::N2, ) => 25908,
                ( Facing::South, FlowerAmount::N3, ) => 25909,
                ( Facing::South, FlowerAmount::N4, ) => 25910,
                ( Facing::West, FlowerAmount::N1, ) => 25911,
                ( Facing::West, FlowerAmount::N2, ) => 25912,
                ( Facing::West, FlowerAmount::N3, ) => 25913,
                ( Facing::West, FlowerAmount::N4, ) => 25914,
                ( Facing::East, FlowerAmount::N1, ) => 25915,
                ( Facing::East, FlowerAmount::N2, ) => 25916,
                ( Facing::East, FlowerAmount::N3, ) => 25917,
                ( Facing::East, FlowerAmount::N4, ) => 25918,
            })
        }
    }

    impl From<Wildflowers> for BlockState {
        #[inline(always)]
        fn from(value : Wildflowers) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Wildflowers {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Wildflowers { }

    impl Block for Wildflowers {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            flower_amount : FlowerAmount::N1,
        };
    }

}

/// `minecraft:crimson_hanging_sign` block.
pub mod crimson_hanging_sign {
    use super::*;

    /// `minecraft:crimson_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonHangingSign {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `attached` state.
        pub attached : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl CrimsonHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.attached, self.waterlogged, )) {
                ( Rotation::N0, true, true, ) => 5450,
                ( Rotation::N0, true, false, ) => 5451,
                ( Rotation::N1, true, true, ) => 5452,
                ( Rotation::N1, true, false, ) => 5453,
                ( Rotation::N2, true, true, ) => 5454,
                ( Rotation::N2, true, false, ) => 5455,
                ( Rotation::N3, true, true, ) => 5456,
                ( Rotation::N3, true, false, ) => 5457,
                ( Rotation::N4, true, true, ) => 5458,
                ( Rotation::N4, true, false, ) => 5459,
                ( Rotation::N5, true, true, ) => 5460,
                ( Rotation::N5, true, false, ) => 5461,
                ( Rotation::N6, true, true, ) => 5462,
                ( Rotation::N6, true, false, ) => 5463,
                ( Rotation::N7, true, true, ) => 5464,
                ( Rotation::N7, true, false, ) => 5465,
                ( Rotation::N8, true, true, ) => 5466,
                ( Rotation::N8, true, false, ) => 5467,
                ( Rotation::N9, true, true, ) => 5468,
                ( Rotation::N9, true, false, ) => 5469,
                ( Rotation::N10, true, true, ) => 5470,
                ( Rotation::N10, true, false, ) => 5471,
                ( Rotation::N11, true, true, ) => 5472,
                ( Rotation::N11, true, false, ) => 5473,
                ( Rotation::N12, true, true, ) => 5474,
                ( Rotation::N12, true, false, ) => 5475,
                ( Rotation::N13, true, true, ) => 5476,
                ( Rotation::N13, true, false, ) => 5477,
                ( Rotation::N14, true, true, ) => 5478,
                ( Rotation::N14, true, false, ) => 5479,
                ( Rotation::N15, true, true, ) => 5480,
                ( Rotation::N15, true, false, ) => 5481,
                ( Rotation::N0, false, true, ) => 5482,
                ( Rotation::N0, false, false, ) => 5483,
                ( Rotation::N1, false, true, ) => 5484,
                ( Rotation::N1, false, false, ) => 5485,
                ( Rotation::N2, false, true, ) => 5486,
                ( Rotation::N2, false, false, ) => 5487,
                ( Rotation::N3, false, true, ) => 5488,
                ( Rotation::N3, false, false, ) => 5489,
                ( Rotation::N4, false, true, ) => 5490,
                ( Rotation::N4, false, false, ) => 5491,
                ( Rotation::N5, false, true, ) => 5492,
                ( Rotation::N5, false, false, ) => 5493,
                ( Rotation::N6, false, true, ) => 5494,
                ( Rotation::N6, false, false, ) => 5495,
                ( Rotation::N7, false, true, ) => 5496,
                ( Rotation::N7, false, false, ) => 5497,
                ( Rotation::N8, false, true, ) => 5498,
                ( Rotation::N8, false, false, ) => 5499,
                ( Rotation::N9, false, true, ) => 5500,
                ( Rotation::N9, false, false, ) => 5501,
                ( Rotation::N10, false, true, ) => 5502,
                ( Rotation::N10, false, false, ) => 5503,
                ( Rotation::N11, false, true, ) => 5504,
                ( Rotation::N11, false, false, ) => 5505,
                ( Rotation::N12, false, true, ) => 5506,
                ( Rotation::N12, false, false, ) => 5507,
                ( Rotation::N13, false, true, ) => 5508,
                ( Rotation::N13, false, false, ) => 5509,
                ( Rotation::N14, false, true, ) => 5510,
                ( Rotation::N14, false, false, ) => 5511,
                ( Rotation::N15, false, true, ) => 5512,
                ( Rotation::N15, false, false, ) => 5513,
            })
        }
    }

    impl From<CrimsonHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonHangingSign { }

    impl Block for CrimsonHangingSign {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            attached : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:orange_shulker_box` block.
pub mod orange_shulker_box {
    use super::*;

    /// `minecraft:orange_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl OrangeShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13597,
                ( Facing::East, ) => 13598,
                ( Facing::South, ) => 13599,
                ( Facing::West, ) => 13600,
                ( Facing::Up, ) => 13601,
                ( Facing::Down, ) => 13602,
            })
        }
    }

    impl From<OrangeShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : OrangeShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeShulkerBox { }

    impl Block for OrangeShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:fire_coral_wall_fan` block.
pub mod fire_coral_wall_fan {
    use super::*;

    /// `minecraft:fire_coral_wall_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct FireCoralWallFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl FireCoralWallFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 13972,
                ( false, Facing::North, ) => 13973,
                ( true, Facing::South, ) => 13974,
                ( false, Facing::South, ) => 13975,
                ( true, Facing::West, ) => 13976,
                ( false, Facing::West, ) => 13977,
                ( true, Facing::East, ) => 13978,
                ( false, Facing::East, ) => 13979,
            })
        }
    }

    impl From<FireCoralWallFan> for BlockState {
        #[inline(always)]
        fn from(value : FireCoralWallFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for FireCoralWallFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for FireCoralWallFan { }

    impl Block for FireCoralWallFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
            facing : Facing::North,
        };
    }

}

/// `minecraft:magenta_stained_glass` block.
pub mod magenta_stained_glass {
    use super::*;

    /// `minecraft:magenta_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaStainedGlass;

    impl MagentaStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6126)
        }
    }

    impl From<MagentaStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : MagentaStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaStainedGlass { }

    impl Block for MagentaStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:brown_candle` block.
pub mod brown_candle {
    use super::*;

    /// `minecraft:brown_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownCandle {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `candles` state.
        pub candles : Candles,
        /// `lit` state.
        pub lit : bool,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl BrownCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.candles, self.lit, )) {
                ( true, Candles::N1, true, ) => 21993,
                ( false, Candles::N1, true, ) => 21994,
                ( true, Candles::N1, false, ) => 21995,
                ( false, Candles::N1, false, ) => 21996,
                ( true, Candles::N2, true, ) => 21997,
                ( false, Candles::N2, true, ) => 21998,
                ( true, Candles::N2, false, ) => 21999,
                ( false, Candles::N2, false, ) => 22000,
                ( true, Candles::N3, true, ) => 22001,
                ( false, Candles::N3, true, ) => 22002,
                ( true, Candles::N3, false, ) => 22003,
                ( false, Candles::N3, false, ) => 22004,
                ( true, Candles::N4, true, ) => 22005,
                ( false, Candles::N4, true, ) => 22006,
                ( true, Candles::N4, false, ) => 22007,
                ( false, Candles::N4, false, ) => 22008,
            })
        }
    }

    impl From<BrownCandle> for BlockState {
        #[inline(always)]
        fn from(value : BrownCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownCandle { }

    impl Block for BrownCandle {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            candles : Candles::N1,
            lit : false,
        };
    }

}

/// `minecraft:crafter` block.
pub mod crafter {
    use super::*;

    /// `minecraft:crafter` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Crafter {
        /// `orientation` state.
        pub orientation : Orientation,
        /// `triggered` state.
        pub triggered : bool,
        /// `crafting` state.
        pub crafting : bool,
    }

    /// `orientation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Orientation {
        /// `down_east` variant.
        DownEast,
        /// `down_north` variant.
        DownNorth,
        /// `down_south` variant.
        DownSouth,
        /// `down_west` variant.
        DownWest,
        /// `up_east` variant.
        UpEast,
        /// `up_north` variant.
        UpNorth,
        /// `up_south` variant.
        UpSouth,
        /// `up_west` variant.
        UpWest,
        /// `west_up` variant.
        WestUp,
        /// `east_up` variant.
        EastUp,
        /// `north_up` variant.
        NorthUp,
        /// `south_up` variant.
        SouthUp,
    }
    impl crate::Sealed for Orientation { }
    impl BlockProperty for Orientation { }

    impl Crafter {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.orientation, self.triggered, self.crafting, )) {
                ( Orientation::DownEast, true, true, ) => 27682,
                ( Orientation::DownEast, false, true, ) => 27683,
                ( Orientation::DownNorth, true, true, ) => 27684,
                ( Orientation::DownNorth, false, true, ) => 27685,
                ( Orientation::DownSouth, true, true, ) => 27686,
                ( Orientation::DownSouth, false, true, ) => 27687,
                ( Orientation::DownWest, true, true, ) => 27688,
                ( Orientation::DownWest, false, true, ) => 27689,
                ( Orientation::UpEast, true, true, ) => 27690,
                ( Orientation::UpEast, false, true, ) => 27691,
                ( Orientation::UpNorth, true, true, ) => 27692,
                ( Orientation::UpNorth, false, true, ) => 27693,
                ( Orientation::UpSouth, true, true, ) => 27694,
                ( Orientation::UpSouth, false, true, ) => 27695,
                ( Orientation::UpWest, true, true, ) => 27696,
                ( Orientation::UpWest, false, true, ) => 27697,
                ( Orientation::WestUp, true, true, ) => 27698,
                ( Orientation::WestUp, false, true, ) => 27699,
                ( Orientation::EastUp, true, true, ) => 27700,
                ( Orientation::EastUp, false, true, ) => 27701,
                ( Orientation::NorthUp, true, true, ) => 27702,
                ( Orientation::NorthUp, false, true, ) => 27703,
                ( Orientation::SouthUp, true, true, ) => 27704,
                ( Orientation::SouthUp, false, true, ) => 27705,
                ( Orientation::DownEast, true, false, ) => 27706,
                ( Orientation::DownEast, false, false, ) => 27707,
                ( Orientation::DownNorth, true, false, ) => 27708,
                ( Orientation::DownNorth, false, false, ) => 27709,
                ( Orientation::DownSouth, true, false, ) => 27710,
                ( Orientation::DownSouth, false, false, ) => 27711,
                ( Orientation::DownWest, true, false, ) => 27712,
                ( Orientation::DownWest, false, false, ) => 27713,
                ( Orientation::UpEast, true, false, ) => 27714,
                ( Orientation::UpEast, false, false, ) => 27715,
                ( Orientation::UpNorth, true, false, ) => 27716,
                ( Orientation::UpNorth, false, false, ) => 27717,
                ( Orientation::UpSouth, true, false, ) => 27718,
                ( Orientation::UpSouth, false, false, ) => 27719,
                ( Orientation::UpWest, true, false, ) => 27720,
                ( Orientation::UpWest, false, false, ) => 27721,
                ( Orientation::WestUp, true, false, ) => 27722,
                ( Orientation::WestUp, false, false, ) => 27723,
                ( Orientation::EastUp, true, false, ) => 27724,
                ( Orientation::EastUp, false, false, ) => 27725,
                ( Orientation::NorthUp, true, false, ) => 27726,
                ( Orientation::NorthUp, false, false, ) => 27727,
                ( Orientation::SouthUp, true, false, ) => 27728,
                ( Orientation::SouthUp, false, false, ) => 27729,
            })
        }
    }

    impl From<Crafter> for BlockState {
        #[inline(always)]
        fn from(value : Crafter) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Crafter {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Crafter { }

    impl Block for Crafter {
        const DEFAULT_STATE : Self = Self {
            orientation : Orientation::NorthUp,
            triggered : false,
            crafting : false,
        };
    }

}

/// `minecraft:large_amethyst_bud` block.
pub mod large_amethyst_bud {
    use super::*;

    /// `minecraft:large_amethyst_bud` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LargeAmethystBud {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl LargeAmethystBud {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 22105,
                ( false, Facing::North, ) => 22106,
                ( true, Facing::East, ) => 22107,
                ( false, Facing::East, ) => 22108,
                ( true, Facing::South, ) => 22109,
                ( false, Facing::South, ) => 22110,
                ( true, Facing::West, ) => 22111,
                ( false, Facing::West, ) => 22112,
                ( true, Facing::Up, ) => 22113,
                ( false, Facing::Up, ) => 22114,
                ( true, Facing::Down, ) => 22115,
                ( false, Facing::Down, ) => 22116,
            })
        }
    }

    impl From<LargeAmethystBud> for BlockState {
        #[inline(always)]
        fn from(value : LargeAmethystBud) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LargeAmethystBud {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LargeAmethystBud { }

    impl Block for LargeAmethystBud {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::Up,
        };
    }

}

/// `minecraft:kelp` block.
pub mod kelp {
    use super::*;

    /// `minecraft:kelp` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Kelp {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
        /// `16` variant.
        N16,
        /// `17` variant.
        N17,
        /// `18` variant.
        N18,
        /// `19` variant.
        N19,
        /// `20` variant.
        N20,
        /// `21` variant.
        N21,
        /// `22` variant.
        N22,
        /// `23` variant.
        N23,
        /// `24` variant.
        N24,
        /// `25` variant.
        N25,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl Kelp {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 13783,
                ( Age::N1, ) => 13784,
                ( Age::N2, ) => 13785,
                ( Age::N3, ) => 13786,
                ( Age::N4, ) => 13787,
                ( Age::N5, ) => 13788,
                ( Age::N6, ) => 13789,
                ( Age::N7, ) => 13790,
                ( Age::N8, ) => 13791,
                ( Age::N9, ) => 13792,
                ( Age::N10, ) => 13793,
                ( Age::N11, ) => 13794,
                ( Age::N12, ) => 13795,
                ( Age::N13, ) => 13796,
                ( Age::N14, ) => 13797,
                ( Age::N15, ) => 13798,
                ( Age::N16, ) => 13799,
                ( Age::N17, ) => 13800,
                ( Age::N18, ) => 13801,
                ( Age::N19, ) => 13802,
                ( Age::N20, ) => 13803,
                ( Age::N21, ) => 13804,
                ( Age::N22, ) => 13805,
                ( Age::N23, ) => 13806,
                ( Age::N24, ) => 13807,
                ( Age::N25, ) => 13808,
            })
        }
    }

    impl From<Kelp> for BlockState {
        #[inline(always)]
        fn from(value : Kelp) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Kelp {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Kelp { }

    impl Block for Kelp {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:jungle_planks` block.
pub mod jungle_planks {
    use super::*;

    /// `minecraft:jungle_planks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JunglePlanks;

    impl JunglePlanks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(18)
        }
    }

    impl From<JunglePlanks> for BlockState {
        #[inline(always)]
        fn from(value : JunglePlanks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JunglePlanks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JunglePlanks { }

    impl Block for JunglePlanks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:acacia_pressure_plate` block.
pub mod acacia_pressure_plate {
    use super::*;

    /// `minecraft:acacia_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaPressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl AcaciaPressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 5900,
                ( false, ) => 5901,
            })
        }
    }

    impl From<AcaciaPressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaPressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaPressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaPressurePlate { }

    impl Block for AcaciaPressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:oak_log` block.
pub mod oak_log {
    use super::*;

    /// `minecraft:oak_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl OakLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 136,
                ( Axis::Y, ) => 137,
                ( Axis::Z, ) => 138,
            })
        }
    }

    impl From<OakLog> for BlockState {
        #[inline(always)]
        fn from(value : OakLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakLog { }

    impl Block for OakLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:acacia_hanging_sign` block.
pub mod acacia_hanging_sign {
    use super::*;

    /// `minecraft:acacia_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaHangingSign {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `attached` state.
        pub attached : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl AcaciaHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.attached, self.waterlogged, )) {
                ( Rotation::N0, true, true, ) => 5130,
                ( Rotation::N0, true, false, ) => 5131,
                ( Rotation::N1, true, true, ) => 5132,
                ( Rotation::N1, true, false, ) => 5133,
                ( Rotation::N2, true, true, ) => 5134,
                ( Rotation::N2, true, false, ) => 5135,
                ( Rotation::N3, true, true, ) => 5136,
                ( Rotation::N3, true, false, ) => 5137,
                ( Rotation::N4, true, true, ) => 5138,
                ( Rotation::N4, true, false, ) => 5139,
                ( Rotation::N5, true, true, ) => 5140,
                ( Rotation::N5, true, false, ) => 5141,
                ( Rotation::N6, true, true, ) => 5142,
                ( Rotation::N6, true, false, ) => 5143,
                ( Rotation::N7, true, true, ) => 5144,
                ( Rotation::N7, true, false, ) => 5145,
                ( Rotation::N8, true, true, ) => 5146,
                ( Rotation::N8, true, false, ) => 5147,
                ( Rotation::N9, true, true, ) => 5148,
                ( Rotation::N9, true, false, ) => 5149,
                ( Rotation::N10, true, true, ) => 5150,
                ( Rotation::N10, true, false, ) => 5151,
                ( Rotation::N11, true, true, ) => 5152,
                ( Rotation::N11, true, false, ) => 5153,
                ( Rotation::N12, true, true, ) => 5154,
                ( Rotation::N12, true, false, ) => 5155,
                ( Rotation::N13, true, true, ) => 5156,
                ( Rotation::N13, true, false, ) => 5157,
                ( Rotation::N14, true, true, ) => 5158,
                ( Rotation::N14, true, false, ) => 5159,
                ( Rotation::N15, true, true, ) => 5160,
                ( Rotation::N15, true, false, ) => 5161,
                ( Rotation::N0, false, true, ) => 5162,
                ( Rotation::N0, false, false, ) => 5163,
                ( Rotation::N1, false, true, ) => 5164,
                ( Rotation::N1, false, false, ) => 5165,
                ( Rotation::N2, false, true, ) => 5166,
                ( Rotation::N2, false, false, ) => 5167,
                ( Rotation::N3, false, true, ) => 5168,
                ( Rotation::N3, false, false, ) => 5169,
                ( Rotation::N4, false, true, ) => 5170,
                ( Rotation::N4, false, false, ) => 5171,
                ( Rotation::N5, false, true, ) => 5172,
                ( Rotation::N5, false, false, ) => 5173,
                ( Rotation::N6, false, true, ) => 5174,
                ( Rotation::N6, false, false, ) => 5175,
                ( Rotation::N7, false, true, ) => 5176,
                ( Rotation::N7, false, false, ) => 5177,
                ( Rotation::N8, false, true, ) => 5178,
                ( Rotation::N8, false, false, ) => 5179,
                ( Rotation::N9, false, true, ) => 5180,
                ( Rotation::N9, false, false, ) => 5181,
                ( Rotation::N10, false, true, ) => 5182,
                ( Rotation::N10, false, false, ) => 5183,
                ( Rotation::N11, false, true, ) => 5184,
                ( Rotation::N11, false, false, ) => 5185,
                ( Rotation::N12, false, true, ) => 5186,
                ( Rotation::N12, false, false, ) => 5187,
                ( Rotation::N13, false, true, ) => 5188,
                ( Rotation::N13, false, false, ) => 5189,
                ( Rotation::N14, false, true, ) => 5190,
                ( Rotation::N14, false, false, ) => 5191,
                ( Rotation::N15, false, true, ) => 5192,
                ( Rotation::N15, false, false, ) => 5193,
            })
        }
    }

    impl From<AcaciaHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaHangingSign { }

    impl Block for AcaciaHangingSign {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            attached : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:pale_oak_door` block.
pub mod pale_oak_door {
    use super::*;

    /// `minecraft:pale_oak_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakDoor {
        /// `facing` state.
        pub facing : Facing,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
        /// `half` state.
        pub half : Half,
        /// `hinge` state.
        pub hinge : Hinge,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    impl PaleOakDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.open, self.powered, self.half, self.hinge, )) {
                ( Facing::North, true, true, Half::Upper, Hinge::Left, ) => 13165,
                ( Facing::North, true, false, Half::Upper, Hinge::Left, ) => 13166,
                ( Facing::North, false, true, Half::Upper, Hinge::Left, ) => 13167,
                ( Facing::North, false, false, Half::Upper, Hinge::Left, ) => 13168,
                ( Facing::North, true, true, Half::Upper, Hinge::Right, ) => 13169,
                ( Facing::North, true, false, Half::Upper, Hinge::Right, ) => 13170,
                ( Facing::North, false, true, Half::Upper, Hinge::Right, ) => 13171,
                ( Facing::North, false, false, Half::Upper, Hinge::Right, ) => 13172,
                ( Facing::North, true, true, Half::Lower, Hinge::Left, ) => 13173,
                ( Facing::North, true, false, Half::Lower, Hinge::Left, ) => 13174,
                ( Facing::North, false, true, Half::Lower, Hinge::Left, ) => 13175,
                ( Facing::North, false, false, Half::Lower, Hinge::Left, ) => 13176,
                ( Facing::North, true, true, Half::Lower, Hinge::Right, ) => 13177,
                ( Facing::North, true, false, Half::Lower, Hinge::Right, ) => 13178,
                ( Facing::North, false, true, Half::Lower, Hinge::Right, ) => 13179,
                ( Facing::North, false, false, Half::Lower, Hinge::Right, ) => 13180,
                ( Facing::South, true, true, Half::Upper, Hinge::Left, ) => 13181,
                ( Facing::South, true, false, Half::Upper, Hinge::Left, ) => 13182,
                ( Facing::South, false, true, Half::Upper, Hinge::Left, ) => 13183,
                ( Facing::South, false, false, Half::Upper, Hinge::Left, ) => 13184,
                ( Facing::South, true, true, Half::Upper, Hinge::Right, ) => 13185,
                ( Facing::South, true, false, Half::Upper, Hinge::Right, ) => 13186,
                ( Facing::South, false, true, Half::Upper, Hinge::Right, ) => 13187,
                ( Facing::South, false, false, Half::Upper, Hinge::Right, ) => 13188,
                ( Facing::South, true, true, Half::Lower, Hinge::Left, ) => 13189,
                ( Facing::South, true, false, Half::Lower, Hinge::Left, ) => 13190,
                ( Facing::South, false, true, Half::Lower, Hinge::Left, ) => 13191,
                ( Facing::South, false, false, Half::Lower, Hinge::Left, ) => 13192,
                ( Facing::South, true, true, Half::Lower, Hinge::Right, ) => 13193,
                ( Facing::South, true, false, Half::Lower, Hinge::Right, ) => 13194,
                ( Facing::South, false, true, Half::Lower, Hinge::Right, ) => 13195,
                ( Facing::South, false, false, Half::Lower, Hinge::Right, ) => 13196,
                ( Facing::West, true, true, Half::Upper, Hinge::Left, ) => 13197,
                ( Facing::West, true, false, Half::Upper, Hinge::Left, ) => 13198,
                ( Facing::West, false, true, Half::Upper, Hinge::Left, ) => 13199,
                ( Facing::West, false, false, Half::Upper, Hinge::Left, ) => 13200,
                ( Facing::West, true, true, Half::Upper, Hinge::Right, ) => 13201,
                ( Facing::West, true, false, Half::Upper, Hinge::Right, ) => 13202,
                ( Facing::West, false, true, Half::Upper, Hinge::Right, ) => 13203,
                ( Facing::West, false, false, Half::Upper, Hinge::Right, ) => 13204,
                ( Facing::West, true, true, Half::Lower, Hinge::Left, ) => 13205,
                ( Facing::West, true, false, Half::Lower, Hinge::Left, ) => 13206,
                ( Facing::West, false, true, Half::Lower, Hinge::Left, ) => 13207,
                ( Facing::West, false, false, Half::Lower, Hinge::Left, ) => 13208,
                ( Facing::West, true, true, Half::Lower, Hinge::Right, ) => 13209,
                ( Facing::West, true, false, Half::Lower, Hinge::Right, ) => 13210,
                ( Facing::West, false, true, Half::Lower, Hinge::Right, ) => 13211,
                ( Facing::West, false, false, Half::Lower, Hinge::Right, ) => 13212,
                ( Facing::East, true, true, Half::Upper, Hinge::Left, ) => 13213,
                ( Facing::East, true, false, Half::Upper, Hinge::Left, ) => 13214,
                ( Facing::East, false, true, Half::Upper, Hinge::Left, ) => 13215,
                ( Facing::East, false, false, Half::Upper, Hinge::Left, ) => 13216,
                ( Facing::East, true, true, Half::Upper, Hinge::Right, ) => 13217,
                ( Facing::East, true, false, Half::Upper, Hinge::Right, ) => 13218,
                ( Facing::East, false, true, Half::Upper, Hinge::Right, ) => 13219,
                ( Facing::East, false, false, Half::Upper, Hinge::Right, ) => 13220,
                ( Facing::East, true, true, Half::Lower, Hinge::Left, ) => 13221,
                ( Facing::East, true, false, Half::Lower, Hinge::Left, ) => 13222,
                ( Facing::East, false, true, Half::Lower, Hinge::Left, ) => 13223,
                ( Facing::East, false, false, Half::Lower, Hinge::Left, ) => 13224,
                ( Facing::East, true, true, Half::Lower, Hinge::Right, ) => 13225,
                ( Facing::East, true, false, Half::Lower, Hinge::Right, ) => 13226,
                ( Facing::East, false, true, Half::Lower, Hinge::Right, ) => 13227,
                ( Facing::East, false, false, Half::Lower, Hinge::Right, ) => 13228,
            })
        }
    }

    impl From<PaleOakDoor> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakDoor { }

    impl Block for PaleOakDoor {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            open : false,
            powered : false,
            half : Half::Lower,
            hinge : Hinge::Left,
        };
    }

}

/// `minecraft:exposed_cut_copper` block.
pub mod exposed_cut_copper {
    use super::*;

    /// `minecraft:exposed_cut_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ExposedCutCopper;

    impl ExposedCutCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24006)
        }
    }

    impl From<ExposedCutCopper> for BlockState {
        #[inline(always)]
        fn from(value : ExposedCutCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ExposedCutCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ExposedCutCopper { }

    impl Block for ExposedCutCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:lime_candle_cake` block.
pub mod lime_candle_cake {
    use super::*;

    /// `minecraft:lime_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl LimeCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22069,
                ( false, ) => 22070,
            })
        }
    }

    impl From<LimeCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : LimeCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeCandleCake { }

    impl Block for LimeCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:mossy_stone_brick_stairs` block.
pub mod mossy_stone_brick_stairs {
    use super::*;

    /// `minecraft:mossy_stone_brick_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MossyStoneBrickStairs {
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl MossyStoneBrickStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.shape, self.waterlogged, self.facing, )) {
                ( Half::Top, Shape::Straight, true, Facing::North, ) => 14177,
                ( Half::Top, Shape::Straight, false, Facing::North, ) => 14178,
                ( Half::Top, Shape::InnerLeft, true, Facing::North, ) => 14179,
                ( Half::Top, Shape::InnerLeft, false, Facing::North, ) => 14180,
                ( Half::Top, Shape::InnerRight, true, Facing::North, ) => 14181,
                ( Half::Top, Shape::InnerRight, false, Facing::North, ) => 14182,
                ( Half::Top, Shape::OuterLeft, true, Facing::North, ) => 14183,
                ( Half::Top, Shape::OuterLeft, false, Facing::North, ) => 14184,
                ( Half::Top, Shape::OuterRight, true, Facing::North, ) => 14185,
                ( Half::Top, Shape::OuterRight, false, Facing::North, ) => 14186,
                ( Half::Bottom, Shape::Straight, true, Facing::North, ) => 14187,
                ( Half::Bottom, Shape::Straight, false, Facing::North, ) => 14188,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::North, ) => 14189,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::North, ) => 14190,
                ( Half::Bottom, Shape::InnerRight, true, Facing::North, ) => 14191,
                ( Half::Bottom, Shape::InnerRight, false, Facing::North, ) => 14192,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::North, ) => 14193,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::North, ) => 14194,
                ( Half::Bottom, Shape::OuterRight, true, Facing::North, ) => 14195,
                ( Half::Bottom, Shape::OuterRight, false, Facing::North, ) => 14196,
                ( Half::Top, Shape::Straight, true, Facing::South, ) => 14197,
                ( Half::Top, Shape::Straight, false, Facing::South, ) => 14198,
                ( Half::Top, Shape::InnerLeft, true, Facing::South, ) => 14199,
                ( Half::Top, Shape::InnerLeft, false, Facing::South, ) => 14200,
                ( Half::Top, Shape::InnerRight, true, Facing::South, ) => 14201,
                ( Half::Top, Shape::InnerRight, false, Facing::South, ) => 14202,
                ( Half::Top, Shape::OuterLeft, true, Facing::South, ) => 14203,
                ( Half::Top, Shape::OuterLeft, false, Facing::South, ) => 14204,
                ( Half::Top, Shape::OuterRight, true, Facing::South, ) => 14205,
                ( Half::Top, Shape::OuterRight, false, Facing::South, ) => 14206,
                ( Half::Bottom, Shape::Straight, true, Facing::South, ) => 14207,
                ( Half::Bottom, Shape::Straight, false, Facing::South, ) => 14208,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::South, ) => 14209,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::South, ) => 14210,
                ( Half::Bottom, Shape::InnerRight, true, Facing::South, ) => 14211,
                ( Half::Bottom, Shape::InnerRight, false, Facing::South, ) => 14212,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::South, ) => 14213,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::South, ) => 14214,
                ( Half::Bottom, Shape::OuterRight, true, Facing::South, ) => 14215,
                ( Half::Bottom, Shape::OuterRight, false, Facing::South, ) => 14216,
                ( Half::Top, Shape::Straight, true, Facing::West, ) => 14217,
                ( Half::Top, Shape::Straight, false, Facing::West, ) => 14218,
                ( Half::Top, Shape::InnerLeft, true, Facing::West, ) => 14219,
                ( Half::Top, Shape::InnerLeft, false, Facing::West, ) => 14220,
                ( Half::Top, Shape::InnerRight, true, Facing::West, ) => 14221,
                ( Half::Top, Shape::InnerRight, false, Facing::West, ) => 14222,
                ( Half::Top, Shape::OuterLeft, true, Facing::West, ) => 14223,
                ( Half::Top, Shape::OuterLeft, false, Facing::West, ) => 14224,
                ( Half::Top, Shape::OuterRight, true, Facing::West, ) => 14225,
                ( Half::Top, Shape::OuterRight, false, Facing::West, ) => 14226,
                ( Half::Bottom, Shape::Straight, true, Facing::West, ) => 14227,
                ( Half::Bottom, Shape::Straight, false, Facing::West, ) => 14228,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::West, ) => 14229,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::West, ) => 14230,
                ( Half::Bottom, Shape::InnerRight, true, Facing::West, ) => 14231,
                ( Half::Bottom, Shape::InnerRight, false, Facing::West, ) => 14232,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::West, ) => 14233,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::West, ) => 14234,
                ( Half::Bottom, Shape::OuterRight, true, Facing::West, ) => 14235,
                ( Half::Bottom, Shape::OuterRight, false, Facing::West, ) => 14236,
                ( Half::Top, Shape::Straight, true, Facing::East, ) => 14237,
                ( Half::Top, Shape::Straight, false, Facing::East, ) => 14238,
                ( Half::Top, Shape::InnerLeft, true, Facing::East, ) => 14239,
                ( Half::Top, Shape::InnerLeft, false, Facing::East, ) => 14240,
                ( Half::Top, Shape::InnerRight, true, Facing::East, ) => 14241,
                ( Half::Top, Shape::InnerRight, false, Facing::East, ) => 14242,
                ( Half::Top, Shape::OuterLeft, true, Facing::East, ) => 14243,
                ( Half::Top, Shape::OuterLeft, false, Facing::East, ) => 14244,
                ( Half::Top, Shape::OuterRight, true, Facing::East, ) => 14245,
                ( Half::Top, Shape::OuterRight, false, Facing::East, ) => 14246,
                ( Half::Bottom, Shape::Straight, true, Facing::East, ) => 14247,
                ( Half::Bottom, Shape::Straight, false, Facing::East, ) => 14248,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::East, ) => 14249,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::East, ) => 14250,
                ( Half::Bottom, Shape::InnerRight, true, Facing::East, ) => 14251,
                ( Half::Bottom, Shape::InnerRight, false, Facing::East, ) => 14252,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::East, ) => 14253,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::East, ) => 14254,
                ( Half::Bottom, Shape::OuterRight, true, Facing::East, ) => 14255,
                ( Half::Bottom, Shape::OuterRight, false, Facing::East, ) => 14256,
            })
        }
    }

    impl From<MossyStoneBrickStairs> for BlockState {
        #[inline(always)]
        fn from(value : MossyStoneBrickStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MossyStoneBrickStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MossyStoneBrickStairs { }

    impl Block for MossyStoneBrickStairs {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            shape : Shape::Straight,
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:sculk_sensor` block.
pub mod sculk_sensor {
    use super::*;

    /// `minecraft:sculk_sensor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SculkSensor {
        /// `sculk_sensor_phase` state.
        pub sculk_sensor_phase : SculkSensorPhase,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `power` state.
        pub power : Power,
    }

    /// `sculk_sensor_phase` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum SculkSensorPhase {
        /// `inactive` variant.
        Inactive,
        /// `active` variant.
        Active,
        /// `cooldown` variant.
        Cooldown,
    }
    impl crate::Sealed for SculkSensorPhase { }
    impl BlockProperty for SculkSensorPhase { }

    /// `power` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Power {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Power { }
    impl BlockProperty for Power { }

    impl SculkSensor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.sculk_sensor_phase, self.waterlogged, self.power, )) {
                ( SculkSensorPhase::Inactive, true, Power::N0, ) => 23379,
                ( SculkSensorPhase::Inactive, false, Power::N0, ) => 23380,
                ( SculkSensorPhase::Active, true, Power::N0, ) => 23381,
                ( SculkSensorPhase::Active, false, Power::N0, ) => 23382,
                ( SculkSensorPhase::Cooldown, true, Power::N0, ) => 23383,
                ( SculkSensorPhase::Cooldown, false, Power::N0, ) => 23384,
                ( SculkSensorPhase::Inactive, true, Power::N1, ) => 23385,
                ( SculkSensorPhase::Inactive, false, Power::N1, ) => 23386,
                ( SculkSensorPhase::Active, true, Power::N1, ) => 23387,
                ( SculkSensorPhase::Active, false, Power::N1, ) => 23388,
                ( SculkSensorPhase::Cooldown, true, Power::N1, ) => 23389,
                ( SculkSensorPhase::Cooldown, false, Power::N1, ) => 23390,
                ( SculkSensorPhase::Inactive, true, Power::N2, ) => 23391,
                ( SculkSensorPhase::Inactive, false, Power::N2, ) => 23392,
                ( SculkSensorPhase::Active, true, Power::N2, ) => 23393,
                ( SculkSensorPhase::Active, false, Power::N2, ) => 23394,
                ( SculkSensorPhase::Cooldown, true, Power::N2, ) => 23395,
                ( SculkSensorPhase::Cooldown, false, Power::N2, ) => 23396,
                ( SculkSensorPhase::Inactive, true, Power::N3, ) => 23397,
                ( SculkSensorPhase::Inactive, false, Power::N3, ) => 23398,
                ( SculkSensorPhase::Active, true, Power::N3, ) => 23399,
                ( SculkSensorPhase::Active, false, Power::N3, ) => 23400,
                ( SculkSensorPhase::Cooldown, true, Power::N3, ) => 23401,
                ( SculkSensorPhase::Cooldown, false, Power::N3, ) => 23402,
                ( SculkSensorPhase::Inactive, true, Power::N4, ) => 23403,
                ( SculkSensorPhase::Inactive, false, Power::N4, ) => 23404,
                ( SculkSensorPhase::Active, true, Power::N4, ) => 23405,
                ( SculkSensorPhase::Active, false, Power::N4, ) => 23406,
                ( SculkSensorPhase::Cooldown, true, Power::N4, ) => 23407,
                ( SculkSensorPhase::Cooldown, false, Power::N4, ) => 23408,
                ( SculkSensorPhase::Inactive, true, Power::N5, ) => 23409,
                ( SculkSensorPhase::Inactive, false, Power::N5, ) => 23410,
                ( SculkSensorPhase::Active, true, Power::N5, ) => 23411,
                ( SculkSensorPhase::Active, false, Power::N5, ) => 23412,
                ( SculkSensorPhase::Cooldown, true, Power::N5, ) => 23413,
                ( SculkSensorPhase::Cooldown, false, Power::N5, ) => 23414,
                ( SculkSensorPhase::Inactive, true, Power::N6, ) => 23415,
                ( SculkSensorPhase::Inactive, false, Power::N6, ) => 23416,
                ( SculkSensorPhase::Active, true, Power::N6, ) => 23417,
                ( SculkSensorPhase::Active, false, Power::N6, ) => 23418,
                ( SculkSensorPhase::Cooldown, true, Power::N6, ) => 23419,
                ( SculkSensorPhase::Cooldown, false, Power::N6, ) => 23420,
                ( SculkSensorPhase::Inactive, true, Power::N7, ) => 23421,
                ( SculkSensorPhase::Inactive, false, Power::N7, ) => 23422,
                ( SculkSensorPhase::Active, true, Power::N7, ) => 23423,
                ( SculkSensorPhase::Active, false, Power::N7, ) => 23424,
                ( SculkSensorPhase::Cooldown, true, Power::N7, ) => 23425,
                ( SculkSensorPhase::Cooldown, false, Power::N7, ) => 23426,
                ( SculkSensorPhase::Inactive, true, Power::N8, ) => 23427,
                ( SculkSensorPhase::Inactive, false, Power::N8, ) => 23428,
                ( SculkSensorPhase::Active, true, Power::N8, ) => 23429,
                ( SculkSensorPhase::Active, false, Power::N8, ) => 23430,
                ( SculkSensorPhase::Cooldown, true, Power::N8, ) => 23431,
                ( SculkSensorPhase::Cooldown, false, Power::N8, ) => 23432,
                ( SculkSensorPhase::Inactive, true, Power::N9, ) => 23433,
                ( SculkSensorPhase::Inactive, false, Power::N9, ) => 23434,
                ( SculkSensorPhase::Active, true, Power::N9, ) => 23435,
                ( SculkSensorPhase::Active, false, Power::N9, ) => 23436,
                ( SculkSensorPhase::Cooldown, true, Power::N9, ) => 23437,
                ( SculkSensorPhase::Cooldown, false, Power::N9, ) => 23438,
                ( SculkSensorPhase::Inactive, true, Power::N10, ) => 23439,
                ( SculkSensorPhase::Inactive, false, Power::N10, ) => 23440,
                ( SculkSensorPhase::Active, true, Power::N10, ) => 23441,
                ( SculkSensorPhase::Active, false, Power::N10, ) => 23442,
                ( SculkSensorPhase::Cooldown, true, Power::N10, ) => 23443,
                ( SculkSensorPhase::Cooldown, false, Power::N10, ) => 23444,
                ( SculkSensorPhase::Inactive, true, Power::N11, ) => 23445,
                ( SculkSensorPhase::Inactive, false, Power::N11, ) => 23446,
                ( SculkSensorPhase::Active, true, Power::N11, ) => 23447,
                ( SculkSensorPhase::Active, false, Power::N11, ) => 23448,
                ( SculkSensorPhase::Cooldown, true, Power::N11, ) => 23449,
                ( SculkSensorPhase::Cooldown, false, Power::N11, ) => 23450,
                ( SculkSensorPhase::Inactive, true, Power::N12, ) => 23451,
                ( SculkSensorPhase::Inactive, false, Power::N12, ) => 23452,
                ( SculkSensorPhase::Active, true, Power::N12, ) => 23453,
                ( SculkSensorPhase::Active, false, Power::N12, ) => 23454,
                ( SculkSensorPhase::Cooldown, true, Power::N12, ) => 23455,
                ( SculkSensorPhase::Cooldown, false, Power::N12, ) => 23456,
                ( SculkSensorPhase::Inactive, true, Power::N13, ) => 23457,
                ( SculkSensorPhase::Inactive, false, Power::N13, ) => 23458,
                ( SculkSensorPhase::Active, true, Power::N13, ) => 23459,
                ( SculkSensorPhase::Active, false, Power::N13, ) => 23460,
                ( SculkSensorPhase::Cooldown, true, Power::N13, ) => 23461,
                ( SculkSensorPhase::Cooldown, false, Power::N13, ) => 23462,
                ( SculkSensorPhase::Inactive, true, Power::N14, ) => 23463,
                ( SculkSensorPhase::Inactive, false, Power::N14, ) => 23464,
                ( SculkSensorPhase::Active, true, Power::N14, ) => 23465,
                ( SculkSensorPhase::Active, false, Power::N14, ) => 23466,
                ( SculkSensorPhase::Cooldown, true, Power::N14, ) => 23467,
                ( SculkSensorPhase::Cooldown, false, Power::N14, ) => 23468,
                ( SculkSensorPhase::Inactive, true, Power::N15, ) => 23469,
                ( SculkSensorPhase::Inactive, false, Power::N15, ) => 23470,
                ( SculkSensorPhase::Active, true, Power::N15, ) => 23471,
                ( SculkSensorPhase::Active, false, Power::N15, ) => 23472,
                ( SculkSensorPhase::Cooldown, true, Power::N15, ) => 23473,
                ( SculkSensorPhase::Cooldown, false, Power::N15, ) => 23474,
            })
        }
    }

    impl From<SculkSensor> for BlockState {
        #[inline(always)]
        fn from(value : SculkSensor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SculkSensor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SculkSensor { }

    impl Block for SculkSensor {
        const DEFAULT_STATE : Self = Self {
            sculk_sensor_phase : SculkSensorPhase::Inactive,
            waterlogged : false,
            power : Power::N0,
        };
    }

}

/// `minecraft:bamboo_mosaic_stairs` block.
pub mod bamboo_mosaic_stairs {
    use super::*;

    /// `minecraft:bamboo_mosaic_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooMosaicStairs {
        /// `half` state.
        pub half : Half,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BambooMosaicStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.waterlogged, self.shape, self.facing, )) {
                ( Half::Top, true, Shape::Straight, Facing::North, ) => 11173,
                ( Half::Top, false, Shape::Straight, Facing::North, ) => 11174,
                ( Half::Top, true, Shape::InnerLeft, Facing::North, ) => 11175,
                ( Half::Top, false, Shape::InnerLeft, Facing::North, ) => 11176,
                ( Half::Top, true, Shape::InnerRight, Facing::North, ) => 11177,
                ( Half::Top, false, Shape::InnerRight, Facing::North, ) => 11178,
                ( Half::Top, true, Shape::OuterLeft, Facing::North, ) => 11179,
                ( Half::Top, false, Shape::OuterLeft, Facing::North, ) => 11180,
                ( Half::Top, true, Shape::OuterRight, Facing::North, ) => 11181,
                ( Half::Top, false, Shape::OuterRight, Facing::North, ) => 11182,
                ( Half::Bottom, true, Shape::Straight, Facing::North, ) => 11183,
                ( Half::Bottom, false, Shape::Straight, Facing::North, ) => 11184,
                ( Half::Bottom, true, Shape::InnerLeft, Facing::North, ) => 11185,
                ( Half::Bottom, false, Shape::InnerLeft, Facing::North, ) => 11186,
                ( Half::Bottom, true, Shape::InnerRight, Facing::North, ) => 11187,
                ( Half::Bottom, false, Shape::InnerRight, Facing::North, ) => 11188,
                ( Half::Bottom, true, Shape::OuterLeft, Facing::North, ) => 11189,
                ( Half::Bottom, false, Shape::OuterLeft, Facing::North, ) => 11190,
                ( Half::Bottom, true, Shape::OuterRight, Facing::North, ) => 11191,
                ( Half::Bottom, false, Shape::OuterRight, Facing::North, ) => 11192,
                ( Half::Top, true, Shape::Straight, Facing::South, ) => 11193,
                ( Half::Top, false, Shape::Straight, Facing::South, ) => 11194,
                ( Half::Top, true, Shape::InnerLeft, Facing::South, ) => 11195,
                ( Half::Top, false, Shape::InnerLeft, Facing::South, ) => 11196,
                ( Half::Top, true, Shape::InnerRight, Facing::South, ) => 11197,
                ( Half::Top, false, Shape::InnerRight, Facing::South, ) => 11198,
                ( Half::Top, true, Shape::OuterLeft, Facing::South, ) => 11199,
                ( Half::Top, false, Shape::OuterLeft, Facing::South, ) => 11200,
                ( Half::Top, true, Shape::OuterRight, Facing::South, ) => 11201,
                ( Half::Top, false, Shape::OuterRight, Facing::South, ) => 11202,
                ( Half::Bottom, true, Shape::Straight, Facing::South, ) => 11203,
                ( Half::Bottom, false, Shape::Straight, Facing::South, ) => 11204,
                ( Half::Bottom, true, Shape::InnerLeft, Facing::South, ) => 11205,
                ( Half::Bottom, false, Shape::InnerLeft, Facing::South, ) => 11206,
                ( Half::Bottom, true, Shape::InnerRight, Facing::South, ) => 11207,
                ( Half::Bottom, false, Shape::InnerRight, Facing::South, ) => 11208,
                ( Half::Bottom, true, Shape::OuterLeft, Facing::South, ) => 11209,
                ( Half::Bottom, false, Shape::OuterLeft, Facing::South, ) => 11210,
                ( Half::Bottom, true, Shape::OuterRight, Facing::South, ) => 11211,
                ( Half::Bottom, false, Shape::OuterRight, Facing::South, ) => 11212,
                ( Half::Top, true, Shape::Straight, Facing::West, ) => 11213,
                ( Half::Top, false, Shape::Straight, Facing::West, ) => 11214,
                ( Half::Top, true, Shape::InnerLeft, Facing::West, ) => 11215,
                ( Half::Top, false, Shape::InnerLeft, Facing::West, ) => 11216,
                ( Half::Top, true, Shape::InnerRight, Facing::West, ) => 11217,
                ( Half::Top, false, Shape::InnerRight, Facing::West, ) => 11218,
                ( Half::Top, true, Shape::OuterLeft, Facing::West, ) => 11219,
                ( Half::Top, false, Shape::OuterLeft, Facing::West, ) => 11220,
                ( Half::Top, true, Shape::OuterRight, Facing::West, ) => 11221,
                ( Half::Top, false, Shape::OuterRight, Facing::West, ) => 11222,
                ( Half::Bottom, true, Shape::Straight, Facing::West, ) => 11223,
                ( Half::Bottom, false, Shape::Straight, Facing::West, ) => 11224,
                ( Half::Bottom, true, Shape::InnerLeft, Facing::West, ) => 11225,
                ( Half::Bottom, false, Shape::InnerLeft, Facing::West, ) => 11226,
                ( Half::Bottom, true, Shape::InnerRight, Facing::West, ) => 11227,
                ( Half::Bottom, false, Shape::InnerRight, Facing::West, ) => 11228,
                ( Half::Bottom, true, Shape::OuterLeft, Facing::West, ) => 11229,
                ( Half::Bottom, false, Shape::OuterLeft, Facing::West, ) => 11230,
                ( Half::Bottom, true, Shape::OuterRight, Facing::West, ) => 11231,
                ( Half::Bottom, false, Shape::OuterRight, Facing::West, ) => 11232,
                ( Half::Top, true, Shape::Straight, Facing::East, ) => 11233,
                ( Half::Top, false, Shape::Straight, Facing::East, ) => 11234,
                ( Half::Top, true, Shape::InnerLeft, Facing::East, ) => 11235,
                ( Half::Top, false, Shape::InnerLeft, Facing::East, ) => 11236,
                ( Half::Top, true, Shape::InnerRight, Facing::East, ) => 11237,
                ( Half::Top, false, Shape::InnerRight, Facing::East, ) => 11238,
                ( Half::Top, true, Shape::OuterLeft, Facing::East, ) => 11239,
                ( Half::Top, false, Shape::OuterLeft, Facing::East, ) => 11240,
                ( Half::Top, true, Shape::OuterRight, Facing::East, ) => 11241,
                ( Half::Top, false, Shape::OuterRight, Facing::East, ) => 11242,
                ( Half::Bottom, true, Shape::Straight, Facing::East, ) => 11243,
                ( Half::Bottom, false, Shape::Straight, Facing::East, ) => 11244,
                ( Half::Bottom, true, Shape::InnerLeft, Facing::East, ) => 11245,
                ( Half::Bottom, false, Shape::InnerLeft, Facing::East, ) => 11246,
                ( Half::Bottom, true, Shape::InnerRight, Facing::East, ) => 11247,
                ( Half::Bottom, false, Shape::InnerRight, Facing::East, ) => 11248,
                ( Half::Bottom, true, Shape::OuterLeft, Facing::East, ) => 11249,
                ( Half::Bottom, false, Shape::OuterLeft, Facing::East, ) => 11250,
                ( Half::Bottom, true, Shape::OuterRight, Facing::East, ) => 11251,
                ( Half::Bottom, false, Shape::OuterRight, Facing::East, ) => 11252,
            })
        }
    }

    impl From<BambooMosaicStairs> for BlockState {
        #[inline(always)]
        fn from(value : BambooMosaicStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooMosaicStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooMosaicStairs { }

    impl Block for BambooMosaicStairs {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            waterlogged : false,
            shape : Shape::Straight,
            facing : Facing::North,
        };
    }

}

/// `minecraft:dark_oak_sapling` block.
pub mod dark_oak_sapling {
    use super::*;

    /// `minecraft:dark_oak_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakSapling {
        /// `stage` state.
        pub stage : Stage,
    }

    /// `stage` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Stage {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
    }
    impl crate::Sealed for Stage { }
    impl BlockProperty for Stage { }

    impl DarkOakSapling {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.stage, )) {
                ( Stage::N0, ) => 41,
                ( Stage::N1, ) => 42,
            })
        }
    }

    impl From<DarkOakSapling> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakSapling { }

    impl Block for DarkOakSapling {
        const DEFAULT_STATE : Self = Self {
            stage : Stage::N0,
        };
    }

}

/// `minecraft:budding_amethyst` block.
pub mod budding_amethyst {
    use super::*;

    /// `minecraft:budding_amethyst` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BuddingAmethyst;

    impl BuddingAmethyst {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(22092)
        }
    }

    impl From<BuddingAmethyst> for BlockState {
        #[inline(always)]
        fn from(value : BuddingAmethyst) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BuddingAmethyst {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BuddingAmethyst { }

    impl Block for BuddingAmethyst {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cherry_log` block.
pub mod cherry_log {
    use super::*;

    /// `minecraft:cherry_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl CherryLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 151,
                ( Axis::Y, ) => 152,
                ( Axis::Z, ) => 153,
            })
        }
    }

    impl From<CherryLog> for BlockState {
        #[inline(always)]
        fn from(value : CherryLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryLog { }

    impl Block for CherryLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:kelp_plant` block.
pub mod kelp_plant {
    use super::*;

    /// `minecraft:kelp_plant` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct KelpPlant;

    impl KelpPlant {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13809)
        }
    }

    impl From<KelpPlant> for BlockState {
        #[inline(always)]
        fn from(value : KelpPlant) -> Self {
            value.to_block_state()
        }
    }

    impl Default for KelpPlant {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for KelpPlant { }

    impl Block for KelpPlant {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:yellow_stained_glass` block.
pub mod yellow_stained_glass {
    use super::*;

    /// `minecraft:yellow_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowStainedGlass;

    impl YellowStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6128)
        }
    }

    impl From<YellowStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : YellowStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowStainedGlass { }

    impl Block for YellowStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:carrots` block.
pub mod carrots {
    use super::*;

    /// `minecraft:carrots` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Carrots {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl Carrots {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 9380,
                ( Age::N1, ) => 9381,
                ( Age::N2, ) => 9382,
                ( Age::N3, ) => 9383,
                ( Age::N4, ) => 9384,
                ( Age::N5, ) => 9385,
                ( Age::N6, ) => 9386,
                ( Age::N7, ) => 9387,
            })
        }
    }

    impl From<Carrots> for BlockState {
        #[inline(always)]
        fn from(value : Carrots) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Carrots {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Carrots { }

    impl Block for Carrots {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:light_gray_banner` block.
pub mod light_gray_banner {
    use super::*;

    /// `minecraft:light_gray_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl LightGrayBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11776,
                ( Rotation::N1, ) => 11777,
                ( Rotation::N2, ) => 11778,
                ( Rotation::N3, ) => 11779,
                ( Rotation::N4, ) => 11780,
                ( Rotation::N5, ) => 11781,
                ( Rotation::N6, ) => 11782,
                ( Rotation::N7, ) => 11783,
                ( Rotation::N8, ) => 11784,
                ( Rotation::N9, ) => 11785,
                ( Rotation::N10, ) => 11786,
                ( Rotation::N11, ) => 11787,
                ( Rotation::N12, ) => 11788,
                ( Rotation::N13, ) => 11789,
                ( Rotation::N14, ) => 11790,
                ( Rotation::N15, ) => 11791,
            })
        }
    }

    impl From<LightGrayBanner> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayBanner { }

    impl Block for LightGrayBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:potted_oxeye_daisy` block.
pub mod potted_oxeye_daisy {
    use super::*;

    /// `minecraft:potted_oxeye_daisy` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedOxeyeDaisy;

    impl PottedOxeyeDaisy {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9372)
        }
    }

    impl From<PottedOxeyeDaisy> for BlockState {
        #[inline(always)]
        fn from(value : PottedOxeyeDaisy) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedOxeyeDaisy {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedOxeyeDaisy { }

    impl Block for PottedOxeyeDaisy {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:yellow_wool` block.
pub mod yellow_wool {
    use super::*;

    /// `minecraft:yellow_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowWool;

    impl YellowWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2097)
        }
    }

    impl From<YellowWool> for BlockState {
        #[inline(always)]
        fn from(value : YellowWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowWool { }

    impl Block for YellowWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:bee_nest` block.
pub mod bee_nest {
    use super::*;

    /// `minecraft:bee_nest` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BeeNest {
        /// `facing` state.
        pub facing : Facing,
        /// `honey_level` state.
        pub honey_level : HoneyLevel,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `honey_level` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum HoneyLevel {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
    }
    impl crate::Sealed for HoneyLevel { }
    impl BlockProperty for HoneyLevel { }

    impl BeeNest {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.honey_level, )) {
                ( Facing::North, HoneyLevel::N0, ) => 20457,
                ( Facing::North, HoneyLevel::N1, ) => 20458,
                ( Facing::North, HoneyLevel::N2, ) => 20459,
                ( Facing::North, HoneyLevel::N3, ) => 20460,
                ( Facing::North, HoneyLevel::N4, ) => 20461,
                ( Facing::North, HoneyLevel::N5, ) => 20462,
                ( Facing::South, HoneyLevel::N0, ) => 20463,
                ( Facing::South, HoneyLevel::N1, ) => 20464,
                ( Facing::South, HoneyLevel::N2, ) => 20465,
                ( Facing::South, HoneyLevel::N3, ) => 20466,
                ( Facing::South, HoneyLevel::N4, ) => 20467,
                ( Facing::South, HoneyLevel::N5, ) => 20468,
                ( Facing::West, HoneyLevel::N0, ) => 20469,
                ( Facing::West, HoneyLevel::N1, ) => 20470,
                ( Facing::West, HoneyLevel::N2, ) => 20471,
                ( Facing::West, HoneyLevel::N3, ) => 20472,
                ( Facing::West, HoneyLevel::N4, ) => 20473,
                ( Facing::West, HoneyLevel::N5, ) => 20474,
                ( Facing::East, HoneyLevel::N0, ) => 20475,
                ( Facing::East, HoneyLevel::N1, ) => 20476,
                ( Facing::East, HoneyLevel::N2, ) => 20477,
                ( Facing::East, HoneyLevel::N3, ) => 20478,
                ( Facing::East, HoneyLevel::N4, ) => 20479,
                ( Facing::East, HoneyLevel::N5, ) => 20480,
            })
        }
    }

    impl From<BeeNest> for BlockState {
        #[inline(always)]
        fn from(value : BeeNest) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BeeNest {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BeeNest { }

    impl Block for BeeNest {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            honey_level : HoneyLevel::N0,
        };
    }

}

/// `minecraft:lilac` block.
pub mod lilac {
    use super::*;

    /// `minecraft:lilac` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Lilac {
        /// `half` state.
        pub half : Half,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl Lilac {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, )) {
                ( Half::Upper, ) => 11638,
                ( Half::Lower, ) => 11639,
            })
        }
    }

    impl From<Lilac> for BlockState {
        #[inline(always)]
        fn from(value : Lilac) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Lilac {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Lilac { }

    impl Block for Lilac {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
        };
    }

}

/// `minecraft:potted_azure_bluet` block.
pub mod potted_azure_bluet {
    use super::*;

    /// `minecraft:potted_azure_bluet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedAzureBluet;

    impl PottedAzureBluet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9367)
        }
    }

    impl From<PottedAzureBluet> for BlockState {
        #[inline(always)]
        fn from(value : PottedAzureBluet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedAzureBluet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedAzureBluet { }

    impl Block for PottedAzureBluet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:exposed_copper_bulb` block.
pub mod exposed_copper_bulb {
    use super::*;

    /// `minecraft:exposed_copper_bulb` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ExposedCopperBulb {
        /// `powered` state.
        pub powered : bool,
        /// `lit` state.
        pub lit : bool,
    }

    impl ExposedCopperBulb {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.lit, )) {
                ( true, true, ) => 25756,
                ( false, true, ) => 25757,
                ( true, false, ) => 25758,
                ( false, false, ) => 25759,
            })
        }
    }

    impl From<ExposedCopperBulb> for BlockState {
        #[inline(always)]
        fn from(value : ExposedCopperBulb) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ExposedCopperBulb {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ExposedCopperBulb { }

    impl Block for ExposedCopperBulb {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            lit : false,
        };
    }

}

/// `minecraft:light_blue_bed` block.
pub mod light_blue_bed {
    use super::*;

    /// `minecraft:light_blue_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueBed {
        /// `facing` state.
        pub facing : Facing,
        /// `occupied` state.
        pub occupied : bool,
        /// `part` state.
        pub part : Part,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    impl LightBlueBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.occupied, self.part, )) {
                ( Facing::North, true, Part::Head, ) => 1779,
                ( Facing::North, true, Part::Foot, ) => 1780,
                ( Facing::North, false, Part::Head, ) => 1781,
                ( Facing::North, false, Part::Foot, ) => 1782,
                ( Facing::South, true, Part::Head, ) => 1783,
                ( Facing::South, true, Part::Foot, ) => 1784,
                ( Facing::South, false, Part::Head, ) => 1785,
                ( Facing::South, false, Part::Foot, ) => 1786,
                ( Facing::West, true, Part::Head, ) => 1787,
                ( Facing::West, true, Part::Foot, ) => 1788,
                ( Facing::West, false, Part::Head, ) => 1789,
                ( Facing::West, false, Part::Foot, ) => 1790,
                ( Facing::East, true, Part::Head, ) => 1791,
                ( Facing::East, true, Part::Foot, ) => 1792,
                ( Facing::East, false, Part::Head, ) => 1793,
                ( Facing::East, false, Part::Foot, ) => 1794,
            })
        }
    }

    impl From<LightBlueBed> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueBed { }

    impl Block for LightBlueBed {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            occupied : false,
            part : Part::Foot,
        };
    }

}

/// `minecraft:oxidized_copper_bulb` block.
pub mod oxidized_copper_bulb {
    use super::*;

    /// `minecraft:oxidized_copper_bulb` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OxidizedCopperBulb {
        /// `lit` state.
        pub lit : bool,
        /// `powered` state.
        pub powered : bool,
    }

    impl OxidizedCopperBulb {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, self.powered, )) {
                ( true, true, ) => 25764,
                ( true, false, ) => 25765,
                ( false, true, ) => 25766,
                ( false, false, ) => 25767,
            })
        }
    }

    impl From<OxidizedCopperBulb> for BlockState {
        #[inline(always)]
        fn from(value : OxidizedCopperBulb) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OxidizedCopperBulb {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OxidizedCopperBulb { }

    impl Block for OxidizedCopperBulb {
        const DEFAULT_STATE : Self = Self {
            lit : false,
            powered : false,
        };
    }

}

/// `minecraft:polished_blackstone_stairs` block.
pub mod polished_blackstone_stairs {
    use super::*;

    /// `minecraft:polished_blackstone_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedBlackstoneStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl PolishedBlackstoneStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.shape, self.half, self.waterlogged, )) {
                ( Facing::North, Shape::Straight, Half::Top, true, ) => 21346,
                ( Facing::North, Shape::Straight, Half::Top, false, ) => 21347,
                ( Facing::North, Shape::InnerLeft, Half::Top, true, ) => 21348,
                ( Facing::North, Shape::InnerLeft, Half::Top, false, ) => 21349,
                ( Facing::North, Shape::InnerRight, Half::Top, true, ) => 21350,
                ( Facing::North, Shape::InnerRight, Half::Top, false, ) => 21351,
                ( Facing::North, Shape::OuterLeft, Half::Top, true, ) => 21352,
                ( Facing::North, Shape::OuterLeft, Half::Top, false, ) => 21353,
                ( Facing::North, Shape::OuterRight, Half::Top, true, ) => 21354,
                ( Facing::North, Shape::OuterRight, Half::Top, false, ) => 21355,
                ( Facing::North, Shape::Straight, Half::Bottom, true, ) => 21356,
                ( Facing::North, Shape::Straight, Half::Bottom, false, ) => 21357,
                ( Facing::North, Shape::InnerLeft, Half::Bottom, true, ) => 21358,
                ( Facing::North, Shape::InnerLeft, Half::Bottom, false, ) => 21359,
                ( Facing::North, Shape::InnerRight, Half::Bottom, true, ) => 21360,
                ( Facing::North, Shape::InnerRight, Half::Bottom, false, ) => 21361,
                ( Facing::North, Shape::OuterLeft, Half::Bottom, true, ) => 21362,
                ( Facing::North, Shape::OuterLeft, Half::Bottom, false, ) => 21363,
                ( Facing::North, Shape::OuterRight, Half::Bottom, true, ) => 21364,
                ( Facing::North, Shape::OuterRight, Half::Bottom, false, ) => 21365,
                ( Facing::South, Shape::Straight, Half::Top, true, ) => 21366,
                ( Facing::South, Shape::Straight, Half::Top, false, ) => 21367,
                ( Facing::South, Shape::InnerLeft, Half::Top, true, ) => 21368,
                ( Facing::South, Shape::InnerLeft, Half::Top, false, ) => 21369,
                ( Facing::South, Shape::InnerRight, Half::Top, true, ) => 21370,
                ( Facing::South, Shape::InnerRight, Half::Top, false, ) => 21371,
                ( Facing::South, Shape::OuterLeft, Half::Top, true, ) => 21372,
                ( Facing::South, Shape::OuterLeft, Half::Top, false, ) => 21373,
                ( Facing::South, Shape::OuterRight, Half::Top, true, ) => 21374,
                ( Facing::South, Shape::OuterRight, Half::Top, false, ) => 21375,
                ( Facing::South, Shape::Straight, Half::Bottom, true, ) => 21376,
                ( Facing::South, Shape::Straight, Half::Bottom, false, ) => 21377,
                ( Facing::South, Shape::InnerLeft, Half::Bottom, true, ) => 21378,
                ( Facing::South, Shape::InnerLeft, Half::Bottom, false, ) => 21379,
                ( Facing::South, Shape::InnerRight, Half::Bottom, true, ) => 21380,
                ( Facing::South, Shape::InnerRight, Half::Bottom, false, ) => 21381,
                ( Facing::South, Shape::OuterLeft, Half::Bottom, true, ) => 21382,
                ( Facing::South, Shape::OuterLeft, Half::Bottom, false, ) => 21383,
                ( Facing::South, Shape::OuterRight, Half::Bottom, true, ) => 21384,
                ( Facing::South, Shape::OuterRight, Half::Bottom, false, ) => 21385,
                ( Facing::West, Shape::Straight, Half::Top, true, ) => 21386,
                ( Facing::West, Shape::Straight, Half::Top, false, ) => 21387,
                ( Facing::West, Shape::InnerLeft, Half::Top, true, ) => 21388,
                ( Facing::West, Shape::InnerLeft, Half::Top, false, ) => 21389,
                ( Facing::West, Shape::InnerRight, Half::Top, true, ) => 21390,
                ( Facing::West, Shape::InnerRight, Half::Top, false, ) => 21391,
                ( Facing::West, Shape::OuterLeft, Half::Top, true, ) => 21392,
                ( Facing::West, Shape::OuterLeft, Half::Top, false, ) => 21393,
                ( Facing::West, Shape::OuterRight, Half::Top, true, ) => 21394,
                ( Facing::West, Shape::OuterRight, Half::Top, false, ) => 21395,
                ( Facing::West, Shape::Straight, Half::Bottom, true, ) => 21396,
                ( Facing::West, Shape::Straight, Half::Bottom, false, ) => 21397,
                ( Facing::West, Shape::InnerLeft, Half::Bottom, true, ) => 21398,
                ( Facing::West, Shape::InnerLeft, Half::Bottom, false, ) => 21399,
                ( Facing::West, Shape::InnerRight, Half::Bottom, true, ) => 21400,
                ( Facing::West, Shape::InnerRight, Half::Bottom, false, ) => 21401,
                ( Facing::West, Shape::OuterLeft, Half::Bottom, true, ) => 21402,
                ( Facing::West, Shape::OuterLeft, Half::Bottom, false, ) => 21403,
                ( Facing::West, Shape::OuterRight, Half::Bottom, true, ) => 21404,
                ( Facing::West, Shape::OuterRight, Half::Bottom, false, ) => 21405,
                ( Facing::East, Shape::Straight, Half::Top, true, ) => 21406,
                ( Facing::East, Shape::Straight, Half::Top, false, ) => 21407,
                ( Facing::East, Shape::InnerLeft, Half::Top, true, ) => 21408,
                ( Facing::East, Shape::InnerLeft, Half::Top, false, ) => 21409,
                ( Facing::East, Shape::InnerRight, Half::Top, true, ) => 21410,
                ( Facing::East, Shape::InnerRight, Half::Top, false, ) => 21411,
                ( Facing::East, Shape::OuterLeft, Half::Top, true, ) => 21412,
                ( Facing::East, Shape::OuterLeft, Half::Top, false, ) => 21413,
                ( Facing::East, Shape::OuterRight, Half::Top, true, ) => 21414,
                ( Facing::East, Shape::OuterRight, Half::Top, false, ) => 21415,
                ( Facing::East, Shape::Straight, Half::Bottom, true, ) => 21416,
                ( Facing::East, Shape::Straight, Half::Bottom, false, ) => 21417,
                ( Facing::East, Shape::InnerLeft, Half::Bottom, true, ) => 21418,
                ( Facing::East, Shape::InnerLeft, Half::Bottom, false, ) => 21419,
                ( Facing::East, Shape::InnerRight, Half::Bottom, true, ) => 21420,
                ( Facing::East, Shape::InnerRight, Half::Bottom, false, ) => 21421,
                ( Facing::East, Shape::OuterLeft, Half::Bottom, true, ) => 21422,
                ( Facing::East, Shape::OuterLeft, Half::Bottom, false, ) => 21423,
                ( Facing::East, Shape::OuterRight, Half::Bottom, true, ) => 21424,
                ( Facing::East, Shape::OuterRight, Half::Bottom, false, ) => 21425,
            })
        }
    }

    impl From<PolishedBlackstoneStairs> for BlockState {
        #[inline(always)]
        fn from(value : PolishedBlackstoneStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedBlackstoneStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedBlackstoneStairs { }

    impl Block for PolishedBlackstoneStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            shape : Shape::Straight,
            half : Half::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:potted_dead_bush` block.
pub mod potted_dead_bush {
    use super::*;

    /// `minecraft:potted_dead_bush` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedDeadBush;

    impl PottedDeadBush {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9378)
        }
    }

    impl From<PottedDeadBush> for BlockState {
        #[inline(always)]
        fn from(value : PottedDeadBush) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedDeadBush {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedDeadBush { }

    impl Block for PottedDeadBush {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:potted_red_mushroom` block.
pub mod potted_red_mushroom {
    use super::*;

    /// `minecraft:potted_red_mushroom` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedRedMushroom;

    impl PottedRedMushroom {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9376)
        }
    }

    impl From<PottedRedMushroom> for BlockState {
        #[inline(always)]
        fn from(value : PottedRedMushroom) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedRedMushroom {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedRedMushroom { }

    impl Block for PottedRedMushroom {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:exposed_chiseled_copper` block.
pub mod exposed_chiseled_copper {
    use super::*;

    /// `minecraft:exposed_chiseled_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ExposedChiseledCopper;

    impl ExposedChiseledCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24010)
        }
    }

    impl From<ExposedChiseledCopper> for BlockState {
        #[inline(always)]
        fn from(value : ExposedChiseledCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ExposedChiseledCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ExposedChiseledCopper { }

    impl Block for ExposedChiseledCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:polished_tuff_slab` block.
pub mod polished_tuff_slab {
    use super::*;

    /// `minecraft:polished_tuff_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedTuffSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl PolishedTuffSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 22553,
                ( Kind::Top, false, ) => 22554,
                ( Kind::Bottom, true, ) => 22555,
                ( Kind::Bottom, false, ) => 22556,
                ( Kind::Double, true, ) => 22557,
                ( Kind::Double, false, ) => 22558,
            })
        }
    }

    impl From<PolishedTuffSlab> for BlockState {
        #[inline(always)]
        fn from(value : PolishedTuffSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedTuffSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedTuffSlab { }

    impl Block for PolishedTuffSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:purple_wool` block.
pub mod purple_wool {
    use super::*;

    /// `minecraft:purple_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleWool;

    impl PurpleWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2103)
        }
    }

    impl From<PurpleWool> for BlockState {
        #[inline(always)]
        fn from(value : PurpleWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleWool { }

    impl Block for PurpleWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:mangrove_wall_hanging_sign` block.
pub mod mangrove_wall_hanging_sign {
    use super::*;

    /// `minecraft:mangrove_wall_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveWallHangingSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl MangroveWallHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 5770,
                ( false, Facing::North, ) => 5771,
                ( true, Facing::South, ) => 5772,
                ( false, Facing::South, ) => 5773,
                ( true, Facing::West, ) => 5774,
                ( false, Facing::West, ) => 5775,
                ( true, Facing::East, ) => 5776,
                ( false, Facing::East, ) => 5777,
            })
        }
    }

    impl From<MangroveWallHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : MangroveWallHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveWallHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveWallHangingSign { }

    impl Block for MangroveWallHangingSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:red_candle` block.
pub mod red_candle {
    use super::*;

    /// `minecraft:red_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedCandle {
        /// `lit` state.
        pub lit : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `candles` state.
        pub candles : Candles,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl RedCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, self.waterlogged, self.candles, )) {
                ( true, true, Candles::N1, ) => 22025,
                ( true, false, Candles::N1, ) => 22026,
                ( false, true, Candles::N1, ) => 22027,
                ( false, false, Candles::N1, ) => 22028,
                ( true, true, Candles::N2, ) => 22029,
                ( true, false, Candles::N2, ) => 22030,
                ( false, true, Candles::N2, ) => 22031,
                ( false, false, Candles::N2, ) => 22032,
                ( true, true, Candles::N3, ) => 22033,
                ( true, false, Candles::N3, ) => 22034,
                ( false, true, Candles::N3, ) => 22035,
                ( false, false, Candles::N3, ) => 22036,
                ( true, true, Candles::N4, ) => 22037,
                ( true, false, Candles::N4, ) => 22038,
                ( false, true, Candles::N4, ) => 22039,
                ( false, false, Candles::N4, ) => 22040,
            })
        }
    }

    impl From<RedCandle> for BlockState {
        #[inline(always)]
        fn from(value : RedCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedCandle { }

    impl Block for RedCandle {
        const DEFAULT_STATE : Self = Self {
            lit : false,
            waterlogged : false,
            candles : Candles::N1,
        };
    }

}

/// `minecraft:jungle_log` block.
pub mod jungle_log {
    use super::*;

    /// `minecraft:jungle_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl JungleLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 145,
                ( Axis::Y, ) => 146,
                ( Axis::Z, ) => 147,
            })
        }
    }

    impl From<JungleLog> for BlockState {
        #[inline(always)]
        fn from(value : JungleLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleLog { }

    impl Block for JungleLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:spruce_hanging_sign` block.
pub mod spruce_hanging_sign {
    use super::*;

    /// `minecraft:spruce_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceHangingSign {
        /// `attached` state.
        pub attached : bool,
        /// `rotation` state.
        pub rotation : Rotation,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl SpruceHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.attached, self.rotation, self.waterlogged, )) {
                ( true, Rotation::N0, true, ) => 5002,
                ( true, Rotation::N0, false, ) => 5003,
                ( true, Rotation::N1, true, ) => 5004,
                ( true, Rotation::N1, false, ) => 5005,
                ( true, Rotation::N2, true, ) => 5006,
                ( true, Rotation::N2, false, ) => 5007,
                ( true, Rotation::N3, true, ) => 5008,
                ( true, Rotation::N3, false, ) => 5009,
                ( true, Rotation::N4, true, ) => 5010,
                ( true, Rotation::N4, false, ) => 5011,
                ( true, Rotation::N5, true, ) => 5012,
                ( true, Rotation::N5, false, ) => 5013,
                ( true, Rotation::N6, true, ) => 5014,
                ( true, Rotation::N6, false, ) => 5015,
                ( true, Rotation::N7, true, ) => 5016,
                ( true, Rotation::N7, false, ) => 5017,
                ( true, Rotation::N8, true, ) => 5018,
                ( true, Rotation::N8, false, ) => 5019,
                ( true, Rotation::N9, true, ) => 5020,
                ( true, Rotation::N9, false, ) => 5021,
                ( true, Rotation::N10, true, ) => 5022,
                ( true, Rotation::N10, false, ) => 5023,
                ( true, Rotation::N11, true, ) => 5024,
                ( true, Rotation::N11, false, ) => 5025,
                ( true, Rotation::N12, true, ) => 5026,
                ( true, Rotation::N12, false, ) => 5027,
                ( true, Rotation::N13, true, ) => 5028,
                ( true, Rotation::N13, false, ) => 5029,
                ( true, Rotation::N14, true, ) => 5030,
                ( true, Rotation::N14, false, ) => 5031,
                ( true, Rotation::N15, true, ) => 5032,
                ( true, Rotation::N15, false, ) => 5033,
                ( false, Rotation::N0, true, ) => 5034,
                ( false, Rotation::N0, false, ) => 5035,
                ( false, Rotation::N1, true, ) => 5036,
                ( false, Rotation::N1, false, ) => 5037,
                ( false, Rotation::N2, true, ) => 5038,
                ( false, Rotation::N2, false, ) => 5039,
                ( false, Rotation::N3, true, ) => 5040,
                ( false, Rotation::N3, false, ) => 5041,
                ( false, Rotation::N4, true, ) => 5042,
                ( false, Rotation::N4, false, ) => 5043,
                ( false, Rotation::N5, true, ) => 5044,
                ( false, Rotation::N5, false, ) => 5045,
                ( false, Rotation::N6, true, ) => 5046,
                ( false, Rotation::N6, false, ) => 5047,
                ( false, Rotation::N7, true, ) => 5048,
                ( false, Rotation::N7, false, ) => 5049,
                ( false, Rotation::N8, true, ) => 5050,
                ( false, Rotation::N8, false, ) => 5051,
                ( false, Rotation::N9, true, ) => 5052,
                ( false, Rotation::N9, false, ) => 5053,
                ( false, Rotation::N10, true, ) => 5054,
                ( false, Rotation::N10, false, ) => 5055,
                ( false, Rotation::N11, true, ) => 5056,
                ( false, Rotation::N11, false, ) => 5057,
                ( false, Rotation::N12, true, ) => 5058,
                ( false, Rotation::N12, false, ) => 5059,
                ( false, Rotation::N13, true, ) => 5060,
                ( false, Rotation::N13, false, ) => 5061,
                ( false, Rotation::N14, true, ) => 5062,
                ( false, Rotation::N14, false, ) => 5063,
                ( false, Rotation::N15, true, ) => 5064,
                ( false, Rotation::N15, false, ) => 5065,
            })
        }
    }

    impl From<SpruceHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : SpruceHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceHangingSign { }

    impl Block for SpruceHangingSign {
        const DEFAULT_STATE : Self = Self {
            attached : false,
            rotation : Rotation::N0,
            waterlogged : false,
        };
    }

}

/// `minecraft:dark_oak_fence_gate` block.
pub mod dark_oak_fence_gate {
    use super::*;

    /// `minecraft:dark_oak_fence_gate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakFenceGate {
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `in_wall` state.
        pub in_wall : bool,
        /// `open` state.
        pub open : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DarkOakFenceGate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.facing, self.in_wall, self.open, )) {
                ( true, Facing::North, true, true, ) => 12365,
                ( false, Facing::North, true, true, ) => 12366,
                ( true, Facing::North, true, false, ) => 12367,
                ( false, Facing::North, true, false, ) => 12368,
                ( true, Facing::North, false, true, ) => 12369,
                ( false, Facing::North, false, true, ) => 12370,
                ( true, Facing::North, false, false, ) => 12371,
                ( false, Facing::North, false, false, ) => 12372,
                ( true, Facing::South, true, true, ) => 12373,
                ( false, Facing::South, true, true, ) => 12374,
                ( true, Facing::South, true, false, ) => 12375,
                ( false, Facing::South, true, false, ) => 12376,
                ( true, Facing::South, false, true, ) => 12377,
                ( false, Facing::South, false, true, ) => 12378,
                ( true, Facing::South, false, false, ) => 12379,
                ( false, Facing::South, false, false, ) => 12380,
                ( true, Facing::West, true, true, ) => 12381,
                ( false, Facing::West, true, true, ) => 12382,
                ( true, Facing::West, true, false, ) => 12383,
                ( false, Facing::West, true, false, ) => 12384,
                ( true, Facing::West, false, true, ) => 12385,
                ( false, Facing::West, false, true, ) => 12386,
                ( true, Facing::West, false, false, ) => 12387,
                ( false, Facing::West, false, false, ) => 12388,
                ( true, Facing::East, true, true, ) => 12389,
                ( false, Facing::East, true, true, ) => 12390,
                ( true, Facing::East, true, false, ) => 12391,
                ( false, Facing::East, true, false, ) => 12392,
                ( true, Facing::East, false, true, ) => 12393,
                ( false, Facing::East, false, true, ) => 12394,
                ( true, Facing::East, false, false, ) => 12395,
                ( false, Facing::East, false, false, ) => 12396,
            })
        }
    }

    impl From<DarkOakFenceGate> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakFenceGate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakFenceGate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakFenceGate { }

    impl Block for DarkOakFenceGate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            facing : Facing::North,
            in_wall : false,
            open : false,
        };
    }

}

/// `minecraft:anvil` block.
pub mod anvil {
    use super::*;

    /// `minecraft:anvil` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Anvil {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Anvil {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 9916,
                ( Facing::South, ) => 9917,
                ( Facing::West, ) => 9918,
                ( Facing::East, ) => 9919,
            })
        }
    }

    impl From<Anvil> for BlockState {
        #[inline(always)]
        fn from(value : Anvil) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Anvil {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Anvil { }

    impl Block for Anvil {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:blue_carpet` block.
pub mod blue_carpet {
    use super::*;

    /// `minecraft:blue_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueCarpet;

    impl BlueCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11628)
        }
    }

    impl From<BlueCarpet> for BlockState {
        #[inline(always)]
        fn from(value : BlueCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueCarpet { }

    impl Block for BlueCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:jungle_sapling` block.
pub mod jungle_sapling {
    use super::*;

    /// `minecraft:jungle_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleSapling {
        /// `stage` state.
        pub stage : Stage,
    }

    /// `stage` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Stage {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
    }
    impl crate::Sealed for Stage { }
    impl BlockProperty for Stage { }

    impl JungleSapling {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.stage, )) {
                ( Stage::N0, ) => 35,
                ( Stage::N1, ) => 36,
            })
        }
    }

    impl From<JungleSapling> for BlockState {
        #[inline(always)]
        fn from(value : JungleSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleSapling { }

    impl Block for JungleSapling {
        const DEFAULT_STATE : Self = Self {
            stage : Stage::N0,
        };
    }

}

/// `minecraft:potted_spruce_sapling` block.
pub mod potted_spruce_sapling {
    use super::*;

    /// `minecraft:potted_spruce_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedSpruceSapling;

    impl PottedSpruceSapling {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9354)
        }
    }

    impl From<PottedSpruceSapling> for BlockState {
        #[inline(always)]
        fn from(value : PottedSpruceSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedSpruceSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedSpruceSapling { }

    impl Block for PottedSpruceSapling {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:gray_wall_banner` block.
pub mod gray_wall_banner {
    use super::*;

    /// `minecraft:gray_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl GrayWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11932,
                ( Facing::South, ) => 11933,
                ( Facing::West, ) => 11934,
                ( Facing::East, ) => 11935,
            })
        }
    }

    impl From<GrayWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : GrayWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayWallBanner { }

    impl Block for GrayWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:polished_blackstone_wall` block.
pub mod polished_blackstone_wall {
    use super::*;

    /// `minecraft:polished_blackstone_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedBlackstoneWall {
        /// `north` state.
        pub north : North,
        /// `up` state.
        pub up : bool,
        /// `east` state.
        pub east : East,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `south` state.
        pub south : South,
        /// `west` state.
        pub west : West,
    }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    impl PolishedBlackstoneWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.up, self.east, self.waterlogged, self.south, self.west, )) {
                ( North::None, true, East::None, true, South::None, West::None, ) => 21458,
                ( North::None, true, East::None, true, South::None, West::Low, ) => 21459,
                ( North::None, true, East::None, true, South::None, West::Tall, ) => 21460,
                ( North::None, true, East::None, false, South::None, West::None, ) => 21461,
                ( North::None, true, East::None, false, South::None, West::Low, ) => 21462,
                ( North::None, true, East::None, false, South::None, West::Tall, ) => 21463,
                ( North::None, false, East::None, true, South::None, West::None, ) => 21464,
                ( North::None, false, East::None, true, South::None, West::Low, ) => 21465,
                ( North::None, false, East::None, true, South::None, West::Tall, ) => 21466,
                ( North::None, false, East::None, false, South::None, West::None, ) => 21467,
                ( North::None, false, East::None, false, South::None, West::Low, ) => 21468,
                ( North::None, false, East::None, false, South::None, West::Tall, ) => 21469,
                ( North::None, true, East::None, true, South::Low, West::None, ) => 21470,
                ( North::None, true, East::None, true, South::Low, West::Low, ) => 21471,
                ( North::None, true, East::None, true, South::Low, West::Tall, ) => 21472,
                ( North::None, true, East::None, false, South::Low, West::None, ) => 21473,
                ( North::None, true, East::None, false, South::Low, West::Low, ) => 21474,
                ( North::None, true, East::None, false, South::Low, West::Tall, ) => 21475,
                ( North::None, false, East::None, true, South::Low, West::None, ) => 21476,
                ( North::None, false, East::None, true, South::Low, West::Low, ) => 21477,
                ( North::None, false, East::None, true, South::Low, West::Tall, ) => 21478,
                ( North::None, false, East::None, false, South::Low, West::None, ) => 21479,
                ( North::None, false, East::None, false, South::Low, West::Low, ) => 21480,
                ( North::None, false, East::None, false, South::Low, West::Tall, ) => 21481,
                ( North::None, true, East::None, true, South::Tall, West::None, ) => 21482,
                ( North::None, true, East::None, true, South::Tall, West::Low, ) => 21483,
                ( North::None, true, East::None, true, South::Tall, West::Tall, ) => 21484,
                ( North::None, true, East::None, false, South::Tall, West::None, ) => 21485,
                ( North::None, true, East::None, false, South::Tall, West::Low, ) => 21486,
                ( North::None, true, East::None, false, South::Tall, West::Tall, ) => 21487,
                ( North::None, false, East::None, true, South::Tall, West::None, ) => 21488,
                ( North::None, false, East::None, true, South::Tall, West::Low, ) => 21489,
                ( North::None, false, East::None, true, South::Tall, West::Tall, ) => 21490,
                ( North::None, false, East::None, false, South::Tall, West::None, ) => 21491,
                ( North::None, false, East::None, false, South::Tall, West::Low, ) => 21492,
                ( North::None, false, East::None, false, South::Tall, West::Tall, ) => 21493,
                ( North::Low, true, East::None, true, South::None, West::None, ) => 21494,
                ( North::Low, true, East::None, true, South::None, West::Low, ) => 21495,
                ( North::Low, true, East::None, true, South::None, West::Tall, ) => 21496,
                ( North::Low, true, East::None, false, South::None, West::None, ) => 21497,
                ( North::Low, true, East::None, false, South::None, West::Low, ) => 21498,
                ( North::Low, true, East::None, false, South::None, West::Tall, ) => 21499,
                ( North::Low, false, East::None, true, South::None, West::None, ) => 21500,
                ( North::Low, false, East::None, true, South::None, West::Low, ) => 21501,
                ( North::Low, false, East::None, true, South::None, West::Tall, ) => 21502,
                ( North::Low, false, East::None, false, South::None, West::None, ) => 21503,
                ( North::Low, false, East::None, false, South::None, West::Low, ) => 21504,
                ( North::Low, false, East::None, false, South::None, West::Tall, ) => 21505,
                ( North::Low, true, East::None, true, South::Low, West::None, ) => 21506,
                ( North::Low, true, East::None, true, South::Low, West::Low, ) => 21507,
                ( North::Low, true, East::None, true, South::Low, West::Tall, ) => 21508,
                ( North::Low, true, East::None, false, South::Low, West::None, ) => 21509,
                ( North::Low, true, East::None, false, South::Low, West::Low, ) => 21510,
                ( North::Low, true, East::None, false, South::Low, West::Tall, ) => 21511,
                ( North::Low, false, East::None, true, South::Low, West::None, ) => 21512,
                ( North::Low, false, East::None, true, South::Low, West::Low, ) => 21513,
                ( North::Low, false, East::None, true, South::Low, West::Tall, ) => 21514,
                ( North::Low, false, East::None, false, South::Low, West::None, ) => 21515,
                ( North::Low, false, East::None, false, South::Low, West::Low, ) => 21516,
                ( North::Low, false, East::None, false, South::Low, West::Tall, ) => 21517,
                ( North::Low, true, East::None, true, South::Tall, West::None, ) => 21518,
                ( North::Low, true, East::None, true, South::Tall, West::Low, ) => 21519,
                ( North::Low, true, East::None, true, South::Tall, West::Tall, ) => 21520,
                ( North::Low, true, East::None, false, South::Tall, West::None, ) => 21521,
                ( North::Low, true, East::None, false, South::Tall, West::Low, ) => 21522,
                ( North::Low, true, East::None, false, South::Tall, West::Tall, ) => 21523,
                ( North::Low, false, East::None, true, South::Tall, West::None, ) => 21524,
                ( North::Low, false, East::None, true, South::Tall, West::Low, ) => 21525,
                ( North::Low, false, East::None, true, South::Tall, West::Tall, ) => 21526,
                ( North::Low, false, East::None, false, South::Tall, West::None, ) => 21527,
                ( North::Low, false, East::None, false, South::Tall, West::Low, ) => 21528,
                ( North::Low, false, East::None, false, South::Tall, West::Tall, ) => 21529,
                ( North::Tall, true, East::None, true, South::None, West::None, ) => 21530,
                ( North::Tall, true, East::None, true, South::None, West::Low, ) => 21531,
                ( North::Tall, true, East::None, true, South::None, West::Tall, ) => 21532,
                ( North::Tall, true, East::None, false, South::None, West::None, ) => 21533,
                ( North::Tall, true, East::None, false, South::None, West::Low, ) => 21534,
                ( North::Tall, true, East::None, false, South::None, West::Tall, ) => 21535,
                ( North::Tall, false, East::None, true, South::None, West::None, ) => 21536,
                ( North::Tall, false, East::None, true, South::None, West::Low, ) => 21537,
                ( North::Tall, false, East::None, true, South::None, West::Tall, ) => 21538,
                ( North::Tall, false, East::None, false, South::None, West::None, ) => 21539,
                ( North::Tall, false, East::None, false, South::None, West::Low, ) => 21540,
                ( North::Tall, false, East::None, false, South::None, West::Tall, ) => 21541,
                ( North::Tall, true, East::None, true, South::Low, West::None, ) => 21542,
                ( North::Tall, true, East::None, true, South::Low, West::Low, ) => 21543,
                ( North::Tall, true, East::None, true, South::Low, West::Tall, ) => 21544,
                ( North::Tall, true, East::None, false, South::Low, West::None, ) => 21545,
                ( North::Tall, true, East::None, false, South::Low, West::Low, ) => 21546,
                ( North::Tall, true, East::None, false, South::Low, West::Tall, ) => 21547,
                ( North::Tall, false, East::None, true, South::Low, West::None, ) => 21548,
                ( North::Tall, false, East::None, true, South::Low, West::Low, ) => 21549,
                ( North::Tall, false, East::None, true, South::Low, West::Tall, ) => 21550,
                ( North::Tall, false, East::None, false, South::Low, West::None, ) => 21551,
                ( North::Tall, false, East::None, false, South::Low, West::Low, ) => 21552,
                ( North::Tall, false, East::None, false, South::Low, West::Tall, ) => 21553,
                ( North::Tall, true, East::None, true, South::Tall, West::None, ) => 21554,
                ( North::Tall, true, East::None, true, South::Tall, West::Low, ) => 21555,
                ( North::Tall, true, East::None, true, South::Tall, West::Tall, ) => 21556,
                ( North::Tall, true, East::None, false, South::Tall, West::None, ) => 21557,
                ( North::Tall, true, East::None, false, South::Tall, West::Low, ) => 21558,
                ( North::Tall, true, East::None, false, South::Tall, West::Tall, ) => 21559,
                ( North::Tall, false, East::None, true, South::Tall, West::None, ) => 21560,
                ( North::Tall, false, East::None, true, South::Tall, West::Low, ) => 21561,
                ( North::Tall, false, East::None, true, South::Tall, West::Tall, ) => 21562,
                ( North::Tall, false, East::None, false, South::Tall, West::None, ) => 21563,
                ( North::Tall, false, East::None, false, South::Tall, West::Low, ) => 21564,
                ( North::Tall, false, East::None, false, South::Tall, West::Tall, ) => 21565,
                ( North::None, true, East::Low, true, South::None, West::None, ) => 21566,
                ( North::None, true, East::Low, true, South::None, West::Low, ) => 21567,
                ( North::None, true, East::Low, true, South::None, West::Tall, ) => 21568,
                ( North::None, true, East::Low, false, South::None, West::None, ) => 21569,
                ( North::None, true, East::Low, false, South::None, West::Low, ) => 21570,
                ( North::None, true, East::Low, false, South::None, West::Tall, ) => 21571,
                ( North::None, false, East::Low, true, South::None, West::None, ) => 21572,
                ( North::None, false, East::Low, true, South::None, West::Low, ) => 21573,
                ( North::None, false, East::Low, true, South::None, West::Tall, ) => 21574,
                ( North::None, false, East::Low, false, South::None, West::None, ) => 21575,
                ( North::None, false, East::Low, false, South::None, West::Low, ) => 21576,
                ( North::None, false, East::Low, false, South::None, West::Tall, ) => 21577,
                ( North::None, true, East::Low, true, South::Low, West::None, ) => 21578,
                ( North::None, true, East::Low, true, South::Low, West::Low, ) => 21579,
                ( North::None, true, East::Low, true, South::Low, West::Tall, ) => 21580,
                ( North::None, true, East::Low, false, South::Low, West::None, ) => 21581,
                ( North::None, true, East::Low, false, South::Low, West::Low, ) => 21582,
                ( North::None, true, East::Low, false, South::Low, West::Tall, ) => 21583,
                ( North::None, false, East::Low, true, South::Low, West::None, ) => 21584,
                ( North::None, false, East::Low, true, South::Low, West::Low, ) => 21585,
                ( North::None, false, East::Low, true, South::Low, West::Tall, ) => 21586,
                ( North::None, false, East::Low, false, South::Low, West::None, ) => 21587,
                ( North::None, false, East::Low, false, South::Low, West::Low, ) => 21588,
                ( North::None, false, East::Low, false, South::Low, West::Tall, ) => 21589,
                ( North::None, true, East::Low, true, South::Tall, West::None, ) => 21590,
                ( North::None, true, East::Low, true, South::Tall, West::Low, ) => 21591,
                ( North::None, true, East::Low, true, South::Tall, West::Tall, ) => 21592,
                ( North::None, true, East::Low, false, South::Tall, West::None, ) => 21593,
                ( North::None, true, East::Low, false, South::Tall, West::Low, ) => 21594,
                ( North::None, true, East::Low, false, South::Tall, West::Tall, ) => 21595,
                ( North::None, false, East::Low, true, South::Tall, West::None, ) => 21596,
                ( North::None, false, East::Low, true, South::Tall, West::Low, ) => 21597,
                ( North::None, false, East::Low, true, South::Tall, West::Tall, ) => 21598,
                ( North::None, false, East::Low, false, South::Tall, West::None, ) => 21599,
                ( North::None, false, East::Low, false, South::Tall, West::Low, ) => 21600,
                ( North::None, false, East::Low, false, South::Tall, West::Tall, ) => 21601,
                ( North::Low, true, East::Low, true, South::None, West::None, ) => 21602,
                ( North::Low, true, East::Low, true, South::None, West::Low, ) => 21603,
                ( North::Low, true, East::Low, true, South::None, West::Tall, ) => 21604,
                ( North::Low, true, East::Low, false, South::None, West::None, ) => 21605,
                ( North::Low, true, East::Low, false, South::None, West::Low, ) => 21606,
                ( North::Low, true, East::Low, false, South::None, West::Tall, ) => 21607,
                ( North::Low, false, East::Low, true, South::None, West::None, ) => 21608,
                ( North::Low, false, East::Low, true, South::None, West::Low, ) => 21609,
                ( North::Low, false, East::Low, true, South::None, West::Tall, ) => 21610,
                ( North::Low, false, East::Low, false, South::None, West::None, ) => 21611,
                ( North::Low, false, East::Low, false, South::None, West::Low, ) => 21612,
                ( North::Low, false, East::Low, false, South::None, West::Tall, ) => 21613,
                ( North::Low, true, East::Low, true, South::Low, West::None, ) => 21614,
                ( North::Low, true, East::Low, true, South::Low, West::Low, ) => 21615,
                ( North::Low, true, East::Low, true, South::Low, West::Tall, ) => 21616,
                ( North::Low, true, East::Low, false, South::Low, West::None, ) => 21617,
                ( North::Low, true, East::Low, false, South::Low, West::Low, ) => 21618,
                ( North::Low, true, East::Low, false, South::Low, West::Tall, ) => 21619,
                ( North::Low, false, East::Low, true, South::Low, West::None, ) => 21620,
                ( North::Low, false, East::Low, true, South::Low, West::Low, ) => 21621,
                ( North::Low, false, East::Low, true, South::Low, West::Tall, ) => 21622,
                ( North::Low, false, East::Low, false, South::Low, West::None, ) => 21623,
                ( North::Low, false, East::Low, false, South::Low, West::Low, ) => 21624,
                ( North::Low, false, East::Low, false, South::Low, West::Tall, ) => 21625,
                ( North::Low, true, East::Low, true, South::Tall, West::None, ) => 21626,
                ( North::Low, true, East::Low, true, South::Tall, West::Low, ) => 21627,
                ( North::Low, true, East::Low, true, South::Tall, West::Tall, ) => 21628,
                ( North::Low, true, East::Low, false, South::Tall, West::None, ) => 21629,
                ( North::Low, true, East::Low, false, South::Tall, West::Low, ) => 21630,
                ( North::Low, true, East::Low, false, South::Tall, West::Tall, ) => 21631,
                ( North::Low, false, East::Low, true, South::Tall, West::None, ) => 21632,
                ( North::Low, false, East::Low, true, South::Tall, West::Low, ) => 21633,
                ( North::Low, false, East::Low, true, South::Tall, West::Tall, ) => 21634,
                ( North::Low, false, East::Low, false, South::Tall, West::None, ) => 21635,
                ( North::Low, false, East::Low, false, South::Tall, West::Low, ) => 21636,
                ( North::Low, false, East::Low, false, South::Tall, West::Tall, ) => 21637,
                ( North::Tall, true, East::Low, true, South::None, West::None, ) => 21638,
                ( North::Tall, true, East::Low, true, South::None, West::Low, ) => 21639,
                ( North::Tall, true, East::Low, true, South::None, West::Tall, ) => 21640,
                ( North::Tall, true, East::Low, false, South::None, West::None, ) => 21641,
                ( North::Tall, true, East::Low, false, South::None, West::Low, ) => 21642,
                ( North::Tall, true, East::Low, false, South::None, West::Tall, ) => 21643,
                ( North::Tall, false, East::Low, true, South::None, West::None, ) => 21644,
                ( North::Tall, false, East::Low, true, South::None, West::Low, ) => 21645,
                ( North::Tall, false, East::Low, true, South::None, West::Tall, ) => 21646,
                ( North::Tall, false, East::Low, false, South::None, West::None, ) => 21647,
                ( North::Tall, false, East::Low, false, South::None, West::Low, ) => 21648,
                ( North::Tall, false, East::Low, false, South::None, West::Tall, ) => 21649,
                ( North::Tall, true, East::Low, true, South::Low, West::None, ) => 21650,
                ( North::Tall, true, East::Low, true, South::Low, West::Low, ) => 21651,
                ( North::Tall, true, East::Low, true, South::Low, West::Tall, ) => 21652,
                ( North::Tall, true, East::Low, false, South::Low, West::None, ) => 21653,
                ( North::Tall, true, East::Low, false, South::Low, West::Low, ) => 21654,
                ( North::Tall, true, East::Low, false, South::Low, West::Tall, ) => 21655,
                ( North::Tall, false, East::Low, true, South::Low, West::None, ) => 21656,
                ( North::Tall, false, East::Low, true, South::Low, West::Low, ) => 21657,
                ( North::Tall, false, East::Low, true, South::Low, West::Tall, ) => 21658,
                ( North::Tall, false, East::Low, false, South::Low, West::None, ) => 21659,
                ( North::Tall, false, East::Low, false, South::Low, West::Low, ) => 21660,
                ( North::Tall, false, East::Low, false, South::Low, West::Tall, ) => 21661,
                ( North::Tall, true, East::Low, true, South::Tall, West::None, ) => 21662,
                ( North::Tall, true, East::Low, true, South::Tall, West::Low, ) => 21663,
                ( North::Tall, true, East::Low, true, South::Tall, West::Tall, ) => 21664,
                ( North::Tall, true, East::Low, false, South::Tall, West::None, ) => 21665,
                ( North::Tall, true, East::Low, false, South::Tall, West::Low, ) => 21666,
                ( North::Tall, true, East::Low, false, South::Tall, West::Tall, ) => 21667,
                ( North::Tall, false, East::Low, true, South::Tall, West::None, ) => 21668,
                ( North::Tall, false, East::Low, true, South::Tall, West::Low, ) => 21669,
                ( North::Tall, false, East::Low, true, South::Tall, West::Tall, ) => 21670,
                ( North::Tall, false, East::Low, false, South::Tall, West::None, ) => 21671,
                ( North::Tall, false, East::Low, false, South::Tall, West::Low, ) => 21672,
                ( North::Tall, false, East::Low, false, South::Tall, West::Tall, ) => 21673,
                ( North::None, true, East::Tall, true, South::None, West::None, ) => 21674,
                ( North::None, true, East::Tall, true, South::None, West::Low, ) => 21675,
                ( North::None, true, East::Tall, true, South::None, West::Tall, ) => 21676,
                ( North::None, true, East::Tall, false, South::None, West::None, ) => 21677,
                ( North::None, true, East::Tall, false, South::None, West::Low, ) => 21678,
                ( North::None, true, East::Tall, false, South::None, West::Tall, ) => 21679,
                ( North::None, false, East::Tall, true, South::None, West::None, ) => 21680,
                ( North::None, false, East::Tall, true, South::None, West::Low, ) => 21681,
                ( North::None, false, East::Tall, true, South::None, West::Tall, ) => 21682,
                ( North::None, false, East::Tall, false, South::None, West::None, ) => 21683,
                ( North::None, false, East::Tall, false, South::None, West::Low, ) => 21684,
                ( North::None, false, East::Tall, false, South::None, West::Tall, ) => 21685,
                ( North::None, true, East::Tall, true, South::Low, West::None, ) => 21686,
                ( North::None, true, East::Tall, true, South::Low, West::Low, ) => 21687,
                ( North::None, true, East::Tall, true, South::Low, West::Tall, ) => 21688,
                ( North::None, true, East::Tall, false, South::Low, West::None, ) => 21689,
                ( North::None, true, East::Tall, false, South::Low, West::Low, ) => 21690,
                ( North::None, true, East::Tall, false, South::Low, West::Tall, ) => 21691,
                ( North::None, false, East::Tall, true, South::Low, West::None, ) => 21692,
                ( North::None, false, East::Tall, true, South::Low, West::Low, ) => 21693,
                ( North::None, false, East::Tall, true, South::Low, West::Tall, ) => 21694,
                ( North::None, false, East::Tall, false, South::Low, West::None, ) => 21695,
                ( North::None, false, East::Tall, false, South::Low, West::Low, ) => 21696,
                ( North::None, false, East::Tall, false, South::Low, West::Tall, ) => 21697,
                ( North::None, true, East::Tall, true, South::Tall, West::None, ) => 21698,
                ( North::None, true, East::Tall, true, South::Tall, West::Low, ) => 21699,
                ( North::None, true, East::Tall, true, South::Tall, West::Tall, ) => 21700,
                ( North::None, true, East::Tall, false, South::Tall, West::None, ) => 21701,
                ( North::None, true, East::Tall, false, South::Tall, West::Low, ) => 21702,
                ( North::None, true, East::Tall, false, South::Tall, West::Tall, ) => 21703,
                ( North::None, false, East::Tall, true, South::Tall, West::None, ) => 21704,
                ( North::None, false, East::Tall, true, South::Tall, West::Low, ) => 21705,
                ( North::None, false, East::Tall, true, South::Tall, West::Tall, ) => 21706,
                ( North::None, false, East::Tall, false, South::Tall, West::None, ) => 21707,
                ( North::None, false, East::Tall, false, South::Tall, West::Low, ) => 21708,
                ( North::None, false, East::Tall, false, South::Tall, West::Tall, ) => 21709,
                ( North::Low, true, East::Tall, true, South::None, West::None, ) => 21710,
                ( North::Low, true, East::Tall, true, South::None, West::Low, ) => 21711,
                ( North::Low, true, East::Tall, true, South::None, West::Tall, ) => 21712,
                ( North::Low, true, East::Tall, false, South::None, West::None, ) => 21713,
                ( North::Low, true, East::Tall, false, South::None, West::Low, ) => 21714,
                ( North::Low, true, East::Tall, false, South::None, West::Tall, ) => 21715,
                ( North::Low, false, East::Tall, true, South::None, West::None, ) => 21716,
                ( North::Low, false, East::Tall, true, South::None, West::Low, ) => 21717,
                ( North::Low, false, East::Tall, true, South::None, West::Tall, ) => 21718,
                ( North::Low, false, East::Tall, false, South::None, West::None, ) => 21719,
                ( North::Low, false, East::Tall, false, South::None, West::Low, ) => 21720,
                ( North::Low, false, East::Tall, false, South::None, West::Tall, ) => 21721,
                ( North::Low, true, East::Tall, true, South::Low, West::None, ) => 21722,
                ( North::Low, true, East::Tall, true, South::Low, West::Low, ) => 21723,
                ( North::Low, true, East::Tall, true, South::Low, West::Tall, ) => 21724,
                ( North::Low, true, East::Tall, false, South::Low, West::None, ) => 21725,
                ( North::Low, true, East::Tall, false, South::Low, West::Low, ) => 21726,
                ( North::Low, true, East::Tall, false, South::Low, West::Tall, ) => 21727,
                ( North::Low, false, East::Tall, true, South::Low, West::None, ) => 21728,
                ( North::Low, false, East::Tall, true, South::Low, West::Low, ) => 21729,
                ( North::Low, false, East::Tall, true, South::Low, West::Tall, ) => 21730,
                ( North::Low, false, East::Tall, false, South::Low, West::None, ) => 21731,
                ( North::Low, false, East::Tall, false, South::Low, West::Low, ) => 21732,
                ( North::Low, false, East::Tall, false, South::Low, West::Tall, ) => 21733,
                ( North::Low, true, East::Tall, true, South::Tall, West::None, ) => 21734,
                ( North::Low, true, East::Tall, true, South::Tall, West::Low, ) => 21735,
                ( North::Low, true, East::Tall, true, South::Tall, West::Tall, ) => 21736,
                ( North::Low, true, East::Tall, false, South::Tall, West::None, ) => 21737,
                ( North::Low, true, East::Tall, false, South::Tall, West::Low, ) => 21738,
                ( North::Low, true, East::Tall, false, South::Tall, West::Tall, ) => 21739,
                ( North::Low, false, East::Tall, true, South::Tall, West::None, ) => 21740,
                ( North::Low, false, East::Tall, true, South::Tall, West::Low, ) => 21741,
                ( North::Low, false, East::Tall, true, South::Tall, West::Tall, ) => 21742,
                ( North::Low, false, East::Tall, false, South::Tall, West::None, ) => 21743,
                ( North::Low, false, East::Tall, false, South::Tall, West::Low, ) => 21744,
                ( North::Low, false, East::Tall, false, South::Tall, West::Tall, ) => 21745,
                ( North::Tall, true, East::Tall, true, South::None, West::None, ) => 21746,
                ( North::Tall, true, East::Tall, true, South::None, West::Low, ) => 21747,
                ( North::Tall, true, East::Tall, true, South::None, West::Tall, ) => 21748,
                ( North::Tall, true, East::Tall, false, South::None, West::None, ) => 21749,
                ( North::Tall, true, East::Tall, false, South::None, West::Low, ) => 21750,
                ( North::Tall, true, East::Tall, false, South::None, West::Tall, ) => 21751,
                ( North::Tall, false, East::Tall, true, South::None, West::None, ) => 21752,
                ( North::Tall, false, East::Tall, true, South::None, West::Low, ) => 21753,
                ( North::Tall, false, East::Tall, true, South::None, West::Tall, ) => 21754,
                ( North::Tall, false, East::Tall, false, South::None, West::None, ) => 21755,
                ( North::Tall, false, East::Tall, false, South::None, West::Low, ) => 21756,
                ( North::Tall, false, East::Tall, false, South::None, West::Tall, ) => 21757,
                ( North::Tall, true, East::Tall, true, South::Low, West::None, ) => 21758,
                ( North::Tall, true, East::Tall, true, South::Low, West::Low, ) => 21759,
                ( North::Tall, true, East::Tall, true, South::Low, West::Tall, ) => 21760,
                ( North::Tall, true, East::Tall, false, South::Low, West::None, ) => 21761,
                ( North::Tall, true, East::Tall, false, South::Low, West::Low, ) => 21762,
                ( North::Tall, true, East::Tall, false, South::Low, West::Tall, ) => 21763,
                ( North::Tall, false, East::Tall, true, South::Low, West::None, ) => 21764,
                ( North::Tall, false, East::Tall, true, South::Low, West::Low, ) => 21765,
                ( North::Tall, false, East::Tall, true, South::Low, West::Tall, ) => 21766,
                ( North::Tall, false, East::Tall, false, South::Low, West::None, ) => 21767,
                ( North::Tall, false, East::Tall, false, South::Low, West::Low, ) => 21768,
                ( North::Tall, false, East::Tall, false, South::Low, West::Tall, ) => 21769,
                ( North::Tall, true, East::Tall, true, South::Tall, West::None, ) => 21770,
                ( North::Tall, true, East::Tall, true, South::Tall, West::Low, ) => 21771,
                ( North::Tall, true, East::Tall, true, South::Tall, West::Tall, ) => 21772,
                ( North::Tall, true, East::Tall, false, South::Tall, West::None, ) => 21773,
                ( North::Tall, true, East::Tall, false, South::Tall, West::Low, ) => 21774,
                ( North::Tall, true, East::Tall, false, South::Tall, West::Tall, ) => 21775,
                ( North::Tall, false, East::Tall, true, South::Tall, West::None, ) => 21776,
                ( North::Tall, false, East::Tall, true, South::Tall, West::Low, ) => 21777,
                ( North::Tall, false, East::Tall, true, South::Tall, West::Tall, ) => 21778,
                ( North::Tall, false, East::Tall, false, South::Tall, West::None, ) => 21779,
                ( North::Tall, false, East::Tall, false, South::Tall, West::Low, ) => 21780,
                ( North::Tall, false, East::Tall, false, South::Tall, West::Tall, ) => 21781,
            })
        }
    }

    impl From<PolishedBlackstoneWall> for BlockState {
        #[inline(always)]
        fn from(value : PolishedBlackstoneWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedBlackstoneWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedBlackstoneWall { }

    impl Block for PolishedBlackstoneWall {
        const DEFAULT_STATE : Self = Self {
            north : North::None,
            up : true,
            east : East::None,
            waterlogged : false,
            south : South::None,
            west : West::None,
        };
    }

}

/// `minecraft:wither_skeleton_skull` block.
pub mod wither_skeleton_skull {
    use super::*;

    /// `minecraft:wither_skeleton_skull` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WitherSkeletonSkull {
        /// `powered` state.
        pub powered : bool,
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl WitherSkeletonSkull {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.rotation, )) {
                ( true, Rotation::N0, ) => 9676,
                ( true, Rotation::N1, ) => 9677,
                ( true, Rotation::N2, ) => 9678,
                ( true, Rotation::N3, ) => 9679,
                ( true, Rotation::N4, ) => 9680,
                ( true, Rotation::N5, ) => 9681,
                ( true, Rotation::N6, ) => 9682,
                ( true, Rotation::N7, ) => 9683,
                ( true, Rotation::N8, ) => 9684,
                ( true, Rotation::N9, ) => 9685,
                ( true, Rotation::N10, ) => 9686,
                ( true, Rotation::N11, ) => 9687,
                ( true, Rotation::N12, ) => 9688,
                ( true, Rotation::N13, ) => 9689,
                ( true, Rotation::N14, ) => 9690,
                ( true, Rotation::N15, ) => 9691,
                ( false, Rotation::N0, ) => 9692,
                ( false, Rotation::N1, ) => 9693,
                ( false, Rotation::N2, ) => 9694,
                ( false, Rotation::N3, ) => 9695,
                ( false, Rotation::N4, ) => 9696,
                ( false, Rotation::N5, ) => 9697,
                ( false, Rotation::N6, ) => 9698,
                ( false, Rotation::N7, ) => 9699,
                ( false, Rotation::N8, ) => 9700,
                ( false, Rotation::N9, ) => 9701,
                ( false, Rotation::N10, ) => 9702,
                ( false, Rotation::N11, ) => 9703,
                ( false, Rotation::N12, ) => 9704,
                ( false, Rotation::N13, ) => 9705,
                ( false, Rotation::N14, ) => 9706,
                ( false, Rotation::N15, ) => 9707,
            })
        }
    }

    impl From<WitherSkeletonSkull> for BlockState {
        #[inline(always)]
        fn from(value : WitherSkeletonSkull) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WitherSkeletonSkull {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WitherSkeletonSkull { }

    impl Block for WitherSkeletonSkull {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:warped_wall_hanging_sign` block.
pub mod warped_wall_hanging_sign {
    use super::*;

    /// `minecraft:warped_wall_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedWallHangingSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WarpedWallHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 5786,
                ( false, Facing::North, ) => 5787,
                ( true, Facing::South, ) => 5788,
                ( false, Facing::South, ) => 5789,
                ( true, Facing::West, ) => 5790,
                ( false, Facing::West, ) => 5791,
                ( true, Facing::East, ) => 5792,
                ( false, Facing::East, ) => 5793,
            })
        }
    }

    impl From<WarpedWallHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : WarpedWallHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedWallHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedWallHangingSign { }

    impl Block for WarpedWallHangingSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:polished_blackstone_button` block.
pub mod polished_blackstone_button {
    use super::*;

    /// `minecraft:polished_blackstone_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedBlackstoneButton {
        /// `face` state.
        pub face : Face,
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
    }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PolishedBlackstoneButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.face, self.facing, self.powered, )) {
                ( Face::Floor, Facing::North, true, ) => 21434,
                ( Face::Floor, Facing::North, false, ) => 21435,
                ( Face::Floor, Facing::South, true, ) => 21436,
                ( Face::Floor, Facing::South, false, ) => 21437,
                ( Face::Floor, Facing::West, true, ) => 21438,
                ( Face::Floor, Facing::West, false, ) => 21439,
                ( Face::Floor, Facing::East, true, ) => 21440,
                ( Face::Floor, Facing::East, false, ) => 21441,
                ( Face::Wall, Facing::North, true, ) => 21442,
                ( Face::Wall, Facing::North, false, ) => 21443,
                ( Face::Wall, Facing::South, true, ) => 21444,
                ( Face::Wall, Facing::South, false, ) => 21445,
                ( Face::Wall, Facing::West, true, ) => 21446,
                ( Face::Wall, Facing::West, false, ) => 21447,
                ( Face::Wall, Facing::East, true, ) => 21448,
                ( Face::Wall, Facing::East, false, ) => 21449,
                ( Face::Ceiling, Facing::North, true, ) => 21450,
                ( Face::Ceiling, Facing::North, false, ) => 21451,
                ( Face::Ceiling, Facing::South, true, ) => 21452,
                ( Face::Ceiling, Facing::South, false, ) => 21453,
                ( Face::Ceiling, Facing::West, true, ) => 21454,
                ( Face::Ceiling, Facing::West, false, ) => 21455,
                ( Face::Ceiling, Facing::East, true, ) => 21456,
                ( Face::Ceiling, Facing::East, false, ) => 21457,
            })
        }
    }

    impl From<PolishedBlackstoneButton> for BlockState {
        #[inline(always)]
        fn from(value : PolishedBlackstoneButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedBlackstoneButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedBlackstoneButton { }

    impl Block for PolishedBlackstoneButton {
        const DEFAULT_STATE : Self = Self {
            face : Face::Wall,
            facing : Facing::North,
            powered : false,
        };
    }

}

/// `minecraft:open_eyeblossom` block.
pub mod open_eyeblossom {
    use super::*;

    /// `minecraft:open_eyeblossom` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OpenEyeblossom;

    impl OpenEyeblossom {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27941)
        }
    }

    impl From<OpenEyeblossom> for BlockState {
        #[inline(always)]
        fn from(value : OpenEyeblossom) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OpenEyeblossom {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OpenEyeblossom { }

    impl Block for OpenEyeblossom {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:jukebox` block.
pub mod jukebox {
    use super::*;

    /// `minecraft:jukebox` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Jukebox {
        /// `has_record` state.
        pub has_record : bool,
    }

    impl Jukebox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.has_record, )) {
                ( true, ) => 5994,
                ( false, ) => 5995,
            })
        }
    }

    impl From<Jukebox> for BlockState {
        #[inline(always)]
        fn from(value : Jukebox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Jukebox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Jukebox { }

    impl Block for Jukebox {
        const DEFAULT_STATE : Self = Self {
            has_record : false,
        };
    }

}

/// `minecraft:red_sand` block.
pub mod red_sand {
    use super::*;

    /// `minecraft:red_sand` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedSand;

    impl RedSand {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(123)
        }
    }

    impl From<RedSand> for BlockState {
        #[inline(always)]
        fn from(value : RedSand) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedSand {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedSand { }

    impl Block for RedSand {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:warped_fence_gate` block.
pub mod warped_fence_gate {
    use super::*;

    /// `minecraft:warped_fence_gate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedFenceGate {
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `open` state.
        pub open : bool,
        /// `in_wall` state.
        pub in_wall : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WarpedFenceGate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.facing, self.open, self.in_wall, )) {
                ( true, Facing::North, true, true, ) => 19963,
                ( false, Facing::North, true, true, ) => 19964,
                ( true, Facing::North, false, true, ) => 19965,
                ( false, Facing::North, false, true, ) => 19966,
                ( true, Facing::North, true, false, ) => 19967,
                ( false, Facing::North, true, false, ) => 19968,
                ( true, Facing::North, false, false, ) => 19969,
                ( false, Facing::North, false, false, ) => 19970,
                ( true, Facing::South, true, true, ) => 19971,
                ( false, Facing::South, true, true, ) => 19972,
                ( true, Facing::South, false, true, ) => 19973,
                ( false, Facing::South, false, true, ) => 19974,
                ( true, Facing::South, true, false, ) => 19975,
                ( false, Facing::South, true, false, ) => 19976,
                ( true, Facing::South, false, false, ) => 19977,
                ( false, Facing::South, false, false, ) => 19978,
                ( true, Facing::West, true, true, ) => 19979,
                ( false, Facing::West, true, true, ) => 19980,
                ( true, Facing::West, false, true, ) => 19981,
                ( false, Facing::West, false, true, ) => 19982,
                ( true, Facing::West, true, false, ) => 19983,
                ( false, Facing::West, true, false, ) => 19984,
                ( true, Facing::West, false, false, ) => 19985,
                ( false, Facing::West, false, false, ) => 19986,
                ( true, Facing::East, true, true, ) => 19987,
                ( false, Facing::East, true, true, ) => 19988,
                ( true, Facing::East, false, true, ) => 19989,
                ( false, Facing::East, false, true, ) => 19990,
                ( true, Facing::East, true, false, ) => 19991,
                ( false, Facing::East, true, false, ) => 19992,
                ( true, Facing::East, false, false, ) => 19993,
                ( false, Facing::East, false, false, ) => 19994,
            })
        }
    }

    impl From<WarpedFenceGate> for BlockState {
        #[inline(always)]
        fn from(value : WarpedFenceGate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedFenceGate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedFenceGate { }

    impl Block for WarpedFenceGate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            facing : Facing::North,
            open : false,
            in_wall : false,
        };
    }

}

/// `minecraft:stripped_acacia_wood` block.
pub mod stripped_acacia_wood {
    use super::*;

    /// `minecraft:stripped_acacia_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedAcaciaWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedAcaciaWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 237,
                ( Axis::Y, ) => 238,
                ( Axis::Z, ) => 239,
            })
        }
    }

    impl From<StrippedAcaciaWood> for BlockState {
        #[inline(always)]
        fn from(value : StrippedAcaciaWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedAcaciaWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedAcaciaWood { }

    impl Block for StrippedAcaciaWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:warped_hanging_sign` block.
pub mod warped_hanging_sign {
    use super::*;

    /// `minecraft:warped_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedHangingSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `attached` state.
        pub attached : bool,
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl WarpedHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.attached, self.rotation, )) {
                ( true, true, Rotation::N0, ) => 5514,
                ( false, true, Rotation::N0, ) => 5515,
                ( true, true, Rotation::N1, ) => 5516,
                ( false, true, Rotation::N1, ) => 5517,
                ( true, true, Rotation::N2, ) => 5518,
                ( false, true, Rotation::N2, ) => 5519,
                ( true, true, Rotation::N3, ) => 5520,
                ( false, true, Rotation::N3, ) => 5521,
                ( true, true, Rotation::N4, ) => 5522,
                ( false, true, Rotation::N4, ) => 5523,
                ( true, true, Rotation::N5, ) => 5524,
                ( false, true, Rotation::N5, ) => 5525,
                ( true, true, Rotation::N6, ) => 5526,
                ( false, true, Rotation::N6, ) => 5527,
                ( true, true, Rotation::N7, ) => 5528,
                ( false, true, Rotation::N7, ) => 5529,
                ( true, true, Rotation::N8, ) => 5530,
                ( false, true, Rotation::N8, ) => 5531,
                ( true, true, Rotation::N9, ) => 5532,
                ( false, true, Rotation::N9, ) => 5533,
                ( true, true, Rotation::N10, ) => 5534,
                ( false, true, Rotation::N10, ) => 5535,
                ( true, true, Rotation::N11, ) => 5536,
                ( false, true, Rotation::N11, ) => 5537,
                ( true, true, Rotation::N12, ) => 5538,
                ( false, true, Rotation::N12, ) => 5539,
                ( true, true, Rotation::N13, ) => 5540,
                ( false, true, Rotation::N13, ) => 5541,
                ( true, true, Rotation::N14, ) => 5542,
                ( false, true, Rotation::N14, ) => 5543,
                ( true, true, Rotation::N15, ) => 5544,
                ( false, true, Rotation::N15, ) => 5545,
                ( true, false, Rotation::N0, ) => 5546,
                ( false, false, Rotation::N0, ) => 5547,
                ( true, false, Rotation::N1, ) => 5548,
                ( false, false, Rotation::N1, ) => 5549,
                ( true, false, Rotation::N2, ) => 5550,
                ( false, false, Rotation::N2, ) => 5551,
                ( true, false, Rotation::N3, ) => 5552,
                ( false, false, Rotation::N3, ) => 5553,
                ( true, false, Rotation::N4, ) => 5554,
                ( false, false, Rotation::N4, ) => 5555,
                ( true, false, Rotation::N5, ) => 5556,
                ( false, false, Rotation::N5, ) => 5557,
                ( true, false, Rotation::N6, ) => 5558,
                ( false, false, Rotation::N6, ) => 5559,
                ( true, false, Rotation::N7, ) => 5560,
                ( false, false, Rotation::N7, ) => 5561,
                ( true, false, Rotation::N8, ) => 5562,
                ( false, false, Rotation::N8, ) => 5563,
                ( true, false, Rotation::N9, ) => 5564,
                ( false, false, Rotation::N9, ) => 5565,
                ( true, false, Rotation::N10, ) => 5566,
                ( false, false, Rotation::N10, ) => 5567,
                ( true, false, Rotation::N11, ) => 5568,
                ( false, false, Rotation::N11, ) => 5569,
                ( true, false, Rotation::N12, ) => 5570,
                ( false, false, Rotation::N12, ) => 5571,
                ( true, false, Rotation::N13, ) => 5572,
                ( false, false, Rotation::N13, ) => 5573,
                ( true, false, Rotation::N14, ) => 5574,
                ( false, false, Rotation::N14, ) => 5575,
                ( true, false, Rotation::N15, ) => 5576,
                ( false, false, Rotation::N15, ) => 5577,
            })
        }
    }

    impl From<WarpedHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : WarpedHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedHangingSign { }

    impl Block for WarpedHangingSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            attached : false,
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:chiseled_tuff` block.
pub mod chiseled_tuff {
    use super::*;

    /// `minecraft:chiseled_tuff` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChiseledTuff;

    impl ChiseledTuff {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(22963)
        }
    }

    impl From<ChiseledTuff> for BlockState {
        #[inline(always)]
        fn from(value : ChiseledTuff) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChiseledTuff {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChiseledTuff { }

    impl Block for ChiseledTuff {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:pitcher_plant` block.
pub mod pitcher_plant {
    use super::*;

    /// `minecraft:pitcher_plant` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PitcherPlant {
        /// `half` state.
        pub half : Half,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl PitcherPlant {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, )) {
                ( Half::Upper, ) => 13530,
                ( Half::Lower, ) => 13531,
            })
        }
    }

    impl From<PitcherPlant> for BlockState {
        #[inline(always)]
        fn from(value : PitcherPlant) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PitcherPlant {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PitcherPlant { }

    impl Block for PitcherPlant {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
        };
    }

}

/// `minecraft:dead_brain_coral_fan` block.
pub mod dead_brain_coral_fan {
    use super::*;

    /// `minecraft:dead_brain_coral_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadBrainCoralFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl DeadBrainCoralFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13890,
                ( false, ) => 13891,
            })
        }
    }

    impl From<DeadBrainCoralFan> for BlockState {
        #[inline(always)]
        fn from(value : DeadBrainCoralFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadBrainCoralFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadBrainCoralFan { }

    impl Block for DeadBrainCoralFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:big_dripleaf_stem` block.
pub mod big_dripleaf_stem {
    use super::*;

    /// `minecraft:big_dripleaf_stem` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BigDripleafStem {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BigDripleafStem {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 25968,
                ( Facing::North, false, ) => 25969,
                ( Facing::South, true, ) => 25970,
                ( Facing::South, false, ) => 25971,
                ( Facing::West, true, ) => 25972,
                ( Facing::West, false, ) => 25973,
                ( Facing::East, true, ) => 25974,
                ( Facing::East, false, ) => 25975,
            })
        }
    }

    impl From<BigDripleafStem> for BlockState {
        #[inline(always)]
        fn from(value : BigDripleafStem) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BigDripleafStem {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BigDripleafStem { }

    impl Block for BigDripleafStem {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:lightning_rod` block.
pub mod lightning_rod {
    use super::*;

    /// `minecraft:lightning_rod` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightningRod {
        /// `powered` state.
        pub powered : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl LightningRod {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.waterlogged, self.facing, )) {
                ( true, true, Facing::North, ) => 25784,
                ( true, false, Facing::North, ) => 25785,
                ( false, true, Facing::North, ) => 25786,
                ( false, false, Facing::North, ) => 25787,
                ( true, true, Facing::East, ) => 25788,
                ( true, false, Facing::East, ) => 25789,
                ( false, true, Facing::East, ) => 25790,
                ( false, false, Facing::East, ) => 25791,
                ( true, true, Facing::South, ) => 25792,
                ( true, false, Facing::South, ) => 25793,
                ( false, true, Facing::South, ) => 25794,
                ( false, false, Facing::South, ) => 25795,
                ( true, true, Facing::West, ) => 25796,
                ( true, false, Facing::West, ) => 25797,
                ( false, true, Facing::West, ) => 25798,
                ( false, false, Facing::West, ) => 25799,
                ( true, true, Facing::Up, ) => 25800,
                ( true, false, Facing::Up, ) => 25801,
                ( false, true, Facing::Up, ) => 25802,
                ( false, false, Facing::Up, ) => 25803,
                ( true, true, Facing::Down, ) => 25804,
                ( true, false, Facing::Down, ) => 25805,
                ( false, true, Facing::Down, ) => 25806,
                ( false, false, Facing::Down, ) => 25807,
            })
        }
    }

    impl From<LightningRod> for BlockState {
        #[inline(always)]
        fn from(value : LightningRod) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightningRod {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightningRod { }

    impl Block for LightningRod {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            waterlogged : false,
            facing : Facing::Up,
        };
    }

}

/// `minecraft:calcite` block.
pub mod calcite {
    use super::*;

    /// `minecraft:calcite` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Calcite;

    impl Calcite {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(23376)
        }
    }

    impl From<Calcite> for BlockState {
        #[inline(always)]
        fn from(value : Calcite) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Calcite {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Calcite { }

    impl Block for Calcite {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:black_terracotta` block.
pub mod black_terracotta {
    use super::*;

    /// `minecraft:black_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackTerracotta;

    impl BlackTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10180)
        }
    }

    impl From<BlackTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : BlackTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackTerracotta { }

    impl Block for BlackTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:lime_wool` block.
pub mod lime_wool {
    use super::*;

    /// `minecraft:lime_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeWool;

    impl LimeWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2098)
        }
    }

    impl From<LimeWool> for BlockState {
        #[inline(always)]
        fn from(value : LimeWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeWool { }

    impl Block for LimeWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:pink_candle` block.
pub mod pink_candle {
    use super::*;

    /// `minecraft:pink_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkCandle {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `lit` state.
        pub lit : bool,
        /// `candles` state.
        pub candles : Candles,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl PinkCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.lit, self.candles, )) {
                ( true, true, Candles::N1, ) => 21897,
                ( false, true, Candles::N1, ) => 21898,
                ( true, false, Candles::N1, ) => 21899,
                ( false, false, Candles::N1, ) => 21900,
                ( true, true, Candles::N2, ) => 21901,
                ( false, true, Candles::N2, ) => 21902,
                ( true, false, Candles::N2, ) => 21903,
                ( false, false, Candles::N2, ) => 21904,
                ( true, true, Candles::N3, ) => 21905,
                ( false, true, Candles::N3, ) => 21906,
                ( true, false, Candles::N3, ) => 21907,
                ( false, false, Candles::N3, ) => 21908,
                ( true, true, Candles::N4, ) => 21909,
                ( false, true, Candles::N4, ) => 21910,
                ( true, false, Candles::N4, ) => 21911,
                ( false, false, Candles::N4, ) => 21912,
            })
        }
    }

    impl From<PinkCandle> for BlockState {
        #[inline(always)]
        fn from(value : PinkCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkCandle { }

    impl Block for PinkCandle {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            lit : false,
            candles : Candles::N1,
        };
    }

}

/// `minecraft:potted_closed_eyeblossom` block.
pub mod potted_closed_eyeblossom {
    use super::*;

    /// `minecraft:potted_closed_eyeblossom` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedClosedEyeblossom;

    impl PottedClosedEyeblossom {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27944)
        }
    }

    impl From<PottedClosedEyeblossom> for BlockState {
        #[inline(always)]
        fn from(value : PottedClosedEyeblossom) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedClosedEyeblossom {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedClosedEyeblossom { }

    impl Block for PottedClosedEyeblossom {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:smooth_basalt` block.
pub mod smooth_basalt {
    use super::*;

    /// `minecraft:smooth_basalt` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmoothBasalt;

    impl SmoothBasalt {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27649)
        }
    }

    impl From<SmoothBasalt> for BlockState {
        #[inline(always)]
        fn from(value : SmoothBasalt) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmoothBasalt {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmoothBasalt { }

    impl Block for SmoothBasalt {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:lime_concrete` block.
pub mod lime_concrete {
    use super::*;

    /// `minecraft:lime_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeConcrete;

    impl LimeConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13756)
        }
    }

    impl From<LimeConcrete> for BlockState {
        #[inline(always)]
        fn from(value : LimeConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeConcrete { }

    impl Block for LimeConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_exposed_copper_bulb` block.
pub mod waxed_exposed_copper_bulb {
    use super::*;

    /// `minecraft:waxed_exposed_copper_bulb` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedExposedCopperBulb {
        /// `powered` state.
        pub powered : bool,
        /// `lit` state.
        pub lit : bool,
    }

    impl WaxedExposedCopperBulb {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.lit, )) {
                ( true, true, ) => 25772,
                ( false, true, ) => 25773,
                ( true, false, ) => 25774,
                ( false, false, ) => 25775,
            })
        }
    }

    impl From<WaxedExposedCopperBulb> for BlockState {
        #[inline(always)]
        fn from(value : WaxedExposedCopperBulb) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedExposedCopperBulb {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedExposedCopperBulb { }

    impl Block for WaxedExposedCopperBulb {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            lit : false,
        };
    }

}

/// `minecraft:clay` block.
pub mod clay {
    use super::*;

    /// `minecraft:clay` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Clay;

    impl Clay {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(5977)
        }
    }

    impl From<Clay> for BlockState {
        #[inline(always)]
        fn from(value : Clay) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Clay {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Clay { }

    impl Block for Clay {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:blackstone` block.
pub mod blackstone {
    use super::*;

    /// `minecraft:blackstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Blackstone;

    impl Blackstone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20520)
        }
    }

    impl From<Blackstone> for BlockState {
        #[inline(always)]
        fn from(value : Blackstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Blackstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Blackstone { }

    impl Block for Blackstone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:red_bed` block.
pub mod red_bed {
    use super::*;

    /// `minecraft:red_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedBed {
        /// `occupied` state.
        pub occupied : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `part` state.
        pub part : Part,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    impl RedBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.occupied, self.facing, self.part, )) {
                ( true, Facing::North, Part::Head, ) => 1955,
                ( true, Facing::North, Part::Foot, ) => 1956,
                ( false, Facing::North, Part::Head, ) => 1957,
                ( false, Facing::North, Part::Foot, ) => 1958,
                ( true, Facing::South, Part::Head, ) => 1959,
                ( true, Facing::South, Part::Foot, ) => 1960,
                ( false, Facing::South, Part::Head, ) => 1961,
                ( false, Facing::South, Part::Foot, ) => 1962,
                ( true, Facing::West, Part::Head, ) => 1963,
                ( true, Facing::West, Part::Foot, ) => 1964,
                ( false, Facing::West, Part::Head, ) => 1965,
                ( false, Facing::West, Part::Foot, ) => 1966,
                ( true, Facing::East, Part::Head, ) => 1967,
                ( true, Facing::East, Part::Foot, ) => 1968,
                ( false, Facing::East, Part::Head, ) => 1969,
                ( false, Facing::East, Part::Foot, ) => 1970,
            })
        }
    }

    impl From<RedBed> for BlockState {
        #[inline(always)]
        fn from(value : RedBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedBed { }

    impl Block for RedBed {
        const DEFAULT_STATE : Self = Self {
            occupied : false,
            facing : Facing::North,
            part : Part::Foot,
        };
    }

}

/// `minecraft:blue_bed` block.
pub mod blue_bed {
    use super::*;

    /// `minecraft:blue_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueBed {
        /// `part` state.
        pub part : Part,
        /// `occupied` state.
        pub occupied : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BlueBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.part, self.occupied, self.facing, )) {
                ( Part::Head, true, Facing::North, ) => 1907,
                ( Part::Foot, true, Facing::North, ) => 1908,
                ( Part::Head, false, Facing::North, ) => 1909,
                ( Part::Foot, false, Facing::North, ) => 1910,
                ( Part::Head, true, Facing::South, ) => 1911,
                ( Part::Foot, true, Facing::South, ) => 1912,
                ( Part::Head, false, Facing::South, ) => 1913,
                ( Part::Foot, false, Facing::South, ) => 1914,
                ( Part::Head, true, Facing::West, ) => 1915,
                ( Part::Foot, true, Facing::West, ) => 1916,
                ( Part::Head, false, Facing::West, ) => 1917,
                ( Part::Foot, false, Facing::West, ) => 1918,
                ( Part::Head, true, Facing::East, ) => 1919,
                ( Part::Foot, true, Facing::East, ) => 1920,
                ( Part::Head, false, Facing::East, ) => 1921,
                ( Part::Foot, false, Facing::East, ) => 1922,
            })
        }
    }

    impl From<BlueBed> for BlockState {
        #[inline(always)]
        fn from(value : BlueBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueBed { }

    impl Block for BlueBed {
        const DEFAULT_STATE : Self = Self {
            part : Part::Foot,
            occupied : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:waxed_copper_trapdoor` block.
pub mod waxed_copper_trapdoor {
    use super::*;

    /// `minecraft:waxed_copper_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedCopperTrapdoor {
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WaxedCopperTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.facing, self.waterlogged, self.open, self.powered, )) {
                ( Half::Top, Facing::North, true, true, true, ) => 25480,
                ( Half::Top, Facing::North, false, true, true, ) => 25481,
                ( Half::Top, Facing::North, true, true, false, ) => 25482,
                ( Half::Top, Facing::North, false, true, false, ) => 25483,
                ( Half::Top, Facing::North, true, false, true, ) => 25484,
                ( Half::Top, Facing::North, false, false, true, ) => 25485,
                ( Half::Top, Facing::North, true, false, false, ) => 25486,
                ( Half::Top, Facing::North, false, false, false, ) => 25487,
                ( Half::Bottom, Facing::North, true, true, true, ) => 25488,
                ( Half::Bottom, Facing::North, false, true, true, ) => 25489,
                ( Half::Bottom, Facing::North, true, true, false, ) => 25490,
                ( Half::Bottom, Facing::North, false, true, false, ) => 25491,
                ( Half::Bottom, Facing::North, true, false, true, ) => 25492,
                ( Half::Bottom, Facing::North, false, false, true, ) => 25493,
                ( Half::Bottom, Facing::North, true, false, false, ) => 25494,
                ( Half::Bottom, Facing::North, false, false, false, ) => 25495,
                ( Half::Top, Facing::South, true, true, true, ) => 25496,
                ( Half::Top, Facing::South, false, true, true, ) => 25497,
                ( Half::Top, Facing::South, true, true, false, ) => 25498,
                ( Half::Top, Facing::South, false, true, false, ) => 25499,
                ( Half::Top, Facing::South, true, false, true, ) => 25500,
                ( Half::Top, Facing::South, false, false, true, ) => 25501,
                ( Half::Top, Facing::South, true, false, false, ) => 25502,
                ( Half::Top, Facing::South, false, false, false, ) => 25503,
                ( Half::Bottom, Facing::South, true, true, true, ) => 25504,
                ( Half::Bottom, Facing::South, false, true, true, ) => 25505,
                ( Half::Bottom, Facing::South, true, true, false, ) => 25506,
                ( Half::Bottom, Facing::South, false, true, false, ) => 25507,
                ( Half::Bottom, Facing::South, true, false, true, ) => 25508,
                ( Half::Bottom, Facing::South, false, false, true, ) => 25509,
                ( Half::Bottom, Facing::South, true, false, false, ) => 25510,
                ( Half::Bottom, Facing::South, false, false, false, ) => 25511,
                ( Half::Top, Facing::West, true, true, true, ) => 25512,
                ( Half::Top, Facing::West, false, true, true, ) => 25513,
                ( Half::Top, Facing::West, true, true, false, ) => 25514,
                ( Half::Top, Facing::West, false, true, false, ) => 25515,
                ( Half::Top, Facing::West, true, false, true, ) => 25516,
                ( Half::Top, Facing::West, false, false, true, ) => 25517,
                ( Half::Top, Facing::West, true, false, false, ) => 25518,
                ( Half::Top, Facing::West, false, false, false, ) => 25519,
                ( Half::Bottom, Facing::West, true, true, true, ) => 25520,
                ( Half::Bottom, Facing::West, false, true, true, ) => 25521,
                ( Half::Bottom, Facing::West, true, true, false, ) => 25522,
                ( Half::Bottom, Facing::West, false, true, false, ) => 25523,
                ( Half::Bottom, Facing::West, true, false, true, ) => 25524,
                ( Half::Bottom, Facing::West, false, false, true, ) => 25525,
                ( Half::Bottom, Facing::West, true, false, false, ) => 25526,
                ( Half::Bottom, Facing::West, false, false, false, ) => 25527,
                ( Half::Top, Facing::East, true, true, true, ) => 25528,
                ( Half::Top, Facing::East, false, true, true, ) => 25529,
                ( Half::Top, Facing::East, true, true, false, ) => 25530,
                ( Half::Top, Facing::East, false, true, false, ) => 25531,
                ( Half::Top, Facing::East, true, false, true, ) => 25532,
                ( Half::Top, Facing::East, false, false, true, ) => 25533,
                ( Half::Top, Facing::East, true, false, false, ) => 25534,
                ( Half::Top, Facing::East, false, false, false, ) => 25535,
                ( Half::Bottom, Facing::East, true, true, true, ) => 25536,
                ( Half::Bottom, Facing::East, false, true, true, ) => 25537,
                ( Half::Bottom, Facing::East, true, true, false, ) => 25538,
                ( Half::Bottom, Facing::East, false, true, false, ) => 25539,
                ( Half::Bottom, Facing::East, true, false, true, ) => 25540,
                ( Half::Bottom, Facing::East, false, false, true, ) => 25541,
                ( Half::Bottom, Facing::East, true, false, false, ) => 25542,
                ( Half::Bottom, Facing::East, false, false, false, ) => 25543,
            })
        }
    }

    impl From<WaxedCopperTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : WaxedCopperTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedCopperTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedCopperTrapdoor { }

    impl Block for WaxedCopperTrapdoor {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            facing : Facing::North,
            waterlogged : false,
            open : false,
            powered : false,
        };
    }

}

/// `minecraft:tall_dry_grass` block.
pub mod tall_dry_grass {
    use super::*;

    /// `minecraft:tall_dry_grass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TallDryGrass;

    impl TallDryGrass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2053)
        }
    }

    impl From<TallDryGrass> for BlockState {
        #[inline(always)]
        fn from(value : TallDryGrass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TallDryGrass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TallDryGrass { }

    impl Block for TallDryGrass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:polished_tuff_wall` block.
pub mod polished_tuff_wall {
    use super::*;

    /// `minecraft:polished_tuff_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedTuffWall {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `south` state.
        pub south : South,
        /// `east` state.
        pub east : East,
        /// `up` state.
        pub up : bool,
        /// `west` state.
        pub west : West,
        /// `north` state.
        pub north : North,
    }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    impl PolishedTuffWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.south, self.east, self.up, self.west, self.north, )) {
                ( true, South::None, East::None, true, West::None, North::None, ) => 22639,
                ( true, South::None, East::None, true, West::Low, North::None, ) => 22640,
                ( true, South::None, East::None, true, West::Tall, North::None, ) => 22641,
                ( false, South::None, East::None, true, West::None, North::None, ) => 22642,
                ( false, South::None, East::None, true, West::Low, North::None, ) => 22643,
                ( false, South::None, East::None, true, West::Tall, North::None, ) => 22644,
                ( true, South::None, East::None, false, West::None, North::None, ) => 22645,
                ( true, South::None, East::None, false, West::Low, North::None, ) => 22646,
                ( true, South::None, East::None, false, West::Tall, North::None, ) => 22647,
                ( false, South::None, East::None, false, West::None, North::None, ) => 22648,
                ( false, South::None, East::None, false, West::Low, North::None, ) => 22649,
                ( false, South::None, East::None, false, West::Tall, North::None, ) => 22650,
                ( true, South::Low, East::None, true, West::None, North::None, ) => 22651,
                ( true, South::Low, East::None, true, West::Low, North::None, ) => 22652,
                ( true, South::Low, East::None, true, West::Tall, North::None, ) => 22653,
                ( false, South::Low, East::None, true, West::None, North::None, ) => 22654,
                ( false, South::Low, East::None, true, West::Low, North::None, ) => 22655,
                ( false, South::Low, East::None, true, West::Tall, North::None, ) => 22656,
                ( true, South::Low, East::None, false, West::None, North::None, ) => 22657,
                ( true, South::Low, East::None, false, West::Low, North::None, ) => 22658,
                ( true, South::Low, East::None, false, West::Tall, North::None, ) => 22659,
                ( false, South::Low, East::None, false, West::None, North::None, ) => 22660,
                ( false, South::Low, East::None, false, West::Low, North::None, ) => 22661,
                ( false, South::Low, East::None, false, West::Tall, North::None, ) => 22662,
                ( true, South::Tall, East::None, true, West::None, North::None, ) => 22663,
                ( true, South::Tall, East::None, true, West::Low, North::None, ) => 22664,
                ( true, South::Tall, East::None, true, West::Tall, North::None, ) => 22665,
                ( false, South::Tall, East::None, true, West::None, North::None, ) => 22666,
                ( false, South::Tall, East::None, true, West::Low, North::None, ) => 22667,
                ( false, South::Tall, East::None, true, West::Tall, North::None, ) => 22668,
                ( true, South::Tall, East::None, false, West::None, North::None, ) => 22669,
                ( true, South::Tall, East::None, false, West::Low, North::None, ) => 22670,
                ( true, South::Tall, East::None, false, West::Tall, North::None, ) => 22671,
                ( false, South::Tall, East::None, false, West::None, North::None, ) => 22672,
                ( false, South::Tall, East::None, false, West::Low, North::None, ) => 22673,
                ( false, South::Tall, East::None, false, West::Tall, North::None, ) => 22674,
                ( true, South::None, East::None, true, West::None, North::Low, ) => 22675,
                ( true, South::None, East::None, true, West::Low, North::Low, ) => 22676,
                ( true, South::None, East::None, true, West::Tall, North::Low, ) => 22677,
                ( false, South::None, East::None, true, West::None, North::Low, ) => 22678,
                ( false, South::None, East::None, true, West::Low, North::Low, ) => 22679,
                ( false, South::None, East::None, true, West::Tall, North::Low, ) => 22680,
                ( true, South::None, East::None, false, West::None, North::Low, ) => 22681,
                ( true, South::None, East::None, false, West::Low, North::Low, ) => 22682,
                ( true, South::None, East::None, false, West::Tall, North::Low, ) => 22683,
                ( false, South::None, East::None, false, West::None, North::Low, ) => 22684,
                ( false, South::None, East::None, false, West::Low, North::Low, ) => 22685,
                ( false, South::None, East::None, false, West::Tall, North::Low, ) => 22686,
                ( true, South::Low, East::None, true, West::None, North::Low, ) => 22687,
                ( true, South::Low, East::None, true, West::Low, North::Low, ) => 22688,
                ( true, South::Low, East::None, true, West::Tall, North::Low, ) => 22689,
                ( false, South::Low, East::None, true, West::None, North::Low, ) => 22690,
                ( false, South::Low, East::None, true, West::Low, North::Low, ) => 22691,
                ( false, South::Low, East::None, true, West::Tall, North::Low, ) => 22692,
                ( true, South::Low, East::None, false, West::None, North::Low, ) => 22693,
                ( true, South::Low, East::None, false, West::Low, North::Low, ) => 22694,
                ( true, South::Low, East::None, false, West::Tall, North::Low, ) => 22695,
                ( false, South::Low, East::None, false, West::None, North::Low, ) => 22696,
                ( false, South::Low, East::None, false, West::Low, North::Low, ) => 22697,
                ( false, South::Low, East::None, false, West::Tall, North::Low, ) => 22698,
                ( true, South::Tall, East::None, true, West::None, North::Low, ) => 22699,
                ( true, South::Tall, East::None, true, West::Low, North::Low, ) => 22700,
                ( true, South::Tall, East::None, true, West::Tall, North::Low, ) => 22701,
                ( false, South::Tall, East::None, true, West::None, North::Low, ) => 22702,
                ( false, South::Tall, East::None, true, West::Low, North::Low, ) => 22703,
                ( false, South::Tall, East::None, true, West::Tall, North::Low, ) => 22704,
                ( true, South::Tall, East::None, false, West::None, North::Low, ) => 22705,
                ( true, South::Tall, East::None, false, West::Low, North::Low, ) => 22706,
                ( true, South::Tall, East::None, false, West::Tall, North::Low, ) => 22707,
                ( false, South::Tall, East::None, false, West::None, North::Low, ) => 22708,
                ( false, South::Tall, East::None, false, West::Low, North::Low, ) => 22709,
                ( false, South::Tall, East::None, false, West::Tall, North::Low, ) => 22710,
                ( true, South::None, East::None, true, West::None, North::Tall, ) => 22711,
                ( true, South::None, East::None, true, West::Low, North::Tall, ) => 22712,
                ( true, South::None, East::None, true, West::Tall, North::Tall, ) => 22713,
                ( false, South::None, East::None, true, West::None, North::Tall, ) => 22714,
                ( false, South::None, East::None, true, West::Low, North::Tall, ) => 22715,
                ( false, South::None, East::None, true, West::Tall, North::Tall, ) => 22716,
                ( true, South::None, East::None, false, West::None, North::Tall, ) => 22717,
                ( true, South::None, East::None, false, West::Low, North::Tall, ) => 22718,
                ( true, South::None, East::None, false, West::Tall, North::Tall, ) => 22719,
                ( false, South::None, East::None, false, West::None, North::Tall, ) => 22720,
                ( false, South::None, East::None, false, West::Low, North::Tall, ) => 22721,
                ( false, South::None, East::None, false, West::Tall, North::Tall, ) => 22722,
                ( true, South::Low, East::None, true, West::None, North::Tall, ) => 22723,
                ( true, South::Low, East::None, true, West::Low, North::Tall, ) => 22724,
                ( true, South::Low, East::None, true, West::Tall, North::Tall, ) => 22725,
                ( false, South::Low, East::None, true, West::None, North::Tall, ) => 22726,
                ( false, South::Low, East::None, true, West::Low, North::Tall, ) => 22727,
                ( false, South::Low, East::None, true, West::Tall, North::Tall, ) => 22728,
                ( true, South::Low, East::None, false, West::None, North::Tall, ) => 22729,
                ( true, South::Low, East::None, false, West::Low, North::Tall, ) => 22730,
                ( true, South::Low, East::None, false, West::Tall, North::Tall, ) => 22731,
                ( false, South::Low, East::None, false, West::None, North::Tall, ) => 22732,
                ( false, South::Low, East::None, false, West::Low, North::Tall, ) => 22733,
                ( false, South::Low, East::None, false, West::Tall, North::Tall, ) => 22734,
                ( true, South::Tall, East::None, true, West::None, North::Tall, ) => 22735,
                ( true, South::Tall, East::None, true, West::Low, North::Tall, ) => 22736,
                ( true, South::Tall, East::None, true, West::Tall, North::Tall, ) => 22737,
                ( false, South::Tall, East::None, true, West::None, North::Tall, ) => 22738,
                ( false, South::Tall, East::None, true, West::Low, North::Tall, ) => 22739,
                ( false, South::Tall, East::None, true, West::Tall, North::Tall, ) => 22740,
                ( true, South::Tall, East::None, false, West::None, North::Tall, ) => 22741,
                ( true, South::Tall, East::None, false, West::Low, North::Tall, ) => 22742,
                ( true, South::Tall, East::None, false, West::Tall, North::Tall, ) => 22743,
                ( false, South::Tall, East::None, false, West::None, North::Tall, ) => 22744,
                ( false, South::Tall, East::None, false, West::Low, North::Tall, ) => 22745,
                ( false, South::Tall, East::None, false, West::Tall, North::Tall, ) => 22746,
                ( true, South::None, East::Low, true, West::None, North::None, ) => 22747,
                ( true, South::None, East::Low, true, West::Low, North::None, ) => 22748,
                ( true, South::None, East::Low, true, West::Tall, North::None, ) => 22749,
                ( false, South::None, East::Low, true, West::None, North::None, ) => 22750,
                ( false, South::None, East::Low, true, West::Low, North::None, ) => 22751,
                ( false, South::None, East::Low, true, West::Tall, North::None, ) => 22752,
                ( true, South::None, East::Low, false, West::None, North::None, ) => 22753,
                ( true, South::None, East::Low, false, West::Low, North::None, ) => 22754,
                ( true, South::None, East::Low, false, West::Tall, North::None, ) => 22755,
                ( false, South::None, East::Low, false, West::None, North::None, ) => 22756,
                ( false, South::None, East::Low, false, West::Low, North::None, ) => 22757,
                ( false, South::None, East::Low, false, West::Tall, North::None, ) => 22758,
                ( true, South::Low, East::Low, true, West::None, North::None, ) => 22759,
                ( true, South::Low, East::Low, true, West::Low, North::None, ) => 22760,
                ( true, South::Low, East::Low, true, West::Tall, North::None, ) => 22761,
                ( false, South::Low, East::Low, true, West::None, North::None, ) => 22762,
                ( false, South::Low, East::Low, true, West::Low, North::None, ) => 22763,
                ( false, South::Low, East::Low, true, West::Tall, North::None, ) => 22764,
                ( true, South::Low, East::Low, false, West::None, North::None, ) => 22765,
                ( true, South::Low, East::Low, false, West::Low, North::None, ) => 22766,
                ( true, South::Low, East::Low, false, West::Tall, North::None, ) => 22767,
                ( false, South::Low, East::Low, false, West::None, North::None, ) => 22768,
                ( false, South::Low, East::Low, false, West::Low, North::None, ) => 22769,
                ( false, South::Low, East::Low, false, West::Tall, North::None, ) => 22770,
                ( true, South::Tall, East::Low, true, West::None, North::None, ) => 22771,
                ( true, South::Tall, East::Low, true, West::Low, North::None, ) => 22772,
                ( true, South::Tall, East::Low, true, West::Tall, North::None, ) => 22773,
                ( false, South::Tall, East::Low, true, West::None, North::None, ) => 22774,
                ( false, South::Tall, East::Low, true, West::Low, North::None, ) => 22775,
                ( false, South::Tall, East::Low, true, West::Tall, North::None, ) => 22776,
                ( true, South::Tall, East::Low, false, West::None, North::None, ) => 22777,
                ( true, South::Tall, East::Low, false, West::Low, North::None, ) => 22778,
                ( true, South::Tall, East::Low, false, West::Tall, North::None, ) => 22779,
                ( false, South::Tall, East::Low, false, West::None, North::None, ) => 22780,
                ( false, South::Tall, East::Low, false, West::Low, North::None, ) => 22781,
                ( false, South::Tall, East::Low, false, West::Tall, North::None, ) => 22782,
                ( true, South::None, East::Low, true, West::None, North::Low, ) => 22783,
                ( true, South::None, East::Low, true, West::Low, North::Low, ) => 22784,
                ( true, South::None, East::Low, true, West::Tall, North::Low, ) => 22785,
                ( false, South::None, East::Low, true, West::None, North::Low, ) => 22786,
                ( false, South::None, East::Low, true, West::Low, North::Low, ) => 22787,
                ( false, South::None, East::Low, true, West::Tall, North::Low, ) => 22788,
                ( true, South::None, East::Low, false, West::None, North::Low, ) => 22789,
                ( true, South::None, East::Low, false, West::Low, North::Low, ) => 22790,
                ( true, South::None, East::Low, false, West::Tall, North::Low, ) => 22791,
                ( false, South::None, East::Low, false, West::None, North::Low, ) => 22792,
                ( false, South::None, East::Low, false, West::Low, North::Low, ) => 22793,
                ( false, South::None, East::Low, false, West::Tall, North::Low, ) => 22794,
                ( true, South::Low, East::Low, true, West::None, North::Low, ) => 22795,
                ( true, South::Low, East::Low, true, West::Low, North::Low, ) => 22796,
                ( true, South::Low, East::Low, true, West::Tall, North::Low, ) => 22797,
                ( false, South::Low, East::Low, true, West::None, North::Low, ) => 22798,
                ( false, South::Low, East::Low, true, West::Low, North::Low, ) => 22799,
                ( false, South::Low, East::Low, true, West::Tall, North::Low, ) => 22800,
                ( true, South::Low, East::Low, false, West::None, North::Low, ) => 22801,
                ( true, South::Low, East::Low, false, West::Low, North::Low, ) => 22802,
                ( true, South::Low, East::Low, false, West::Tall, North::Low, ) => 22803,
                ( false, South::Low, East::Low, false, West::None, North::Low, ) => 22804,
                ( false, South::Low, East::Low, false, West::Low, North::Low, ) => 22805,
                ( false, South::Low, East::Low, false, West::Tall, North::Low, ) => 22806,
                ( true, South::Tall, East::Low, true, West::None, North::Low, ) => 22807,
                ( true, South::Tall, East::Low, true, West::Low, North::Low, ) => 22808,
                ( true, South::Tall, East::Low, true, West::Tall, North::Low, ) => 22809,
                ( false, South::Tall, East::Low, true, West::None, North::Low, ) => 22810,
                ( false, South::Tall, East::Low, true, West::Low, North::Low, ) => 22811,
                ( false, South::Tall, East::Low, true, West::Tall, North::Low, ) => 22812,
                ( true, South::Tall, East::Low, false, West::None, North::Low, ) => 22813,
                ( true, South::Tall, East::Low, false, West::Low, North::Low, ) => 22814,
                ( true, South::Tall, East::Low, false, West::Tall, North::Low, ) => 22815,
                ( false, South::Tall, East::Low, false, West::None, North::Low, ) => 22816,
                ( false, South::Tall, East::Low, false, West::Low, North::Low, ) => 22817,
                ( false, South::Tall, East::Low, false, West::Tall, North::Low, ) => 22818,
                ( true, South::None, East::Low, true, West::None, North::Tall, ) => 22819,
                ( true, South::None, East::Low, true, West::Low, North::Tall, ) => 22820,
                ( true, South::None, East::Low, true, West::Tall, North::Tall, ) => 22821,
                ( false, South::None, East::Low, true, West::None, North::Tall, ) => 22822,
                ( false, South::None, East::Low, true, West::Low, North::Tall, ) => 22823,
                ( false, South::None, East::Low, true, West::Tall, North::Tall, ) => 22824,
                ( true, South::None, East::Low, false, West::None, North::Tall, ) => 22825,
                ( true, South::None, East::Low, false, West::Low, North::Tall, ) => 22826,
                ( true, South::None, East::Low, false, West::Tall, North::Tall, ) => 22827,
                ( false, South::None, East::Low, false, West::None, North::Tall, ) => 22828,
                ( false, South::None, East::Low, false, West::Low, North::Tall, ) => 22829,
                ( false, South::None, East::Low, false, West::Tall, North::Tall, ) => 22830,
                ( true, South::Low, East::Low, true, West::None, North::Tall, ) => 22831,
                ( true, South::Low, East::Low, true, West::Low, North::Tall, ) => 22832,
                ( true, South::Low, East::Low, true, West::Tall, North::Tall, ) => 22833,
                ( false, South::Low, East::Low, true, West::None, North::Tall, ) => 22834,
                ( false, South::Low, East::Low, true, West::Low, North::Tall, ) => 22835,
                ( false, South::Low, East::Low, true, West::Tall, North::Tall, ) => 22836,
                ( true, South::Low, East::Low, false, West::None, North::Tall, ) => 22837,
                ( true, South::Low, East::Low, false, West::Low, North::Tall, ) => 22838,
                ( true, South::Low, East::Low, false, West::Tall, North::Tall, ) => 22839,
                ( false, South::Low, East::Low, false, West::None, North::Tall, ) => 22840,
                ( false, South::Low, East::Low, false, West::Low, North::Tall, ) => 22841,
                ( false, South::Low, East::Low, false, West::Tall, North::Tall, ) => 22842,
                ( true, South::Tall, East::Low, true, West::None, North::Tall, ) => 22843,
                ( true, South::Tall, East::Low, true, West::Low, North::Tall, ) => 22844,
                ( true, South::Tall, East::Low, true, West::Tall, North::Tall, ) => 22845,
                ( false, South::Tall, East::Low, true, West::None, North::Tall, ) => 22846,
                ( false, South::Tall, East::Low, true, West::Low, North::Tall, ) => 22847,
                ( false, South::Tall, East::Low, true, West::Tall, North::Tall, ) => 22848,
                ( true, South::Tall, East::Low, false, West::None, North::Tall, ) => 22849,
                ( true, South::Tall, East::Low, false, West::Low, North::Tall, ) => 22850,
                ( true, South::Tall, East::Low, false, West::Tall, North::Tall, ) => 22851,
                ( false, South::Tall, East::Low, false, West::None, North::Tall, ) => 22852,
                ( false, South::Tall, East::Low, false, West::Low, North::Tall, ) => 22853,
                ( false, South::Tall, East::Low, false, West::Tall, North::Tall, ) => 22854,
                ( true, South::None, East::Tall, true, West::None, North::None, ) => 22855,
                ( true, South::None, East::Tall, true, West::Low, North::None, ) => 22856,
                ( true, South::None, East::Tall, true, West::Tall, North::None, ) => 22857,
                ( false, South::None, East::Tall, true, West::None, North::None, ) => 22858,
                ( false, South::None, East::Tall, true, West::Low, North::None, ) => 22859,
                ( false, South::None, East::Tall, true, West::Tall, North::None, ) => 22860,
                ( true, South::None, East::Tall, false, West::None, North::None, ) => 22861,
                ( true, South::None, East::Tall, false, West::Low, North::None, ) => 22862,
                ( true, South::None, East::Tall, false, West::Tall, North::None, ) => 22863,
                ( false, South::None, East::Tall, false, West::None, North::None, ) => 22864,
                ( false, South::None, East::Tall, false, West::Low, North::None, ) => 22865,
                ( false, South::None, East::Tall, false, West::Tall, North::None, ) => 22866,
                ( true, South::Low, East::Tall, true, West::None, North::None, ) => 22867,
                ( true, South::Low, East::Tall, true, West::Low, North::None, ) => 22868,
                ( true, South::Low, East::Tall, true, West::Tall, North::None, ) => 22869,
                ( false, South::Low, East::Tall, true, West::None, North::None, ) => 22870,
                ( false, South::Low, East::Tall, true, West::Low, North::None, ) => 22871,
                ( false, South::Low, East::Tall, true, West::Tall, North::None, ) => 22872,
                ( true, South::Low, East::Tall, false, West::None, North::None, ) => 22873,
                ( true, South::Low, East::Tall, false, West::Low, North::None, ) => 22874,
                ( true, South::Low, East::Tall, false, West::Tall, North::None, ) => 22875,
                ( false, South::Low, East::Tall, false, West::None, North::None, ) => 22876,
                ( false, South::Low, East::Tall, false, West::Low, North::None, ) => 22877,
                ( false, South::Low, East::Tall, false, West::Tall, North::None, ) => 22878,
                ( true, South::Tall, East::Tall, true, West::None, North::None, ) => 22879,
                ( true, South::Tall, East::Tall, true, West::Low, North::None, ) => 22880,
                ( true, South::Tall, East::Tall, true, West::Tall, North::None, ) => 22881,
                ( false, South::Tall, East::Tall, true, West::None, North::None, ) => 22882,
                ( false, South::Tall, East::Tall, true, West::Low, North::None, ) => 22883,
                ( false, South::Tall, East::Tall, true, West::Tall, North::None, ) => 22884,
                ( true, South::Tall, East::Tall, false, West::None, North::None, ) => 22885,
                ( true, South::Tall, East::Tall, false, West::Low, North::None, ) => 22886,
                ( true, South::Tall, East::Tall, false, West::Tall, North::None, ) => 22887,
                ( false, South::Tall, East::Tall, false, West::None, North::None, ) => 22888,
                ( false, South::Tall, East::Tall, false, West::Low, North::None, ) => 22889,
                ( false, South::Tall, East::Tall, false, West::Tall, North::None, ) => 22890,
                ( true, South::None, East::Tall, true, West::None, North::Low, ) => 22891,
                ( true, South::None, East::Tall, true, West::Low, North::Low, ) => 22892,
                ( true, South::None, East::Tall, true, West::Tall, North::Low, ) => 22893,
                ( false, South::None, East::Tall, true, West::None, North::Low, ) => 22894,
                ( false, South::None, East::Tall, true, West::Low, North::Low, ) => 22895,
                ( false, South::None, East::Tall, true, West::Tall, North::Low, ) => 22896,
                ( true, South::None, East::Tall, false, West::None, North::Low, ) => 22897,
                ( true, South::None, East::Tall, false, West::Low, North::Low, ) => 22898,
                ( true, South::None, East::Tall, false, West::Tall, North::Low, ) => 22899,
                ( false, South::None, East::Tall, false, West::None, North::Low, ) => 22900,
                ( false, South::None, East::Tall, false, West::Low, North::Low, ) => 22901,
                ( false, South::None, East::Tall, false, West::Tall, North::Low, ) => 22902,
                ( true, South::Low, East::Tall, true, West::None, North::Low, ) => 22903,
                ( true, South::Low, East::Tall, true, West::Low, North::Low, ) => 22904,
                ( true, South::Low, East::Tall, true, West::Tall, North::Low, ) => 22905,
                ( false, South::Low, East::Tall, true, West::None, North::Low, ) => 22906,
                ( false, South::Low, East::Tall, true, West::Low, North::Low, ) => 22907,
                ( false, South::Low, East::Tall, true, West::Tall, North::Low, ) => 22908,
                ( true, South::Low, East::Tall, false, West::None, North::Low, ) => 22909,
                ( true, South::Low, East::Tall, false, West::Low, North::Low, ) => 22910,
                ( true, South::Low, East::Tall, false, West::Tall, North::Low, ) => 22911,
                ( false, South::Low, East::Tall, false, West::None, North::Low, ) => 22912,
                ( false, South::Low, East::Tall, false, West::Low, North::Low, ) => 22913,
                ( false, South::Low, East::Tall, false, West::Tall, North::Low, ) => 22914,
                ( true, South::Tall, East::Tall, true, West::None, North::Low, ) => 22915,
                ( true, South::Tall, East::Tall, true, West::Low, North::Low, ) => 22916,
                ( true, South::Tall, East::Tall, true, West::Tall, North::Low, ) => 22917,
                ( false, South::Tall, East::Tall, true, West::None, North::Low, ) => 22918,
                ( false, South::Tall, East::Tall, true, West::Low, North::Low, ) => 22919,
                ( false, South::Tall, East::Tall, true, West::Tall, North::Low, ) => 22920,
                ( true, South::Tall, East::Tall, false, West::None, North::Low, ) => 22921,
                ( true, South::Tall, East::Tall, false, West::Low, North::Low, ) => 22922,
                ( true, South::Tall, East::Tall, false, West::Tall, North::Low, ) => 22923,
                ( false, South::Tall, East::Tall, false, West::None, North::Low, ) => 22924,
                ( false, South::Tall, East::Tall, false, West::Low, North::Low, ) => 22925,
                ( false, South::Tall, East::Tall, false, West::Tall, North::Low, ) => 22926,
                ( true, South::None, East::Tall, true, West::None, North::Tall, ) => 22927,
                ( true, South::None, East::Tall, true, West::Low, North::Tall, ) => 22928,
                ( true, South::None, East::Tall, true, West::Tall, North::Tall, ) => 22929,
                ( false, South::None, East::Tall, true, West::None, North::Tall, ) => 22930,
                ( false, South::None, East::Tall, true, West::Low, North::Tall, ) => 22931,
                ( false, South::None, East::Tall, true, West::Tall, North::Tall, ) => 22932,
                ( true, South::None, East::Tall, false, West::None, North::Tall, ) => 22933,
                ( true, South::None, East::Tall, false, West::Low, North::Tall, ) => 22934,
                ( true, South::None, East::Tall, false, West::Tall, North::Tall, ) => 22935,
                ( false, South::None, East::Tall, false, West::None, North::Tall, ) => 22936,
                ( false, South::None, East::Tall, false, West::Low, North::Tall, ) => 22937,
                ( false, South::None, East::Tall, false, West::Tall, North::Tall, ) => 22938,
                ( true, South::Low, East::Tall, true, West::None, North::Tall, ) => 22939,
                ( true, South::Low, East::Tall, true, West::Low, North::Tall, ) => 22940,
                ( true, South::Low, East::Tall, true, West::Tall, North::Tall, ) => 22941,
                ( false, South::Low, East::Tall, true, West::None, North::Tall, ) => 22942,
                ( false, South::Low, East::Tall, true, West::Low, North::Tall, ) => 22943,
                ( false, South::Low, East::Tall, true, West::Tall, North::Tall, ) => 22944,
                ( true, South::Low, East::Tall, false, West::None, North::Tall, ) => 22945,
                ( true, South::Low, East::Tall, false, West::Low, North::Tall, ) => 22946,
                ( true, South::Low, East::Tall, false, West::Tall, North::Tall, ) => 22947,
                ( false, South::Low, East::Tall, false, West::None, North::Tall, ) => 22948,
                ( false, South::Low, East::Tall, false, West::Low, North::Tall, ) => 22949,
                ( false, South::Low, East::Tall, false, West::Tall, North::Tall, ) => 22950,
                ( true, South::Tall, East::Tall, true, West::None, North::Tall, ) => 22951,
                ( true, South::Tall, East::Tall, true, West::Low, North::Tall, ) => 22952,
                ( true, South::Tall, East::Tall, true, West::Tall, North::Tall, ) => 22953,
                ( false, South::Tall, East::Tall, true, West::None, North::Tall, ) => 22954,
                ( false, South::Tall, East::Tall, true, West::Low, North::Tall, ) => 22955,
                ( false, South::Tall, East::Tall, true, West::Tall, North::Tall, ) => 22956,
                ( true, South::Tall, East::Tall, false, West::None, North::Tall, ) => 22957,
                ( true, South::Tall, East::Tall, false, West::Low, North::Tall, ) => 22958,
                ( true, South::Tall, East::Tall, false, West::Tall, North::Tall, ) => 22959,
                ( false, South::Tall, East::Tall, false, West::None, North::Tall, ) => 22960,
                ( false, South::Tall, East::Tall, false, West::Low, North::Tall, ) => 22961,
                ( false, South::Tall, East::Tall, false, West::Tall, North::Tall, ) => 22962,
            })
        }
    }

    impl From<PolishedTuffWall> for BlockState {
        #[inline(always)]
        fn from(value : PolishedTuffWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedTuffWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedTuffWall { }

    impl Block for PolishedTuffWall {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            south : South::None,
            east : East::None,
            up : true,
            west : West::None,
            north : North::None,
        };
    }

}

/// `minecraft:petrified_oak_slab` block.
pub mod petrified_oak_slab {
    use super::*;

    /// `minecraft:petrified_oak_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PetrifiedOakSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl PetrifiedOakSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 12141,
                ( false, Kind::Top, ) => 12142,
                ( true, Kind::Bottom, ) => 12143,
                ( false, Kind::Bottom, ) => 12144,
                ( true, Kind::Double, ) => 12145,
                ( false, Kind::Double, ) => 12146,
            })
        }
    }

    impl From<PetrifiedOakSlab> for BlockState {
        #[inline(always)]
        fn from(value : PetrifiedOakSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PetrifiedOakSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PetrifiedOakSlab { }

    impl Block for PetrifiedOakSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:stripped_birch_log` block.
pub mod stripped_birch_log {
    use super::*;

    /// `minecraft:stripped_birch_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedBirchLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedBirchLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 174,
                ( Axis::Y, ) => 175,
                ( Axis::Z, ) => 176,
            })
        }
    }

    impl From<StrippedBirchLog> for BlockState {
        #[inline(always)]
        fn from(value : StrippedBirchLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedBirchLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedBirchLog { }

    impl Block for StrippedBirchLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:birch_wood` block.
pub mod birch_wood {
    use super::*;

    /// `minecraft:birch_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl BirchWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 207,
                ( Axis::Y, ) => 208,
                ( Axis::Z, ) => 209,
            })
        }
    }

    impl From<BirchWood> for BlockState {
        #[inline(always)]
        fn from(value : BirchWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchWood { }

    impl Block for BirchWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:gilded_blackstone` block.
pub mod gilded_blackstone {
    use super::*;

    /// `minecraft:gilded_blackstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GildedBlackstone;

    impl GildedBlackstone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(21345)
        }
    }

    impl From<GildedBlackstone> for BlockState {
        #[inline(always)]
        fn from(value : GildedBlackstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GildedBlackstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GildedBlackstone { }

    impl Block for GildedBlackstone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:light_blue_candle` block.
pub mod light_blue_candle {
    use super::*;

    /// `minecraft:light_blue_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueCandle {
        /// `candles` state.
        pub candles : Candles,
        /// `lit` state.
        pub lit : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl LightBlueCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.candles, self.lit, self.waterlogged, )) {
                ( Candles::N1, true, true, ) => 21849,
                ( Candles::N1, true, false, ) => 21850,
                ( Candles::N1, false, true, ) => 21851,
                ( Candles::N1, false, false, ) => 21852,
                ( Candles::N2, true, true, ) => 21853,
                ( Candles::N2, true, false, ) => 21854,
                ( Candles::N2, false, true, ) => 21855,
                ( Candles::N2, false, false, ) => 21856,
                ( Candles::N3, true, true, ) => 21857,
                ( Candles::N3, true, false, ) => 21858,
                ( Candles::N3, false, true, ) => 21859,
                ( Candles::N3, false, false, ) => 21860,
                ( Candles::N4, true, true, ) => 21861,
                ( Candles::N4, true, false, ) => 21862,
                ( Candles::N4, false, true, ) => 21863,
                ( Candles::N4, false, false, ) => 21864,
            })
        }
    }

    impl From<LightBlueCandle> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueCandle { }

    impl Block for LightBlueCandle {
        const DEFAULT_STATE : Self = Self {
            candles : Candles::N1,
            lit : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:nether_brick_fence` block.
pub mod nether_brick_fence {
    use super::*;

    /// `minecraft:nether_brick_fence` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct NetherBrickFence {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `east` state.
        pub east : bool,
        /// `north` state.
        pub north : bool,
        /// `south` state.
        pub south : bool,
        /// `west` state.
        pub west : bool,
    }

    impl NetherBrickFence {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.east, self.north, self.south, self.west, )) {
                ( true, true, true, true, true, ) => 8057,
                ( true, true, true, true, false, ) => 8058,
                ( false, true, true, true, true, ) => 8059,
                ( false, true, true, true, false, ) => 8060,
                ( true, true, true, false, true, ) => 8061,
                ( true, true, true, false, false, ) => 8062,
                ( false, true, true, false, true, ) => 8063,
                ( false, true, true, false, false, ) => 8064,
                ( true, true, false, true, true, ) => 8065,
                ( true, true, false, true, false, ) => 8066,
                ( false, true, false, true, true, ) => 8067,
                ( false, true, false, true, false, ) => 8068,
                ( true, true, false, false, true, ) => 8069,
                ( true, true, false, false, false, ) => 8070,
                ( false, true, false, false, true, ) => 8071,
                ( false, true, false, false, false, ) => 8072,
                ( true, false, true, true, true, ) => 8073,
                ( true, false, true, true, false, ) => 8074,
                ( false, false, true, true, true, ) => 8075,
                ( false, false, true, true, false, ) => 8076,
                ( true, false, true, false, true, ) => 8077,
                ( true, false, true, false, false, ) => 8078,
                ( false, false, true, false, true, ) => 8079,
                ( false, false, true, false, false, ) => 8080,
                ( true, false, false, true, true, ) => 8081,
                ( true, false, false, true, false, ) => 8082,
                ( false, false, false, true, true, ) => 8083,
                ( false, false, false, true, false, ) => 8084,
                ( true, false, false, false, true, ) => 8085,
                ( true, false, false, false, false, ) => 8086,
                ( false, false, false, false, true, ) => 8087,
                ( false, false, false, false, false, ) => 8088,
            })
        }
    }

    impl From<NetherBrickFence> for BlockState {
        #[inline(always)]
        fn from(value : NetherBrickFence) -> Self {
            value.to_block_state()
        }
    }

    impl Default for NetherBrickFence {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for NetherBrickFence { }

    impl Block for NetherBrickFence {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            east : false,
            north : false,
            south : false,
            west : false,
        };
    }

}

/// `minecraft:oak_slab` block.
pub mod oak_slab {
    use super::*;

    /// `minecraft:oak_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl OakSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 12051,
                ( Kind::Top, false, ) => 12052,
                ( Kind::Bottom, true, ) => 12053,
                ( Kind::Bottom, false, ) => 12054,
                ( Kind::Double, true, ) => 12055,
                ( Kind::Double, false, ) => 12056,
            })
        }
    }

    impl From<OakSlab> for BlockState {
        #[inline(always)]
        fn from(value : OakSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakSlab { }

    impl Block for OakSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:tall_grass` block.
pub mod tall_grass {
    use super::*;

    /// `minecraft:tall_grass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TallGrass {
        /// `half` state.
        pub half : Half,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl TallGrass {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, )) {
                ( Half::Upper, ) => 11644,
                ( Half::Lower, ) => 11645,
            })
        }
    }

    impl From<TallGrass> for BlockState {
        #[inline(always)]
        fn from(value : TallGrass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TallGrass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TallGrass { }

    impl Block for TallGrass {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
        };
    }

}

/// `minecraft:deepslate_tiles` block.
pub mod deepslate_tiles {
    use super::*;

    /// `minecraft:deepslate_tiles` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateTiles;

    impl DeepslateTiles {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(26821)
        }
    }

    impl From<DeepslateTiles> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateTiles) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateTiles {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateTiles { }

    impl Block for DeepslateTiles {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:flowering_azalea` block.
pub mod flowering_azalea {
    use super::*;

    /// `minecraft:flowering_azalea` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct FloweringAzalea;

    impl FloweringAzalea {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(25885)
        }
    }

    impl From<FloweringAzalea> for BlockState {
        #[inline(always)]
        fn from(value : FloweringAzalea) -> Self {
            value.to_block_state()
        }
    }

    impl Default for FloweringAzalea {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for FloweringAzalea { }

    impl Block for FloweringAzalea {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:trapped_chest` block.
pub mod trapped_chest {
    use super::*;

    /// `minecraft:trapped_chest` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TrappedChest {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `single` variant.
        Single,
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl TrappedChest {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, self.facing, )) {
                ( Kind::Single, true, Facing::North, ) => 9928,
                ( Kind::Single, false, Facing::North, ) => 9929,
                ( Kind::Left, true, Facing::North, ) => 9930,
                ( Kind::Left, false, Facing::North, ) => 9931,
                ( Kind::Right, true, Facing::North, ) => 9932,
                ( Kind::Right, false, Facing::North, ) => 9933,
                ( Kind::Single, true, Facing::South, ) => 9934,
                ( Kind::Single, false, Facing::South, ) => 9935,
                ( Kind::Left, true, Facing::South, ) => 9936,
                ( Kind::Left, false, Facing::South, ) => 9937,
                ( Kind::Right, true, Facing::South, ) => 9938,
                ( Kind::Right, false, Facing::South, ) => 9939,
                ( Kind::Single, true, Facing::West, ) => 9940,
                ( Kind::Single, false, Facing::West, ) => 9941,
                ( Kind::Left, true, Facing::West, ) => 9942,
                ( Kind::Left, false, Facing::West, ) => 9943,
                ( Kind::Right, true, Facing::West, ) => 9944,
                ( Kind::Right, false, Facing::West, ) => 9945,
                ( Kind::Single, true, Facing::East, ) => 9946,
                ( Kind::Single, false, Facing::East, ) => 9947,
                ( Kind::Left, true, Facing::East, ) => 9948,
                ( Kind::Left, false, Facing::East, ) => 9949,
                ( Kind::Right, true, Facing::East, ) => 9950,
                ( Kind::Right, false, Facing::East, ) => 9951,
            })
        }
    }

    impl From<TrappedChest> for BlockState {
        #[inline(always)]
        fn from(value : TrappedChest) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TrappedChest {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TrappedChest { }

    impl Block for TrappedChest {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Single,
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:exposed_copper_door` block.
pub mod exposed_copper_door {
    use super::*;

    /// `minecraft:exposed_copper_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ExposedCopperDoor {
        /// `hinge` state.
        pub hinge : Hinge,
        /// `open` state.
        pub open : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `powered` state.
        pub powered : bool,
    }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl ExposedCopperDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.hinge, self.open, self.facing, self.half, self.powered, )) {
                ( Hinge::Left, true, Facing::North, Half::Upper, true, ) => 24776,
                ( Hinge::Left, true, Facing::North, Half::Upper, false, ) => 24777,
                ( Hinge::Left, false, Facing::North, Half::Upper, true, ) => 24778,
                ( Hinge::Left, false, Facing::North, Half::Upper, false, ) => 24779,
                ( Hinge::Right, true, Facing::North, Half::Upper, true, ) => 24780,
                ( Hinge::Right, true, Facing::North, Half::Upper, false, ) => 24781,
                ( Hinge::Right, false, Facing::North, Half::Upper, true, ) => 24782,
                ( Hinge::Right, false, Facing::North, Half::Upper, false, ) => 24783,
                ( Hinge::Left, true, Facing::North, Half::Lower, true, ) => 24784,
                ( Hinge::Left, true, Facing::North, Half::Lower, false, ) => 24785,
                ( Hinge::Left, false, Facing::North, Half::Lower, true, ) => 24786,
                ( Hinge::Left, false, Facing::North, Half::Lower, false, ) => 24787,
                ( Hinge::Right, true, Facing::North, Half::Lower, true, ) => 24788,
                ( Hinge::Right, true, Facing::North, Half::Lower, false, ) => 24789,
                ( Hinge::Right, false, Facing::North, Half::Lower, true, ) => 24790,
                ( Hinge::Right, false, Facing::North, Half::Lower, false, ) => 24791,
                ( Hinge::Left, true, Facing::South, Half::Upper, true, ) => 24792,
                ( Hinge::Left, true, Facing::South, Half::Upper, false, ) => 24793,
                ( Hinge::Left, false, Facing::South, Half::Upper, true, ) => 24794,
                ( Hinge::Left, false, Facing::South, Half::Upper, false, ) => 24795,
                ( Hinge::Right, true, Facing::South, Half::Upper, true, ) => 24796,
                ( Hinge::Right, true, Facing::South, Half::Upper, false, ) => 24797,
                ( Hinge::Right, false, Facing::South, Half::Upper, true, ) => 24798,
                ( Hinge::Right, false, Facing::South, Half::Upper, false, ) => 24799,
                ( Hinge::Left, true, Facing::South, Half::Lower, true, ) => 24800,
                ( Hinge::Left, true, Facing::South, Half::Lower, false, ) => 24801,
                ( Hinge::Left, false, Facing::South, Half::Lower, true, ) => 24802,
                ( Hinge::Left, false, Facing::South, Half::Lower, false, ) => 24803,
                ( Hinge::Right, true, Facing::South, Half::Lower, true, ) => 24804,
                ( Hinge::Right, true, Facing::South, Half::Lower, false, ) => 24805,
                ( Hinge::Right, false, Facing::South, Half::Lower, true, ) => 24806,
                ( Hinge::Right, false, Facing::South, Half::Lower, false, ) => 24807,
                ( Hinge::Left, true, Facing::West, Half::Upper, true, ) => 24808,
                ( Hinge::Left, true, Facing::West, Half::Upper, false, ) => 24809,
                ( Hinge::Left, false, Facing::West, Half::Upper, true, ) => 24810,
                ( Hinge::Left, false, Facing::West, Half::Upper, false, ) => 24811,
                ( Hinge::Right, true, Facing::West, Half::Upper, true, ) => 24812,
                ( Hinge::Right, true, Facing::West, Half::Upper, false, ) => 24813,
                ( Hinge::Right, false, Facing::West, Half::Upper, true, ) => 24814,
                ( Hinge::Right, false, Facing::West, Half::Upper, false, ) => 24815,
                ( Hinge::Left, true, Facing::West, Half::Lower, true, ) => 24816,
                ( Hinge::Left, true, Facing::West, Half::Lower, false, ) => 24817,
                ( Hinge::Left, false, Facing::West, Half::Lower, true, ) => 24818,
                ( Hinge::Left, false, Facing::West, Half::Lower, false, ) => 24819,
                ( Hinge::Right, true, Facing::West, Half::Lower, true, ) => 24820,
                ( Hinge::Right, true, Facing::West, Half::Lower, false, ) => 24821,
                ( Hinge::Right, false, Facing::West, Half::Lower, true, ) => 24822,
                ( Hinge::Right, false, Facing::West, Half::Lower, false, ) => 24823,
                ( Hinge::Left, true, Facing::East, Half::Upper, true, ) => 24824,
                ( Hinge::Left, true, Facing::East, Half::Upper, false, ) => 24825,
                ( Hinge::Left, false, Facing::East, Half::Upper, true, ) => 24826,
                ( Hinge::Left, false, Facing::East, Half::Upper, false, ) => 24827,
                ( Hinge::Right, true, Facing::East, Half::Upper, true, ) => 24828,
                ( Hinge::Right, true, Facing::East, Half::Upper, false, ) => 24829,
                ( Hinge::Right, false, Facing::East, Half::Upper, true, ) => 24830,
                ( Hinge::Right, false, Facing::East, Half::Upper, false, ) => 24831,
                ( Hinge::Left, true, Facing::East, Half::Lower, true, ) => 24832,
                ( Hinge::Left, true, Facing::East, Half::Lower, false, ) => 24833,
                ( Hinge::Left, false, Facing::East, Half::Lower, true, ) => 24834,
                ( Hinge::Left, false, Facing::East, Half::Lower, false, ) => 24835,
                ( Hinge::Right, true, Facing::East, Half::Lower, true, ) => 24836,
                ( Hinge::Right, true, Facing::East, Half::Lower, false, ) => 24837,
                ( Hinge::Right, false, Facing::East, Half::Lower, true, ) => 24838,
                ( Hinge::Right, false, Facing::East, Half::Lower, false, ) => 24839,
            })
        }
    }

    impl From<ExposedCopperDoor> for BlockState {
        #[inline(always)]
        fn from(value : ExposedCopperDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ExposedCopperDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ExposedCopperDoor { }

    impl Block for ExposedCopperDoor {
        const DEFAULT_STATE : Self = Self {
            hinge : Hinge::Left,
            open : false,
            facing : Facing::North,
            half : Half::Lower,
            powered : false,
        };
    }

}

/// `minecraft:cobblestone` block.
pub mod cobblestone {
    use super::*;

    /// `minecraft:cobblestone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Cobblestone;

    impl Cobblestone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(14)
        }
    }

    impl From<Cobblestone> for BlockState {
        #[inline(always)]
        fn from(value : Cobblestone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Cobblestone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Cobblestone { }

    impl Block for Cobblestone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:acacia_stairs` block.
pub mod acacia_stairs {
    use super::*;

    /// `minecraft:acacia_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaStairs {
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl AcaciaStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.shape, self.waterlogged, self.facing, )) {
                ( Half::Top, Shape::Straight, true, Facing::North, ) => 10693,
                ( Half::Top, Shape::Straight, false, Facing::North, ) => 10694,
                ( Half::Top, Shape::InnerLeft, true, Facing::North, ) => 10695,
                ( Half::Top, Shape::InnerLeft, false, Facing::North, ) => 10696,
                ( Half::Top, Shape::InnerRight, true, Facing::North, ) => 10697,
                ( Half::Top, Shape::InnerRight, false, Facing::North, ) => 10698,
                ( Half::Top, Shape::OuterLeft, true, Facing::North, ) => 10699,
                ( Half::Top, Shape::OuterLeft, false, Facing::North, ) => 10700,
                ( Half::Top, Shape::OuterRight, true, Facing::North, ) => 10701,
                ( Half::Top, Shape::OuterRight, false, Facing::North, ) => 10702,
                ( Half::Bottom, Shape::Straight, true, Facing::North, ) => 10703,
                ( Half::Bottom, Shape::Straight, false, Facing::North, ) => 10704,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::North, ) => 10705,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::North, ) => 10706,
                ( Half::Bottom, Shape::InnerRight, true, Facing::North, ) => 10707,
                ( Half::Bottom, Shape::InnerRight, false, Facing::North, ) => 10708,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::North, ) => 10709,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::North, ) => 10710,
                ( Half::Bottom, Shape::OuterRight, true, Facing::North, ) => 10711,
                ( Half::Bottom, Shape::OuterRight, false, Facing::North, ) => 10712,
                ( Half::Top, Shape::Straight, true, Facing::South, ) => 10713,
                ( Half::Top, Shape::Straight, false, Facing::South, ) => 10714,
                ( Half::Top, Shape::InnerLeft, true, Facing::South, ) => 10715,
                ( Half::Top, Shape::InnerLeft, false, Facing::South, ) => 10716,
                ( Half::Top, Shape::InnerRight, true, Facing::South, ) => 10717,
                ( Half::Top, Shape::InnerRight, false, Facing::South, ) => 10718,
                ( Half::Top, Shape::OuterLeft, true, Facing::South, ) => 10719,
                ( Half::Top, Shape::OuterLeft, false, Facing::South, ) => 10720,
                ( Half::Top, Shape::OuterRight, true, Facing::South, ) => 10721,
                ( Half::Top, Shape::OuterRight, false, Facing::South, ) => 10722,
                ( Half::Bottom, Shape::Straight, true, Facing::South, ) => 10723,
                ( Half::Bottom, Shape::Straight, false, Facing::South, ) => 10724,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::South, ) => 10725,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::South, ) => 10726,
                ( Half::Bottom, Shape::InnerRight, true, Facing::South, ) => 10727,
                ( Half::Bottom, Shape::InnerRight, false, Facing::South, ) => 10728,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::South, ) => 10729,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::South, ) => 10730,
                ( Half::Bottom, Shape::OuterRight, true, Facing::South, ) => 10731,
                ( Half::Bottom, Shape::OuterRight, false, Facing::South, ) => 10732,
                ( Half::Top, Shape::Straight, true, Facing::West, ) => 10733,
                ( Half::Top, Shape::Straight, false, Facing::West, ) => 10734,
                ( Half::Top, Shape::InnerLeft, true, Facing::West, ) => 10735,
                ( Half::Top, Shape::InnerLeft, false, Facing::West, ) => 10736,
                ( Half::Top, Shape::InnerRight, true, Facing::West, ) => 10737,
                ( Half::Top, Shape::InnerRight, false, Facing::West, ) => 10738,
                ( Half::Top, Shape::OuterLeft, true, Facing::West, ) => 10739,
                ( Half::Top, Shape::OuterLeft, false, Facing::West, ) => 10740,
                ( Half::Top, Shape::OuterRight, true, Facing::West, ) => 10741,
                ( Half::Top, Shape::OuterRight, false, Facing::West, ) => 10742,
                ( Half::Bottom, Shape::Straight, true, Facing::West, ) => 10743,
                ( Half::Bottom, Shape::Straight, false, Facing::West, ) => 10744,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::West, ) => 10745,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::West, ) => 10746,
                ( Half::Bottom, Shape::InnerRight, true, Facing::West, ) => 10747,
                ( Half::Bottom, Shape::InnerRight, false, Facing::West, ) => 10748,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::West, ) => 10749,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::West, ) => 10750,
                ( Half::Bottom, Shape::OuterRight, true, Facing::West, ) => 10751,
                ( Half::Bottom, Shape::OuterRight, false, Facing::West, ) => 10752,
                ( Half::Top, Shape::Straight, true, Facing::East, ) => 10753,
                ( Half::Top, Shape::Straight, false, Facing::East, ) => 10754,
                ( Half::Top, Shape::InnerLeft, true, Facing::East, ) => 10755,
                ( Half::Top, Shape::InnerLeft, false, Facing::East, ) => 10756,
                ( Half::Top, Shape::InnerRight, true, Facing::East, ) => 10757,
                ( Half::Top, Shape::InnerRight, false, Facing::East, ) => 10758,
                ( Half::Top, Shape::OuterLeft, true, Facing::East, ) => 10759,
                ( Half::Top, Shape::OuterLeft, false, Facing::East, ) => 10760,
                ( Half::Top, Shape::OuterRight, true, Facing::East, ) => 10761,
                ( Half::Top, Shape::OuterRight, false, Facing::East, ) => 10762,
                ( Half::Bottom, Shape::Straight, true, Facing::East, ) => 10763,
                ( Half::Bottom, Shape::Straight, false, Facing::East, ) => 10764,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::East, ) => 10765,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::East, ) => 10766,
                ( Half::Bottom, Shape::InnerRight, true, Facing::East, ) => 10767,
                ( Half::Bottom, Shape::InnerRight, false, Facing::East, ) => 10768,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::East, ) => 10769,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::East, ) => 10770,
                ( Half::Bottom, Shape::OuterRight, true, Facing::East, ) => 10771,
                ( Half::Bottom, Shape::OuterRight, false, Facing::East, ) => 10772,
            })
        }
    }

    impl From<AcaciaStairs> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaStairs { }

    impl Block for AcaciaStairs {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            shape : Shape::Straight,
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:bamboo_sapling` block.
pub mod bamboo_sapling {
    use super::*;

    /// `minecraft:bamboo_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooSapling;

    impl BambooSapling {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13999)
        }
    }

    impl From<BambooSapling> for BlockState {
        #[inline(always)]
        fn from(value : BambooSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooSapling { }

    impl Block for BambooSapling {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stone_stairs` block.
pub mod stone_stairs {
    use super::*;

    /// `minecraft:stone_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StoneStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl StoneStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.facing, self.waterlogged, self.half, )) {
                ( Shape::Straight, Facing::North, true, Half::Top, ) => 14497,
                ( Shape::Straight, Facing::North, false, Half::Top, ) => 14498,
                ( Shape::InnerLeft, Facing::North, true, Half::Top, ) => 14499,
                ( Shape::InnerLeft, Facing::North, false, Half::Top, ) => 14500,
                ( Shape::InnerRight, Facing::North, true, Half::Top, ) => 14501,
                ( Shape::InnerRight, Facing::North, false, Half::Top, ) => 14502,
                ( Shape::OuterLeft, Facing::North, true, Half::Top, ) => 14503,
                ( Shape::OuterLeft, Facing::North, false, Half::Top, ) => 14504,
                ( Shape::OuterRight, Facing::North, true, Half::Top, ) => 14505,
                ( Shape::OuterRight, Facing::North, false, Half::Top, ) => 14506,
                ( Shape::Straight, Facing::North, true, Half::Bottom, ) => 14507,
                ( Shape::Straight, Facing::North, false, Half::Bottom, ) => 14508,
                ( Shape::InnerLeft, Facing::North, true, Half::Bottom, ) => 14509,
                ( Shape::InnerLeft, Facing::North, false, Half::Bottom, ) => 14510,
                ( Shape::InnerRight, Facing::North, true, Half::Bottom, ) => 14511,
                ( Shape::InnerRight, Facing::North, false, Half::Bottom, ) => 14512,
                ( Shape::OuterLeft, Facing::North, true, Half::Bottom, ) => 14513,
                ( Shape::OuterLeft, Facing::North, false, Half::Bottom, ) => 14514,
                ( Shape::OuterRight, Facing::North, true, Half::Bottom, ) => 14515,
                ( Shape::OuterRight, Facing::North, false, Half::Bottom, ) => 14516,
                ( Shape::Straight, Facing::South, true, Half::Top, ) => 14517,
                ( Shape::Straight, Facing::South, false, Half::Top, ) => 14518,
                ( Shape::InnerLeft, Facing::South, true, Half::Top, ) => 14519,
                ( Shape::InnerLeft, Facing::South, false, Half::Top, ) => 14520,
                ( Shape::InnerRight, Facing::South, true, Half::Top, ) => 14521,
                ( Shape::InnerRight, Facing::South, false, Half::Top, ) => 14522,
                ( Shape::OuterLeft, Facing::South, true, Half::Top, ) => 14523,
                ( Shape::OuterLeft, Facing::South, false, Half::Top, ) => 14524,
                ( Shape::OuterRight, Facing::South, true, Half::Top, ) => 14525,
                ( Shape::OuterRight, Facing::South, false, Half::Top, ) => 14526,
                ( Shape::Straight, Facing::South, true, Half::Bottom, ) => 14527,
                ( Shape::Straight, Facing::South, false, Half::Bottom, ) => 14528,
                ( Shape::InnerLeft, Facing::South, true, Half::Bottom, ) => 14529,
                ( Shape::InnerLeft, Facing::South, false, Half::Bottom, ) => 14530,
                ( Shape::InnerRight, Facing::South, true, Half::Bottom, ) => 14531,
                ( Shape::InnerRight, Facing::South, false, Half::Bottom, ) => 14532,
                ( Shape::OuterLeft, Facing::South, true, Half::Bottom, ) => 14533,
                ( Shape::OuterLeft, Facing::South, false, Half::Bottom, ) => 14534,
                ( Shape::OuterRight, Facing::South, true, Half::Bottom, ) => 14535,
                ( Shape::OuterRight, Facing::South, false, Half::Bottom, ) => 14536,
                ( Shape::Straight, Facing::West, true, Half::Top, ) => 14537,
                ( Shape::Straight, Facing::West, false, Half::Top, ) => 14538,
                ( Shape::InnerLeft, Facing::West, true, Half::Top, ) => 14539,
                ( Shape::InnerLeft, Facing::West, false, Half::Top, ) => 14540,
                ( Shape::InnerRight, Facing::West, true, Half::Top, ) => 14541,
                ( Shape::InnerRight, Facing::West, false, Half::Top, ) => 14542,
                ( Shape::OuterLeft, Facing::West, true, Half::Top, ) => 14543,
                ( Shape::OuterLeft, Facing::West, false, Half::Top, ) => 14544,
                ( Shape::OuterRight, Facing::West, true, Half::Top, ) => 14545,
                ( Shape::OuterRight, Facing::West, false, Half::Top, ) => 14546,
                ( Shape::Straight, Facing::West, true, Half::Bottom, ) => 14547,
                ( Shape::Straight, Facing::West, false, Half::Bottom, ) => 14548,
                ( Shape::InnerLeft, Facing::West, true, Half::Bottom, ) => 14549,
                ( Shape::InnerLeft, Facing::West, false, Half::Bottom, ) => 14550,
                ( Shape::InnerRight, Facing::West, true, Half::Bottom, ) => 14551,
                ( Shape::InnerRight, Facing::West, false, Half::Bottom, ) => 14552,
                ( Shape::OuterLeft, Facing::West, true, Half::Bottom, ) => 14553,
                ( Shape::OuterLeft, Facing::West, false, Half::Bottom, ) => 14554,
                ( Shape::OuterRight, Facing::West, true, Half::Bottom, ) => 14555,
                ( Shape::OuterRight, Facing::West, false, Half::Bottom, ) => 14556,
                ( Shape::Straight, Facing::East, true, Half::Top, ) => 14557,
                ( Shape::Straight, Facing::East, false, Half::Top, ) => 14558,
                ( Shape::InnerLeft, Facing::East, true, Half::Top, ) => 14559,
                ( Shape::InnerLeft, Facing::East, false, Half::Top, ) => 14560,
                ( Shape::InnerRight, Facing::East, true, Half::Top, ) => 14561,
                ( Shape::InnerRight, Facing::East, false, Half::Top, ) => 14562,
                ( Shape::OuterLeft, Facing::East, true, Half::Top, ) => 14563,
                ( Shape::OuterLeft, Facing::East, false, Half::Top, ) => 14564,
                ( Shape::OuterRight, Facing::East, true, Half::Top, ) => 14565,
                ( Shape::OuterRight, Facing::East, false, Half::Top, ) => 14566,
                ( Shape::Straight, Facing::East, true, Half::Bottom, ) => 14567,
                ( Shape::Straight, Facing::East, false, Half::Bottom, ) => 14568,
                ( Shape::InnerLeft, Facing::East, true, Half::Bottom, ) => 14569,
                ( Shape::InnerLeft, Facing::East, false, Half::Bottom, ) => 14570,
                ( Shape::InnerRight, Facing::East, true, Half::Bottom, ) => 14571,
                ( Shape::InnerRight, Facing::East, false, Half::Bottom, ) => 14572,
                ( Shape::OuterLeft, Facing::East, true, Half::Bottom, ) => 14573,
                ( Shape::OuterLeft, Facing::East, false, Half::Bottom, ) => 14574,
                ( Shape::OuterRight, Facing::East, true, Half::Bottom, ) => 14575,
                ( Shape::OuterRight, Facing::East, false, Half::Bottom, ) => 14576,
            })
        }
    }

    impl From<StoneStairs> for BlockState {
        #[inline(always)]
        fn from(value : StoneStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StoneStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StoneStairs { }

    impl Block for StoneStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            facing : Facing::North,
            waterlogged : false,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:yellow_candle_cake` block.
pub mod yellow_candle_cake {
    use super::*;

    /// `minecraft:yellow_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl YellowCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22067,
                ( false, ) => 22068,
            })
        }
    }

    impl From<YellowCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : YellowCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowCandleCake { }

    impl Block for YellowCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:pink_stained_glass_pane` block.
pub mod pink_stained_glass_pane {
    use super::*;

    /// `minecraft:pink_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkStainedGlassPane {
        /// `north` state.
        pub north : bool,
        /// `south` state.
        pub south : bool,
        /// `west` state.
        pub west : bool,
        /// `east` state.
        pub east : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl PinkStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.south, self.west, self.east, self.waterlogged, )) {
                ( true, true, true, true, true, ) => 10373,
                ( true, true, false, true, true, ) => 10374,
                ( true, true, true, true, false, ) => 10375,
                ( true, true, false, true, false, ) => 10376,
                ( true, false, true, true, true, ) => 10377,
                ( true, false, false, true, true, ) => 10378,
                ( true, false, true, true, false, ) => 10379,
                ( true, false, false, true, false, ) => 10380,
                ( false, true, true, true, true, ) => 10381,
                ( false, true, false, true, true, ) => 10382,
                ( false, true, true, true, false, ) => 10383,
                ( false, true, false, true, false, ) => 10384,
                ( false, false, true, true, true, ) => 10385,
                ( false, false, false, true, true, ) => 10386,
                ( false, false, true, true, false, ) => 10387,
                ( false, false, false, true, false, ) => 10388,
                ( true, true, true, false, true, ) => 10389,
                ( true, true, false, false, true, ) => 10390,
                ( true, true, true, false, false, ) => 10391,
                ( true, true, false, false, false, ) => 10392,
                ( true, false, true, false, true, ) => 10393,
                ( true, false, false, false, true, ) => 10394,
                ( true, false, true, false, false, ) => 10395,
                ( true, false, false, false, false, ) => 10396,
                ( false, true, true, false, true, ) => 10397,
                ( false, true, false, false, true, ) => 10398,
                ( false, true, true, false, false, ) => 10399,
                ( false, true, false, false, false, ) => 10400,
                ( false, false, true, false, true, ) => 10401,
                ( false, false, false, false, true, ) => 10402,
                ( false, false, true, false, false, ) => 10403,
                ( false, false, false, false, false, ) => 10404,
            })
        }
    }

    impl From<PinkStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : PinkStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkStainedGlassPane { }

    impl Block for PinkStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            north : false,
            south : false,
            west : false,
            east : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:potted_orange_tulip` block.
pub mod potted_orange_tulip {
    use super::*;

    /// `minecraft:potted_orange_tulip` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedOrangeTulip;

    impl PottedOrangeTulip {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9369)
        }
    }

    impl From<PottedOrangeTulip> for BlockState {
        #[inline(always)]
        fn from(value : PottedOrangeTulip) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedOrangeTulip {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedOrangeTulip { }

    impl Block for PottedOrangeTulip {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dead_fire_coral_block` block.
pub mod dead_fire_coral_block {
    use super::*;

    /// `minecraft:dead_fire_coral_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadFireCoralBlock;

    impl DeadFireCoralBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13861)
        }
    }

    impl From<DeadFireCoralBlock> for BlockState {
        #[inline(always)]
        fn from(value : DeadFireCoralBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadFireCoralBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadFireCoralBlock { }

    impl Block for DeadFireCoralBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:blue_shulker_box` block.
pub mod blue_shulker_box {
    use super::*;

    /// `minecraft:blue_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BlueShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13657,
                ( Facing::East, ) => 13658,
                ( Facing::South, ) => 13659,
                ( Facing::West, ) => 13660,
                ( Facing::Up, ) => 13661,
                ( Facing::Down, ) => 13662,
            })
        }
    }

    impl From<BlueShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : BlueShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueShulkerBox { }

    impl Block for BlueShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:cartography_table` block.
pub mod cartography_table {
    use super::*;

    /// `minecraft:cartography_table` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CartographyTable;

    impl CartographyTable {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19491)
        }
    }

    impl From<CartographyTable> for BlockState {
        #[inline(always)]
        fn from(value : CartographyTable) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CartographyTable {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CartographyTable { }

    impl Block for CartographyTable {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cyan_carpet` block.
pub mod cyan_carpet {
    use super::*;

    /// `minecraft:cyan_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanCarpet;

    impl CyanCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11626)
        }
    }

    impl From<CyanCarpet> for BlockState {
        #[inline(always)]
        fn from(value : CyanCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanCarpet { }

    impl Block for CyanCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:mangrove_planks` block.
pub mod mangrove_planks {
    use super::*;

    /// `minecraft:mangrove_planks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangrovePlanks;

    impl MangrovePlanks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(26)
        }
    }

    impl From<MangrovePlanks> for BlockState {
        #[inline(always)]
        fn from(value : MangrovePlanks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangrovePlanks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangrovePlanks { }

    impl Block for MangrovePlanks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:brown_stained_glass_pane` block.
pub mod brown_stained_glass_pane {
    use super::*;

    /// `minecraft:brown_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownStainedGlassPane {
        /// `west` state.
        pub west : bool,
        /// `south` state.
        pub south : bool,
        /// `east` state.
        pub east : bool,
        /// `north` state.
        pub north : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl BrownStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.west, self.south, self.east, self.north, self.waterlogged, )) {
                ( true, true, true, true, true, ) => 10565,
                ( false, true, true, true, true, ) => 10566,
                ( true, true, true, true, false, ) => 10567,
                ( false, true, true, true, false, ) => 10568,
                ( true, false, true, true, true, ) => 10569,
                ( false, false, true, true, true, ) => 10570,
                ( true, false, true, true, false, ) => 10571,
                ( false, false, true, true, false, ) => 10572,
                ( true, true, true, false, true, ) => 10573,
                ( false, true, true, false, true, ) => 10574,
                ( true, true, true, false, false, ) => 10575,
                ( false, true, true, false, false, ) => 10576,
                ( true, false, true, false, true, ) => 10577,
                ( false, false, true, false, true, ) => 10578,
                ( true, false, true, false, false, ) => 10579,
                ( false, false, true, false, false, ) => 10580,
                ( true, true, false, true, true, ) => 10581,
                ( false, true, false, true, true, ) => 10582,
                ( true, true, false, true, false, ) => 10583,
                ( false, true, false, true, false, ) => 10584,
                ( true, false, false, true, true, ) => 10585,
                ( false, false, false, true, true, ) => 10586,
                ( true, false, false, true, false, ) => 10587,
                ( false, false, false, true, false, ) => 10588,
                ( true, true, false, false, true, ) => 10589,
                ( false, true, false, false, true, ) => 10590,
                ( true, true, false, false, false, ) => 10591,
                ( false, true, false, false, false, ) => 10592,
                ( true, false, false, false, true, ) => 10593,
                ( false, false, false, false, true, ) => 10594,
                ( true, false, false, false, false, ) => 10595,
                ( false, false, false, false, false, ) => 10596,
            })
        }
    }

    impl From<BrownStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : BrownStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownStainedGlassPane { }

    impl Block for BrownStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            west : false,
            south : false,
            east : false,
            north : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:granite_slab` block.
pub mod granite_slab {
    use super::*;

    /// `minecraft:granite_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GraniteSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl GraniteSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 15185,
                ( Kind::Top, false, ) => 15186,
                ( Kind::Bottom, true, ) => 15187,
                ( Kind::Bottom, false, ) => 15188,
                ( Kind::Double, true, ) => 15189,
                ( Kind::Double, false, ) => 15190,
            })
        }
    }

    impl From<GraniteSlab> for BlockState {
        #[inline(always)]
        fn from(value : GraniteSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GraniteSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GraniteSlab { }

    impl Block for GraniteSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:light_blue_shulker_box` block.
pub mod light_blue_shulker_box {
    use super::*;

    /// `minecraft:light_blue_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl LightBlueShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13609,
                ( Facing::East, ) => 13610,
                ( Facing::South, ) => 13611,
                ( Facing::West, ) => 13612,
                ( Facing::Up, ) => 13613,
                ( Facing::Down, ) => 13614,
            })
        }
    }

    impl From<LightBlueShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueShulkerBox { }

    impl Block for LightBlueShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:dead_bubble_coral_wall_fan` block.
pub mod dead_bubble_coral_wall_fan {
    use super::*;

    /// `minecraft:dead_bubble_coral_wall_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadBubbleCoralWallFan {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DeadBubbleCoralWallFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 13924,
                ( Facing::North, false, ) => 13925,
                ( Facing::South, true, ) => 13926,
                ( Facing::South, false, ) => 13927,
                ( Facing::West, true, ) => 13928,
                ( Facing::West, false, ) => 13929,
                ( Facing::East, true, ) => 13930,
                ( Facing::East, false, ) => 13931,
            })
        }
    }

    impl From<DeadBubbleCoralWallFan> for BlockState {
        #[inline(always)]
        fn from(value : DeadBubbleCoralWallFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadBubbleCoralWallFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadBubbleCoralWallFan { }

    impl Block for DeadBubbleCoralWallFan {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : true,
        };
    }

}

/// `minecraft:potted_jungle_sapling` block.
pub mod potted_jungle_sapling {
    use super::*;

    /// `minecraft:potted_jungle_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedJungleSapling;

    impl PottedJungleSapling {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9356)
        }
    }

    impl From<PottedJungleSapling> for BlockState {
        #[inline(always)]
        fn from(value : PottedJungleSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedJungleSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedJungleSapling { }

    impl Block for PottedJungleSapling {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:horn_coral` block.
pub mod horn_coral {
    use super::*;

    /// `minecraft:horn_coral` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct HornCoral {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl HornCoral {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13886,
                ( false, ) => 13887,
            })
        }
    }

    impl From<HornCoral> for BlockState {
        #[inline(always)]
        fn from(value : HornCoral) -> Self {
            value.to_block_state()
        }
    }

    impl Default for HornCoral {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for HornCoral { }

    impl Block for HornCoral {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:pumpkin` block.
pub mod pumpkin {
    use super::*;

    /// `minecraft:pumpkin` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Pumpkin;

    impl Pumpkin {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(7054)
        }
    }

    impl From<Pumpkin> for BlockState {
        #[inline(always)]
        fn from(value : Pumpkin) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Pumpkin {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Pumpkin { }

    impl Block for Pumpkin {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:red_nether_brick_slab` block.
pub mod red_nether_brick_slab {
    use super::*;

    /// `minecraft:red_nether_brick_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedNetherBrickSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl RedNetherBrickSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 15197,
                ( false, Kind::Top, ) => 15198,
                ( true, Kind::Bottom, ) => 15199,
                ( false, Kind::Bottom, ) => 15200,
                ( true, Kind::Double, ) => 15201,
                ( false, Kind::Double, ) => 15202,
            })
        }
    }

    impl From<RedNetherBrickSlab> for BlockState {
        #[inline(always)]
        fn from(value : RedNetherBrickSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedNetherBrickSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedNetherBrickSlab { }

    impl Block for RedNetherBrickSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:dark_oak_trapdoor` block.
pub mod dark_oak_trapdoor {
    use super::*;

    /// `minecraft:dark_oak_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakTrapdoor {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
        /// `open` state.
        pub open : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DarkOakTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.half, self.facing, self.powered, self.open, )) {
                ( true, Half::Top, Facing::North, true, true, ) => 6524,
                ( false, Half::Top, Facing::North, true, true, ) => 6525,
                ( true, Half::Top, Facing::North, false, true, ) => 6526,
                ( false, Half::Top, Facing::North, false, true, ) => 6527,
                ( true, Half::Top, Facing::North, true, false, ) => 6528,
                ( false, Half::Top, Facing::North, true, false, ) => 6529,
                ( true, Half::Top, Facing::North, false, false, ) => 6530,
                ( false, Half::Top, Facing::North, false, false, ) => 6531,
                ( true, Half::Bottom, Facing::North, true, true, ) => 6532,
                ( false, Half::Bottom, Facing::North, true, true, ) => 6533,
                ( true, Half::Bottom, Facing::North, false, true, ) => 6534,
                ( false, Half::Bottom, Facing::North, false, true, ) => 6535,
                ( true, Half::Bottom, Facing::North, true, false, ) => 6536,
                ( false, Half::Bottom, Facing::North, true, false, ) => 6537,
                ( true, Half::Bottom, Facing::North, false, false, ) => 6538,
                ( false, Half::Bottom, Facing::North, false, false, ) => 6539,
                ( true, Half::Top, Facing::South, true, true, ) => 6540,
                ( false, Half::Top, Facing::South, true, true, ) => 6541,
                ( true, Half::Top, Facing::South, false, true, ) => 6542,
                ( false, Half::Top, Facing::South, false, true, ) => 6543,
                ( true, Half::Top, Facing::South, true, false, ) => 6544,
                ( false, Half::Top, Facing::South, true, false, ) => 6545,
                ( true, Half::Top, Facing::South, false, false, ) => 6546,
                ( false, Half::Top, Facing::South, false, false, ) => 6547,
                ( true, Half::Bottom, Facing::South, true, true, ) => 6548,
                ( false, Half::Bottom, Facing::South, true, true, ) => 6549,
                ( true, Half::Bottom, Facing::South, false, true, ) => 6550,
                ( false, Half::Bottom, Facing::South, false, true, ) => 6551,
                ( true, Half::Bottom, Facing::South, true, false, ) => 6552,
                ( false, Half::Bottom, Facing::South, true, false, ) => 6553,
                ( true, Half::Bottom, Facing::South, false, false, ) => 6554,
                ( false, Half::Bottom, Facing::South, false, false, ) => 6555,
                ( true, Half::Top, Facing::West, true, true, ) => 6556,
                ( false, Half::Top, Facing::West, true, true, ) => 6557,
                ( true, Half::Top, Facing::West, false, true, ) => 6558,
                ( false, Half::Top, Facing::West, false, true, ) => 6559,
                ( true, Half::Top, Facing::West, true, false, ) => 6560,
                ( false, Half::Top, Facing::West, true, false, ) => 6561,
                ( true, Half::Top, Facing::West, false, false, ) => 6562,
                ( false, Half::Top, Facing::West, false, false, ) => 6563,
                ( true, Half::Bottom, Facing::West, true, true, ) => 6564,
                ( false, Half::Bottom, Facing::West, true, true, ) => 6565,
                ( true, Half::Bottom, Facing::West, false, true, ) => 6566,
                ( false, Half::Bottom, Facing::West, false, true, ) => 6567,
                ( true, Half::Bottom, Facing::West, true, false, ) => 6568,
                ( false, Half::Bottom, Facing::West, true, false, ) => 6569,
                ( true, Half::Bottom, Facing::West, false, false, ) => 6570,
                ( false, Half::Bottom, Facing::West, false, false, ) => 6571,
                ( true, Half::Top, Facing::East, true, true, ) => 6572,
                ( false, Half::Top, Facing::East, true, true, ) => 6573,
                ( true, Half::Top, Facing::East, false, true, ) => 6574,
                ( false, Half::Top, Facing::East, false, true, ) => 6575,
                ( true, Half::Top, Facing::East, true, false, ) => 6576,
                ( false, Half::Top, Facing::East, true, false, ) => 6577,
                ( true, Half::Top, Facing::East, false, false, ) => 6578,
                ( false, Half::Top, Facing::East, false, false, ) => 6579,
                ( true, Half::Bottom, Facing::East, true, true, ) => 6580,
                ( false, Half::Bottom, Facing::East, true, true, ) => 6581,
                ( true, Half::Bottom, Facing::East, false, true, ) => 6582,
                ( false, Half::Bottom, Facing::East, false, true, ) => 6583,
                ( true, Half::Bottom, Facing::East, true, false, ) => 6584,
                ( false, Half::Bottom, Facing::East, true, false, ) => 6585,
                ( true, Half::Bottom, Facing::East, false, false, ) => 6586,
                ( false, Half::Bottom, Facing::East, false, false, ) => 6587,
            })
        }
    }

    impl From<DarkOakTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakTrapdoor { }

    impl Block for DarkOakTrapdoor {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            half : Half::Bottom,
            facing : Facing::North,
            powered : false,
            open : false,
        };
    }

}

/// `minecraft:dark_oak_wood` block.
pub mod dark_oak_wood {
    use super::*;

    /// `minecraft:dark_oak_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl DarkOakWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 219,
                ( Axis::Y, ) => 220,
                ( Axis::Z, ) => 221,
            })
        }
    }

    impl From<DarkOakWood> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakWood { }

    impl Block for DarkOakWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:dandelion` block.
pub mod dandelion {
    use super::*;

    /// `minecraft:dandelion` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Dandelion;

    impl Dandelion {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2121)
        }
    }

    impl From<Dandelion> for BlockState {
        #[inline(always)]
        fn from(value : Dandelion) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Dandelion {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Dandelion { }

    impl Block for Dandelion {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dead_horn_coral_wall_fan` block.
pub mod dead_horn_coral_wall_fan {
    use super::*;

    /// `minecraft:dead_horn_coral_wall_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadHornCoralWallFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DeadHornCoralWallFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 13940,
                ( false, Facing::North, ) => 13941,
                ( true, Facing::South, ) => 13942,
                ( false, Facing::South, ) => 13943,
                ( true, Facing::West, ) => 13944,
                ( false, Facing::West, ) => 13945,
                ( true, Facing::East, ) => 13946,
                ( false, Facing::East, ) => 13947,
            })
        }
    }

    impl From<DeadHornCoralWallFan> for BlockState {
        #[inline(always)]
        fn from(value : DeadHornCoralWallFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadHornCoralWallFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadHornCoralWallFan { }

    impl Block for DeadHornCoralWallFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
            facing : Facing::North,
        };
    }

}

/// `minecraft:slime_block` block.
pub mod slime_block {
    use super::*;

    /// `minecraft:slime_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SlimeBlock;

    impl SlimeBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11253)
        }
    }

    impl From<SlimeBlock> for BlockState {
        #[inline(always)]
        fn from(value : SlimeBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SlimeBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SlimeBlock { }

    impl Block for SlimeBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stripped_warped_stem` block.
pub mod stripped_warped_stem {
    use super::*;

    /// `minecraft:stripped_warped_stem` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedWarpedStem {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedWarpedStem {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 19637,
                ( Axis::Y, ) => 19638,
                ( Axis::Z, ) => 19639,
            })
        }
    }

    impl From<StrippedWarpedStem> for BlockState {
        #[inline(always)]
        fn from(value : StrippedWarpedStem) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedWarpedStem {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedWarpedStem { }

    impl Block for StrippedWarpedStem {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:tube_coral` block.
pub mod tube_coral {
    use super::*;

    /// `minecraft:tube_coral` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TubeCoral {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl TubeCoral {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13878,
                ( false, ) => 13879,
            })
        }
    }

    impl From<TubeCoral> for BlockState {
        #[inline(always)]
        fn from(value : TubeCoral) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TubeCoral {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TubeCoral { }

    impl Block for TubeCoral {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:hay_block` block.
pub mod hay_block {
    use super::*;

    /// `minecraft:hay_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct HayBlock {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl HayBlock {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 11614,
                ( Axis::Y, ) => 11615,
                ( Axis::Z, ) => 11616,
            })
        }
    }

    impl From<HayBlock> for BlockState {
        #[inline(always)]
        fn from(value : HayBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for HayBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for HayBlock { }

    impl Block for HayBlock {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:end_portal` block.
pub mod end_portal {
    use super::*;

    /// `minecraft:end_portal` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct EndPortal;

    impl EndPortal {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(8190)
        }
    }

    impl From<EndPortal> for BlockState {
        #[inline(always)]
        fn from(value : EndPortal) -> Self {
            value.to_block_state()
        }
    }

    impl Default for EndPortal {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for EndPortal { }

    impl Block for EndPortal {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:magma_block` block.
pub mod magma_block {
    use super::*;

    /// `minecraft:magma_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagmaBlock;

    impl MagmaBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13566)
        }
    }

    impl From<MagmaBlock> for BlockState {
        #[inline(always)]
        fn from(value : MagmaBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagmaBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagmaBlock { }

    impl Block for MagmaBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:mossy_cobblestone_slab` block.
pub mod mossy_cobblestone_slab {
    use super::*;

    /// `minecraft:mossy_cobblestone_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MossyCobblestoneSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl MossyCobblestoneSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 15161,
                ( false, Kind::Top, ) => 15162,
                ( true, Kind::Bottom, ) => 15163,
                ( false, Kind::Bottom, ) => 15164,
                ( true, Kind::Double, ) => 15165,
                ( false, Kind::Double, ) => 15166,
            })
        }
    }

    impl From<MossyCobblestoneSlab> for BlockState {
        #[inline(always)]
        fn from(value : MossyCobblestoneSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MossyCobblestoneSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MossyCobblestoneSlab { }

    impl Block for MossyCobblestoneSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:resin_brick_stairs` block.
pub mod resin_brick_stairs {
    use super::*;

    /// `minecraft:resin_brick_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ResinBrickStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl ResinBrickStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.half, self.facing, self.shape, )) {
                ( true, Half::Top, Facing::North, Shape::Straight, ) => 7645,
                ( false, Half::Top, Facing::North, Shape::Straight, ) => 7646,
                ( true, Half::Top, Facing::North, Shape::InnerLeft, ) => 7647,
                ( false, Half::Top, Facing::North, Shape::InnerLeft, ) => 7648,
                ( true, Half::Top, Facing::North, Shape::InnerRight, ) => 7649,
                ( false, Half::Top, Facing::North, Shape::InnerRight, ) => 7650,
                ( true, Half::Top, Facing::North, Shape::OuterLeft, ) => 7651,
                ( false, Half::Top, Facing::North, Shape::OuterLeft, ) => 7652,
                ( true, Half::Top, Facing::North, Shape::OuterRight, ) => 7653,
                ( false, Half::Top, Facing::North, Shape::OuterRight, ) => 7654,
                ( true, Half::Bottom, Facing::North, Shape::Straight, ) => 7655,
                ( false, Half::Bottom, Facing::North, Shape::Straight, ) => 7656,
                ( true, Half::Bottom, Facing::North, Shape::InnerLeft, ) => 7657,
                ( false, Half::Bottom, Facing::North, Shape::InnerLeft, ) => 7658,
                ( true, Half::Bottom, Facing::North, Shape::InnerRight, ) => 7659,
                ( false, Half::Bottom, Facing::North, Shape::InnerRight, ) => 7660,
                ( true, Half::Bottom, Facing::North, Shape::OuterLeft, ) => 7661,
                ( false, Half::Bottom, Facing::North, Shape::OuterLeft, ) => 7662,
                ( true, Half::Bottom, Facing::North, Shape::OuterRight, ) => 7663,
                ( false, Half::Bottom, Facing::North, Shape::OuterRight, ) => 7664,
                ( true, Half::Top, Facing::South, Shape::Straight, ) => 7665,
                ( false, Half::Top, Facing::South, Shape::Straight, ) => 7666,
                ( true, Half::Top, Facing::South, Shape::InnerLeft, ) => 7667,
                ( false, Half::Top, Facing::South, Shape::InnerLeft, ) => 7668,
                ( true, Half::Top, Facing::South, Shape::InnerRight, ) => 7669,
                ( false, Half::Top, Facing::South, Shape::InnerRight, ) => 7670,
                ( true, Half::Top, Facing::South, Shape::OuterLeft, ) => 7671,
                ( false, Half::Top, Facing::South, Shape::OuterLeft, ) => 7672,
                ( true, Half::Top, Facing::South, Shape::OuterRight, ) => 7673,
                ( false, Half::Top, Facing::South, Shape::OuterRight, ) => 7674,
                ( true, Half::Bottom, Facing::South, Shape::Straight, ) => 7675,
                ( false, Half::Bottom, Facing::South, Shape::Straight, ) => 7676,
                ( true, Half::Bottom, Facing::South, Shape::InnerLeft, ) => 7677,
                ( false, Half::Bottom, Facing::South, Shape::InnerLeft, ) => 7678,
                ( true, Half::Bottom, Facing::South, Shape::InnerRight, ) => 7679,
                ( false, Half::Bottom, Facing::South, Shape::InnerRight, ) => 7680,
                ( true, Half::Bottom, Facing::South, Shape::OuterLeft, ) => 7681,
                ( false, Half::Bottom, Facing::South, Shape::OuterLeft, ) => 7682,
                ( true, Half::Bottom, Facing::South, Shape::OuterRight, ) => 7683,
                ( false, Half::Bottom, Facing::South, Shape::OuterRight, ) => 7684,
                ( true, Half::Top, Facing::West, Shape::Straight, ) => 7685,
                ( false, Half::Top, Facing::West, Shape::Straight, ) => 7686,
                ( true, Half::Top, Facing::West, Shape::InnerLeft, ) => 7687,
                ( false, Half::Top, Facing::West, Shape::InnerLeft, ) => 7688,
                ( true, Half::Top, Facing::West, Shape::InnerRight, ) => 7689,
                ( false, Half::Top, Facing::West, Shape::InnerRight, ) => 7690,
                ( true, Half::Top, Facing::West, Shape::OuterLeft, ) => 7691,
                ( false, Half::Top, Facing::West, Shape::OuterLeft, ) => 7692,
                ( true, Half::Top, Facing::West, Shape::OuterRight, ) => 7693,
                ( false, Half::Top, Facing::West, Shape::OuterRight, ) => 7694,
                ( true, Half::Bottom, Facing::West, Shape::Straight, ) => 7695,
                ( false, Half::Bottom, Facing::West, Shape::Straight, ) => 7696,
                ( true, Half::Bottom, Facing::West, Shape::InnerLeft, ) => 7697,
                ( false, Half::Bottom, Facing::West, Shape::InnerLeft, ) => 7698,
                ( true, Half::Bottom, Facing::West, Shape::InnerRight, ) => 7699,
                ( false, Half::Bottom, Facing::West, Shape::InnerRight, ) => 7700,
                ( true, Half::Bottom, Facing::West, Shape::OuterLeft, ) => 7701,
                ( false, Half::Bottom, Facing::West, Shape::OuterLeft, ) => 7702,
                ( true, Half::Bottom, Facing::West, Shape::OuterRight, ) => 7703,
                ( false, Half::Bottom, Facing::West, Shape::OuterRight, ) => 7704,
                ( true, Half::Top, Facing::East, Shape::Straight, ) => 7705,
                ( false, Half::Top, Facing::East, Shape::Straight, ) => 7706,
                ( true, Half::Top, Facing::East, Shape::InnerLeft, ) => 7707,
                ( false, Half::Top, Facing::East, Shape::InnerLeft, ) => 7708,
                ( true, Half::Top, Facing::East, Shape::InnerRight, ) => 7709,
                ( false, Half::Top, Facing::East, Shape::InnerRight, ) => 7710,
                ( true, Half::Top, Facing::East, Shape::OuterLeft, ) => 7711,
                ( false, Half::Top, Facing::East, Shape::OuterLeft, ) => 7712,
                ( true, Half::Top, Facing::East, Shape::OuterRight, ) => 7713,
                ( false, Half::Top, Facing::East, Shape::OuterRight, ) => 7714,
                ( true, Half::Bottom, Facing::East, Shape::Straight, ) => 7715,
                ( false, Half::Bottom, Facing::East, Shape::Straight, ) => 7716,
                ( true, Half::Bottom, Facing::East, Shape::InnerLeft, ) => 7717,
                ( false, Half::Bottom, Facing::East, Shape::InnerLeft, ) => 7718,
                ( true, Half::Bottom, Facing::East, Shape::InnerRight, ) => 7719,
                ( false, Half::Bottom, Facing::East, Shape::InnerRight, ) => 7720,
                ( true, Half::Bottom, Facing::East, Shape::OuterLeft, ) => 7721,
                ( false, Half::Bottom, Facing::East, Shape::OuterLeft, ) => 7722,
                ( true, Half::Bottom, Facing::East, Shape::OuterRight, ) => 7723,
                ( false, Half::Bottom, Facing::East, Shape::OuterRight, ) => 7724,
            })
        }
    }

    impl From<ResinBrickStairs> for BlockState {
        #[inline(always)]
        fn from(value : ResinBrickStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ResinBrickStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ResinBrickStairs { }

    impl Block for ResinBrickStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            half : Half::Bottom,
            facing : Facing::North,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:tuff_brick_wall` block.
pub mod tuff_brick_wall {
    use super::*;

    /// `minecraft:tuff_brick_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TuffBrickWall {
        /// `east` state.
        pub east : East,
        /// `north` state.
        pub north : North,
        /// `south` state.
        pub south : South,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : West,
        /// `up` state.
        pub up : bool,
    }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    impl TuffBrickWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.north, self.south, self.waterlogged, self.west, self.up, )) {
                ( East::None, North::None, South::None, true, West::None, true, ) => 23051,
                ( East::None, North::None, South::None, true, West::Low, true, ) => 23052,
                ( East::None, North::None, South::None, true, West::Tall, true, ) => 23053,
                ( East::None, North::None, South::None, false, West::None, true, ) => 23054,
                ( East::None, North::None, South::None, false, West::Low, true, ) => 23055,
                ( East::None, North::None, South::None, false, West::Tall, true, ) => 23056,
                ( East::None, North::None, South::None, true, West::None, false, ) => 23057,
                ( East::None, North::None, South::None, true, West::Low, false, ) => 23058,
                ( East::None, North::None, South::None, true, West::Tall, false, ) => 23059,
                ( East::None, North::None, South::None, false, West::None, false, ) => 23060,
                ( East::None, North::None, South::None, false, West::Low, false, ) => 23061,
                ( East::None, North::None, South::None, false, West::Tall, false, ) => 23062,
                ( East::None, North::None, South::Low, true, West::None, true, ) => 23063,
                ( East::None, North::None, South::Low, true, West::Low, true, ) => 23064,
                ( East::None, North::None, South::Low, true, West::Tall, true, ) => 23065,
                ( East::None, North::None, South::Low, false, West::None, true, ) => 23066,
                ( East::None, North::None, South::Low, false, West::Low, true, ) => 23067,
                ( East::None, North::None, South::Low, false, West::Tall, true, ) => 23068,
                ( East::None, North::None, South::Low, true, West::None, false, ) => 23069,
                ( East::None, North::None, South::Low, true, West::Low, false, ) => 23070,
                ( East::None, North::None, South::Low, true, West::Tall, false, ) => 23071,
                ( East::None, North::None, South::Low, false, West::None, false, ) => 23072,
                ( East::None, North::None, South::Low, false, West::Low, false, ) => 23073,
                ( East::None, North::None, South::Low, false, West::Tall, false, ) => 23074,
                ( East::None, North::None, South::Tall, true, West::None, true, ) => 23075,
                ( East::None, North::None, South::Tall, true, West::Low, true, ) => 23076,
                ( East::None, North::None, South::Tall, true, West::Tall, true, ) => 23077,
                ( East::None, North::None, South::Tall, false, West::None, true, ) => 23078,
                ( East::None, North::None, South::Tall, false, West::Low, true, ) => 23079,
                ( East::None, North::None, South::Tall, false, West::Tall, true, ) => 23080,
                ( East::None, North::None, South::Tall, true, West::None, false, ) => 23081,
                ( East::None, North::None, South::Tall, true, West::Low, false, ) => 23082,
                ( East::None, North::None, South::Tall, true, West::Tall, false, ) => 23083,
                ( East::None, North::None, South::Tall, false, West::None, false, ) => 23084,
                ( East::None, North::None, South::Tall, false, West::Low, false, ) => 23085,
                ( East::None, North::None, South::Tall, false, West::Tall, false, ) => 23086,
                ( East::None, North::Low, South::None, true, West::None, true, ) => 23087,
                ( East::None, North::Low, South::None, true, West::Low, true, ) => 23088,
                ( East::None, North::Low, South::None, true, West::Tall, true, ) => 23089,
                ( East::None, North::Low, South::None, false, West::None, true, ) => 23090,
                ( East::None, North::Low, South::None, false, West::Low, true, ) => 23091,
                ( East::None, North::Low, South::None, false, West::Tall, true, ) => 23092,
                ( East::None, North::Low, South::None, true, West::None, false, ) => 23093,
                ( East::None, North::Low, South::None, true, West::Low, false, ) => 23094,
                ( East::None, North::Low, South::None, true, West::Tall, false, ) => 23095,
                ( East::None, North::Low, South::None, false, West::None, false, ) => 23096,
                ( East::None, North::Low, South::None, false, West::Low, false, ) => 23097,
                ( East::None, North::Low, South::None, false, West::Tall, false, ) => 23098,
                ( East::None, North::Low, South::Low, true, West::None, true, ) => 23099,
                ( East::None, North::Low, South::Low, true, West::Low, true, ) => 23100,
                ( East::None, North::Low, South::Low, true, West::Tall, true, ) => 23101,
                ( East::None, North::Low, South::Low, false, West::None, true, ) => 23102,
                ( East::None, North::Low, South::Low, false, West::Low, true, ) => 23103,
                ( East::None, North::Low, South::Low, false, West::Tall, true, ) => 23104,
                ( East::None, North::Low, South::Low, true, West::None, false, ) => 23105,
                ( East::None, North::Low, South::Low, true, West::Low, false, ) => 23106,
                ( East::None, North::Low, South::Low, true, West::Tall, false, ) => 23107,
                ( East::None, North::Low, South::Low, false, West::None, false, ) => 23108,
                ( East::None, North::Low, South::Low, false, West::Low, false, ) => 23109,
                ( East::None, North::Low, South::Low, false, West::Tall, false, ) => 23110,
                ( East::None, North::Low, South::Tall, true, West::None, true, ) => 23111,
                ( East::None, North::Low, South::Tall, true, West::Low, true, ) => 23112,
                ( East::None, North::Low, South::Tall, true, West::Tall, true, ) => 23113,
                ( East::None, North::Low, South::Tall, false, West::None, true, ) => 23114,
                ( East::None, North::Low, South::Tall, false, West::Low, true, ) => 23115,
                ( East::None, North::Low, South::Tall, false, West::Tall, true, ) => 23116,
                ( East::None, North::Low, South::Tall, true, West::None, false, ) => 23117,
                ( East::None, North::Low, South::Tall, true, West::Low, false, ) => 23118,
                ( East::None, North::Low, South::Tall, true, West::Tall, false, ) => 23119,
                ( East::None, North::Low, South::Tall, false, West::None, false, ) => 23120,
                ( East::None, North::Low, South::Tall, false, West::Low, false, ) => 23121,
                ( East::None, North::Low, South::Tall, false, West::Tall, false, ) => 23122,
                ( East::None, North::Tall, South::None, true, West::None, true, ) => 23123,
                ( East::None, North::Tall, South::None, true, West::Low, true, ) => 23124,
                ( East::None, North::Tall, South::None, true, West::Tall, true, ) => 23125,
                ( East::None, North::Tall, South::None, false, West::None, true, ) => 23126,
                ( East::None, North::Tall, South::None, false, West::Low, true, ) => 23127,
                ( East::None, North::Tall, South::None, false, West::Tall, true, ) => 23128,
                ( East::None, North::Tall, South::None, true, West::None, false, ) => 23129,
                ( East::None, North::Tall, South::None, true, West::Low, false, ) => 23130,
                ( East::None, North::Tall, South::None, true, West::Tall, false, ) => 23131,
                ( East::None, North::Tall, South::None, false, West::None, false, ) => 23132,
                ( East::None, North::Tall, South::None, false, West::Low, false, ) => 23133,
                ( East::None, North::Tall, South::None, false, West::Tall, false, ) => 23134,
                ( East::None, North::Tall, South::Low, true, West::None, true, ) => 23135,
                ( East::None, North::Tall, South::Low, true, West::Low, true, ) => 23136,
                ( East::None, North::Tall, South::Low, true, West::Tall, true, ) => 23137,
                ( East::None, North::Tall, South::Low, false, West::None, true, ) => 23138,
                ( East::None, North::Tall, South::Low, false, West::Low, true, ) => 23139,
                ( East::None, North::Tall, South::Low, false, West::Tall, true, ) => 23140,
                ( East::None, North::Tall, South::Low, true, West::None, false, ) => 23141,
                ( East::None, North::Tall, South::Low, true, West::Low, false, ) => 23142,
                ( East::None, North::Tall, South::Low, true, West::Tall, false, ) => 23143,
                ( East::None, North::Tall, South::Low, false, West::None, false, ) => 23144,
                ( East::None, North::Tall, South::Low, false, West::Low, false, ) => 23145,
                ( East::None, North::Tall, South::Low, false, West::Tall, false, ) => 23146,
                ( East::None, North::Tall, South::Tall, true, West::None, true, ) => 23147,
                ( East::None, North::Tall, South::Tall, true, West::Low, true, ) => 23148,
                ( East::None, North::Tall, South::Tall, true, West::Tall, true, ) => 23149,
                ( East::None, North::Tall, South::Tall, false, West::None, true, ) => 23150,
                ( East::None, North::Tall, South::Tall, false, West::Low, true, ) => 23151,
                ( East::None, North::Tall, South::Tall, false, West::Tall, true, ) => 23152,
                ( East::None, North::Tall, South::Tall, true, West::None, false, ) => 23153,
                ( East::None, North::Tall, South::Tall, true, West::Low, false, ) => 23154,
                ( East::None, North::Tall, South::Tall, true, West::Tall, false, ) => 23155,
                ( East::None, North::Tall, South::Tall, false, West::None, false, ) => 23156,
                ( East::None, North::Tall, South::Tall, false, West::Low, false, ) => 23157,
                ( East::None, North::Tall, South::Tall, false, West::Tall, false, ) => 23158,
                ( East::Low, North::None, South::None, true, West::None, true, ) => 23159,
                ( East::Low, North::None, South::None, true, West::Low, true, ) => 23160,
                ( East::Low, North::None, South::None, true, West::Tall, true, ) => 23161,
                ( East::Low, North::None, South::None, false, West::None, true, ) => 23162,
                ( East::Low, North::None, South::None, false, West::Low, true, ) => 23163,
                ( East::Low, North::None, South::None, false, West::Tall, true, ) => 23164,
                ( East::Low, North::None, South::None, true, West::None, false, ) => 23165,
                ( East::Low, North::None, South::None, true, West::Low, false, ) => 23166,
                ( East::Low, North::None, South::None, true, West::Tall, false, ) => 23167,
                ( East::Low, North::None, South::None, false, West::None, false, ) => 23168,
                ( East::Low, North::None, South::None, false, West::Low, false, ) => 23169,
                ( East::Low, North::None, South::None, false, West::Tall, false, ) => 23170,
                ( East::Low, North::None, South::Low, true, West::None, true, ) => 23171,
                ( East::Low, North::None, South::Low, true, West::Low, true, ) => 23172,
                ( East::Low, North::None, South::Low, true, West::Tall, true, ) => 23173,
                ( East::Low, North::None, South::Low, false, West::None, true, ) => 23174,
                ( East::Low, North::None, South::Low, false, West::Low, true, ) => 23175,
                ( East::Low, North::None, South::Low, false, West::Tall, true, ) => 23176,
                ( East::Low, North::None, South::Low, true, West::None, false, ) => 23177,
                ( East::Low, North::None, South::Low, true, West::Low, false, ) => 23178,
                ( East::Low, North::None, South::Low, true, West::Tall, false, ) => 23179,
                ( East::Low, North::None, South::Low, false, West::None, false, ) => 23180,
                ( East::Low, North::None, South::Low, false, West::Low, false, ) => 23181,
                ( East::Low, North::None, South::Low, false, West::Tall, false, ) => 23182,
                ( East::Low, North::None, South::Tall, true, West::None, true, ) => 23183,
                ( East::Low, North::None, South::Tall, true, West::Low, true, ) => 23184,
                ( East::Low, North::None, South::Tall, true, West::Tall, true, ) => 23185,
                ( East::Low, North::None, South::Tall, false, West::None, true, ) => 23186,
                ( East::Low, North::None, South::Tall, false, West::Low, true, ) => 23187,
                ( East::Low, North::None, South::Tall, false, West::Tall, true, ) => 23188,
                ( East::Low, North::None, South::Tall, true, West::None, false, ) => 23189,
                ( East::Low, North::None, South::Tall, true, West::Low, false, ) => 23190,
                ( East::Low, North::None, South::Tall, true, West::Tall, false, ) => 23191,
                ( East::Low, North::None, South::Tall, false, West::None, false, ) => 23192,
                ( East::Low, North::None, South::Tall, false, West::Low, false, ) => 23193,
                ( East::Low, North::None, South::Tall, false, West::Tall, false, ) => 23194,
                ( East::Low, North::Low, South::None, true, West::None, true, ) => 23195,
                ( East::Low, North::Low, South::None, true, West::Low, true, ) => 23196,
                ( East::Low, North::Low, South::None, true, West::Tall, true, ) => 23197,
                ( East::Low, North::Low, South::None, false, West::None, true, ) => 23198,
                ( East::Low, North::Low, South::None, false, West::Low, true, ) => 23199,
                ( East::Low, North::Low, South::None, false, West::Tall, true, ) => 23200,
                ( East::Low, North::Low, South::None, true, West::None, false, ) => 23201,
                ( East::Low, North::Low, South::None, true, West::Low, false, ) => 23202,
                ( East::Low, North::Low, South::None, true, West::Tall, false, ) => 23203,
                ( East::Low, North::Low, South::None, false, West::None, false, ) => 23204,
                ( East::Low, North::Low, South::None, false, West::Low, false, ) => 23205,
                ( East::Low, North::Low, South::None, false, West::Tall, false, ) => 23206,
                ( East::Low, North::Low, South::Low, true, West::None, true, ) => 23207,
                ( East::Low, North::Low, South::Low, true, West::Low, true, ) => 23208,
                ( East::Low, North::Low, South::Low, true, West::Tall, true, ) => 23209,
                ( East::Low, North::Low, South::Low, false, West::None, true, ) => 23210,
                ( East::Low, North::Low, South::Low, false, West::Low, true, ) => 23211,
                ( East::Low, North::Low, South::Low, false, West::Tall, true, ) => 23212,
                ( East::Low, North::Low, South::Low, true, West::None, false, ) => 23213,
                ( East::Low, North::Low, South::Low, true, West::Low, false, ) => 23214,
                ( East::Low, North::Low, South::Low, true, West::Tall, false, ) => 23215,
                ( East::Low, North::Low, South::Low, false, West::None, false, ) => 23216,
                ( East::Low, North::Low, South::Low, false, West::Low, false, ) => 23217,
                ( East::Low, North::Low, South::Low, false, West::Tall, false, ) => 23218,
                ( East::Low, North::Low, South::Tall, true, West::None, true, ) => 23219,
                ( East::Low, North::Low, South::Tall, true, West::Low, true, ) => 23220,
                ( East::Low, North::Low, South::Tall, true, West::Tall, true, ) => 23221,
                ( East::Low, North::Low, South::Tall, false, West::None, true, ) => 23222,
                ( East::Low, North::Low, South::Tall, false, West::Low, true, ) => 23223,
                ( East::Low, North::Low, South::Tall, false, West::Tall, true, ) => 23224,
                ( East::Low, North::Low, South::Tall, true, West::None, false, ) => 23225,
                ( East::Low, North::Low, South::Tall, true, West::Low, false, ) => 23226,
                ( East::Low, North::Low, South::Tall, true, West::Tall, false, ) => 23227,
                ( East::Low, North::Low, South::Tall, false, West::None, false, ) => 23228,
                ( East::Low, North::Low, South::Tall, false, West::Low, false, ) => 23229,
                ( East::Low, North::Low, South::Tall, false, West::Tall, false, ) => 23230,
                ( East::Low, North::Tall, South::None, true, West::None, true, ) => 23231,
                ( East::Low, North::Tall, South::None, true, West::Low, true, ) => 23232,
                ( East::Low, North::Tall, South::None, true, West::Tall, true, ) => 23233,
                ( East::Low, North::Tall, South::None, false, West::None, true, ) => 23234,
                ( East::Low, North::Tall, South::None, false, West::Low, true, ) => 23235,
                ( East::Low, North::Tall, South::None, false, West::Tall, true, ) => 23236,
                ( East::Low, North::Tall, South::None, true, West::None, false, ) => 23237,
                ( East::Low, North::Tall, South::None, true, West::Low, false, ) => 23238,
                ( East::Low, North::Tall, South::None, true, West::Tall, false, ) => 23239,
                ( East::Low, North::Tall, South::None, false, West::None, false, ) => 23240,
                ( East::Low, North::Tall, South::None, false, West::Low, false, ) => 23241,
                ( East::Low, North::Tall, South::None, false, West::Tall, false, ) => 23242,
                ( East::Low, North::Tall, South::Low, true, West::None, true, ) => 23243,
                ( East::Low, North::Tall, South::Low, true, West::Low, true, ) => 23244,
                ( East::Low, North::Tall, South::Low, true, West::Tall, true, ) => 23245,
                ( East::Low, North::Tall, South::Low, false, West::None, true, ) => 23246,
                ( East::Low, North::Tall, South::Low, false, West::Low, true, ) => 23247,
                ( East::Low, North::Tall, South::Low, false, West::Tall, true, ) => 23248,
                ( East::Low, North::Tall, South::Low, true, West::None, false, ) => 23249,
                ( East::Low, North::Tall, South::Low, true, West::Low, false, ) => 23250,
                ( East::Low, North::Tall, South::Low, true, West::Tall, false, ) => 23251,
                ( East::Low, North::Tall, South::Low, false, West::None, false, ) => 23252,
                ( East::Low, North::Tall, South::Low, false, West::Low, false, ) => 23253,
                ( East::Low, North::Tall, South::Low, false, West::Tall, false, ) => 23254,
                ( East::Low, North::Tall, South::Tall, true, West::None, true, ) => 23255,
                ( East::Low, North::Tall, South::Tall, true, West::Low, true, ) => 23256,
                ( East::Low, North::Tall, South::Tall, true, West::Tall, true, ) => 23257,
                ( East::Low, North::Tall, South::Tall, false, West::None, true, ) => 23258,
                ( East::Low, North::Tall, South::Tall, false, West::Low, true, ) => 23259,
                ( East::Low, North::Tall, South::Tall, false, West::Tall, true, ) => 23260,
                ( East::Low, North::Tall, South::Tall, true, West::None, false, ) => 23261,
                ( East::Low, North::Tall, South::Tall, true, West::Low, false, ) => 23262,
                ( East::Low, North::Tall, South::Tall, true, West::Tall, false, ) => 23263,
                ( East::Low, North::Tall, South::Tall, false, West::None, false, ) => 23264,
                ( East::Low, North::Tall, South::Tall, false, West::Low, false, ) => 23265,
                ( East::Low, North::Tall, South::Tall, false, West::Tall, false, ) => 23266,
                ( East::Tall, North::None, South::None, true, West::None, true, ) => 23267,
                ( East::Tall, North::None, South::None, true, West::Low, true, ) => 23268,
                ( East::Tall, North::None, South::None, true, West::Tall, true, ) => 23269,
                ( East::Tall, North::None, South::None, false, West::None, true, ) => 23270,
                ( East::Tall, North::None, South::None, false, West::Low, true, ) => 23271,
                ( East::Tall, North::None, South::None, false, West::Tall, true, ) => 23272,
                ( East::Tall, North::None, South::None, true, West::None, false, ) => 23273,
                ( East::Tall, North::None, South::None, true, West::Low, false, ) => 23274,
                ( East::Tall, North::None, South::None, true, West::Tall, false, ) => 23275,
                ( East::Tall, North::None, South::None, false, West::None, false, ) => 23276,
                ( East::Tall, North::None, South::None, false, West::Low, false, ) => 23277,
                ( East::Tall, North::None, South::None, false, West::Tall, false, ) => 23278,
                ( East::Tall, North::None, South::Low, true, West::None, true, ) => 23279,
                ( East::Tall, North::None, South::Low, true, West::Low, true, ) => 23280,
                ( East::Tall, North::None, South::Low, true, West::Tall, true, ) => 23281,
                ( East::Tall, North::None, South::Low, false, West::None, true, ) => 23282,
                ( East::Tall, North::None, South::Low, false, West::Low, true, ) => 23283,
                ( East::Tall, North::None, South::Low, false, West::Tall, true, ) => 23284,
                ( East::Tall, North::None, South::Low, true, West::None, false, ) => 23285,
                ( East::Tall, North::None, South::Low, true, West::Low, false, ) => 23286,
                ( East::Tall, North::None, South::Low, true, West::Tall, false, ) => 23287,
                ( East::Tall, North::None, South::Low, false, West::None, false, ) => 23288,
                ( East::Tall, North::None, South::Low, false, West::Low, false, ) => 23289,
                ( East::Tall, North::None, South::Low, false, West::Tall, false, ) => 23290,
                ( East::Tall, North::None, South::Tall, true, West::None, true, ) => 23291,
                ( East::Tall, North::None, South::Tall, true, West::Low, true, ) => 23292,
                ( East::Tall, North::None, South::Tall, true, West::Tall, true, ) => 23293,
                ( East::Tall, North::None, South::Tall, false, West::None, true, ) => 23294,
                ( East::Tall, North::None, South::Tall, false, West::Low, true, ) => 23295,
                ( East::Tall, North::None, South::Tall, false, West::Tall, true, ) => 23296,
                ( East::Tall, North::None, South::Tall, true, West::None, false, ) => 23297,
                ( East::Tall, North::None, South::Tall, true, West::Low, false, ) => 23298,
                ( East::Tall, North::None, South::Tall, true, West::Tall, false, ) => 23299,
                ( East::Tall, North::None, South::Tall, false, West::None, false, ) => 23300,
                ( East::Tall, North::None, South::Tall, false, West::Low, false, ) => 23301,
                ( East::Tall, North::None, South::Tall, false, West::Tall, false, ) => 23302,
                ( East::Tall, North::Low, South::None, true, West::None, true, ) => 23303,
                ( East::Tall, North::Low, South::None, true, West::Low, true, ) => 23304,
                ( East::Tall, North::Low, South::None, true, West::Tall, true, ) => 23305,
                ( East::Tall, North::Low, South::None, false, West::None, true, ) => 23306,
                ( East::Tall, North::Low, South::None, false, West::Low, true, ) => 23307,
                ( East::Tall, North::Low, South::None, false, West::Tall, true, ) => 23308,
                ( East::Tall, North::Low, South::None, true, West::None, false, ) => 23309,
                ( East::Tall, North::Low, South::None, true, West::Low, false, ) => 23310,
                ( East::Tall, North::Low, South::None, true, West::Tall, false, ) => 23311,
                ( East::Tall, North::Low, South::None, false, West::None, false, ) => 23312,
                ( East::Tall, North::Low, South::None, false, West::Low, false, ) => 23313,
                ( East::Tall, North::Low, South::None, false, West::Tall, false, ) => 23314,
                ( East::Tall, North::Low, South::Low, true, West::None, true, ) => 23315,
                ( East::Tall, North::Low, South::Low, true, West::Low, true, ) => 23316,
                ( East::Tall, North::Low, South::Low, true, West::Tall, true, ) => 23317,
                ( East::Tall, North::Low, South::Low, false, West::None, true, ) => 23318,
                ( East::Tall, North::Low, South::Low, false, West::Low, true, ) => 23319,
                ( East::Tall, North::Low, South::Low, false, West::Tall, true, ) => 23320,
                ( East::Tall, North::Low, South::Low, true, West::None, false, ) => 23321,
                ( East::Tall, North::Low, South::Low, true, West::Low, false, ) => 23322,
                ( East::Tall, North::Low, South::Low, true, West::Tall, false, ) => 23323,
                ( East::Tall, North::Low, South::Low, false, West::None, false, ) => 23324,
                ( East::Tall, North::Low, South::Low, false, West::Low, false, ) => 23325,
                ( East::Tall, North::Low, South::Low, false, West::Tall, false, ) => 23326,
                ( East::Tall, North::Low, South::Tall, true, West::None, true, ) => 23327,
                ( East::Tall, North::Low, South::Tall, true, West::Low, true, ) => 23328,
                ( East::Tall, North::Low, South::Tall, true, West::Tall, true, ) => 23329,
                ( East::Tall, North::Low, South::Tall, false, West::None, true, ) => 23330,
                ( East::Tall, North::Low, South::Tall, false, West::Low, true, ) => 23331,
                ( East::Tall, North::Low, South::Tall, false, West::Tall, true, ) => 23332,
                ( East::Tall, North::Low, South::Tall, true, West::None, false, ) => 23333,
                ( East::Tall, North::Low, South::Tall, true, West::Low, false, ) => 23334,
                ( East::Tall, North::Low, South::Tall, true, West::Tall, false, ) => 23335,
                ( East::Tall, North::Low, South::Tall, false, West::None, false, ) => 23336,
                ( East::Tall, North::Low, South::Tall, false, West::Low, false, ) => 23337,
                ( East::Tall, North::Low, South::Tall, false, West::Tall, false, ) => 23338,
                ( East::Tall, North::Tall, South::None, true, West::None, true, ) => 23339,
                ( East::Tall, North::Tall, South::None, true, West::Low, true, ) => 23340,
                ( East::Tall, North::Tall, South::None, true, West::Tall, true, ) => 23341,
                ( East::Tall, North::Tall, South::None, false, West::None, true, ) => 23342,
                ( East::Tall, North::Tall, South::None, false, West::Low, true, ) => 23343,
                ( East::Tall, North::Tall, South::None, false, West::Tall, true, ) => 23344,
                ( East::Tall, North::Tall, South::None, true, West::None, false, ) => 23345,
                ( East::Tall, North::Tall, South::None, true, West::Low, false, ) => 23346,
                ( East::Tall, North::Tall, South::None, true, West::Tall, false, ) => 23347,
                ( East::Tall, North::Tall, South::None, false, West::None, false, ) => 23348,
                ( East::Tall, North::Tall, South::None, false, West::Low, false, ) => 23349,
                ( East::Tall, North::Tall, South::None, false, West::Tall, false, ) => 23350,
                ( East::Tall, North::Tall, South::Low, true, West::None, true, ) => 23351,
                ( East::Tall, North::Tall, South::Low, true, West::Low, true, ) => 23352,
                ( East::Tall, North::Tall, South::Low, true, West::Tall, true, ) => 23353,
                ( East::Tall, North::Tall, South::Low, false, West::None, true, ) => 23354,
                ( East::Tall, North::Tall, South::Low, false, West::Low, true, ) => 23355,
                ( East::Tall, North::Tall, South::Low, false, West::Tall, true, ) => 23356,
                ( East::Tall, North::Tall, South::Low, true, West::None, false, ) => 23357,
                ( East::Tall, North::Tall, South::Low, true, West::Low, false, ) => 23358,
                ( East::Tall, North::Tall, South::Low, true, West::Tall, false, ) => 23359,
                ( East::Tall, North::Tall, South::Low, false, West::None, false, ) => 23360,
                ( East::Tall, North::Tall, South::Low, false, West::Low, false, ) => 23361,
                ( East::Tall, North::Tall, South::Low, false, West::Tall, false, ) => 23362,
                ( East::Tall, North::Tall, South::Tall, true, West::None, true, ) => 23363,
                ( East::Tall, North::Tall, South::Tall, true, West::Low, true, ) => 23364,
                ( East::Tall, North::Tall, South::Tall, true, West::Tall, true, ) => 23365,
                ( East::Tall, North::Tall, South::Tall, false, West::None, true, ) => 23366,
                ( East::Tall, North::Tall, South::Tall, false, West::Low, true, ) => 23367,
                ( East::Tall, North::Tall, South::Tall, false, West::Tall, true, ) => 23368,
                ( East::Tall, North::Tall, South::Tall, true, West::None, false, ) => 23369,
                ( East::Tall, North::Tall, South::Tall, true, West::Low, false, ) => 23370,
                ( East::Tall, North::Tall, South::Tall, true, West::Tall, false, ) => 23371,
                ( East::Tall, North::Tall, South::Tall, false, West::None, false, ) => 23372,
                ( East::Tall, North::Tall, South::Tall, false, West::Low, false, ) => 23373,
                ( East::Tall, North::Tall, South::Tall, false, West::Tall, false, ) => 23374,
            })
        }
    }

    impl From<TuffBrickWall> for BlockState {
        #[inline(always)]
        fn from(value : TuffBrickWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TuffBrickWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TuffBrickWall { }

    impl Block for TuffBrickWall {
        const DEFAULT_STATE : Self = Self {
            east : East::None,
            north : North::None,
            south : South::None,
            waterlogged : false,
            west : West::None,
            up : true,
        };
    }

}

/// `minecraft:polished_granite_slab` block.
pub mod polished_granite_slab {
    use super::*;

    /// `minecraft:polished_granite_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedGraniteSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl PolishedGraniteSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 15137,
                ( false, Kind::Top, ) => 15138,
                ( true, Kind::Bottom, ) => 15139,
                ( false, Kind::Bottom, ) => 15140,
                ( true, Kind::Double, ) => 15141,
                ( false, Kind::Double, ) => 15142,
            })
        }
    }

    impl From<PolishedGraniteSlab> for BlockState {
        #[inline(always)]
        fn from(value : PolishedGraniteSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedGraniteSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedGraniteSlab { }

    impl Block for PolishedGraniteSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:waxed_copper_block` block.
pub mod waxed_copper_block {
    use super::*;

    /// `minecraft:waxed_copper_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedCopperBlock;

    impl WaxedCopperBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24360)
        }
    }

    impl From<WaxedCopperBlock> for BlockState {
        #[inline(always)]
        fn from(value : WaxedCopperBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedCopperBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedCopperBlock { }

    impl Block for WaxedCopperBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:birch_slab` block.
pub mod birch_slab {
    use super::*;

    /// `minecraft:birch_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl BirchSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 12063,
                ( Kind::Top, false, ) => 12064,
                ( Kind::Bottom, true, ) => 12065,
                ( Kind::Bottom, false, ) => 12066,
                ( Kind::Double, true, ) => 12067,
                ( Kind::Double, false, ) => 12068,
            })
        }
    }

    impl From<BirchSlab> for BlockState {
        #[inline(always)]
        fn from(value : BirchSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchSlab { }

    impl Block for BirchSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:water_cauldron` block.
pub mod water_cauldron {
    use super::*;

    /// `minecraft:water_cauldron` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaterCauldron {
        /// `level` state.
        pub level : Level,
    }

    /// `level` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Level {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
    }
    impl crate::Sealed for Level { }
    impl BlockProperty for Level { }

    impl WaterCauldron {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.level, )) {
                ( Level::N1, ) => 8183,
                ( Level::N2, ) => 8184,
                ( Level::N3, ) => 8185,
            })
        }
    }

    impl From<WaterCauldron> for BlockState {
        #[inline(always)]
        fn from(value : WaterCauldron) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaterCauldron {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaterCauldron { }

    impl Block for WaterCauldron {
        const DEFAULT_STATE : Self = Self {
            level : Level::N1,
        };
    }

}

/// `minecraft:smooth_stone_slab` block.
pub mod smooth_stone_slab {
    use super::*;

    /// `minecraft:smooth_stone_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmoothStoneSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl SmoothStoneSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 12123,
                ( false, Kind::Top, ) => 12124,
                ( true, Kind::Bottom, ) => 12125,
                ( false, Kind::Bottom, ) => 12126,
                ( true, Kind::Double, ) => 12127,
                ( false, Kind::Double, ) => 12128,
            })
        }
    }

    impl From<SmoothStoneSlab> for BlockState {
        #[inline(always)]
        fn from(value : SmoothStoneSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmoothStoneSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmoothStoneSlab { }

    impl Block for SmoothStoneSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:brown_mushroom` block.
pub mod brown_mushroom {
    use super::*;

    /// `minecraft:brown_mushroom` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownMushroom;

    impl BrownMushroom {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2135)
        }
    }

    impl From<BrownMushroom> for BlockState {
        #[inline(always)]
        fn from(value : BrownMushroom) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownMushroom {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownMushroom { }

    impl Block for BrownMushroom {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:bamboo_mosaic_slab` block.
pub mod bamboo_mosaic_slab {
    use super::*;

    /// `minecraft:bamboo_mosaic_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooMosaicSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl BambooMosaicSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 12111,
                ( false, Kind::Top, ) => 12112,
                ( true, Kind::Bottom, ) => 12113,
                ( false, Kind::Bottom, ) => 12114,
                ( true, Kind::Double, ) => 12115,
                ( false, Kind::Double, ) => 12116,
            })
        }
    }

    impl From<BambooMosaicSlab> for BlockState {
        #[inline(always)]
        fn from(value : BambooMosaicSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooMosaicSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooMosaicSlab { }

    impl Block for BambooMosaicSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:gray_candle_cake` block.
pub mod gray_candle_cake {
    use super::*;

    /// `minecraft:gray_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl GrayCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22073,
                ( false, ) => 22074,
            })
        }
    }

    impl From<GrayCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : GrayCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayCandleCake { }

    impl Block for GrayCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:orange_concrete` block.
pub mod orange_concrete {
    use super::*;

    /// `minecraft:orange_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeConcrete;

    impl OrangeConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13752)
        }
    }

    impl From<OrangeConcrete> for BlockState {
        #[inline(always)]
        fn from(value : OrangeConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeConcrete { }

    impl Block for OrangeConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:pale_oak_pressure_plate` block.
pub mod pale_oak_pressure_plate {
    use super::*;

    /// `minecraft:pale_oak_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakPressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl PaleOakPressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 5906,
                ( false, ) => 5907,
            })
        }
    }

    impl From<PaleOakPressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakPressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakPressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakPressurePlate { }

    impl Block for PaleOakPressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:ochre_froglight` block.
pub mod ochre_froglight {
    use super::*;

    /// `minecraft:ochre_froglight` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OchreFroglight {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl OchreFroglight {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 27655,
                ( Axis::Y, ) => 27656,
                ( Axis::Z, ) => 27657,
            })
        }
    }

    impl From<OchreFroglight> for BlockState {
        #[inline(always)]
        fn from(value : OchreFroglight) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OchreFroglight {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OchreFroglight { }

    impl Block for OchreFroglight {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:jungle_sign` block.
pub mod jungle_sign {
    use super::*;

    /// `minecraft:jungle_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl JungleSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.rotation, )) {
                ( true, Rotation::N0, ) => 4526,
                ( false, Rotation::N0, ) => 4527,
                ( true, Rotation::N1, ) => 4528,
                ( false, Rotation::N1, ) => 4529,
                ( true, Rotation::N2, ) => 4530,
                ( false, Rotation::N2, ) => 4531,
                ( true, Rotation::N3, ) => 4532,
                ( false, Rotation::N3, ) => 4533,
                ( true, Rotation::N4, ) => 4534,
                ( false, Rotation::N4, ) => 4535,
                ( true, Rotation::N5, ) => 4536,
                ( false, Rotation::N5, ) => 4537,
                ( true, Rotation::N6, ) => 4538,
                ( false, Rotation::N6, ) => 4539,
                ( true, Rotation::N7, ) => 4540,
                ( false, Rotation::N7, ) => 4541,
                ( true, Rotation::N8, ) => 4542,
                ( false, Rotation::N8, ) => 4543,
                ( true, Rotation::N9, ) => 4544,
                ( false, Rotation::N9, ) => 4545,
                ( true, Rotation::N10, ) => 4546,
                ( false, Rotation::N10, ) => 4547,
                ( true, Rotation::N11, ) => 4548,
                ( false, Rotation::N11, ) => 4549,
                ( true, Rotation::N12, ) => 4550,
                ( false, Rotation::N12, ) => 4551,
                ( true, Rotation::N13, ) => 4552,
                ( false, Rotation::N13, ) => 4553,
                ( true, Rotation::N14, ) => 4554,
                ( false, Rotation::N14, ) => 4555,
                ( true, Rotation::N15, ) => 4556,
                ( false, Rotation::N15, ) => 4557,
            })
        }
    }

    impl From<JungleSign> for BlockState {
        #[inline(always)]
        fn from(value : JungleSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleSign { }

    impl Block for JungleSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:brown_stained_glass` block.
pub mod brown_stained_glass {
    use super::*;

    /// `minecraft:brown_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownStainedGlass;

    impl BrownStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6136)
        }
    }

    impl From<BrownStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : BrownStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownStainedGlass { }

    impl Block for BrownStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:snow` block.
pub mod snow {
    use super::*;

    /// `minecraft:snow` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Snow {
        /// `layers` state.
        pub layers : Layers,
    }

    /// `layers` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Layers {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
    }
    impl crate::Sealed for Layers { }
    impl BlockProperty for Layers { }

    impl Snow {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.layers, )) {
                ( Layers::N1, ) => 5950,
                ( Layers::N2, ) => 5951,
                ( Layers::N3, ) => 5952,
                ( Layers::N4, ) => 5953,
                ( Layers::N5, ) => 5954,
                ( Layers::N6, ) => 5955,
                ( Layers::N7, ) => 5956,
                ( Layers::N8, ) => 5957,
            })
        }
    }

    impl From<Snow> for BlockState {
        #[inline(always)]
        fn from(value : Snow) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Snow {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Snow { }

    impl Block for Snow {
        const DEFAULT_STATE : Self = Self {
            layers : Layers::N1,
        };
    }

}

/// `minecraft:light_gray_wall_banner` block.
pub mod light_gray_wall_banner {
    use super::*;

    /// `minecraft:light_gray_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl LightGrayWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11936,
                ( Facing::South, ) => 11937,
                ( Facing::West, ) => 11938,
                ( Facing::East, ) => 11939,
            })
        }
    }

    impl From<LightGrayWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayWallBanner { }

    impl Block for LightGrayWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:oxidized_copper_grate` block.
pub mod oxidized_copper_grate {
    use super::*;

    /// `minecraft:oxidized_copper_grate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OxidizedCopperGrate {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl OxidizedCopperGrate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 25742,
                ( false, ) => 25743,
            })
        }
    }

    impl From<OxidizedCopperGrate> for BlockState {
        #[inline(always)]
        fn from(value : OxidizedCopperGrate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OxidizedCopperGrate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OxidizedCopperGrate { }

    impl Block for OxidizedCopperGrate {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
        };
    }

}

/// `minecraft:waxed_exposed_cut_copper` block.
pub mod waxed_exposed_cut_copper {
    use super::*;

    /// `minecraft:waxed_exposed_cut_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedExposedCutCopper;

    impl WaxedExposedCutCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24366)
        }
    }

    impl From<WaxedExposedCutCopper> for BlockState {
        #[inline(always)]
        fn from(value : WaxedExposedCutCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedExposedCutCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedExposedCutCopper { }

    impl Block for WaxedExposedCutCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:melon_stem` block.
pub mod melon_stem {
    use super::*;

    /// `minecraft:melon_stem` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MelonStem {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl MelonStem {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 7072,
                ( Age::N1, ) => 7073,
                ( Age::N2, ) => 7074,
                ( Age::N3, ) => 7075,
                ( Age::N4, ) => 7076,
                ( Age::N5, ) => 7077,
                ( Age::N6, ) => 7078,
                ( Age::N7, ) => 7079,
            })
        }
    }

    impl From<MelonStem> for BlockState {
        #[inline(always)]
        fn from(value : MelonStem) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MelonStem {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MelonStem { }

    impl Block for MelonStem {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:tuff_brick_stairs` block.
pub mod tuff_brick_stairs {
    use super::*;

    /// `minecraft:tuff_brick_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TuffBrickStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl TuffBrickStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.half, self.facing, self.shape, )) {
                ( true, Half::Top, Facing::North, Shape::Straight, ) => 22971,
                ( false, Half::Top, Facing::North, Shape::Straight, ) => 22972,
                ( true, Half::Top, Facing::North, Shape::InnerLeft, ) => 22973,
                ( false, Half::Top, Facing::North, Shape::InnerLeft, ) => 22974,
                ( true, Half::Top, Facing::North, Shape::InnerRight, ) => 22975,
                ( false, Half::Top, Facing::North, Shape::InnerRight, ) => 22976,
                ( true, Half::Top, Facing::North, Shape::OuterLeft, ) => 22977,
                ( false, Half::Top, Facing::North, Shape::OuterLeft, ) => 22978,
                ( true, Half::Top, Facing::North, Shape::OuterRight, ) => 22979,
                ( false, Half::Top, Facing::North, Shape::OuterRight, ) => 22980,
                ( true, Half::Bottom, Facing::North, Shape::Straight, ) => 22981,
                ( false, Half::Bottom, Facing::North, Shape::Straight, ) => 22982,
                ( true, Half::Bottom, Facing::North, Shape::InnerLeft, ) => 22983,
                ( false, Half::Bottom, Facing::North, Shape::InnerLeft, ) => 22984,
                ( true, Half::Bottom, Facing::North, Shape::InnerRight, ) => 22985,
                ( false, Half::Bottom, Facing::North, Shape::InnerRight, ) => 22986,
                ( true, Half::Bottom, Facing::North, Shape::OuterLeft, ) => 22987,
                ( false, Half::Bottom, Facing::North, Shape::OuterLeft, ) => 22988,
                ( true, Half::Bottom, Facing::North, Shape::OuterRight, ) => 22989,
                ( false, Half::Bottom, Facing::North, Shape::OuterRight, ) => 22990,
                ( true, Half::Top, Facing::South, Shape::Straight, ) => 22991,
                ( false, Half::Top, Facing::South, Shape::Straight, ) => 22992,
                ( true, Half::Top, Facing::South, Shape::InnerLeft, ) => 22993,
                ( false, Half::Top, Facing::South, Shape::InnerLeft, ) => 22994,
                ( true, Half::Top, Facing::South, Shape::InnerRight, ) => 22995,
                ( false, Half::Top, Facing::South, Shape::InnerRight, ) => 22996,
                ( true, Half::Top, Facing::South, Shape::OuterLeft, ) => 22997,
                ( false, Half::Top, Facing::South, Shape::OuterLeft, ) => 22998,
                ( true, Half::Top, Facing::South, Shape::OuterRight, ) => 22999,
                ( false, Half::Top, Facing::South, Shape::OuterRight, ) => 23000,
                ( true, Half::Bottom, Facing::South, Shape::Straight, ) => 23001,
                ( false, Half::Bottom, Facing::South, Shape::Straight, ) => 23002,
                ( true, Half::Bottom, Facing::South, Shape::InnerLeft, ) => 23003,
                ( false, Half::Bottom, Facing::South, Shape::InnerLeft, ) => 23004,
                ( true, Half::Bottom, Facing::South, Shape::InnerRight, ) => 23005,
                ( false, Half::Bottom, Facing::South, Shape::InnerRight, ) => 23006,
                ( true, Half::Bottom, Facing::South, Shape::OuterLeft, ) => 23007,
                ( false, Half::Bottom, Facing::South, Shape::OuterLeft, ) => 23008,
                ( true, Half::Bottom, Facing::South, Shape::OuterRight, ) => 23009,
                ( false, Half::Bottom, Facing::South, Shape::OuterRight, ) => 23010,
                ( true, Half::Top, Facing::West, Shape::Straight, ) => 23011,
                ( false, Half::Top, Facing::West, Shape::Straight, ) => 23012,
                ( true, Half::Top, Facing::West, Shape::InnerLeft, ) => 23013,
                ( false, Half::Top, Facing::West, Shape::InnerLeft, ) => 23014,
                ( true, Half::Top, Facing::West, Shape::InnerRight, ) => 23015,
                ( false, Half::Top, Facing::West, Shape::InnerRight, ) => 23016,
                ( true, Half::Top, Facing::West, Shape::OuterLeft, ) => 23017,
                ( false, Half::Top, Facing::West, Shape::OuterLeft, ) => 23018,
                ( true, Half::Top, Facing::West, Shape::OuterRight, ) => 23019,
                ( false, Half::Top, Facing::West, Shape::OuterRight, ) => 23020,
                ( true, Half::Bottom, Facing::West, Shape::Straight, ) => 23021,
                ( false, Half::Bottom, Facing::West, Shape::Straight, ) => 23022,
                ( true, Half::Bottom, Facing::West, Shape::InnerLeft, ) => 23023,
                ( false, Half::Bottom, Facing::West, Shape::InnerLeft, ) => 23024,
                ( true, Half::Bottom, Facing::West, Shape::InnerRight, ) => 23025,
                ( false, Half::Bottom, Facing::West, Shape::InnerRight, ) => 23026,
                ( true, Half::Bottom, Facing::West, Shape::OuterLeft, ) => 23027,
                ( false, Half::Bottom, Facing::West, Shape::OuterLeft, ) => 23028,
                ( true, Half::Bottom, Facing::West, Shape::OuterRight, ) => 23029,
                ( false, Half::Bottom, Facing::West, Shape::OuterRight, ) => 23030,
                ( true, Half::Top, Facing::East, Shape::Straight, ) => 23031,
                ( false, Half::Top, Facing::East, Shape::Straight, ) => 23032,
                ( true, Half::Top, Facing::East, Shape::InnerLeft, ) => 23033,
                ( false, Half::Top, Facing::East, Shape::InnerLeft, ) => 23034,
                ( true, Half::Top, Facing::East, Shape::InnerRight, ) => 23035,
                ( false, Half::Top, Facing::East, Shape::InnerRight, ) => 23036,
                ( true, Half::Top, Facing::East, Shape::OuterLeft, ) => 23037,
                ( false, Half::Top, Facing::East, Shape::OuterLeft, ) => 23038,
                ( true, Half::Top, Facing::East, Shape::OuterRight, ) => 23039,
                ( false, Half::Top, Facing::East, Shape::OuterRight, ) => 23040,
                ( true, Half::Bottom, Facing::East, Shape::Straight, ) => 23041,
                ( false, Half::Bottom, Facing::East, Shape::Straight, ) => 23042,
                ( true, Half::Bottom, Facing::East, Shape::InnerLeft, ) => 23043,
                ( false, Half::Bottom, Facing::East, Shape::InnerLeft, ) => 23044,
                ( true, Half::Bottom, Facing::East, Shape::InnerRight, ) => 23045,
                ( false, Half::Bottom, Facing::East, Shape::InnerRight, ) => 23046,
                ( true, Half::Bottom, Facing::East, Shape::OuterLeft, ) => 23047,
                ( false, Half::Bottom, Facing::East, Shape::OuterLeft, ) => 23048,
                ( true, Half::Bottom, Facing::East, Shape::OuterRight, ) => 23049,
                ( false, Half::Bottom, Facing::East, Shape::OuterRight, ) => 23050,
            })
        }
    }

    impl From<TuffBrickStairs> for BlockState {
        #[inline(always)]
        fn from(value : TuffBrickStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TuffBrickStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TuffBrickStairs { }

    impl Block for TuffBrickStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            half : Half::Bottom,
            facing : Facing::North,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:yellow_terracotta` block.
pub mod yellow_terracotta {
    use super::*;

    /// `minecraft:yellow_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowTerracotta;

    impl YellowTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10169)
        }
    }

    impl From<YellowTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : YellowTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowTerracotta { }

    impl Block for YellowTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stripped_crimson_hyphae` block.
pub mod stripped_crimson_hyphae {
    use super::*;

    /// `minecraft:stripped_crimson_hyphae` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedCrimsonHyphae {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedCrimsonHyphae {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 19660,
                ( Axis::Y, ) => 19661,
                ( Axis::Z, ) => 19662,
            })
        }
    }

    impl From<StrippedCrimsonHyphae> for BlockState {
        #[inline(always)]
        fn from(value : StrippedCrimsonHyphae) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedCrimsonHyphae {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedCrimsonHyphae { }

    impl Block for StrippedCrimsonHyphae {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:activator_rail` block.
pub mod activator_rail {
    use super::*;

    /// `minecraft:activator_rail` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ActivatorRail {
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `powered` state.
        pub powered : bool,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `north_south` variant.
        NorthSouth,
        /// `east_west` variant.
        EastWest,
        /// `ascending_east` variant.
        AscendingEast,
        /// `ascending_west` variant.
        AscendingWest,
        /// `ascending_north` variant.
        AscendingNorth,
        /// `ascending_south` variant.
        AscendingSouth,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl ActivatorRail {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.waterlogged, self.powered, )) {
                ( Shape::NorthSouth, true, true, ) => 10129,
                ( Shape::NorthSouth, false, true, ) => 10130,
                ( Shape::EastWest, true, true, ) => 10131,
                ( Shape::EastWest, false, true, ) => 10132,
                ( Shape::AscendingEast, true, true, ) => 10133,
                ( Shape::AscendingEast, false, true, ) => 10134,
                ( Shape::AscendingWest, true, true, ) => 10135,
                ( Shape::AscendingWest, false, true, ) => 10136,
                ( Shape::AscendingNorth, true, true, ) => 10137,
                ( Shape::AscendingNorth, false, true, ) => 10138,
                ( Shape::AscendingSouth, true, true, ) => 10139,
                ( Shape::AscendingSouth, false, true, ) => 10140,
                ( Shape::NorthSouth, true, false, ) => 10141,
                ( Shape::NorthSouth, false, false, ) => 10142,
                ( Shape::EastWest, true, false, ) => 10143,
                ( Shape::EastWest, false, false, ) => 10144,
                ( Shape::AscendingEast, true, false, ) => 10145,
                ( Shape::AscendingEast, false, false, ) => 10146,
                ( Shape::AscendingWest, true, false, ) => 10147,
                ( Shape::AscendingWest, false, false, ) => 10148,
                ( Shape::AscendingNorth, true, false, ) => 10149,
                ( Shape::AscendingNorth, false, false, ) => 10150,
                ( Shape::AscendingSouth, true, false, ) => 10151,
                ( Shape::AscendingSouth, false, false, ) => 10152,
            })
        }
    }

    impl From<ActivatorRail> for BlockState {
        #[inline(always)]
        fn from(value : ActivatorRail) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ActivatorRail {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ActivatorRail { }

    impl Block for ActivatorRail {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::NorthSouth,
            waterlogged : false,
            powered : false,
        };
    }

}

/// `minecraft:diamond_ore` block.
pub mod diamond_ore {
    use super::*;

    /// `minecraft:diamond_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DiamondOre;

    impl DiamondOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(4338)
        }
    }

    impl From<DiamondOre> for BlockState {
        #[inline(always)]
        fn from(value : DiamondOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DiamondOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DiamondOre { }

    impl Block for DiamondOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:gray_candle` block.
pub mod gray_candle {
    use super::*;

    /// `minecraft:gray_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayCandle {
        /// `candles` state.
        pub candles : Candles,
        /// `lit` state.
        pub lit : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl GrayCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.candles, self.lit, self.waterlogged, )) {
                ( Candles::N1, true, true, ) => 21913,
                ( Candles::N1, true, false, ) => 21914,
                ( Candles::N1, false, true, ) => 21915,
                ( Candles::N1, false, false, ) => 21916,
                ( Candles::N2, true, true, ) => 21917,
                ( Candles::N2, true, false, ) => 21918,
                ( Candles::N2, false, true, ) => 21919,
                ( Candles::N2, false, false, ) => 21920,
                ( Candles::N3, true, true, ) => 21921,
                ( Candles::N3, true, false, ) => 21922,
                ( Candles::N3, false, true, ) => 21923,
                ( Candles::N3, false, false, ) => 21924,
                ( Candles::N4, true, true, ) => 21925,
                ( Candles::N4, true, false, ) => 21926,
                ( Candles::N4, false, true, ) => 21927,
                ( Candles::N4, false, false, ) => 21928,
            })
        }
    }

    impl From<GrayCandle> for BlockState {
        #[inline(always)]
        fn from(value : GrayCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayCandle { }

    impl Block for GrayCandle {
        const DEFAULT_STATE : Self = Self {
            candles : Candles::N1,
            lit : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:potted_cactus` block.
pub mod potted_cactus {
    use super::*;

    /// `minecraft:potted_cactus` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedCactus;

    impl PottedCactus {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9379)
        }
    }

    impl From<PottedCactus> for BlockState {
        #[inline(always)]
        fn from(value : PottedCactus) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedCactus {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedCactus { }

    impl Block for PottedCactus {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:infested_cobblestone` block.
pub mod infested_cobblestone {
    use super::*;

    /// `minecraft:infested_cobblestone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct InfestedCobblestone;

    impl InfestedCobblestone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6787)
        }
    }

    impl From<InfestedCobblestone> for BlockState {
        #[inline(always)]
        fn from(value : InfestedCobblestone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for InfestedCobblestone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for InfestedCobblestone { }

    impl Block for InfestedCobblestone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:blue_glazed_terracotta` block.
pub mod blue_glazed_terracotta {
    use super::*;

    /// `minecraft:blue_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BlueGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13731,
                ( Facing::South, ) => 13732,
                ( Facing::West, ) => 13733,
                ( Facing::East, ) => 13734,
            })
        }
    }

    impl From<BlueGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : BlueGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueGlazedTerracotta { }

    impl Block for BlueGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:pale_oak_fence` block.
pub mod pale_oak_fence {
    use super::*;

    /// `minecraft:pale_oak_fence` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakFence {
        /// `south` state.
        pub south : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `east` state.
        pub east : bool,
        /// `north` state.
        pub north : bool,
        /// `west` state.
        pub west : bool,
    }

    impl PaleOakFence {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.south, self.waterlogged, self.east, self.north, self.west, )) {
                ( true, true, true, true, true, ) => 12685,
                ( true, true, true, true, false, ) => 12686,
                ( true, false, true, true, true, ) => 12687,
                ( true, false, true, true, false, ) => 12688,
                ( false, true, true, true, true, ) => 12689,
                ( false, true, true, true, false, ) => 12690,
                ( false, false, true, true, true, ) => 12691,
                ( false, false, true, true, false, ) => 12692,
                ( true, true, true, false, true, ) => 12693,
                ( true, true, true, false, false, ) => 12694,
                ( true, false, true, false, true, ) => 12695,
                ( true, false, true, false, false, ) => 12696,
                ( false, true, true, false, true, ) => 12697,
                ( false, true, true, false, false, ) => 12698,
                ( false, false, true, false, true, ) => 12699,
                ( false, false, true, false, false, ) => 12700,
                ( true, true, false, true, true, ) => 12701,
                ( true, true, false, true, false, ) => 12702,
                ( true, false, false, true, true, ) => 12703,
                ( true, false, false, true, false, ) => 12704,
                ( false, true, false, true, true, ) => 12705,
                ( false, true, false, true, false, ) => 12706,
                ( false, false, false, true, true, ) => 12707,
                ( false, false, false, true, false, ) => 12708,
                ( true, true, false, false, true, ) => 12709,
                ( true, true, false, false, false, ) => 12710,
                ( true, false, false, false, true, ) => 12711,
                ( true, false, false, false, false, ) => 12712,
                ( false, true, false, false, true, ) => 12713,
                ( false, true, false, false, false, ) => 12714,
                ( false, false, false, false, true, ) => 12715,
                ( false, false, false, false, false, ) => 12716,
            })
        }
    }

    impl From<PaleOakFence> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakFence) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakFence {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakFence { }

    impl Block for PaleOakFence {
        const DEFAULT_STATE : Self = Self {
            south : false,
            waterlogged : false,
            east : false,
            north : false,
            west : false,
        };
    }

}

/// `minecraft:pink_concrete_powder` block.
pub mod pink_concrete_powder {
    use super::*;

    /// `minecraft:pink_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkConcretePowder;

    impl PinkConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13773)
        }
    }

    impl From<PinkConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : PinkConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkConcretePowder { }

    impl Block for PinkConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:polished_blackstone_brick_slab` block.
pub mod polished_blackstone_brick_slab {
    use super::*;

    /// `minecraft:polished_blackstone_brick_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedBlackstoneBrickSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl PolishedBlackstoneBrickSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 20935,
                ( false, Kind::Top, ) => 20936,
                ( true, Kind::Bottom, ) => 20937,
                ( false, Kind::Bottom, ) => 20938,
                ( true, Kind::Double, ) => 20939,
                ( false, Kind::Double, ) => 20940,
            })
        }
    }

    impl From<PolishedBlackstoneBrickSlab> for BlockState {
        #[inline(always)]
        fn from(value : PolishedBlackstoneBrickSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedBlackstoneBrickSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedBlackstoneBrickSlab { }

    impl Block for PolishedBlackstoneBrickSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:smooth_quartz_slab` block.
pub mod smooth_quartz_slab {
    use super::*;

    /// `minecraft:smooth_quartz_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmoothQuartzSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl SmoothQuartzSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 15179,
                ( false, Kind::Top, ) => 15180,
                ( true, Kind::Bottom, ) => 15181,
                ( false, Kind::Bottom, ) => 15182,
                ( true, Kind::Double, ) => 15183,
                ( false, Kind::Double, ) => 15184,
            })
        }
    }

    impl From<SmoothQuartzSlab> for BlockState {
        #[inline(always)]
        fn from(value : SmoothQuartzSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmoothQuartzSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmoothQuartzSlab { }

    impl Block for SmoothQuartzSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:stripped_dark_oak_log` block.
pub mod stripped_dark_oak_log {
    use super::*;

    /// `minecraft:stripped_dark_oak_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedDarkOakLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedDarkOakLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 186,
                ( Axis::Y, ) => 187,
                ( Axis::Z, ) => 188,
            })
        }
    }

    impl From<StrippedDarkOakLog> for BlockState {
        #[inline(always)]
        fn from(value : StrippedDarkOakLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedDarkOakLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedDarkOakLog { }

    impl Block for StrippedDarkOakLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:pink_terracotta` block.
pub mod pink_terracotta {
    use super::*;

    /// `minecraft:pink_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkTerracotta;

    impl PinkTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10171)
        }
    }

    impl From<PinkTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : PinkTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkTerracotta { }

    impl Block for PinkTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:redstone_torch` block.
pub mod redstone_torch {
    use super::*;

    /// `minecraft:redstone_torch` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedstoneTorch {
        /// `lit` state.
        pub lit : bool,
    }

    impl RedstoneTorch {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 5916,
                ( false, ) => 5917,
            })
        }
    }

    impl From<RedstoneTorch> for BlockState {
        #[inline(always)]
        fn from(value : RedstoneTorch) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedstoneTorch {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedstoneTorch { }

    impl Block for RedstoneTorch {
        const DEFAULT_STATE : Self = Self {
            lit : true,
        };
    }

}

/// `minecraft:gray_wool` block.
pub mod gray_wool {
    use super::*;

    /// `minecraft:gray_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayWool;

    impl GrayWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2100)
        }
    }

    impl From<GrayWool> for BlockState {
        #[inline(always)]
        fn from(value : GrayWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayWool { }

    impl Block for GrayWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:polished_andesite_stairs` block.
pub mod polished_andesite_stairs {
    use super::*;

    /// `minecraft:polished_andesite_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedAndesiteStairs {
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl PolishedAndesiteStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.facing, self.waterlogged, self.shape, )) {
                ( Half::Top, Facing::North, true, Shape::Straight, ) => 14977,
                ( Half::Top, Facing::North, false, Shape::Straight, ) => 14978,
                ( Half::Top, Facing::North, true, Shape::InnerLeft, ) => 14979,
                ( Half::Top, Facing::North, false, Shape::InnerLeft, ) => 14980,
                ( Half::Top, Facing::North, true, Shape::InnerRight, ) => 14981,
                ( Half::Top, Facing::North, false, Shape::InnerRight, ) => 14982,
                ( Half::Top, Facing::North, true, Shape::OuterLeft, ) => 14983,
                ( Half::Top, Facing::North, false, Shape::OuterLeft, ) => 14984,
                ( Half::Top, Facing::North, true, Shape::OuterRight, ) => 14985,
                ( Half::Top, Facing::North, false, Shape::OuterRight, ) => 14986,
                ( Half::Bottom, Facing::North, true, Shape::Straight, ) => 14987,
                ( Half::Bottom, Facing::North, false, Shape::Straight, ) => 14988,
                ( Half::Bottom, Facing::North, true, Shape::InnerLeft, ) => 14989,
                ( Half::Bottom, Facing::North, false, Shape::InnerLeft, ) => 14990,
                ( Half::Bottom, Facing::North, true, Shape::InnerRight, ) => 14991,
                ( Half::Bottom, Facing::North, false, Shape::InnerRight, ) => 14992,
                ( Half::Bottom, Facing::North, true, Shape::OuterLeft, ) => 14993,
                ( Half::Bottom, Facing::North, false, Shape::OuterLeft, ) => 14994,
                ( Half::Bottom, Facing::North, true, Shape::OuterRight, ) => 14995,
                ( Half::Bottom, Facing::North, false, Shape::OuterRight, ) => 14996,
                ( Half::Top, Facing::South, true, Shape::Straight, ) => 14997,
                ( Half::Top, Facing::South, false, Shape::Straight, ) => 14998,
                ( Half::Top, Facing::South, true, Shape::InnerLeft, ) => 14999,
                ( Half::Top, Facing::South, false, Shape::InnerLeft, ) => 15000,
                ( Half::Top, Facing::South, true, Shape::InnerRight, ) => 15001,
                ( Half::Top, Facing::South, false, Shape::InnerRight, ) => 15002,
                ( Half::Top, Facing::South, true, Shape::OuterLeft, ) => 15003,
                ( Half::Top, Facing::South, false, Shape::OuterLeft, ) => 15004,
                ( Half::Top, Facing::South, true, Shape::OuterRight, ) => 15005,
                ( Half::Top, Facing::South, false, Shape::OuterRight, ) => 15006,
                ( Half::Bottom, Facing::South, true, Shape::Straight, ) => 15007,
                ( Half::Bottom, Facing::South, false, Shape::Straight, ) => 15008,
                ( Half::Bottom, Facing::South, true, Shape::InnerLeft, ) => 15009,
                ( Half::Bottom, Facing::South, false, Shape::InnerLeft, ) => 15010,
                ( Half::Bottom, Facing::South, true, Shape::InnerRight, ) => 15011,
                ( Half::Bottom, Facing::South, false, Shape::InnerRight, ) => 15012,
                ( Half::Bottom, Facing::South, true, Shape::OuterLeft, ) => 15013,
                ( Half::Bottom, Facing::South, false, Shape::OuterLeft, ) => 15014,
                ( Half::Bottom, Facing::South, true, Shape::OuterRight, ) => 15015,
                ( Half::Bottom, Facing::South, false, Shape::OuterRight, ) => 15016,
                ( Half::Top, Facing::West, true, Shape::Straight, ) => 15017,
                ( Half::Top, Facing::West, false, Shape::Straight, ) => 15018,
                ( Half::Top, Facing::West, true, Shape::InnerLeft, ) => 15019,
                ( Half::Top, Facing::West, false, Shape::InnerLeft, ) => 15020,
                ( Half::Top, Facing::West, true, Shape::InnerRight, ) => 15021,
                ( Half::Top, Facing::West, false, Shape::InnerRight, ) => 15022,
                ( Half::Top, Facing::West, true, Shape::OuterLeft, ) => 15023,
                ( Half::Top, Facing::West, false, Shape::OuterLeft, ) => 15024,
                ( Half::Top, Facing::West, true, Shape::OuterRight, ) => 15025,
                ( Half::Top, Facing::West, false, Shape::OuterRight, ) => 15026,
                ( Half::Bottom, Facing::West, true, Shape::Straight, ) => 15027,
                ( Half::Bottom, Facing::West, false, Shape::Straight, ) => 15028,
                ( Half::Bottom, Facing::West, true, Shape::InnerLeft, ) => 15029,
                ( Half::Bottom, Facing::West, false, Shape::InnerLeft, ) => 15030,
                ( Half::Bottom, Facing::West, true, Shape::InnerRight, ) => 15031,
                ( Half::Bottom, Facing::West, false, Shape::InnerRight, ) => 15032,
                ( Half::Bottom, Facing::West, true, Shape::OuterLeft, ) => 15033,
                ( Half::Bottom, Facing::West, false, Shape::OuterLeft, ) => 15034,
                ( Half::Bottom, Facing::West, true, Shape::OuterRight, ) => 15035,
                ( Half::Bottom, Facing::West, false, Shape::OuterRight, ) => 15036,
                ( Half::Top, Facing::East, true, Shape::Straight, ) => 15037,
                ( Half::Top, Facing::East, false, Shape::Straight, ) => 15038,
                ( Half::Top, Facing::East, true, Shape::InnerLeft, ) => 15039,
                ( Half::Top, Facing::East, false, Shape::InnerLeft, ) => 15040,
                ( Half::Top, Facing::East, true, Shape::InnerRight, ) => 15041,
                ( Half::Top, Facing::East, false, Shape::InnerRight, ) => 15042,
                ( Half::Top, Facing::East, true, Shape::OuterLeft, ) => 15043,
                ( Half::Top, Facing::East, false, Shape::OuterLeft, ) => 15044,
                ( Half::Top, Facing::East, true, Shape::OuterRight, ) => 15045,
                ( Half::Top, Facing::East, false, Shape::OuterRight, ) => 15046,
                ( Half::Bottom, Facing::East, true, Shape::Straight, ) => 15047,
                ( Half::Bottom, Facing::East, false, Shape::Straight, ) => 15048,
                ( Half::Bottom, Facing::East, true, Shape::InnerLeft, ) => 15049,
                ( Half::Bottom, Facing::East, false, Shape::InnerLeft, ) => 15050,
                ( Half::Bottom, Facing::East, true, Shape::InnerRight, ) => 15051,
                ( Half::Bottom, Facing::East, false, Shape::InnerRight, ) => 15052,
                ( Half::Bottom, Facing::East, true, Shape::OuterLeft, ) => 15053,
                ( Half::Bottom, Facing::East, false, Shape::OuterLeft, ) => 15054,
                ( Half::Bottom, Facing::East, true, Shape::OuterRight, ) => 15055,
                ( Half::Bottom, Facing::East, false, Shape::OuterRight, ) => 15056,
            })
        }
    }

    impl From<PolishedAndesiteStairs> for BlockState {
        #[inline(always)]
        fn from(value : PolishedAndesiteStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedAndesiteStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedAndesiteStairs { }

    impl Block for PolishedAndesiteStairs {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            facing : Facing::North,
            waterlogged : false,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:white_shulker_box` block.
pub mod white_shulker_box {
    use super::*;

    /// `minecraft:white_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WhiteShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13591,
                ( Facing::East, ) => 13592,
                ( Facing::South, ) => 13593,
                ( Facing::West, ) => 13594,
                ( Facing::Up, ) => 13595,
                ( Facing::Down, ) => 13596,
            })
        }
    }

    impl From<WhiteShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : WhiteShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteShulkerBox { }

    impl Block for WhiteShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:brown_concrete` block.
pub mod brown_concrete {
    use super::*;

    /// `minecraft:brown_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownConcrete;

    impl BrownConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13763)
        }
    }

    impl From<BrownConcrete> for BlockState {
        #[inline(always)]
        fn from(value : BrownConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownConcrete { }

    impl Block for BrownConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:red_wall_banner` block.
pub mod red_wall_banner {
    use super::*;

    /// `minecraft:red_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl RedWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11960,
                ( Facing::South, ) => 11961,
                ( Facing::West, ) => 11962,
                ( Facing::East, ) => 11963,
            })
        }
    }

    impl From<RedWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : RedWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedWallBanner { }

    impl Block for RedWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:small_dripleaf` block.
pub mod small_dripleaf {
    use super::*;

    /// `minecraft:small_dripleaf` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmallDripleaf {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl SmallDripleaf {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.half, self.facing, )) {
                ( true, Half::Upper, Facing::North, ) => 25976,
                ( false, Half::Upper, Facing::North, ) => 25977,
                ( true, Half::Lower, Facing::North, ) => 25978,
                ( false, Half::Lower, Facing::North, ) => 25979,
                ( true, Half::Upper, Facing::South, ) => 25980,
                ( false, Half::Upper, Facing::South, ) => 25981,
                ( true, Half::Lower, Facing::South, ) => 25982,
                ( false, Half::Lower, Facing::South, ) => 25983,
                ( true, Half::Upper, Facing::West, ) => 25984,
                ( false, Half::Upper, Facing::West, ) => 25985,
                ( true, Half::Lower, Facing::West, ) => 25986,
                ( false, Half::Lower, Facing::West, ) => 25987,
                ( true, Half::Upper, Facing::East, ) => 25988,
                ( false, Half::Upper, Facing::East, ) => 25989,
                ( true, Half::Lower, Facing::East, ) => 25990,
                ( false, Half::Lower, Facing::East, ) => 25991,
            })
        }
    }

    impl From<SmallDripleaf> for BlockState {
        #[inline(always)]
        fn from(value : SmallDripleaf) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmallDripleaf {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmallDripleaf { }

    impl Block for SmallDripleaf {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            half : Half::Lower,
            facing : Facing::North,
        };
    }

}

/// `minecraft:cake` block.
pub mod cake {
    use super::*;

    /// `minecraft:cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Cake {
        /// `bites` state.
        pub bites : Bites,
    }

    /// `bites` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Bites {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
    }
    impl crate::Sealed for Bites { }
    impl BlockProperty for Bites { }

    impl Cake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.bites, )) {
                ( Bites::N0, ) => 6053,
                ( Bites::N1, ) => 6054,
                ( Bites::N2, ) => 6055,
                ( Bites::N3, ) => 6056,
                ( Bites::N4, ) => 6057,
                ( Bites::N5, ) => 6058,
                ( Bites::N6, ) => 6059,
            })
        }
    }

    impl From<Cake> for BlockState {
        #[inline(always)]
        fn from(value : Cake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Cake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Cake { }

    impl Block for Cake {
        const DEFAULT_STATE : Self = Self {
            bites : Bites::N0,
        };
    }

}

/// `minecraft:dead_tube_coral_wall_fan` block.
pub mod dead_tube_coral_wall_fan {
    use super::*;

    /// `minecraft:dead_tube_coral_wall_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadTubeCoralWallFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DeadTubeCoralWallFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 13908,
                ( false, Facing::North, ) => 13909,
                ( true, Facing::South, ) => 13910,
                ( false, Facing::South, ) => 13911,
                ( true, Facing::West, ) => 13912,
                ( false, Facing::West, ) => 13913,
                ( true, Facing::East, ) => 13914,
                ( false, Facing::East, ) => 13915,
            })
        }
    }

    impl From<DeadTubeCoralWallFan> for BlockState {
        #[inline(always)]
        fn from(value : DeadTubeCoralWallFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadTubeCoralWallFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadTubeCoralWallFan { }

    impl Block for DeadTubeCoralWallFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
            facing : Facing::North,
        };
    }

}

/// `minecraft:polished_deepslate_stairs` block.
pub mod polished_deepslate_stairs {
    use super::*;

    /// `minecraft:polished_deepslate_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedDeepslateStairs {
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PolishedDeepslateStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.shape, self.waterlogged, self.facing, )) {
                ( Half::Top, Shape::Straight, true, Facing::North, ) => 26411,
                ( Half::Top, Shape::Straight, false, Facing::North, ) => 26412,
                ( Half::Top, Shape::InnerLeft, true, Facing::North, ) => 26413,
                ( Half::Top, Shape::InnerLeft, false, Facing::North, ) => 26414,
                ( Half::Top, Shape::InnerRight, true, Facing::North, ) => 26415,
                ( Half::Top, Shape::InnerRight, false, Facing::North, ) => 26416,
                ( Half::Top, Shape::OuterLeft, true, Facing::North, ) => 26417,
                ( Half::Top, Shape::OuterLeft, false, Facing::North, ) => 26418,
                ( Half::Top, Shape::OuterRight, true, Facing::North, ) => 26419,
                ( Half::Top, Shape::OuterRight, false, Facing::North, ) => 26420,
                ( Half::Bottom, Shape::Straight, true, Facing::North, ) => 26421,
                ( Half::Bottom, Shape::Straight, false, Facing::North, ) => 26422,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::North, ) => 26423,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::North, ) => 26424,
                ( Half::Bottom, Shape::InnerRight, true, Facing::North, ) => 26425,
                ( Half::Bottom, Shape::InnerRight, false, Facing::North, ) => 26426,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::North, ) => 26427,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::North, ) => 26428,
                ( Half::Bottom, Shape::OuterRight, true, Facing::North, ) => 26429,
                ( Half::Bottom, Shape::OuterRight, false, Facing::North, ) => 26430,
                ( Half::Top, Shape::Straight, true, Facing::South, ) => 26431,
                ( Half::Top, Shape::Straight, false, Facing::South, ) => 26432,
                ( Half::Top, Shape::InnerLeft, true, Facing::South, ) => 26433,
                ( Half::Top, Shape::InnerLeft, false, Facing::South, ) => 26434,
                ( Half::Top, Shape::InnerRight, true, Facing::South, ) => 26435,
                ( Half::Top, Shape::InnerRight, false, Facing::South, ) => 26436,
                ( Half::Top, Shape::OuterLeft, true, Facing::South, ) => 26437,
                ( Half::Top, Shape::OuterLeft, false, Facing::South, ) => 26438,
                ( Half::Top, Shape::OuterRight, true, Facing::South, ) => 26439,
                ( Half::Top, Shape::OuterRight, false, Facing::South, ) => 26440,
                ( Half::Bottom, Shape::Straight, true, Facing::South, ) => 26441,
                ( Half::Bottom, Shape::Straight, false, Facing::South, ) => 26442,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::South, ) => 26443,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::South, ) => 26444,
                ( Half::Bottom, Shape::InnerRight, true, Facing::South, ) => 26445,
                ( Half::Bottom, Shape::InnerRight, false, Facing::South, ) => 26446,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::South, ) => 26447,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::South, ) => 26448,
                ( Half::Bottom, Shape::OuterRight, true, Facing::South, ) => 26449,
                ( Half::Bottom, Shape::OuterRight, false, Facing::South, ) => 26450,
                ( Half::Top, Shape::Straight, true, Facing::West, ) => 26451,
                ( Half::Top, Shape::Straight, false, Facing::West, ) => 26452,
                ( Half::Top, Shape::InnerLeft, true, Facing::West, ) => 26453,
                ( Half::Top, Shape::InnerLeft, false, Facing::West, ) => 26454,
                ( Half::Top, Shape::InnerRight, true, Facing::West, ) => 26455,
                ( Half::Top, Shape::InnerRight, false, Facing::West, ) => 26456,
                ( Half::Top, Shape::OuterLeft, true, Facing::West, ) => 26457,
                ( Half::Top, Shape::OuterLeft, false, Facing::West, ) => 26458,
                ( Half::Top, Shape::OuterRight, true, Facing::West, ) => 26459,
                ( Half::Top, Shape::OuterRight, false, Facing::West, ) => 26460,
                ( Half::Bottom, Shape::Straight, true, Facing::West, ) => 26461,
                ( Half::Bottom, Shape::Straight, false, Facing::West, ) => 26462,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::West, ) => 26463,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::West, ) => 26464,
                ( Half::Bottom, Shape::InnerRight, true, Facing::West, ) => 26465,
                ( Half::Bottom, Shape::InnerRight, false, Facing::West, ) => 26466,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::West, ) => 26467,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::West, ) => 26468,
                ( Half::Bottom, Shape::OuterRight, true, Facing::West, ) => 26469,
                ( Half::Bottom, Shape::OuterRight, false, Facing::West, ) => 26470,
                ( Half::Top, Shape::Straight, true, Facing::East, ) => 26471,
                ( Half::Top, Shape::Straight, false, Facing::East, ) => 26472,
                ( Half::Top, Shape::InnerLeft, true, Facing::East, ) => 26473,
                ( Half::Top, Shape::InnerLeft, false, Facing::East, ) => 26474,
                ( Half::Top, Shape::InnerRight, true, Facing::East, ) => 26475,
                ( Half::Top, Shape::InnerRight, false, Facing::East, ) => 26476,
                ( Half::Top, Shape::OuterLeft, true, Facing::East, ) => 26477,
                ( Half::Top, Shape::OuterLeft, false, Facing::East, ) => 26478,
                ( Half::Top, Shape::OuterRight, true, Facing::East, ) => 26479,
                ( Half::Top, Shape::OuterRight, false, Facing::East, ) => 26480,
                ( Half::Bottom, Shape::Straight, true, Facing::East, ) => 26481,
                ( Half::Bottom, Shape::Straight, false, Facing::East, ) => 26482,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::East, ) => 26483,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::East, ) => 26484,
                ( Half::Bottom, Shape::InnerRight, true, Facing::East, ) => 26485,
                ( Half::Bottom, Shape::InnerRight, false, Facing::East, ) => 26486,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::East, ) => 26487,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::East, ) => 26488,
                ( Half::Bottom, Shape::OuterRight, true, Facing::East, ) => 26489,
                ( Half::Bottom, Shape::OuterRight, false, Facing::East, ) => 26490,
            })
        }
    }

    impl From<PolishedDeepslateStairs> for BlockState {
        #[inline(always)]
        fn from(value : PolishedDeepslateStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedDeepslateStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedDeepslateStairs { }

    impl Block for PolishedDeepslateStairs {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            shape : Shape::Straight,
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:cherry_pressure_plate` block.
pub mod cherry_pressure_plate {
    use super::*;

    /// `minecraft:cherry_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryPressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl CherryPressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 5902,
                ( false, ) => 5903,
            })
        }
    }

    impl From<CherryPressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : CherryPressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryPressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryPressurePlate { }

    impl Block for CherryPressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:cherry_hanging_sign` block.
pub mod cherry_hanging_sign {
    use super::*;

    /// `minecraft:cherry_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryHangingSign {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `attached` state.
        pub attached : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl CherryHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.waterlogged, self.attached, )) {
                ( Rotation::N0, true, true, ) => 5194,
                ( Rotation::N0, false, true, ) => 5195,
                ( Rotation::N1, true, true, ) => 5196,
                ( Rotation::N1, false, true, ) => 5197,
                ( Rotation::N2, true, true, ) => 5198,
                ( Rotation::N2, false, true, ) => 5199,
                ( Rotation::N3, true, true, ) => 5200,
                ( Rotation::N3, false, true, ) => 5201,
                ( Rotation::N4, true, true, ) => 5202,
                ( Rotation::N4, false, true, ) => 5203,
                ( Rotation::N5, true, true, ) => 5204,
                ( Rotation::N5, false, true, ) => 5205,
                ( Rotation::N6, true, true, ) => 5206,
                ( Rotation::N6, false, true, ) => 5207,
                ( Rotation::N7, true, true, ) => 5208,
                ( Rotation::N7, false, true, ) => 5209,
                ( Rotation::N8, true, true, ) => 5210,
                ( Rotation::N8, false, true, ) => 5211,
                ( Rotation::N9, true, true, ) => 5212,
                ( Rotation::N9, false, true, ) => 5213,
                ( Rotation::N10, true, true, ) => 5214,
                ( Rotation::N10, false, true, ) => 5215,
                ( Rotation::N11, true, true, ) => 5216,
                ( Rotation::N11, false, true, ) => 5217,
                ( Rotation::N12, true, true, ) => 5218,
                ( Rotation::N12, false, true, ) => 5219,
                ( Rotation::N13, true, true, ) => 5220,
                ( Rotation::N13, false, true, ) => 5221,
                ( Rotation::N14, true, true, ) => 5222,
                ( Rotation::N14, false, true, ) => 5223,
                ( Rotation::N15, true, true, ) => 5224,
                ( Rotation::N15, false, true, ) => 5225,
                ( Rotation::N0, true, false, ) => 5226,
                ( Rotation::N0, false, false, ) => 5227,
                ( Rotation::N1, true, false, ) => 5228,
                ( Rotation::N1, false, false, ) => 5229,
                ( Rotation::N2, true, false, ) => 5230,
                ( Rotation::N2, false, false, ) => 5231,
                ( Rotation::N3, true, false, ) => 5232,
                ( Rotation::N3, false, false, ) => 5233,
                ( Rotation::N4, true, false, ) => 5234,
                ( Rotation::N4, false, false, ) => 5235,
                ( Rotation::N5, true, false, ) => 5236,
                ( Rotation::N5, false, false, ) => 5237,
                ( Rotation::N6, true, false, ) => 5238,
                ( Rotation::N6, false, false, ) => 5239,
                ( Rotation::N7, true, false, ) => 5240,
                ( Rotation::N7, false, false, ) => 5241,
                ( Rotation::N8, true, false, ) => 5242,
                ( Rotation::N8, false, false, ) => 5243,
                ( Rotation::N9, true, false, ) => 5244,
                ( Rotation::N9, false, false, ) => 5245,
                ( Rotation::N10, true, false, ) => 5246,
                ( Rotation::N10, false, false, ) => 5247,
                ( Rotation::N11, true, false, ) => 5248,
                ( Rotation::N11, false, false, ) => 5249,
                ( Rotation::N12, true, false, ) => 5250,
                ( Rotation::N12, false, false, ) => 5251,
                ( Rotation::N13, true, false, ) => 5252,
                ( Rotation::N13, false, false, ) => 5253,
                ( Rotation::N14, true, false, ) => 5254,
                ( Rotation::N14, false, false, ) => 5255,
                ( Rotation::N15, true, false, ) => 5256,
                ( Rotation::N15, false, false, ) => 5257,
            })
        }
    }

    impl From<CherryHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : CherryHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryHangingSign { }

    impl Block for CherryHangingSign {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            waterlogged : false,
            attached : false,
        };
    }

}

/// `minecraft:firefly_bush` block.
pub mod firefly_bush {
    use super::*;

    /// `minecraft:firefly_bush` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct FireflyBush;

    impl FireflyBush {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27945)
        }
    }

    impl From<FireflyBush> for BlockState {
        #[inline(always)]
        fn from(value : FireflyBush) -> Self {
            value.to_block_state()
        }
    }

    impl Default for FireflyBush {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for FireflyBush { }

    impl Block for FireflyBush {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:acacia_leaves` block.
pub mod acacia_leaves {
    use super::*;

    /// `minecraft:acacia_leaves` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaLeaves {
        /// `distance` state.
        pub distance : Distance,
        /// `persistent` state.
        pub persistent : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `distance` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Distance {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Distance { }
    impl BlockProperty for Distance { }

    impl AcaciaLeaves {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.distance, self.persistent, self.waterlogged, )) {
                ( Distance::N1, true, true, ) => 364,
                ( Distance::N1, true, false, ) => 365,
                ( Distance::N1, false, true, ) => 366,
                ( Distance::N1, false, false, ) => 367,
                ( Distance::N2, true, true, ) => 368,
                ( Distance::N2, true, false, ) => 369,
                ( Distance::N2, false, true, ) => 370,
                ( Distance::N2, false, false, ) => 371,
                ( Distance::N3, true, true, ) => 372,
                ( Distance::N3, true, false, ) => 373,
                ( Distance::N3, false, true, ) => 374,
                ( Distance::N3, false, false, ) => 375,
                ( Distance::N4, true, true, ) => 376,
                ( Distance::N4, true, false, ) => 377,
                ( Distance::N4, false, true, ) => 378,
                ( Distance::N4, false, false, ) => 379,
                ( Distance::N5, true, true, ) => 380,
                ( Distance::N5, true, false, ) => 381,
                ( Distance::N5, false, true, ) => 382,
                ( Distance::N5, false, false, ) => 383,
                ( Distance::N6, true, true, ) => 384,
                ( Distance::N6, true, false, ) => 385,
                ( Distance::N6, false, true, ) => 386,
                ( Distance::N6, false, false, ) => 387,
                ( Distance::N7, true, true, ) => 388,
                ( Distance::N7, true, false, ) => 389,
                ( Distance::N7, false, true, ) => 390,
                ( Distance::N7, false, false, ) => 391,
            })
        }
    }

    impl From<AcaciaLeaves> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaLeaves) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaLeaves {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaLeaves { }

    impl Block for AcaciaLeaves {
        const DEFAULT_STATE : Self = Self {
            distance : Distance::N7,
            persistent : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:light_gray_bed` block.
pub mod light_gray_bed {
    use super::*;

    /// `minecraft:light_gray_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayBed {
        /// `facing` state.
        pub facing : Facing,
        /// `occupied` state.
        pub occupied : bool,
        /// `part` state.
        pub part : Part,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    impl LightGrayBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.occupied, self.part, )) {
                ( Facing::North, true, Part::Head, ) => 1859,
                ( Facing::North, true, Part::Foot, ) => 1860,
                ( Facing::North, false, Part::Head, ) => 1861,
                ( Facing::North, false, Part::Foot, ) => 1862,
                ( Facing::South, true, Part::Head, ) => 1863,
                ( Facing::South, true, Part::Foot, ) => 1864,
                ( Facing::South, false, Part::Head, ) => 1865,
                ( Facing::South, false, Part::Foot, ) => 1866,
                ( Facing::West, true, Part::Head, ) => 1867,
                ( Facing::West, true, Part::Foot, ) => 1868,
                ( Facing::West, false, Part::Head, ) => 1869,
                ( Facing::West, false, Part::Foot, ) => 1870,
                ( Facing::East, true, Part::Head, ) => 1871,
                ( Facing::East, true, Part::Foot, ) => 1872,
                ( Facing::East, false, Part::Head, ) => 1873,
                ( Facing::East, false, Part::Foot, ) => 1874,
            })
        }
    }

    impl From<LightGrayBed> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayBed { }

    impl Block for LightGrayBed {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            occupied : false,
            part : Part::Foot,
        };
    }

}

/// `minecraft:mangrove_hanging_sign` block.
pub mod mangrove_hanging_sign {
    use super::*;

    /// `minecraft:mangrove_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveHangingSign {
        /// `attached` state.
        pub attached : bool,
        /// `rotation` state.
        pub rotation : Rotation,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl MangroveHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.attached, self.rotation, self.waterlogged, )) {
                ( true, Rotation::N0, true, ) => 5578,
                ( true, Rotation::N0, false, ) => 5579,
                ( true, Rotation::N1, true, ) => 5580,
                ( true, Rotation::N1, false, ) => 5581,
                ( true, Rotation::N2, true, ) => 5582,
                ( true, Rotation::N2, false, ) => 5583,
                ( true, Rotation::N3, true, ) => 5584,
                ( true, Rotation::N3, false, ) => 5585,
                ( true, Rotation::N4, true, ) => 5586,
                ( true, Rotation::N4, false, ) => 5587,
                ( true, Rotation::N5, true, ) => 5588,
                ( true, Rotation::N5, false, ) => 5589,
                ( true, Rotation::N6, true, ) => 5590,
                ( true, Rotation::N6, false, ) => 5591,
                ( true, Rotation::N7, true, ) => 5592,
                ( true, Rotation::N7, false, ) => 5593,
                ( true, Rotation::N8, true, ) => 5594,
                ( true, Rotation::N8, false, ) => 5595,
                ( true, Rotation::N9, true, ) => 5596,
                ( true, Rotation::N9, false, ) => 5597,
                ( true, Rotation::N10, true, ) => 5598,
                ( true, Rotation::N10, false, ) => 5599,
                ( true, Rotation::N11, true, ) => 5600,
                ( true, Rotation::N11, false, ) => 5601,
                ( true, Rotation::N12, true, ) => 5602,
                ( true, Rotation::N12, false, ) => 5603,
                ( true, Rotation::N13, true, ) => 5604,
                ( true, Rotation::N13, false, ) => 5605,
                ( true, Rotation::N14, true, ) => 5606,
                ( true, Rotation::N14, false, ) => 5607,
                ( true, Rotation::N15, true, ) => 5608,
                ( true, Rotation::N15, false, ) => 5609,
                ( false, Rotation::N0, true, ) => 5610,
                ( false, Rotation::N0, false, ) => 5611,
                ( false, Rotation::N1, true, ) => 5612,
                ( false, Rotation::N1, false, ) => 5613,
                ( false, Rotation::N2, true, ) => 5614,
                ( false, Rotation::N2, false, ) => 5615,
                ( false, Rotation::N3, true, ) => 5616,
                ( false, Rotation::N3, false, ) => 5617,
                ( false, Rotation::N4, true, ) => 5618,
                ( false, Rotation::N4, false, ) => 5619,
                ( false, Rotation::N5, true, ) => 5620,
                ( false, Rotation::N5, false, ) => 5621,
                ( false, Rotation::N6, true, ) => 5622,
                ( false, Rotation::N6, false, ) => 5623,
                ( false, Rotation::N7, true, ) => 5624,
                ( false, Rotation::N7, false, ) => 5625,
                ( false, Rotation::N8, true, ) => 5626,
                ( false, Rotation::N8, false, ) => 5627,
                ( false, Rotation::N9, true, ) => 5628,
                ( false, Rotation::N9, false, ) => 5629,
                ( false, Rotation::N10, true, ) => 5630,
                ( false, Rotation::N10, false, ) => 5631,
                ( false, Rotation::N11, true, ) => 5632,
                ( false, Rotation::N11, false, ) => 5633,
                ( false, Rotation::N12, true, ) => 5634,
                ( false, Rotation::N12, false, ) => 5635,
                ( false, Rotation::N13, true, ) => 5636,
                ( false, Rotation::N13, false, ) => 5637,
                ( false, Rotation::N14, true, ) => 5638,
                ( false, Rotation::N14, false, ) => 5639,
                ( false, Rotation::N15, true, ) => 5640,
                ( false, Rotation::N15, false, ) => 5641,
            })
        }
    }

    impl From<MangroveHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : MangroveHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveHangingSign { }

    impl Block for MangroveHangingSign {
        const DEFAULT_STATE : Self = Self {
            attached : false,
            rotation : Rotation::N0,
            waterlogged : false,
        };
    }

}

/// `minecraft:packed_ice` block.
pub mod packed_ice {
    use super::*;

    /// `minecraft:packed_ice` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PackedIce;

    impl PackedIce {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11635)
        }
    }

    impl From<PackedIce> for BlockState {
        #[inline(always)]
        fn from(value : PackedIce) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PackedIce {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PackedIce { }

    impl Block for PackedIce {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:suspicious_gravel` block.
pub mod suspicious_gravel {
    use super::*;

    /// `minecraft:suspicious_gravel` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SuspiciousGravel {
        /// `dusted` state.
        pub dusted : Dusted,
    }

    /// `dusted` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Dusted {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
    }
    impl crate::Sealed for Dusted { }
    impl BlockProperty for Dusted { }

    impl SuspiciousGravel {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.dusted, )) {
                ( Dusted::N0, ) => 125,
                ( Dusted::N1, ) => 126,
                ( Dusted::N2, ) => 127,
                ( Dusted::N3, ) => 128,
            })
        }
    }

    impl From<SuspiciousGravel> for BlockState {
        #[inline(always)]
        fn from(value : SuspiciousGravel) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SuspiciousGravel {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SuspiciousGravel { }

    impl Block for SuspiciousGravel {
        const DEFAULT_STATE : Self = Self {
            dusted : Dusted::N0,
        };
    }

}

/// `minecraft:tube_coral_fan` block.
pub mod tube_coral_fan {
    use super::*;

    /// `minecraft:tube_coral_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TubeCoralFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl TubeCoralFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13898,
                ( false, ) => 13899,
            })
        }
    }

    impl From<TubeCoralFan> for BlockState {
        #[inline(always)]
        fn from(value : TubeCoralFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TubeCoralFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TubeCoralFan { }

    impl Block for TubeCoralFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:waxed_weathered_copper_door` block.
pub mod waxed_weathered_copper_door {
    use super::*;

    /// `minecraft:waxed_weathered_copper_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedWeatheredCopperDoor {
        /// `powered` state.
        pub powered : bool,
        /// `half` state.
        pub half : Half,
        /// `hinge` state.
        pub hinge : Hinge,
        /// `open` state.
        pub open : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WaxedWeatheredCopperDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.half, self.hinge, self.open, self.facing, )) {
                ( true, Half::Upper, Hinge::Left, true, Facing::North, ) => 25160,
                ( false, Half::Upper, Hinge::Left, true, Facing::North, ) => 25161,
                ( true, Half::Upper, Hinge::Left, false, Facing::North, ) => 25162,
                ( false, Half::Upper, Hinge::Left, false, Facing::North, ) => 25163,
                ( true, Half::Upper, Hinge::Right, true, Facing::North, ) => 25164,
                ( false, Half::Upper, Hinge::Right, true, Facing::North, ) => 25165,
                ( true, Half::Upper, Hinge::Right, false, Facing::North, ) => 25166,
                ( false, Half::Upper, Hinge::Right, false, Facing::North, ) => 25167,
                ( true, Half::Lower, Hinge::Left, true, Facing::North, ) => 25168,
                ( false, Half::Lower, Hinge::Left, true, Facing::North, ) => 25169,
                ( true, Half::Lower, Hinge::Left, false, Facing::North, ) => 25170,
                ( false, Half::Lower, Hinge::Left, false, Facing::North, ) => 25171,
                ( true, Half::Lower, Hinge::Right, true, Facing::North, ) => 25172,
                ( false, Half::Lower, Hinge::Right, true, Facing::North, ) => 25173,
                ( true, Half::Lower, Hinge::Right, false, Facing::North, ) => 25174,
                ( false, Half::Lower, Hinge::Right, false, Facing::North, ) => 25175,
                ( true, Half::Upper, Hinge::Left, true, Facing::South, ) => 25176,
                ( false, Half::Upper, Hinge::Left, true, Facing::South, ) => 25177,
                ( true, Half::Upper, Hinge::Left, false, Facing::South, ) => 25178,
                ( false, Half::Upper, Hinge::Left, false, Facing::South, ) => 25179,
                ( true, Half::Upper, Hinge::Right, true, Facing::South, ) => 25180,
                ( false, Half::Upper, Hinge::Right, true, Facing::South, ) => 25181,
                ( true, Half::Upper, Hinge::Right, false, Facing::South, ) => 25182,
                ( false, Half::Upper, Hinge::Right, false, Facing::South, ) => 25183,
                ( true, Half::Lower, Hinge::Left, true, Facing::South, ) => 25184,
                ( false, Half::Lower, Hinge::Left, true, Facing::South, ) => 25185,
                ( true, Half::Lower, Hinge::Left, false, Facing::South, ) => 25186,
                ( false, Half::Lower, Hinge::Left, false, Facing::South, ) => 25187,
                ( true, Half::Lower, Hinge::Right, true, Facing::South, ) => 25188,
                ( false, Half::Lower, Hinge::Right, true, Facing::South, ) => 25189,
                ( true, Half::Lower, Hinge::Right, false, Facing::South, ) => 25190,
                ( false, Half::Lower, Hinge::Right, false, Facing::South, ) => 25191,
                ( true, Half::Upper, Hinge::Left, true, Facing::West, ) => 25192,
                ( false, Half::Upper, Hinge::Left, true, Facing::West, ) => 25193,
                ( true, Half::Upper, Hinge::Left, false, Facing::West, ) => 25194,
                ( false, Half::Upper, Hinge::Left, false, Facing::West, ) => 25195,
                ( true, Half::Upper, Hinge::Right, true, Facing::West, ) => 25196,
                ( false, Half::Upper, Hinge::Right, true, Facing::West, ) => 25197,
                ( true, Half::Upper, Hinge::Right, false, Facing::West, ) => 25198,
                ( false, Half::Upper, Hinge::Right, false, Facing::West, ) => 25199,
                ( true, Half::Lower, Hinge::Left, true, Facing::West, ) => 25200,
                ( false, Half::Lower, Hinge::Left, true, Facing::West, ) => 25201,
                ( true, Half::Lower, Hinge::Left, false, Facing::West, ) => 25202,
                ( false, Half::Lower, Hinge::Left, false, Facing::West, ) => 25203,
                ( true, Half::Lower, Hinge::Right, true, Facing::West, ) => 25204,
                ( false, Half::Lower, Hinge::Right, true, Facing::West, ) => 25205,
                ( true, Half::Lower, Hinge::Right, false, Facing::West, ) => 25206,
                ( false, Half::Lower, Hinge::Right, false, Facing::West, ) => 25207,
                ( true, Half::Upper, Hinge::Left, true, Facing::East, ) => 25208,
                ( false, Half::Upper, Hinge::Left, true, Facing::East, ) => 25209,
                ( true, Half::Upper, Hinge::Left, false, Facing::East, ) => 25210,
                ( false, Half::Upper, Hinge::Left, false, Facing::East, ) => 25211,
                ( true, Half::Upper, Hinge::Right, true, Facing::East, ) => 25212,
                ( false, Half::Upper, Hinge::Right, true, Facing::East, ) => 25213,
                ( true, Half::Upper, Hinge::Right, false, Facing::East, ) => 25214,
                ( false, Half::Upper, Hinge::Right, false, Facing::East, ) => 25215,
                ( true, Half::Lower, Hinge::Left, true, Facing::East, ) => 25216,
                ( false, Half::Lower, Hinge::Left, true, Facing::East, ) => 25217,
                ( true, Half::Lower, Hinge::Left, false, Facing::East, ) => 25218,
                ( false, Half::Lower, Hinge::Left, false, Facing::East, ) => 25219,
                ( true, Half::Lower, Hinge::Right, true, Facing::East, ) => 25220,
                ( false, Half::Lower, Hinge::Right, true, Facing::East, ) => 25221,
                ( true, Half::Lower, Hinge::Right, false, Facing::East, ) => 25222,
                ( false, Half::Lower, Hinge::Right, false, Facing::East, ) => 25223,
            })
        }
    }

    impl From<WaxedWeatheredCopperDoor> for BlockState {
        #[inline(always)]
        fn from(value : WaxedWeatheredCopperDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedWeatheredCopperDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedWeatheredCopperDoor { }

    impl Block for WaxedWeatheredCopperDoor {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            half : Half::Lower,
            hinge : Hinge::Left,
            open : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:soul_soil` block.
pub mod soul_soil {
    use super::*;

    /// `minecraft:soul_soil` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SoulSoil;

    impl SoulSoil {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6030)
        }
    }

    impl From<SoulSoil> for BlockState {
        #[inline(always)]
        fn from(value : SoulSoil) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SoulSoil {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SoulSoil { }

    impl Block for SoulSoil {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:orange_concrete_powder` block.
pub mod orange_concrete_powder {
    use super::*;

    /// `minecraft:orange_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeConcretePowder;

    impl OrangeConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13768)
        }
    }

    impl From<OrangeConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : OrangeConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeConcretePowder { }

    impl Block for OrangeConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:infested_mossy_stone_bricks` block.
pub mod infested_mossy_stone_bricks {
    use super::*;

    /// `minecraft:infested_mossy_stone_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct InfestedMossyStoneBricks;

    impl InfestedMossyStoneBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6789)
        }
    }

    impl From<InfestedMossyStoneBricks> for BlockState {
        #[inline(always)]
        fn from(value : InfestedMossyStoneBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for InfestedMossyStoneBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for InfestedMossyStoneBricks { }

    impl Block for InfestedMossyStoneBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:chorus_plant` block.
pub mod chorus_plant {
    use super::*;

    /// `minecraft:chorus_plant` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChorusPlant {
        /// `east` state.
        pub east : bool,
        /// `west` state.
        pub west : bool,
        /// `south` state.
        pub south : bool,
        /// `down` state.
        pub down : bool,
        /// `north` state.
        pub north : bool,
        /// `up` state.
        pub up : bool,
    }

    impl ChorusPlant {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.west, self.south, self.down, self.north, self.up, )) {
                ( true, true, true, true, true, true, ) => 13363,
                ( true, false, true, true, true, true, ) => 13364,
                ( true, true, true, true, true, false, ) => 13365,
                ( true, false, true, true, true, false, ) => 13366,
                ( true, true, false, true, true, true, ) => 13367,
                ( true, false, false, true, true, true, ) => 13368,
                ( true, true, false, true, true, false, ) => 13369,
                ( true, false, false, true, true, false, ) => 13370,
                ( true, true, true, true, false, true, ) => 13371,
                ( true, false, true, true, false, true, ) => 13372,
                ( true, true, true, true, false, false, ) => 13373,
                ( true, false, true, true, false, false, ) => 13374,
                ( true, true, false, true, false, true, ) => 13375,
                ( true, false, false, true, false, true, ) => 13376,
                ( true, true, false, true, false, false, ) => 13377,
                ( true, false, false, true, false, false, ) => 13378,
                ( false, true, true, true, true, true, ) => 13379,
                ( false, false, true, true, true, true, ) => 13380,
                ( false, true, true, true, true, false, ) => 13381,
                ( false, false, true, true, true, false, ) => 13382,
                ( false, true, false, true, true, true, ) => 13383,
                ( false, false, false, true, true, true, ) => 13384,
                ( false, true, false, true, true, false, ) => 13385,
                ( false, false, false, true, true, false, ) => 13386,
                ( false, true, true, true, false, true, ) => 13387,
                ( false, false, true, true, false, true, ) => 13388,
                ( false, true, true, true, false, false, ) => 13389,
                ( false, false, true, true, false, false, ) => 13390,
                ( false, true, false, true, false, true, ) => 13391,
                ( false, false, false, true, false, true, ) => 13392,
                ( false, true, false, true, false, false, ) => 13393,
                ( false, false, false, true, false, false, ) => 13394,
                ( true, true, true, false, true, true, ) => 13395,
                ( true, false, true, false, true, true, ) => 13396,
                ( true, true, true, false, true, false, ) => 13397,
                ( true, false, true, false, true, false, ) => 13398,
                ( true, true, false, false, true, true, ) => 13399,
                ( true, false, false, false, true, true, ) => 13400,
                ( true, true, false, false, true, false, ) => 13401,
                ( true, false, false, false, true, false, ) => 13402,
                ( true, true, true, false, false, true, ) => 13403,
                ( true, false, true, false, false, true, ) => 13404,
                ( true, true, true, false, false, false, ) => 13405,
                ( true, false, true, false, false, false, ) => 13406,
                ( true, true, false, false, false, true, ) => 13407,
                ( true, false, false, false, false, true, ) => 13408,
                ( true, true, false, false, false, false, ) => 13409,
                ( true, false, false, false, false, false, ) => 13410,
                ( false, true, true, false, true, true, ) => 13411,
                ( false, false, true, false, true, true, ) => 13412,
                ( false, true, true, false, true, false, ) => 13413,
                ( false, false, true, false, true, false, ) => 13414,
                ( false, true, false, false, true, true, ) => 13415,
                ( false, false, false, false, true, true, ) => 13416,
                ( false, true, false, false, true, false, ) => 13417,
                ( false, false, false, false, true, false, ) => 13418,
                ( false, true, true, false, false, true, ) => 13419,
                ( false, false, true, false, false, true, ) => 13420,
                ( false, true, true, false, false, false, ) => 13421,
                ( false, false, true, false, false, false, ) => 13422,
                ( false, true, false, false, false, true, ) => 13423,
                ( false, false, false, false, false, true, ) => 13424,
                ( false, true, false, false, false, false, ) => 13425,
                ( false, false, false, false, false, false, ) => 13426,
            })
        }
    }

    impl From<ChorusPlant> for BlockState {
        #[inline(always)]
        fn from(value : ChorusPlant) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChorusPlant {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChorusPlant { }

    impl Block for ChorusPlant {
        const DEFAULT_STATE : Self = Self {
            east : false,
            west : false,
            south : false,
            down : false,
            north : false,
            up : false,
        };
    }

}

/// `minecraft:sea_lantern` block.
pub mod sea_lantern {
    use super::*;

    /// `minecraft:sea_lantern` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SeaLantern;

    impl SeaLantern {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11613)
        }
    }

    impl From<SeaLantern> for BlockState {
        #[inline(always)]
        fn from(value : SeaLantern) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SeaLantern {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SeaLantern { }

    impl Block for SeaLantern {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cut_copper_slab` block.
pub mod cut_copper_slab {
    use super::*;

    /// `minecraft:cut_copper_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CutCopperSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl CutCopperSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 24354,
                ( false, Kind::Top, ) => 24355,
                ( true, Kind::Bottom, ) => 24356,
                ( false, Kind::Bottom, ) => 24357,
                ( true, Kind::Double, ) => 24358,
                ( false, Kind::Double, ) => 24359,
            })
        }
    }

    impl From<CutCopperSlab> for BlockState {
        #[inline(always)]
        fn from(value : CutCopperSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CutCopperSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CutCopperSlab { }

    impl Block for CutCopperSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:weathered_cut_copper_slab` block.
pub mod weathered_cut_copper_slab {
    use super::*;

    /// `minecraft:weathered_cut_copper_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WeatheredCutCopperSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl WeatheredCutCopperSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 24342,
                ( false, Kind::Top, ) => 24343,
                ( true, Kind::Bottom, ) => 24344,
                ( false, Kind::Bottom, ) => 24345,
                ( true, Kind::Double, ) => 24346,
                ( false, Kind::Double, ) => 24347,
            })
        }
    }

    impl From<WeatheredCutCopperSlab> for BlockState {
        #[inline(always)]
        fn from(value : WeatheredCutCopperSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WeatheredCutCopperSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WeatheredCutCopperSlab { }

    impl Block for WeatheredCutCopperSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:lily_pad` block.
pub mod lily_pad {
    use super::*;

    /// `minecraft:lily_pad` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LilyPad;

    impl LilyPad {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(7642)
        }
    }

    impl From<LilyPad> for BlockState {
        #[inline(always)]
        fn from(value : LilyPad) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LilyPad {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LilyPad { }

    impl Block for LilyPad {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:oak_wood` block.
pub mod oak_wood {
    use super::*;

    /// `minecraft:oak_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl OakWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 201,
                ( Axis::Y, ) => 202,
                ( Axis::Z, ) => 203,
            })
        }
    }

    impl From<OakWood> for BlockState {
        #[inline(always)]
        fn from(value : OakWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakWood { }

    impl Block for OakWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:oxeye_daisy` block.
pub mod oxeye_daisy {
    use super::*;

    /// `minecraft:oxeye_daisy` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OxeyeDaisy;

    impl OxeyeDaisy {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2131)
        }
    }

    impl From<OxeyeDaisy> for BlockState {
        #[inline(always)]
        fn from(value : OxeyeDaisy) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OxeyeDaisy {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OxeyeDaisy { }

    impl Block for OxeyeDaisy {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:creaking_heart` block.
pub mod creaking_heart {
    use super::*;

    /// `minecraft:creaking_heart` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CreakingHeart {
        /// `creaking_heart_state` state.
        pub creaking_heart_state : CreakingHeartState,
        /// `axis` state.
        pub axis : Axis,
        /// `natural` state.
        pub natural : bool,
    }

    /// `creaking_heart_state` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum CreakingHeartState {
        /// `uprooted` variant.
        Uprooted,
        /// `dormant` variant.
        Dormant,
        /// `awake` variant.
        Awake,
    }
    impl crate::Sealed for CreakingHeartState { }
    impl BlockProperty for CreakingHeartState { }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl CreakingHeart {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.creaking_heart_state, self.axis, self.natural, )) {
                ( CreakingHeartState::Uprooted, Axis::X, true, ) => 2920,
                ( CreakingHeartState::Uprooted, Axis::X, false, ) => 2921,
                ( CreakingHeartState::Dormant, Axis::X, true, ) => 2922,
                ( CreakingHeartState::Dormant, Axis::X, false, ) => 2923,
                ( CreakingHeartState::Awake, Axis::X, true, ) => 2924,
                ( CreakingHeartState::Awake, Axis::X, false, ) => 2925,
                ( CreakingHeartState::Uprooted, Axis::Y, true, ) => 2926,
                ( CreakingHeartState::Uprooted, Axis::Y, false, ) => 2927,
                ( CreakingHeartState::Dormant, Axis::Y, true, ) => 2928,
                ( CreakingHeartState::Dormant, Axis::Y, false, ) => 2929,
                ( CreakingHeartState::Awake, Axis::Y, true, ) => 2930,
                ( CreakingHeartState::Awake, Axis::Y, false, ) => 2931,
                ( CreakingHeartState::Uprooted, Axis::Z, true, ) => 2932,
                ( CreakingHeartState::Uprooted, Axis::Z, false, ) => 2933,
                ( CreakingHeartState::Dormant, Axis::Z, true, ) => 2934,
                ( CreakingHeartState::Dormant, Axis::Z, false, ) => 2935,
                ( CreakingHeartState::Awake, Axis::Z, true, ) => 2936,
                ( CreakingHeartState::Awake, Axis::Z, false, ) => 2937,
            })
        }
    }

    impl From<CreakingHeart> for BlockState {
        #[inline(always)]
        fn from(value : CreakingHeart) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CreakingHeart {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CreakingHeart { }

    impl Block for CreakingHeart {
        const DEFAULT_STATE : Self = Self {
            creaking_heart_state : CreakingHeartState::Uprooted,
            axis : Axis::Y,
            natural : false,
        };
    }

}

/// `minecraft:acacia_slab` block.
pub mod acacia_slab {
    use super::*;

    /// `minecraft:acacia_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl AcaciaSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 12075,
                ( false, Kind::Top, ) => 12076,
                ( true, Kind::Bottom, ) => 12077,
                ( false, Kind::Bottom, ) => 12078,
                ( true, Kind::Double, ) => 12079,
                ( false, Kind::Double, ) => 12080,
            })
        }
    }

    impl From<AcaciaSlab> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaSlab { }

    impl Block for AcaciaSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:exposed_cut_copper_stairs` block.
pub mod exposed_cut_copper_stairs {
    use super::*;

    /// `minecraft:exposed_cut_copper_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ExposedCutCopperStairs {
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl ExposedCutCopperStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.shape, self.waterlogged, self.facing, )) {
                ( Half::Top, Shape::Straight, true, Facing::North, ) => 24176,
                ( Half::Top, Shape::Straight, false, Facing::North, ) => 24177,
                ( Half::Top, Shape::InnerLeft, true, Facing::North, ) => 24178,
                ( Half::Top, Shape::InnerLeft, false, Facing::North, ) => 24179,
                ( Half::Top, Shape::InnerRight, true, Facing::North, ) => 24180,
                ( Half::Top, Shape::InnerRight, false, Facing::North, ) => 24181,
                ( Half::Top, Shape::OuterLeft, true, Facing::North, ) => 24182,
                ( Half::Top, Shape::OuterLeft, false, Facing::North, ) => 24183,
                ( Half::Top, Shape::OuterRight, true, Facing::North, ) => 24184,
                ( Half::Top, Shape::OuterRight, false, Facing::North, ) => 24185,
                ( Half::Bottom, Shape::Straight, true, Facing::North, ) => 24186,
                ( Half::Bottom, Shape::Straight, false, Facing::North, ) => 24187,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::North, ) => 24188,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::North, ) => 24189,
                ( Half::Bottom, Shape::InnerRight, true, Facing::North, ) => 24190,
                ( Half::Bottom, Shape::InnerRight, false, Facing::North, ) => 24191,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::North, ) => 24192,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::North, ) => 24193,
                ( Half::Bottom, Shape::OuterRight, true, Facing::North, ) => 24194,
                ( Half::Bottom, Shape::OuterRight, false, Facing::North, ) => 24195,
                ( Half::Top, Shape::Straight, true, Facing::South, ) => 24196,
                ( Half::Top, Shape::Straight, false, Facing::South, ) => 24197,
                ( Half::Top, Shape::InnerLeft, true, Facing::South, ) => 24198,
                ( Half::Top, Shape::InnerLeft, false, Facing::South, ) => 24199,
                ( Half::Top, Shape::InnerRight, true, Facing::South, ) => 24200,
                ( Half::Top, Shape::InnerRight, false, Facing::South, ) => 24201,
                ( Half::Top, Shape::OuterLeft, true, Facing::South, ) => 24202,
                ( Half::Top, Shape::OuterLeft, false, Facing::South, ) => 24203,
                ( Half::Top, Shape::OuterRight, true, Facing::South, ) => 24204,
                ( Half::Top, Shape::OuterRight, false, Facing::South, ) => 24205,
                ( Half::Bottom, Shape::Straight, true, Facing::South, ) => 24206,
                ( Half::Bottom, Shape::Straight, false, Facing::South, ) => 24207,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::South, ) => 24208,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::South, ) => 24209,
                ( Half::Bottom, Shape::InnerRight, true, Facing::South, ) => 24210,
                ( Half::Bottom, Shape::InnerRight, false, Facing::South, ) => 24211,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::South, ) => 24212,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::South, ) => 24213,
                ( Half::Bottom, Shape::OuterRight, true, Facing::South, ) => 24214,
                ( Half::Bottom, Shape::OuterRight, false, Facing::South, ) => 24215,
                ( Half::Top, Shape::Straight, true, Facing::West, ) => 24216,
                ( Half::Top, Shape::Straight, false, Facing::West, ) => 24217,
                ( Half::Top, Shape::InnerLeft, true, Facing::West, ) => 24218,
                ( Half::Top, Shape::InnerLeft, false, Facing::West, ) => 24219,
                ( Half::Top, Shape::InnerRight, true, Facing::West, ) => 24220,
                ( Half::Top, Shape::InnerRight, false, Facing::West, ) => 24221,
                ( Half::Top, Shape::OuterLeft, true, Facing::West, ) => 24222,
                ( Half::Top, Shape::OuterLeft, false, Facing::West, ) => 24223,
                ( Half::Top, Shape::OuterRight, true, Facing::West, ) => 24224,
                ( Half::Top, Shape::OuterRight, false, Facing::West, ) => 24225,
                ( Half::Bottom, Shape::Straight, true, Facing::West, ) => 24226,
                ( Half::Bottom, Shape::Straight, false, Facing::West, ) => 24227,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::West, ) => 24228,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::West, ) => 24229,
                ( Half::Bottom, Shape::InnerRight, true, Facing::West, ) => 24230,
                ( Half::Bottom, Shape::InnerRight, false, Facing::West, ) => 24231,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::West, ) => 24232,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::West, ) => 24233,
                ( Half::Bottom, Shape::OuterRight, true, Facing::West, ) => 24234,
                ( Half::Bottom, Shape::OuterRight, false, Facing::West, ) => 24235,
                ( Half::Top, Shape::Straight, true, Facing::East, ) => 24236,
                ( Half::Top, Shape::Straight, false, Facing::East, ) => 24237,
                ( Half::Top, Shape::InnerLeft, true, Facing::East, ) => 24238,
                ( Half::Top, Shape::InnerLeft, false, Facing::East, ) => 24239,
                ( Half::Top, Shape::InnerRight, true, Facing::East, ) => 24240,
                ( Half::Top, Shape::InnerRight, false, Facing::East, ) => 24241,
                ( Half::Top, Shape::OuterLeft, true, Facing::East, ) => 24242,
                ( Half::Top, Shape::OuterLeft, false, Facing::East, ) => 24243,
                ( Half::Top, Shape::OuterRight, true, Facing::East, ) => 24244,
                ( Half::Top, Shape::OuterRight, false, Facing::East, ) => 24245,
                ( Half::Bottom, Shape::Straight, true, Facing::East, ) => 24246,
                ( Half::Bottom, Shape::Straight, false, Facing::East, ) => 24247,
                ( Half::Bottom, Shape::InnerLeft, true, Facing::East, ) => 24248,
                ( Half::Bottom, Shape::InnerLeft, false, Facing::East, ) => 24249,
                ( Half::Bottom, Shape::InnerRight, true, Facing::East, ) => 24250,
                ( Half::Bottom, Shape::InnerRight, false, Facing::East, ) => 24251,
                ( Half::Bottom, Shape::OuterLeft, true, Facing::East, ) => 24252,
                ( Half::Bottom, Shape::OuterLeft, false, Facing::East, ) => 24253,
                ( Half::Bottom, Shape::OuterRight, true, Facing::East, ) => 24254,
                ( Half::Bottom, Shape::OuterRight, false, Facing::East, ) => 24255,
            })
        }
    }

    impl From<ExposedCutCopperStairs> for BlockState {
        #[inline(always)]
        fn from(value : ExposedCutCopperStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ExposedCutCopperStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ExposedCutCopperStairs { }

    impl Block for ExposedCutCopperStairs {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            shape : Shape::Straight,
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:potted_dandelion` block.
pub mod potted_dandelion {
    use super::*;

    /// `minecraft:potted_dandelion` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedDandelion;

    impl PottedDandelion {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9363)
        }
    }

    impl From<PottedDandelion> for BlockState {
        #[inline(always)]
        fn from(value : PottedDandelion) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedDandelion {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedDandelion { }

    impl Block for PottedDandelion {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:ice` block.
pub mod ice {
    use super::*;

    /// `minecraft:ice` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Ice;

    impl Ice {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(5958)
        }
    }

    impl From<Ice> for BlockState {
        #[inline(always)]
        fn from(value : Ice) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Ice {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Ice { }

    impl Block for Ice {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:smooth_red_sandstone_stairs` block.
pub mod smooth_red_sandstone_stairs {
    use super::*;

    /// `minecraft:smooth_red_sandstone_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmoothRedSandstoneStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl SmoothRedSandstoneStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.shape, self.half, self.waterlogged, )) {
                ( Facing::North, Shape::Straight, Half::Top, true, ) => 14097,
                ( Facing::North, Shape::Straight, Half::Top, false, ) => 14098,
                ( Facing::North, Shape::InnerLeft, Half::Top, true, ) => 14099,
                ( Facing::North, Shape::InnerLeft, Half::Top, false, ) => 14100,
                ( Facing::North, Shape::InnerRight, Half::Top, true, ) => 14101,
                ( Facing::North, Shape::InnerRight, Half::Top, false, ) => 14102,
                ( Facing::North, Shape::OuterLeft, Half::Top, true, ) => 14103,
                ( Facing::North, Shape::OuterLeft, Half::Top, false, ) => 14104,
                ( Facing::North, Shape::OuterRight, Half::Top, true, ) => 14105,
                ( Facing::North, Shape::OuterRight, Half::Top, false, ) => 14106,
                ( Facing::North, Shape::Straight, Half::Bottom, true, ) => 14107,
                ( Facing::North, Shape::Straight, Half::Bottom, false, ) => 14108,
                ( Facing::North, Shape::InnerLeft, Half::Bottom, true, ) => 14109,
                ( Facing::North, Shape::InnerLeft, Half::Bottom, false, ) => 14110,
                ( Facing::North, Shape::InnerRight, Half::Bottom, true, ) => 14111,
                ( Facing::North, Shape::InnerRight, Half::Bottom, false, ) => 14112,
                ( Facing::North, Shape::OuterLeft, Half::Bottom, true, ) => 14113,
                ( Facing::North, Shape::OuterLeft, Half::Bottom, false, ) => 14114,
                ( Facing::North, Shape::OuterRight, Half::Bottom, true, ) => 14115,
                ( Facing::North, Shape::OuterRight, Half::Bottom, false, ) => 14116,
                ( Facing::South, Shape::Straight, Half::Top, true, ) => 14117,
                ( Facing::South, Shape::Straight, Half::Top, false, ) => 14118,
                ( Facing::South, Shape::InnerLeft, Half::Top, true, ) => 14119,
                ( Facing::South, Shape::InnerLeft, Half::Top, false, ) => 14120,
                ( Facing::South, Shape::InnerRight, Half::Top, true, ) => 14121,
                ( Facing::South, Shape::InnerRight, Half::Top, false, ) => 14122,
                ( Facing::South, Shape::OuterLeft, Half::Top, true, ) => 14123,
                ( Facing::South, Shape::OuterLeft, Half::Top, false, ) => 14124,
                ( Facing::South, Shape::OuterRight, Half::Top, true, ) => 14125,
                ( Facing::South, Shape::OuterRight, Half::Top, false, ) => 14126,
                ( Facing::South, Shape::Straight, Half::Bottom, true, ) => 14127,
                ( Facing::South, Shape::Straight, Half::Bottom, false, ) => 14128,
                ( Facing::South, Shape::InnerLeft, Half::Bottom, true, ) => 14129,
                ( Facing::South, Shape::InnerLeft, Half::Bottom, false, ) => 14130,
                ( Facing::South, Shape::InnerRight, Half::Bottom, true, ) => 14131,
                ( Facing::South, Shape::InnerRight, Half::Bottom, false, ) => 14132,
                ( Facing::South, Shape::OuterLeft, Half::Bottom, true, ) => 14133,
                ( Facing::South, Shape::OuterLeft, Half::Bottom, false, ) => 14134,
                ( Facing::South, Shape::OuterRight, Half::Bottom, true, ) => 14135,
                ( Facing::South, Shape::OuterRight, Half::Bottom, false, ) => 14136,
                ( Facing::West, Shape::Straight, Half::Top, true, ) => 14137,
                ( Facing::West, Shape::Straight, Half::Top, false, ) => 14138,
                ( Facing::West, Shape::InnerLeft, Half::Top, true, ) => 14139,
                ( Facing::West, Shape::InnerLeft, Half::Top, false, ) => 14140,
                ( Facing::West, Shape::InnerRight, Half::Top, true, ) => 14141,
                ( Facing::West, Shape::InnerRight, Half::Top, false, ) => 14142,
                ( Facing::West, Shape::OuterLeft, Half::Top, true, ) => 14143,
                ( Facing::West, Shape::OuterLeft, Half::Top, false, ) => 14144,
                ( Facing::West, Shape::OuterRight, Half::Top, true, ) => 14145,
                ( Facing::West, Shape::OuterRight, Half::Top, false, ) => 14146,
                ( Facing::West, Shape::Straight, Half::Bottom, true, ) => 14147,
                ( Facing::West, Shape::Straight, Half::Bottom, false, ) => 14148,
                ( Facing::West, Shape::InnerLeft, Half::Bottom, true, ) => 14149,
                ( Facing::West, Shape::InnerLeft, Half::Bottom, false, ) => 14150,
                ( Facing::West, Shape::InnerRight, Half::Bottom, true, ) => 14151,
                ( Facing::West, Shape::InnerRight, Half::Bottom, false, ) => 14152,
                ( Facing::West, Shape::OuterLeft, Half::Bottom, true, ) => 14153,
                ( Facing::West, Shape::OuterLeft, Half::Bottom, false, ) => 14154,
                ( Facing::West, Shape::OuterRight, Half::Bottom, true, ) => 14155,
                ( Facing::West, Shape::OuterRight, Half::Bottom, false, ) => 14156,
                ( Facing::East, Shape::Straight, Half::Top, true, ) => 14157,
                ( Facing::East, Shape::Straight, Half::Top, false, ) => 14158,
                ( Facing::East, Shape::InnerLeft, Half::Top, true, ) => 14159,
                ( Facing::East, Shape::InnerLeft, Half::Top, false, ) => 14160,
                ( Facing::East, Shape::InnerRight, Half::Top, true, ) => 14161,
                ( Facing::East, Shape::InnerRight, Half::Top, false, ) => 14162,
                ( Facing::East, Shape::OuterLeft, Half::Top, true, ) => 14163,
                ( Facing::East, Shape::OuterLeft, Half::Top, false, ) => 14164,
                ( Facing::East, Shape::OuterRight, Half::Top, true, ) => 14165,
                ( Facing::East, Shape::OuterRight, Half::Top, false, ) => 14166,
                ( Facing::East, Shape::Straight, Half::Bottom, true, ) => 14167,
                ( Facing::East, Shape::Straight, Half::Bottom, false, ) => 14168,
                ( Facing::East, Shape::InnerLeft, Half::Bottom, true, ) => 14169,
                ( Facing::East, Shape::InnerLeft, Half::Bottom, false, ) => 14170,
                ( Facing::East, Shape::InnerRight, Half::Bottom, true, ) => 14171,
                ( Facing::East, Shape::InnerRight, Half::Bottom, false, ) => 14172,
                ( Facing::East, Shape::OuterLeft, Half::Bottom, true, ) => 14173,
                ( Facing::East, Shape::OuterLeft, Half::Bottom, false, ) => 14174,
                ( Facing::East, Shape::OuterRight, Half::Bottom, true, ) => 14175,
                ( Facing::East, Shape::OuterRight, Half::Bottom, false, ) => 14176,
            })
        }
    }

    impl From<SmoothRedSandstoneStairs> for BlockState {
        #[inline(always)]
        fn from(value : SmoothRedSandstoneStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmoothRedSandstoneStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmoothRedSandstoneStairs { }

    impl Block for SmoothRedSandstoneStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            shape : Shape::Straight,
            half : Half::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:tnt` block.
pub mod tnt {
    use super::*;

    /// `minecraft:tnt` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Tnt {
        /// `unstable` state.
        pub unstable : bool,
    }

    impl Tnt {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.unstable, )) {
                ( true, ) => 2140,
                ( false, ) => 2141,
            })
        }
    }

    impl From<Tnt> for BlockState {
        #[inline(always)]
        fn from(value : Tnt) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Tnt {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Tnt { }

    impl Block for Tnt {
        const DEFAULT_STATE : Self = Self {
            unstable : false,
        };
    }

}

/// `minecraft:zombie_head` block.
pub mod zombie_head {
    use super::*;

    /// `minecraft:zombie_head` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ZombieHead {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `powered` state.
        pub powered : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl ZombieHead {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.powered, )) {
                ( Rotation::N0, true, ) => 9716,
                ( Rotation::N1, true, ) => 9717,
                ( Rotation::N2, true, ) => 9718,
                ( Rotation::N3, true, ) => 9719,
                ( Rotation::N4, true, ) => 9720,
                ( Rotation::N5, true, ) => 9721,
                ( Rotation::N6, true, ) => 9722,
                ( Rotation::N7, true, ) => 9723,
                ( Rotation::N8, true, ) => 9724,
                ( Rotation::N9, true, ) => 9725,
                ( Rotation::N10, true, ) => 9726,
                ( Rotation::N11, true, ) => 9727,
                ( Rotation::N12, true, ) => 9728,
                ( Rotation::N13, true, ) => 9729,
                ( Rotation::N14, true, ) => 9730,
                ( Rotation::N15, true, ) => 9731,
                ( Rotation::N0, false, ) => 9732,
                ( Rotation::N1, false, ) => 9733,
                ( Rotation::N2, false, ) => 9734,
                ( Rotation::N3, false, ) => 9735,
                ( Rotation::N4, false, ) => 9736,
                ( Rotation::N5, false, ) => 9737,
                ( Rotation::N6, false, ) => 9738,
                ( Rotation::N7, false, ) => 9739,
                ( Rotation::N8, false, ) => 9740,
                ( Rotation::N9, false, ) => 9741,
                ( Rotation::N10, false, ) => 9742,
                ( Rotation::N11, false, ) => 9743,
                ( Rotation::N12, false, ) => 9744,
                ( Rotation::N13, false, ) => 9745,
                ( Rotation::N14, false, ) => 9746,
                ( Rotation::N15, false, ) => 9747,
            })
        }
    }

    impl From<ZombieHead> for BlockState {
        #[inline(always)]
        fn from(value : ZombieHead) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ZombieHead {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ZombieHead { }

    impl Block for ZombieHead {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            powered : false,
        };
    }

}

/// `minecraft:crimson_stem` block.
pub mod crimson_stem {
    use super::*;

    /// `minecraft:crimson_stem` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonStem {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl CrimsonStem {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 19651,
                ( Axis::Y, ) => 19652,
                ( Axis::Z, ) => 19653,
            })
        }
    }

    impl From<CrimsonStem> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonStem) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonStem {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonStem { }

    impl Block for CrimsonStem {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:glow_lichen` block.
pub mod glow_lichen {
    use super::*;

    /// `minecraft:glow_lichen` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GlowLichen {
        /// `down` state.
        pub down : bool,
        /// `east` state.
        pub east : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : bool,
        /// `north` state.
        pub north : bool,
        /// `south` state.
        pub south : bool,
        /// `up` state.
        pub up : bool,
    }

    impl GlowLichen {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.down, self.east, self.waterlogged, self.west, self.north, self.south, self.up, )) {
                ( true, true, true, true, true, true, true, ) => 7112,
                ( true, true, true, false, true, true, true, ) => 7113,
                ( true, true, false, true, true, true, true, ) => 7114,
                ( true, true, false, false, true, true, true, ) => 7115,
                ( true, true, true, true, true, true, false, ) => 7116,
                ( true, true, true, false, true, true, false, ) => 7117,
                ( true, true, false, true, true, true, false, ) => 7118,
                ( true, true, false, false, true, true, false, ) => 7119,
                ( true, true, true, true, true, false, true, ) => 7120,
                ( true, true, true, false, true, false, true, ) => 7121,
                ( true, true, false, true, true, false, true, ) => 7122,
                ( true, true, false, false, true, false, true, ) => 7123,
                ( true, true, true, true, true, false, false, ) => 7124,
                ( true, true, true, false, true, false, false, ) => 7125,
                ( true, true, false, true, true, false, false, ) => 7126,
                ( true, true, false, false, true, false, false, ) => 7127,
                ( true, true, true, true, false, true, true, ) => 7128,
                ( true, true, true, false, false, true, true, ) => 7129,
                ( true, true, false, true, false, true, true, ) => 7130,
                ( true, true, false, false, false, true, true, ) => 7131,
                ( true, true, true, true, false, true, false, ) => 7132,
                ( true, true, true, false, false, true, false, ) => 7133,
                ( true, true, false, true, false, true, false, ) => 7134,
                ( true, true, false, false, false, true, false, ) => 7135,
                ( true, true, true, true, false, false, true, ) => 7136,
                ( true, true, true, false, false, false, true, ) => 7137,
                ( true, true, false, true, false, false, true, ) => 7138,
                ( true, true, false, false, false, false, true, ) => 7139,
                ( true, true, true, true, false, false, false, ) => 7140,
                ( true, true, true, false, false, false, false, ) => 7141,
                ( true, true, false, true, false, false, false, ) => 7142,
                ( true, true, false, false, false, false, false, ) => 7143,
                ( true, false, true, true, true, true, true, ) => 7144,
                ( true, false, true, false, true, true, true, ) => 7145,
                ( true, false, false, true, true, true, true, ) => 7146,
                ( true, false, false, false, true, true, true, ) => 7147,
                ( true, false, true, true, true, true, false, ) => 7148,
                ( true, false, true, false, true, true, false, ) => 7149,
                ( true, false, false, true, true, true, false, ) => 7150,
                ( true, false, false, false, true, true, false, ) => 7151,
                ( true, false, true, true, true, false, true, ) => 7152,
                ( true, false, true, false, true, false, true, ) => 7153,
                ( true, false, false, true, true, false, true, ) => 7154,
                ( true, false, false, false, true, false, true, ) => 7155,
                ( true, false, true, true, true, false, false, ) => 7156,
                ( true, false, true, false, true, false, false, ) => 7157,
                ( true, false, false, true, true, false, false, ) => 7158,
                ( true, false, false, false, true, false, false, ) => 7159,
                ( true, false, true, true, false, true, true, ) => 7160,
                ( true, false, true, false, false, true, true, ) => 7161,
                ( true, false, false, true, false, true, true, ) => 7162,
                ( true, false, false, false, false, true, true, ) => 7163,
                ( true, false, true, true, false, true, false, ) => 7164,
                ( true, false, true, false, false, true, false, ) => 7165,
                ( true, false, false, true, false, true, false, ) => 7166,
                ( true, false, false, false, false, true, false, ) => 7167,
                ( true, false, true, true, false, false, true, ) => 7168,
                ( true, false, true, false, false, false, true, ) => 7169,
                ( true, false, false, true, false, false, true, ) => 7170,
                ( true, false, false, false, false, false, true, ) => 7171,
                ( true, false, true, true, false, false, false, ) => 7172,
                ( true, false, true, false, false, false, false, ) => 7173,
                ( true, false, false, true, false, false, false, ) => 7174,
                ( true, false, false, false, false, false, false, ) => 7175,
                ( false, true, true, true, true, true, true, ) => 7176,
                ( false, true, true, false, true, true, true, ) => 7177,
                ( false, true, false, true, true, true, true, ) => 7178,
                ( false, true, false, false, true, true, true, ) => 7179,
                ( false, true, true, true, true, true, false, ) => 7180,
                ( false, true, true, false, true, true, false, ) => 7181,
                ( false, true, false, true, true, true, false, ) => 7182,
                ( false, true, false, false, true, true, false, ) => 7183,
                ( false, true, true, true, true, false, true, ) => 7184,
                ( false, true, true, false, true, false, true, ) => 7185,
                ( false, true, false, true, true, false, true, ) => 7186,
                ( false, true, false, false, true, false, true, ) => 7187,
                ( false, true, true, true, true, false, false, ) => 7188,
                ( false, true, true, false, true, false, false, ) => 7189,
                ( false, true, false, true, true, false, false, ) => 7190,
                ( false, true, false, false, true, false, false, ) => 7191,
                ( false, true, true, true, false, true, true, ) => 7192,
                ( false, true, true, false, false, true, true, ) => 7193,
                ( false, true, false, true, false, true, true, ) => 7194,
                ( false, true, false, false, false, true, true, ) => 7195,
                ( false, true, true, true, false, true, false, ) => 7196,
                ( false, true, true, false, false, true, false, ) => 7197,
                ( false, true, false, true, false, true, false, ) => 7198,
                ( false, true, false, false, false, true, false, ) => 7199,
                ( false, true, true, true, false, false, true, ) => 7200,
                ( false, true, true, false, false, false, true, ) => 7201,
                ( false, true, false, true, false, false, true, ) => 7202,
                ( false, true, false, false, false, false, true, ) => 7203,
                ( false, true, true, true, false, false, false, ) => 7204,
                ( false, true, true, false, false, false, false, ) => 7205,
                ( false, true, false, true, false, false, false, ) => 7206,
                ( false, true, false, false, false, false, false, ) => 7207,
                ( false, false, true, true, true, true, true, ) => 7208,
                ( false, false, true, false, true, true, true, ) => 7209,
                ( false, false, false, true, true, true, true, ) => 7210,
                ( false, false, false, false, true, true, true, ) => 7211,
                ( false, false, true, true, true, true, false, ) => 7212,
                ( false, false, true, false, true, true, false, ) => 7213,
                ( false, false, false, true, true, true, false, ) => 7214,
                ( false, false, false, false, true, true, false, ) => 7215,
                ( false, false, true, true, true, false, true, ) => 7216,
                ( false, false, true, false, true, false, true, ) => 7217,
                ( false, false, false, true, true, false, true, ) => 7218,
                ( false, false, false, false, true, false, true, ) => 7219,
                ( false, false, true, true, true, false, false, ) => 7220,
                ( false, false, true, false, true, false, false, ) => 7221,
                ( false, false, false, true, true, false, false, ) => 7222,
                ( false, false, false, false, true, false, false, ) => 7223,
                ( false, false, true, true, false, true, true, ) => 7224,
                ( false, false, true, false, false, true, true, ) => 7225,
                ( false, false, false, true, false, true, true, ) => 7226,
                ( false, false, false, false, false, true, true, ) => 7227,
                ( false, false, true, true, false, true, false, ) => 7228,
                ( false, false, true, false, false, true, false, ) => 7229,
                ( false, false, false, true, false, true, false, ) => 7230,
                ( false, false, false, false, false, true, false, ) => 7231,
                ( false, false, true, true, false, false, true, ) => 7232,
                ( false, false, true, false, false, false, true, ) => 7233,
                ( false, false, false, true, false, false, true, ) => 7234,
                ( false, false, false, false, false, false, true, ) => 7235,
                ( false, false, true, true, false, false, false, ) => 7236,
                ( false, false, true, false, false, false, false, ) => 7237,
                ( false, false, false, true, false, false, false, ) => 7238,
                ( false, false, false, false, false, false, false, ) => 7239,
            })
        }
    }

    impl From<GlowLichen> for BlockState {
        #[inline(always)]
        fn from(value : GlowLichen) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GlowLichen {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GlowLichen { }

    impl Block for GlowLichen {
        const DEFAULT_STATE : Self = Self {
            down : false,
            east : false,
            waterlogged : false,
            west : false,
            north : false,
            south : false,
            up : false,
        };
    }

}

/// `minecraft:warped_pressure_plate` block.
pub mod warped_pressure_plate {
    use super::*;

    /// `minecraft:warped_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedPressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl WarpedPressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 19737,
                ( false, ) => 19738,
            })
        }
    }

    impl From<WarpedPressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : WarpedPressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedPressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedPressurePlate { }

    impl Block for WarpedPressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:orange_candle_cake` block.
pub mod orange_candle_cake {
    use super::*;

    /// `minecraft:orange_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl OrangeCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22061,
                ( false, ) => 22062,
            })
        }
    }

    impl From<OrangeCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : OrangeCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeCandleCake { }

    impl Block for OrangeCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:potatoes` block.
pub mod potatoes {
    use super::*;

    /// `minecraft:potatoes` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Potatoes {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl Potatoes {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 9388,
                ( Age::N1, ) => 9389,
                ( Age::N2, ) => 9390,
                ( Age::N3, ) => 9391,
                ( Age::N4, ) => 9392,
                ( Age::N5, ) => 9393,
                ( Age::N6, ) => 9394,
                ( Age::N7, ) => 9395,
            })
        }
    }

    impl From<Potatoes> for BlockState {
        #[inline(always)]
        fn from(value : Potatoes) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Potatoes {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Potatoes { }

    impl Block for Potatoes {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:warped_roots` block.
pub mod warped_roots {
    use super::*;

    /// `minecraft:warped_roots` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedRoots;

    impl WarpedRoots {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19649)
        }
    }

    impl From<WarpedRoots> for BlockState {
        #[inline(always)]
        fn from(value : WarpedRoots) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedRoots {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedRoots { }

    impl Block for WarpedRoots {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:green_banner` block.
pub mod green_banner {
    use super::*;

    /// `minecraft:green_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl GreenBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11856,
                ( Rotation::N1, ) => 11857,
                ( Rotation::N2, ) => 11858,
                ( Rotation::N3, ) => 11859,
                ( Rotation::N4, ) => 11860,
                ( Rotation::N5, ) => 11861,
                ( Rotation::N6, ) => 11862,
                ( Rotation::N7, ) => 11863,
                ( Rotation::N8, ) => 11864,
                ( Rotation::N9, ) => 11865,
                ( Rotation::N10, ) => 11866,
                ( Rotation::N11, ) => 11867,
                ( Rotation::N12, ) => 11868,
                ( Rotation::N13, ) => 11869,
                ( Rotation::N14, ) => 11870,
                ( Rotation::N15, ) => 11871,
            })
        }
    }

    impl From<GreenBanner> for BlockState {
        #[inline(always)]
        fn from(value : GreenBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenBanner { }

    impl Block for GreenBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:nether_bricks` block.
pub mod nether_bricks {
    use super::*;

    /// `minecraft:nether_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct NetherBricks;

    impl NetherBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(8056)
        }
    }

    impl From<NetherBricks> for BlockState {
        #[inline(always)]
        fn from(value : NetherBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for NetherBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for NetherBricks { }

    impl Block for NetherBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:pumpkin_stem` block.
pub mod pumpkin_stem {
    use super::*;

    /// `minecraft:pumpkin_stem` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PumpkinStem {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl PumpkinStem {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 7064,
                ( Age::N1, ) => 7065,
                ( Age::N2, ) => 7066,
                ( Age::N3, ) => 7067,
                ( Age::N4, ) => 7068,
                ( Age::N5, ) => 7069,
                ( Age::N6, ) => 7070,
                ( Age::N7, ) => 7071,
            })
        }
    }

    impl From<PumpkinStem> for BlockState {
        #[inline(always)]
        fn from(value : PumpkinStem) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PumpkinStem {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PumpkinStem { }

    impl Block for PumpkinStem {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:potted_mangrove_propagule` block.
pub mod potted_mangrove_propagule {
    use super::*;

    /// `minecraft:potted_mangrove_propagule` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedMangrovePropagule;

    impl PottedMangrovePropagule {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9361)
        }
    }

    impl From<PottedMangrovePropagule> for BlockState {
        #[inline(always)]
        fn from(value : PottedMangrovePropagule) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedMangrovePropagule {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedMangrovePropagule { }

    impl Block for PottedMangrovePropagule {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:torchflower_crop` block.
pub mod torchflower_crop {
    use super::*;

    /// `minecraft:torchflower_crop` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TorchflowerCrop {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl TorchflowerCrop {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 13518,
                ( Age::N1, ) => 13519,
            })
        }
    }

    impl From<TorchflowerCrop> for BlockState {
        #[inline(always)]
        fn from(value : TorchflowerCrop) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TorchflowerCrop {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TorchflowerCrop { }

    impl Block for TorchflowerCrop {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:mangrove_wall_sign` block.
pub mod mangrove_wall_sign {
    use super::*;

    /// `minecraft:mangrove_wall_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveWallSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl MangroveWallSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 4922,
                ( false, Facing::North, ) => 4923,
                ( true, Facing::South, ) => 4924,
                ( false, Facing::South, ) => 4925,
                ( true, Facing::West, ) => 4926,
                ( false, Facing::West, ) => 4927,
                ( true, Facing::East, ) => 4928,
                ( false, Facing::East, ) => 4929,
            })
        }
    }

    impl From<MangroveWallSign> for BlockState {
        #[inline(always)]
        fn from(value : MangroveWallSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveWallSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveWallSign { }

    impl Block for MangroveWallSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:yellow_glazed_terracotta` block.
pub mod yellow_glazed_terracotta {
    use super::*;

    /// `minecraft:yellow_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl YellowGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13703,
                ( Facing::South, ) => 13704,
                ( Facing::West, ) => 13705,
                ( Facing::East, ) => 13706,
            })
        }
    }

    impl From<YellowGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : YellowGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowGlazedTerracotta { }

    impl Block for YellowGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:iron_trapdoor` block.
pub mod iron_trapdoor {
    use super::*;

    /// `minecraft:iron_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct IronTrapdoor {
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl IronTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.facing, self.open, self.powered, self.waterlogged, )) {
                ( Half::Top, Facing::North, true, true, true, ) => 11288,
                ( Half::Top, Facing::North, true, true, false, ) => 11289,
                ( Half::Top, Facing::North, true, false, true, ) => 11290,
                ( Half::Top, Facing::North, true, false, false, ) => 11291,
                ( Half::Top, Facing::North, false, true, true, ) => 11292,
                ( Half::Top, Facing::North, false, true, false, ) => 11293,
                ( Half::Top, Facing::North, false, false, true, ) => 11294,
                ( Half::Top, Facing::North, false, false, false, ) => 11295,
                ( Half::Bottom, Facing::North, true, true, true, ) => 11296,
                ( Half::Bottom, Facing::North, true, true, false, ) => 11297,
                ( Half::Bottom, Facing::North, true, false, true, ) => 11298,
                ( Half::Bottom, Facing::North, true, false, false, ) => 11299,
                ( Half::Bottom, Facing::North, false, true, true, ) => 11300,
                ( Half::Bottom, Facing::North, false, true, false, ) => 11301,
                ( Half::Bottom, Facing::North, false, false, true, ) => 11302,
                ( Half::Bottom, Facing::North, false, false, false, ) => 11303,
                ( Half::Top, Facing::South, true, true, true, ) => 11304,
                ( Half::Top, Facing::South, true, true, false, ) => 11305,
                ( Half::Top, Facing::South, true, false, true, ) => 11306,
                ( Half::Top, Facing::South, true, false, false, ) => 11307,
                ( Half::Top, Facing::South, false, true, true, ) => 11308,
                ( Half::Top, Facing::South, false, true, false, ) => 11309,
                ( Half::Top, Facing::South, false, false, true, ) => 11310,
                ( Half::Top, Facing::South, false, false, false, ) => 11311,
                ( Half::Bottom, Facing::South, true, true, true, ) => 11312,
                ( Half::Bottom, Facing::South, true, true, false, ) => 11313,
                ( Half::Bottom, Facing::South, true, false, true, ) => 11314,
                ( Half::Bottom, Facing::South, true, false, false, ) => 11315,
                ( Half::Bottom, Facing::South, false, true, true, ) => 11316,
                ( Half::Bottom, Facing::South, false, true, false, ) => 11317,
                ( Half::Bottom, Facing::South, false, false, true, ) => 11318,
                ( Half::Bottom, Facing::South, false, false, false, ) => 11319,
                ( Half::Top, Facing::West, true, true, true, ) => 11320,
                ( Half::Top, Facing::West, true, true, false, ) => 11321,
                ( Half::Top, Facing::West, true, false, true, ) => 11322,
                ( Half::Top, Facing::West, true, false, false, ) => 11323,
                ( Half::Top, Facing::West, false, true, true, ) => 11324,
                ( Half::Top, Facing::West, false, true, false, ) => 11325,
                ( Half::Top, Facing::West, false, false, true, ) => 11326,
                ( Half::Top, Facing::West, false, false, false, ) => 11327,
                ( Half::Bottom, Facing::West, true, true, true, ) => 11328,
                ( Half::Bottom, Facing::West, true, true, false, ) => 11329,
                ( Half::Bottom, Facing::West, true, false, true, ) => 11330,
                ( Half::Bottom, Facing::West, true, false, false, ) => 11331,
                ( Half::Bottom, Facing::West, false, true, true, ) => 11332,
                ( Half::Bottom, Facing::West, false, true, false, ) => 11333,
                ( Half::Bottom, Facing::West, false, false, true, ) => 11334,
                ( Half::Bottom, Facing::West, false, false, false, ) => 11335,
                ( Half::Top, Facing::East, true, true, true, ) => 11336,
                ( Half::Top, Facing::East, true, true, false, ) => 11337,
                ( Half::Top, Facing::East, true, false, true, ) => 11338,
                ( Half::Top, Facing::East, true, false, false, ) => 11339,
                ( Half::Top, Facing::East, false, true, true, ) => 11340,
                ( Half::Top, Facing::East, false, true, false, ) => 11341,
                ( Half::Top, Facing::East, false, false, true, ) => 11342,
                ( Half::Top, Facing::East, false, false, false, ) => 11343,
                ( Half::Bottom, Facing::East, true, true, true, ) => 11344,
                ( Half::Bottom, Facing::East, true, true, false, ) => 11345,
                ( Half::Bottom, Facing::East, true, false, true, ) => 11346,
                ( Half::Bottom, Facing::East, true, false, false, ) => 11347,
                ( Half::Bottom, Facing::East, false, true, true, ) => 11348,
                ( Half::Bottom, Facing::East, false, true, false, ) => 11349,
                ( Half::Bottom, Facing::East, false, false, true, ) => 11350,
                ( Half::Bottom, Facing::East, false, false, false, ) => 11351,
            })
        }
    }

    impl From<IronTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : IronTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for IronTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for IronTrapdoor { }

    impl Block for IronTrapdoor {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            facing : Facing::North,
            open : false,
            powered : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:oak_button` block.
pub mod oak_button {
    use super::*;

    /// `minecraft:oak_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakButton {
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
        /// `face` state.
        pub face : Face,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    impl OakButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.powered, self.face, )) {
                ( Facing::North, true, Face::Floor, ) => 9396,
                ( Facing::North, false, Face::Floor, ) => 9397,
                ( Facing::South, true, Face::Floor, ) => 9398,
                ( Facing::South, false, Face::Floor, ) => 9399,
                ( Facing::West, true, Face::Floor, ) => 9400,
                ( Facing::West, false, Face::Floor, ) => 9401,
                ( Facing::East, true, Face::Floor, ) => 9402,
                ( Facing::East, false, Face::Floor, ) => 9403,
                ( Facing::North, true, Face::Wall, ) => 9404,
                ( Facing::North, false, Face::Wall, ) => 9405,
                ( Facing::South, true, Face::Wall, ) => 9406,
                ( Facing::South, false, Face::Wall, ) => 9407,
                ( Facing::West, true, Face::Wall, ) => 9408,
                ( Facing::West, false, Face::Wall, ) => 9409,
                ( Facing::East, true, Face::Wall, ) => 9410,
                ( Facing::East, false, Face::Wall, ) => 9411,
                ( Facing::North, true, Face::Ceiling, ) => 9412,
                ( Facing::North, false, Face::Ceiling, ) => 9413,
                ( Facing::South, true, Face::Ceiling, ) => 9414,
                ( Facing::South, false, Face::Ceiling, ) => 9415,
                ( Facing::West, true, Face::Ceiling, ) => 9416,
                ( Facing::West, false, Face::Ceiling, ) => 9417,
                ( Facing::East, true, Face::Ceiling, ) => 9418,
                ( Facing::East, false, Face::Ceiling, ) => 9419,
            })
        }
    }

    impl From<OakButton> for BlockState {
        #[inline(always)]
        fn from(value : OakButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakButton { }

    impl Block for OakButton {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            powered : false,
            face : Face::Wall,
        };
    }

}

/// `minecraft:warped_button` block.
pub mod warped_button {
    use super::*;

    /// `minecraft:warped_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedButton {
        /// `face` state.
        pub face : Face,
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
    }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WarpedButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.face, self.facing, self.powered, )) {
                ( Face::Floor, Facing::North, true, ) => 20179,
                ( Face::Floor, Facing::North, false, ) => 20180,
                ( Face::Floor, Facing::South, true, ) => 20181,
                ( Face::Floor, Facing::South, false, ) => 20182,
                ( Face::Floor, Facing::West, true, ) => 20183,
                ( Face::Floor, Facing::West, false, ) => 20184,
                ( Face::Floor, Facing::East, true, ) => 20185,
                ( Face::Floor, Facing::East, false, ) => 20186,
                ( Face::Wall, Facing::North, true, ) => 20187,
                ( Face::Wall, Facing::North, false, ) => 20188,
                ( Face::Wall, Facing::South, true, ) => 20189,
                ( Face::Wall, Facing::South, false, ) => 20190,
                ( Face::Wall, Facing::West, true, ) => 20191,
                ( Face::Wall, Facing::West, false, ) => 20192,
                ( Face::Wall, Facing::East, true, ) => 20193,
                ( Face::Wall, Facing::East, false, ) => 20194,
                ( Face::Ceiling, Facing::North, true, ) => 20195,
                ( Face::Ceiling, Facing::North, false, ) => 20196,
                ( Face::Ceiling, Facing::South, true, ) => 20197,
                ( Face::Ceiling, Facing::South, false, ) => 20198,
                ( Face::Ceiling, Facing::West, true, ) => 20199,
                ( Face::Ceiling, Facing::West, false, ) => 20200,
                ( Face::Ceiling, Facing::East, true, ) => 20201,
                ( Face::Ceiling, Facing::East, false, ) => 20202,
            })
        }
    }

    impl From<WarpedButton> for BlockState {
        #[inline(always)]
        fn from(value : WarpedButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedButton { }

    impl Block for WarpedButton {
        const DEFAULT_STATE : Self = Self {
            face : Face::Wall,
            facing : Facing::North,
            powered : false,
        };
    }

}

/// `minecraft:black_carpet` block.
pub mod black_carpet {
    use super::*;

    /// `minecraft:black_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackCarpet;

    impl BlackCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11632)
        }
    }

    impl From<BlackCarpet> for BlockState {
        #[inline(always)]
        fn from(value : BlackCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackCarpet { }

    impl Block for BlackCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:ancient_debris` block.
pub mod ancient_debris {
    use super::*;

    /// `minecraft:ancient_debris` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AncientDebris;

    impl AncientDebris {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20508)
        }
    }

    impl From<AncientDebris> for BlockState {
        #[inline(always)]
        fn from(value : AncientDebris) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AncientDebris {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AncientDebris { }

    impl Block for AncientDebris {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:brown_bed` block.
pub mod brown_bed {
    use super::*;

    /// `minecraft:brown_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownBed {
        /// `facing` state.
        pub facing : Facing,
        /// `occupied` state.
        pub occupied : bool,
        /// `part` state.
        pub part : Part,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    impl BrownBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.occupied, self.part, )) {
                ( Facing::North, true, Part::Head, ) => 1923,
                ( Facing::North, true, Part::Foot, ) => 1924,
                ( Facing::North, false, Part::Head, ) => 1925,
                ( Facing::North, false, Part::Foot, ) => 1926,
                ( Facing::South, true, Part::Head, ) => 1927,
                ( Facing::South, true, Part::Foot, ) => 1928,
                ( Facing::South, false, Part::Head, ) => 1929,
                ( Facing::South, false, Part::Foot, ) => 1930,
                ( Facing::West, true, Part::Head, ) => 1931,
                ( Facing::West, true, Part::Foot, ) => 1932,
                ( Facing::West, false, Part::Head, ) => 1933,
                ( Facing::West, false, Part::Foot, ) => 1934,
                ( Facing::East, true, Part::Head, ) => 1935,
                ( Facing::East, true, Part::Foot, ) => 1936,
                ( Facing::East, false, Part::Head, ) => 1937,
                ( Facing::East, false, Part::Foot, ) => 1938,
            })
        }
    }

    impl From<BrownBed> for BlockState {
        #[inline(always)]
        fn from(value : BrownBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownBed { }

    impl Block for BrownBed {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            occupied : false,
            part : Part::Foot,
        };
    }

}

/// `minecraft:cherry_wall_hanging_sign` block.
pub mod cherry_wall_hanging_sign {
    use super::*;

    /// `minecraft:cherry_wall_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryWallHangingSign {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CherryWallHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 5738,
                ( Facing::North, false, ) => 5739,
                ( Facing::South, true, ) => 5740,
                ( Facing::South, false, ) => 5741,
                ( Facing::West, true, ) => 5742,
                ( Facing::West, false, ) => 5743,
                ( Facing::East, true, ) => 5744,
                ( Facing::East, false, ) => 5745,
            })
        }
    }

    impl From<CherryWallHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : CherryWallHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryWallHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryWallHangingSign { }

    impl Block for CherryWallHangingSign {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:prismarine_brick_stairs` block.
pub mod prismarine_brick_stairs {
    use super::*;

    /// `minecraft:prismarine_brick_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PrismarineBrickStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PrismarineBrickStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.waterlogged, self.half, self.facing, )) {
                ( Shape::Straight, true, Half::Top, Facing::North, ) => 11435,
                ( Shape::Straight, false, Half::Top, Facing::North, ) => 11436,
                ( Shape::InnerLeft, true, Half::Top, Facing::North, ) => 11437,
                ( Shape::InnerLeft, false, Half::Top, Facing::North, ) => 11438,
                ( Shape::InnerRight, true, Half::Top, Facing::North, ) => 11439,
                ( Shape::InnerRight, false, Half::Top, Facing::North, ) => 11440,
                ( Shape::OuterLeft, true, Half::Top, Facing::North, ) => 11441,
                ( Shape::OuterLeft, false, Half::Top, Facing::North, ) => 11442,
                ( Shape::OuterRight, true, Half::Top, Facing::North, ) => 11443,
                ( Shape::OuterRight, false, Half::Top, Facing::North, ) => 11444,
                ( Shape::Straight, true, Half::Bottom, Facing::North, ) => 11445,
                ( Shape::Straight, false, Half::Bottom, Facing::North, ) => 11446,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::North, ) => 11447,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::North, ) => 11448,
                ( Shape::InnerRight, true, Half::Bottom, Facing::North, ) => 11449,
                ( Shape::InnerRight, false, Half::Bottom, Facing::North, ) => 11450,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::North, ) => 11451,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::North, ) => 11452,
                ( Shape::OuterRight, true, Half::Bottom, Facing::North, ) => 11453,
                ( Shape::OuterRight, false, Half::Bottom, Facing::North, ) => 11454,
                ( Shape::Straight, true, Half::Top, Facing::South, ) => 11455,
                ( Shape::Straight, false, Half::Top, Facing::South, ) => 11456,
                ( Shape::InnerLeft, true, Half::Top, Facing::South, ) => 11457,
                ( Shape::InnerLeft, false, Half::Top, Facing::South, ) => 11458,
                ( Shape::InnerRight, true, Half::Top, Facing::South, ) => 11459,
                ( Shape::InnerRight, false, Half::Top, Facing::South, ) => 11460,
                ( Shape::OuterLeft, true, Half::Top, Facing::South, ) => 11461,
                ( Shape::OuterLeft, false, Half::Top, Facing::South, ) => 11462,
                ( Shape::OuterRight, true, Half::Top, Facing::South, ) => 11463,
                ( Shape::OuterRight, false, Half::Top, Facing::South, ) => 11464,
                ( Shape::Straight, true, Half::Bottom, Facing::South, ) => 11465,
                ( Shape::Straight, false, Half::Bottom, Facing::South, ) => 11466,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::South, ) => 11467,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::South, ) => 11468,
                ( Shape::InnerRight, true, Half::Bottom, Facing::South, ) => 11469,
                ( Shape::InnerRight, false, Half::Bottom, Facing::South, ) => 11470,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::South, ) => 11471,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::South, ) => 11472,
                ( Shape::OuterRight, true, Half::Bottom, Facing::South, ) => 11473,
                ( Shape::OuterRight, false, Half::Bottom, Facing::South, ) => 11474,
                ( Shape::Straight, true, Half::Top, Facing::West, ) => 11475,
                ( Shape::Straight, false, Half::Top, Facing::West, ) => 11476,
                ( Shape::InnerLeft, true, Half::Top, Facing::West, ) => 11477,
                ( Shape::InnerLeft, false, Half::Top, Facing::West, ) => 11478,
                ( Shape::InnerRight, true, Half::Top, Facing::West, ) => 11479,
                ( Shape::InnerRight, false, Half::Top, Facing::West, ) => 11480,
                ( Shape::OuterLeft, true, Half::Top, Facing::West, ) => 11481,
                ( Shape::OuterLeft, false, Half::Top, Facing::West, ) => 11482,
                ( Shape::OuterRight, true, Half::Top, Facing::West, ) => 11483,
                ( Shape::OuterRight, false, Half::Top, Facing::West, ) => 11484,
                ( Shape::Straight, true, Half::Bottom, Facing::West, ) => 11485,
                ( Shape::Straight, false, Half::Bottom, Facing::West, ) => 11486,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::West, ) => 11487,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::West, ) => 11488,
                ( Shape::InnerRight, true, Half::Bottom, Facing::West, ) => 11489,
                ( Shape::InnerRight, false, Half::Bottom, Facing::West, ) => 11490,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::West, ) => 11491,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::West, ) => 11492,
                ( Shape::OuterRight, true, Half::Bottom, Facing::West, ) => 11493,
                ( Shape::OuterRight, false, Half::Bottom, Facing::West, ) => 11494,
                ( Shape::Straight, true, Half::Top, Facing::East, ) => 11495,
                ( Shape::Straight, false, Half::Top, Facing::East, ) => 11496,
                ( Shape::InnerLeft, true, Half::Top, Facing::East, ) => 11497,
                ( Shape::InnerLeft, false, Half::Top, Facing::East, ) => 11498,
                ( Shape::InnerRight, true, Half::Top, Facing::East, ) => 11499,
                ( Shape::InnerRight, false, Half::Top, Facing::East, ) => 11500,
                ( Shape::OuterLeft, true, Half::Top, Facing::East, ) => 11501,
                ( Shape::OuterLeft, false, Half::Top, Facing::East, ) => 11502,
                ( Shape::OuterRight, true, Half::Top, Facing::East, ) => 11503,
                ( Shape::OuterRight, false, Half::Top, Facing::East, ) => 11504,
                ( Shape::Straight, true, Half::Bottom, Facing::East, ) => 11505,
                ( Shape::Straight, false, Half::Bottom, Facing::East, ) => 11506,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::East, ) => 11507,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::East, ) => 11508,
                ( Shape::InnerRight, true, Half::Bottom, Facing::East, ) => 11509,
                ( Shape::InnerRight, false, Half::Bottom, Facing::East, ) => 11510,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::East, ) => 11511,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::East, ) => 11512,
                ( Shape::OuterRight, true, Half::Bottom, Facing::East, ) => 11513,
                ( Shape::OuterRight, false, Half::Bottom, Facing::East, ) => 11514,
            })
        }
    }

    impl From<PrismarineBrickStairs> for BlockState {
        #[inline(always)]
        fn from(value : PrismarineBrickStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PrismarineBrickStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PrismarineBrickStairs { }

    impl Block for PrismarineBrickStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            waterlogged : false,
            half : Half::Bottom,
            facing : Facing::North,
        };
    }

}

/// `minecraft:waxed_exposed_copper` block.
pub mod waxed_exposed_copper {
    use super::*;

    /// `minecraft:waxed_exposed_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedExposedCopper;

    impl WaxedExposedCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24362)
        }
    }

    impl From<WaxedExposedCopper> for BlockState {
        #[inline(always)]
        fn from(value : WaxedExposedCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedExposedCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedExposedCopper { }

    impl Block for WaxedExposedCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:lime_candle` block.
pub mod lime_candle {
    use super::*;

    /// `minecraft:lime_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeCandle {
        /// `lit` state.
        pub lit : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `candles` state.
        pub candles : Candles,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl LimeCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, self.waterlogged, self.candles, )) {
                ( true, true, Candles::N1, ) => 21881,
                ( true, false, Candles::N1, ) => 21882,
                ( false, true, Candles::N1, ) => 21883,
                ( false, false, Candles::N1, ) => 21884,
                ( true, true, Candles::N2, ) => 21885,
                ( true, false, Candles::N2, ) => 21886,
                ( false, true, Candles::N2, ) => 21887,
                ( false, false, Candles::N2, ) => 21888,
                ( true, true, Candles::N3, ) => 21889,
                ( true, false, Candles::N3, ) => 21890,
                ( false, true, Candles::N3, ) => 21891,
                ( false, false, Candles::N3, ) => 21892,
                ( true, true, Candles::N4, ) => 21893,
                ( true, false, Candles::N4, ) => 21894,
                ( false, true, Candles::N4, ) => 21895,
                ( false, false, Candles::N4, ) => 21896,
            })
        }
    }

    impl From<LimeCandle> for BlockState {
        #[inline(always)]
        fn from(value : LimeCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeCandle { }

    impl Block for LimeCandle {
        const DEFAULT_STATE : Self = Self {
            lit : false,
            waterlogged : false,
            candles : Candles::N1,
        };
    }

}

/// `minecraft:chiseled_resin_bricks` block.
pub mod chiseled_resin_bricks {
    use super::*;

    /// `minecraft:chiseled_resin_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChiseledResinBricks;

    impl ChiseledResinBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(8055)
        }
    }

    impl From<ChiseledResinBricks> for BlockState {
        #[inline(always)]
        fn from(value : ChiseledResinBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChiseledResinBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChiseledResinBricks { }

    impl Block for ChiseledResinBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:weeping_vines_plant` block.
pub mod weeping_vines_plant {
    use super::*;

    /// `minecraft:weeping_vines_plant` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WeepingVinesPlant;

    impl WeepingVinesPlant {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19692)
        }
    }

    impl From<WeepingVinesPlant> for BlockState {
        #[inline(always)]
        fn from(value : WeepingVinesPlant) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WeepingVinesPlant {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WeepingVinesPlant { }

    impl Block for WeepingVinesPlant {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:weathered_copper` block.
pub mod weathered_copper {
    use super::*;

    /// `minecraft:weathered_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WeatheredCopper;

    impl WeatheredCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24000)
        }
    }

    impl From<WeatheredCopper> for BlockState {
        #[inline(always)]
        fn from(value : WeatheredCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WeatheredCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WeatheredCopper { }

    impl Block for WeatheredCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:acacia_button` block.
pub mod acacia_button {
    use super::*;

    /// `minecraft:acacia_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaButton {
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
        /// `face` state.
        pub face : Face,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    impl AcaciaButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.powered, self.face, )) {
                ( Facing::North, true, Face::Floor, ) => 9492,
                ( Facing::North, false, Face::Floor, ) => 9493,
                ( Facing::South, true, Face::Floor, ) => 9494,
                ( Facing::South, false, Face::Floor, ) => 9495,
                ( Facing::West, true, Face::Floor, ) => 9496,
                ( Facing::West, false, Face::Floor, ) => 9497,
                ( Facing::East, true, Face::Floor, ) => 9498,
                ( Facing::East, false, Face::Floor, ) => 9499,
                ( Facing::North, true, Face::Wall, ) => 9500,
                ( Facing::North, false, Face::Wall, ) => 9501,
                ( Facing::South, true, Face::Wall, ) => 9502,
                ( Facing::South, false, Face::Wall, ) => 9503,
                ( Facing::West, true, Face::Wall, ) => 9504,
                ( Facing::West, false, Face::Wall, ) => 9505,
                ( Facing::East, true, Face::Wall, ) => 9506,
                ( Facing::East, false, Face::Wall, ) => 9507,
                ( Facing::North, true, Face::Ceiling, ) => 9508,
                ( Facing::North, false, Face::Ceiling, ) => 9509,
                ( Facing::South, true, Face::Ceiling, ) => 9510,
                ( Facing::South, false, Face::Ceiling, ) => 9511,
                ( Facing::West, true, Face::Ceiling, ) => 9512,
                ( Facing::West, false, Face::Ceiling, ) => 9513,
                ( Facing::East, true, Face::Ceiling, ) => 9514,
                ( Facing::East, false, Face::Ceiling, ) => 9515,
            })
        }
    }

    impl From<AcaciaButton> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaButton { }

    impl Block for AcaciaButton {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            powered : false,
            face : Face::Wall,
        };
    }

}

/// `minecraft:pale_oak_sapling` block.
pub mod pale_oak_sapling {
    use super::*;

    /// `minecraft:pale_oak_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakSapling {
        /// `stage` state.
        pub stage : Stage,
    }

    /// `stage` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Stage {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
    }
    impl crate::Sealed for Stage { }
    impl BlockProperty for Stage { }

    impl PaleOakSapling {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.stage, )) {
                ( Stage::N0, ) => 43,
                ( Stage::N1, ) => 44,
            })
        }
    }

    impl From<PaleOakSapling> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakSapling { }

    impl Block for PaleOakSapling {
        const DEFAULT_STATE : Self = Self {
            stage : Stage::N0,
        };
    }

}

/// `minecraft:bamboo_door` block.
pub mod bamboo_door {
    use super::*;

    /// `minecraft:bamboo_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooDoor {
        /// `hinge` state.
        pub hinge : Hinge,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
    }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl BambooDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.hinge, self.open, self.powered, self.facing, self.half, )) {
                ( Hinge::Left, true, true, Facing::North, Half::Upper, ) => 13293,
                ( Hinge::Left, true, false, Facing::North, Half::Upper, ) => 13294,
                ( Hinge::Left, false, true, Facing::North, Half::Upper, ) => 13295,
                ( Hinge::Left, false, false, Facing::North, Half::Upper, ) => 13296,
                ( Hinge::Right, true, true, Facing::North, Half::Upper, ) => 13297,
                ( Hinge::Right, true, false, Facing::North, Half::Upper, ) => 13298,
                ( Hinge::Right, false, true, Facing::North, Half::Upper, ) => 13299,
                ( Hinge::Right, false, false, Facing::North, Half::Upper, ) => 13300,
                ( Hinge::Left, true, true, Facing::North, Half::Lower, ) => 13301,
                ( Hinge::Left, true, false, Facing::North, Half::Lower, ) => 13302,
                ( Hinge::Left, false, true, Facing::North, Half::Lower, ) => 13303,
                ( Hinge::Left, false, false, Facing::North, Half::Lower, ) => 13304,
                ( Hinge::Right, true, true, Facing::North, Half::Lower, ) => 13305,
                ( Hinge::Right, true, false, Facing::North, Half::Lower, ) => 13306,
                ( Hinge::Right, false, true, Facing::North, Half::Lower, ) => 13307,
                ( Hinge::Right, false, false, Facing::North, Half::Lower, ) => 13308,
                ( Hinge::Left, true, true, Facing::South, Half::Upper, ) => 13309,
                ( Hinge::Left, true, false, Facing::South, Half::Upper, ) => 13310,
                ( Hinge::Left, false, true, Facing::South, Half::Upper, ) => 13311,
                ( Hinge::Left, false, false, Facing::South, Half::Upper, ) => 13312,
                ( Hinge::Right, true, true, Facing::South, Half::Upper, ) => 13313,
                ( Hinge::Right, true, false, Facing::South, Half::Upper, ) => 13314,
                ( Hinge::Right, false, true, Facing::South, Half::Upper, ) => 13315,
                ( Hinge::Right, false, false, Facing::South, Half::Upper, ) => 13316,
                ( Hinge::Left, true, true, Facing::South, Half::Lower, ) => 13317,
                ( Hinge::Left, true, false, Facing::South, Half::Lower, ) => 13318,
                ( Hinge::Left, false, true, Facing::South, Half::Lower, ) => 13319,
                ( Hinge::Left, false, false, Facing::South, Half::Lower, ) => 13320,
                ( Hinge::Right, true, true, Facing::South, Half::Lower, ) => 13321,
                ( Hinge::Right, true, false, Facing::South, Half::Lower, ) => 13322,
                ( Hinge::Right, false, true, Facing::South, Half::Lower, ) => 13323,
                ( Hinge::Right, false, false, Facing::South, Half::Lower, ) => 13324,
                ( Hinge::Left, true, true, Facing::West, Half::Upper, ) => 13325,
                ( Hinge::Left, true, false, Facing::West, Half::Upper, ) => 13326,
                ( Hinge::Left, false, true, Facing::West, Half::Upper, ) => 13327,
                ( Hinge::Left, false, false, Facing::West, Half::Upper, ) => 13328,
                ( Hinge::Right, true, true, Facing::West, Half::Upper, ) => 13329,
                ( Hinge::Right, true, false, Facing::West, Half::Upper, ) => 13330,
                ( Hinge::Right, false, true, Facing::West, Half::Upper, ) => 13331,
                ( Hinge::Right, false, false, Facing::West, Half::Upper, ) => 13332,
                ( Hinge::Left, true, true, Facing::West, Half::Lower, ) => 13333,
                ( Hinge::Left, true, false, Facing::West, Half::Lower, ) => 13334,
                ( Hinge::Left, false, true, Facing::West, Half::Lower, ) => 13335,
                ( Hinge::Left, false, false, Facing::West, Half::Lower, ) => 13336,
                ( Hinge::Right, true, true, Facing::West, Half::Lower, ) => 13337,
                ( Hinge::Right, true, false, Facing::West, Half::Lower, ) => 13338,
                ( Hinge::Right, false, true, Facing::West, Half::Lower, ) => 13339,
                ( Hinge::Right, false, false, Facing::West, Half::Lower, ) => 13340,
                ( Hinge::Left, true, true, Facing::East, Half::Upper, ) => 13341,
                ( Hinge::Left, true, false, Facing::East, Half::Upper, ) => 13342,
                ( Hinge::Left, false, true, Facing::East, Half::Upper, ) => 13343,
                ( Hinge::Left, false, false, Facing::East, Half::Upper, ) => 13344,
                ( Hinge::Right, true, true, Facing::East, Half::Upper, ) => 13345,
                ( Hinge::Right, true, false, Facing::East, Half::Upper, ) => 13346,
                ( Hinge::Right, false, true, Facing::East, Half::Upper, ) => 13347,
                ( Hinge::Right, false, false, Facing::East, Half::Upper, ) => 13348,
                ( Hinge::Left, true, true, Facing::East, Half::Lower, ) => 13349,
                ( Hinge::Left, true, false, Facing::East, Half::Lower, ) => 13350,
                ( Hinge::Left, false, true, Facing::East, Half::Lower, ) => 13351,
                ( Hinge::Left, false, false, Facing::East, Half::Lower, ) => 13352,
                ( Hinge::Right, true, true, Facing::East, Half::Lower, ) => 13353,
                ( Hinge::Right, true, false, Facing::East, Half::Lower, ) => 13354,
                ( Hinge::Right, false, true, Facing::East, Half::Lower, ) => 13355,
                ( Hinge::Right, false, false, Facing::East, Half::Lower, ) => 13356,
            })
        }
    }

    impl From<BambooDoor> for BlockState {
        #[inline(always)]
        fn from(value : BambooDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooDoor { }

    impl Block for BambooDoor {
        const DEFAULT_STATE : Self = Self {
            hinge : Hinge::Left,
            open : false,
            powered : false,
            facing : Facing::North,
            half : Half::Lower,
        };
    }

}

/// `minecraft:player_head` block.
pub mod player_head {
    use super::*;

    /// `minecraft:player_head` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PlayerHead {
        /// `powered` state.
        pub powered : bool,
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl PlayerHead {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.rotation, )) {
                ( true, Rotation::N0, ) => 9756,
                ( true, Rotation::N1, ) => 9757,
                ( true, Rotation::N2, ) => 9758,
                ( true, Rotation::N3, ) => 9759,
                ( true, Rotation::N4, ) => 9760,
                ( true, Rotation::N5, ) => 9761,
                ( true, Rotation::N6, ) => 9762,
                ( true, Rotation::N7, ) => 9763,
                ( true, Rotation::N8, ) => 9764,
                ( true, Rotation::N9, ) => 9765,
                ( true, Rotation::N10, ) => 9766,
                ( true, Rotation::N11, ) => 9767,
                ( true, Rotation::N12, ) => 9768,
                ( true, Rotation::N13, ) => 9769,
                ( true, Rotation::N14, ) => 9770,
                ( true, Rotation::N15, ) => 9771,
                ( false, Rotation::N0, ) => 9772,
                ( false, Rotation::N1, ) => 9773,
                ( false, Rotation::N2, ) => 9774,
                ( false, Rotation::N3, ) => 9775,
                ( false, Rotation::N4, ) => 9776,
                ( false, Rotation::N5, ) => 9777,
                ( false, Rotation::N6, ) => 9778,
                ( false, Rotation::N7, ) => 9779,
                ( false, Rotation::N8, ) => 9780,
                ( false, Rotation::N9, ) => 9781,
                ( false, Rotation::N10, ) => 9782,
                ( false, Rotation::N11, ) => 9783,
                ( false, Rotation::N12, ) => 9784,
                ( false, Rotation::N13, ) => 9785,
                ( false, Rotation::N14, ) => 9786,
                ( false, Rotation::N15, ) => 9787,
            })
        }
    }

    impl From<PlayerHead> for BlockState {
        #[inline(always)]
        fn from(value : PlayerHead) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PlayerHead {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PlayerHead { }

    impl Block for PlayerHead {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:stonecutter` block.
pub mod stonecutter {
    use super::*;

    /// `minecraft:stonecutter` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Stonecutter {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Stonecutter {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 19522,
                ( Facing::South, ) => 19523,
                ( Facing::West, ) => 19524,
                ( Facing::East, ) => 19525,
            })
        }
    }

    impl From<Stonecutter> for BlockState {
        #[inline(always)]
        fn from(value : Stonecutter) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Stonecutter {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Stonecutter { }

    impl Block for Stonecutter {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:nether_wart_block` block.
pub mod nether_wart_block {
    use super::*;

    /// `minecraft:nether_wart_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct NetherWartBlock;

    impl NetherWartBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13567)
        }
    }

    impl From<NetherWartBlock> for BlockState {
        #[inline(always)]
        fn from(value : NetherWartBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for NetherWartBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for NetherWartBlock { }

    impl Block for NetherWartBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_weathered_chiseled_copper` block.
pub mod waxed_weathered_chiseled_copper {
    use super::*;

    /// `minecraft:waxed_weathered_chiseled_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedWeatheredChiseledCopper;

    impl WaxedWeatheredChiseledCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24013)
        }
    }

    impl From<WaxedWeatheredChiseledCopper> for BlockState {
        #[inline(always)]
        fn from(value : WaxedWeatheredChiseledCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedWeatheredChiseledCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedWeatheredChiseledCopper { }

    impl Block for WaxedWeatheredChiseledCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_weathered_copper_trapdoor` block.
pub mod waxed_weathered_copper_trapdoor {
    use super::*;

    /// `minecraft:waxed_weathered_copper_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedWeatheredCopperTrapdoor {
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl WaxedWeatheredCopperTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.open, self.powered, self.facing, self.half, self.waterlogged, )) {
                ( true, true, Facing::North, Half::Top, true, ) => 25672,
                ( true, true, Facing::North, Half::Top, false, ) => 25673,
                ( true, false, Facing::North, Half::Top, true, ) => 25674,
                ( true, false, Facing::North, Half::Top, false, ) => 25675,
                ( false, true, Facing::North, Half::Top, true, ) => 25676,
                ( false, true, Facing::North, Half::Top, false, ) => 25677,
                ( false, false, Facing::North, Half::Top, true, ) => 25678,
                ( false, false, Facing::North, Half::Top, false, ) => 25679,
                ( true, true, Facing::North, Half::Bottom, true, ) => 25680,
                ( true, true, Facing::North, Half::Bottom, false, ) => 25681,
                ( true, false, Facing::North, Half::Bottom, true, ) => 25682,
                ( true, false, Facing::North, Half::Bottom, false, ) => 25683,
                ( false, true, Facing::North, Half::Bottom, true, ) => 25684,
                ( false, true, Facing::North, Half::Bottom, false, ) => 25685,
                ( false, false, Facing::North, Half::Bottom, true, ) => 25686,
                ( false, false, Facing::North, Half::Bottom, false, ) => 25687,
                ( true, true, Facing::South, Half::Top, true, ) => 25688,
                ( true, true, Facing::South, Half::Top, false, ) => 25689,
                ( true, false, Facing::South, Half::Top, true, ) => 25690,
                ( true, false, Facing::South, Half::Top, false, ) => 25691,
                ( false, true, Facing::South, Half::Top, true, ) => 25692,
                ( false, true, Facing::South, Half::Top, false, ) => 25693,
                ( false, false, Facing::South, Half::Top, true, ) => 25694,
                ( false, false, Facing::South, Half::Top, false, ) => 25695,
                ( true, true, Facing::South, Half::Bottom, true, ) => 25696,
                ( true, true, Facing::South, Half::Bottom, false, ) => 25697,
                ( true, false, Facing::South, Half::Bottom, true, ) => 25698,
                ( true, false, Facing::South, Half::Bottom, false, ) => 25699,
                ( false, true, Facing::South, Half::Bottom, true, ) => 25700,
                ( false, true, Facing::South, Half::Bottom, false, ) => 25701,
                ( false, false, Facing::South, Half::Bottom, true, ) => 25702,
                ( false, false, Facing::South, Half::Bottom, false, ) => 25703,
                ( true, true, Facing::West, Half::Top, true, ) => 25704,
                ( true, true, Facing::West, Half::Top, false, ) => 25705,
                ( true, false, Facing::West, Half::Top, true, ) => 25706,
                ( true, false, Facing::West, Half::Top, false, ) => 25707,
                ( false, true, Facing::West, Half::Top, true, ) => 25708,
                ( false, true, Facing::West, Half::Top, false, ) => 25709,
                ( false, false, Facing::West, Half::Top, true, ) => 25710,
                ( false, false, Facing::West, Half::Top, false, ) => 25711,
                ( true, true, Facing::West, Half::Bottom, true, ) => 25712,
                ( true, true, Facing::West, Half::Bottom, false, ) => 25713,
                ( true, false, Facing::West, Half::Bottom, true, ) => 25714,
                ( true, false, Facing::West, Half::Bottom, false, ) => 25715,
                ( false, true, Facing::West, Half::Bottom, true, ) => 25716,
                ( false, true, Facing::West, Half::Bottom, false, ) => 25717,
                ( false, false, Facing::West, Half::Bottom, true, ) => 25718,
                ( false, false, Facing::West, Half::Bottom, false, ) => 25719,
                ( true, true, Facing::East, Half::Top, true, ) => 25720,
                ( true, true, Facing::East, Half::Top, false, ) => 25721,
                ( true, false, Facing::East, Half::Top, true, ) => 25722,
                ( true, false, Facing::East, Half::Top, false, ) => 25723,
                ( false, true, Facing::East, Half::Top, true, ) => 25724,
                ( false, true, Facing::East, Half::Top, false, ) => 25725,
                ( false, false, Facing::East, Half::Top, true, ) => 25726,
                ( false, false, Facing::East, Half::Top, false, ) => 25727,
                ( true, true, Facing::East, Half::Bottom, true, ) => 25728,
                ( true, true, Facing::East, Half::Bottom, false, ) => 25729,
                ( true, false, Facing::East, Half::Bottom, true, ) => 25730,
                ( true, false, Facing::East, Half::Bottom, false, ) => 25731,
                ( false, true, Facing::East, Half::Bottom, true, ) => 25732,
                ( false, true, Facing::East, Half::Bottom, false, ) => 25733,
                ( false, false, Facing::East, Half::Bottom, true, ) => 25734,
                ( false, false, Facing::East, Half::Bottom, false, ) => 25735,
            })
        }
    }

    impl From<WaxedWeatheredCopperTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : WaxedWeatheredCopperTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedWeatheredCopperTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedWeatheredCopperTrapdoor { }

    impl Block for WaxedWeatheredCopperTrapdoor {
        const DEFAULT_STATE : Self = Self {
            open : false,
            powered : false,
            facing : Facing::North,
            half : Half::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:prismarine_wall` block.
pub mod prismarine_wall {
    use super::*;

    /// `minecraft:prismarine_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PrismarineWall {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `east` state.
        pub east : East,
        /// `west` state.
        pub west : West,
        /// `south` state.
        pub south : South,
        /// `up` state.
        pub up : bool,
        /// `north` state.
        pub north : North,
    }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    impl PrismarineWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.east, self.west, self.south, self.up, self.north, )) {
                ( true, East::None, West::None, South::None, true, North::None, ) => 15539,
                ( true, East::None, West::Low, South::None, true, North::None, ) => 15540,
                ( true, East::None, West::Tall, South::None, true, North::None, ) => 15541,
                ( false, East::None, West::None, South::None, true, North::None, ) => 15542,
                ( false, East::None, West::Low, South::None, true, North::None, ) => 15543,
                ( false, East::None, West::Tall, South::None, true, North::None, ) => 15544,
                ( true, East::None, West::None, South::None, false, North::None, ) => 15545,
                ( true, East::None, West::Low, South::None, false, North::None, ) => 15546,
                ( true, East::None, West::Tall, South::None, false, North::None, ) => 15547,
                ( false, East::None, West::None, South::None, false, North::None, ) => 15548,
                ( false, East::None, West::Low, South::None, false, North::None, ) => 15549,
                ( false, East::None, West::Tall, South::None, false, North::None, ) => 15550,
                ( true, East::None, West::None, South::Low, true, North::None, ) => 15551,
                ( true, East::None, West::Low, South::Low, true, North::None, ) => 15552,
                ( true, East::None, West::Tall, South::Low, true, North::None, ) => 15553,
                ( false, East::None, West::None, South::Low, true, North::None, ) => 15554,
                ( false, East::None, West::Low, South::Low, true, North::None, ) => 15555,
                ( false, East::None, West::Tall, South::Low, true, North::None, ) => 15556,
                ( true, East::None, West::None, South::Low, false, North::None, ) => 15557,
                ( true, East::None, West::Low, South::Low, false, North::None, ) => 15558,
                ( true, East::None, West::Tall, South::Low, false, North::None, ) => 15559,
                ( false, East::None, West::None, South::Low, false, North::None, ) => 15560,
                ( false, East::None, West::Low, South::Low, false, North::None, ) => 15561,
                ( false, East::None, West::Tall, South::Low, false, North::None, ) => 15562,
                ( true, East::None, West::None, South::Tall, true, North::None, ) => 15563,
                ( true, East::None, West::Low, South::Tall, true, North::None, ) => 15564,
                ( true, East::None, West::Tall, South::Tall, true, North::None, ) => 15565,
                ( false, East::None, West::None, South::Tall, true, North::None, ) => 15566,
                ( false, East::None, West::Low, South::Tall, true, North::None, ) => 15567,
                ( false, East::None, West::Tall, South::Tall, true, North::None, ) => 15568,
                ( true, East::None, West::None, South::Tall, false, North::None, ) => 15569,
                ( true, East::None, West::Low, South::Tall, false, North::None, ) => 15570,
                ( true, East::None, West::Tall, South::Tall, false, North::None, ) => 15571,
                ( false, East::None, West::None, South::Tall, false, North::None, ) => 15572,
                ( false, East::None, West::Low, South::Tall, false, North::None, ) => 15573,
                ( false, East::None, West::Tall, South::Tall, false, North::None, ) => 15574,
                ( true, East::None, West::None, South::None, true, North::Low, ) => 15575,
                ( true, East::None, West::Low, South::None, true, North::Low, ) => 15576,
                ( true, East::None, West::Tall, South::None, true, North::Low, ) => 15577,
                ( false, East::None, West::None, South::None, true, North::Low, ) => 15578,
                ( false, East::None, West::Low, South::None, true, North::Low, ) => 15579,
                ( false, East::None, West::Tall, South::None, true, North::Low, ) => 15580,
                ( true, East::None, West::None, South::None, false, North::Low, ) => 15581,
                ( true, East::None, West::Low, South::None, false, North::Low, ) => 15582,
                ( true, East::None, West::Tall, South::None, false, North::Low, ) => 15583,
                ( false, East::None, West::None, South::None, false, North::Low, ) => 15584,
                ( false, East::None, West::Low, South::None, false, North::Low, ) => 15585,
                ( false, East::None, West::Tall, South::None, false, North::Low, ) => 15586,
                ( true, East::None, West::None, South::Low, true, North::Low, ) => 15587,
                ( true, East::None, West::Low, South::Low, true, North::Low, ) => 15588,
                ( true, East::None, West::Tall, South::Low, true, North::Low, ) => 15589,
                ( false, East::None, West::None, South::Low, true, North::Low, ) => 15590,
                ( false, East::None, West::Low, South::Low, true, North::Low, ) => 15591,
                ( false, East::None, West::Tall, South::Low, true, North::Low, ) => 15592,
                ( true, East::None, West::None, South::Low, false, North::Low, ) => 15593,
                ( true, East::None, West::Low, South::Low, false, North::Low, ) => 15594,
                ( true, East::None, West::Tall, South::Low, false, North::Low, ) => 15595,
                ( false, East::None, West::None, South::Low, false, North::Low, ) => 15596,
                ( false, East::None, West::Low, South::Low, false, North::Low, ) => 15597,
                ( false, East::None, West::Tall, South::Low, false, North::Low, ) => 15598,
                ( true, East::None, West::None, South::Tall, true, North::Low, ) => 15599,
                ( true, East::None, West::Low, South::Tall, true, North::Low, ) => 15600,
                ( true, East::None, West::Tall, South::Tall, true, North::Low, ) => 15601,
                ( false, East::None, West::None, South::Tall, true, North::Low, ) => 15602,
                ( false, East::None, West::Low, South::Tall, true, North::Low, ) => 15603,
                ( false, East::None, West::Tall, South::Tall, true, North::Low, ) => 15604,
                ( true, East::None, West::None, South::Tall, false, North::Low, ) => 15605,
                ( true, East::None, West::Low, South::Tall, false, North::Low, ) => 15606,
                ( true, East::None, West::Tall, South::Tall, false, North::Low, ) => 15607,
                ( false, East::None, West::None, South::Tall, false, North::Low, ) => 15608,
                ( false, East::None, West::Low, South::Tall, false, North::Low, ) => 15609,
                ( false, East::None, West::Tall, South::Tall, false, North::Low, ) => 15610,
                ( true, East::None, West::None, South::None, true, North::Tall, ) => 15611,
                ( true, East::None, West::Low, South::None, true, North::Tall, ) => 15612,
                ( true, East::None, West::Tall, South::None, true, North::Tall, ) => 15613,
                ( false, East::None, West::None, South::None, true, North::Tall, ) => 15614,
                ( false, East::None, West::Low, South::None, true, North::Tall, ) => 15615,
                ( false, East::None, West::Tall, South::None, true, North::Tall, ) => 15616,
                ( true, East::None, West::None, South::None, false, North::Tall, ) => 15617,
                ( true, East::None, West::Low, South::None, false, North::Tall, ) => 15618,
                ( true, East::None, West::Tall, South::None, false, North::Tall, ) => 15619,
                ( false, East::None, West::None, South::None, false, North::Tall, ) => 15620,
                ( false, East::None, West::Low, South::None, false, North::Tall, ) => 15621,
                ( false, East::None, West::Tall, South::None, false, North::Tall, ) => 15622,
                ( true, East::None, West::None, South::Low, true, North::Tall, ) => 15623,
                ( true, East::None, West::Low, South::Low, true, North::Tall, ) => 15624,
                ( true, East::None, West::Tall, South::Low, true, North::Tall, ) => 15625,
                ( false, East::None, West::None, South::Low, true, North::Tall, ) => 15626,
                ( false, East::None, West::Low, South::Low, true, North::Tall, ) => 15627,
                ( false, East::None, West::Tall, South::Low, true, North::Tall, ) => 15628,
                ( true, East::None, West::None, South::Low, false, North::Tall, ) => 15629,
                ( true, East::None, West::Low, South::Low, false, North::Tall, ) => 15630,
                ( true, East::None, West::Tall, South::Low, false, North::Tall, ) => 15631,
                ( false, East::None, West::None, South::Low, false, North::Tall, ) => 15632,
                ( false, East::None, West::Low, South::Low, false, North::Tall, ) => 15633,
                ( false, East::None, West::Tall, South::Low, false, North::Tall, ) => 15634,
                ( true, East::None, West::None, South::Tall, true, North::Tall, ) => 15635,
                ( true, East::None, West::Low, South::Tall, true, North::Tall, ) => 15636,
                ( true, East::None, West::Tall, South::Tall, true, North::Tall, ) => 15637,
                ( false, East::None, West::None, South::Tall, true, North::Tall, ) => 15638,
                ( false, East::None, West::Low, South::Tall, true, North::Tall, ) => 15639,
                ( false, East::None, West::Tall, South::Tall, true, North::Tall, ) => 15640,
                ( true, East::None, West::None, South::Tall, false, North::Tall, ) => 15641,
                ( true, East::None, West::Low, South::Tall, false, North::Tall, ) => 15642,
                ( true, East::None, West::Tall, South::Tall, false, North::Tall, ) => 15643,
                ( false, East::None, West::None, South::Tall, false, North::Tall, ) => 15644,
                ( false, East::None, West::Low, South::Tall, false, North::Tall, ) => 15645,
                ( false, East::None, West::Tall, South::Tall, false, North::Tall, ) => 15646,
                ( true, East::Low, West::None, South::None, true, North::None, ) => 15647,
                ( true, East::Low, West::Low, South::None, true, North::None, ) => 15648,
                ( true, East::Low, West::Tall, South::None, true, North::None, ) => 15649,
                ( false, East::Low, West::None, South::None, true, North::None, ) => 15650,
                ( false, East::Low, West::Low, South::None, true, North::None, ) => 15651,
                ( false, East::Low, West::Tall, South::None, true, North::None, ) => 15652,
                ( true, East::Low, West::None, South::None, false, North::None, ) => 15653,
                ( true, East::Low, West::Low, South::None, false, North::None, ) => 15654,
                ( true, East::Low, West::Tall, South::None, false, North::None, ) => 15655,
                ( false, East::Low, West::None, South::None, false, North::None, ) => 15656,
                ( false, East::Low, West::Low, South::None, false, North::None, ) => 15657,
                ( false, East::Low, West::Tall, South::None, false, North::None, ) => 15658,
                ( true, East::Low, West::None, South::Low, true, North::None, ) => 15659,
                ( true, East::Low, West::Low, South::Low, true, North::None, ) => 15660,
                ( true, East::Low, West::Tall, South::Low, true, North::None, ) => 15661,
                ( false, East::Low, West::None, South::Low, true, North::None, ) => 15662,
                ( false, East::Low, West::Low, South::Low, true, North::None, ) => 15663,
                ( false, East::Low, West::Tall, South::Low, true, North::None, ) => 15664,
                ( true, East::Low, West::None, South::Low, false, North::None, ) => 15665,
                ( true, East::Low, West::Low, South::Low, false, North::None, ) => 15666,
                ( true, East::Low, West::Tall, South::Low, false, North::None, ) => 15667,
                ( false, East::Low, West::None, South::Low, false, North::None, ) => 15668,
                ( false, East::Low, West::Low, South::Low, false, North::None, ) => 15669,
                ( false, East::Low, West::Tall, South::Low, false, North::None, ) => 15670,
                ( true, East::Low, West::None, South::Tall, true, North::None, ) => 15671,
                ( true, East::Low, West::Low, South::Tall, true, North::None, ) => 15672,
                ( true, East::Low, West::Tall, South::Tall, true, North::None, ) => 15673,
                ( false, East::Low, West::None, South::Tall, true, North::None, ) => 15674,
                ( false, East::Low, West::Low, South::Tall, true, North::None, ) => 15675,
                ( false, East::Low, West::Tall, South::Tall, true, North::None, ) => 15676,
                ( true, East::Low, West::None, South::Tall, false, North::None, ) => 15677,
                ( true, East::Low, West::Low, South::Tall, false, North::None, ) => 15678,
                ( true, East::Low, West::Tall, South::Tall, false, North::None, ) => 15679,
                ( false, East::Low, West::None, South::Tall, false, North::None, ) => 15680,
                ( false, East::Low, West::Low, South::Tall, false, North::None, ) => 15681,
                ( false, East::Low, West::Tall, South::Tall, false, North::None, ) => 15682,
                ( true, East::Low, West::None, South::None, true, North::Low, ) => 15683,
                ( true, East::Low, West::Low, South::None, true, North::Low, ) => 15684,
                ( true, East::Low, West::Tall, South::None, true, North::Low, ) => 15685,
                ( false, East::Low, West::None, South::None, true, North::Low, ) => 15686,
                ( false, East::Low, West::Low, South::None, true, North::Low, ) => 15687,
                ( false, East::Low, West::Tall, South::None, true, North::Low, ) => 15688,
                ( true, East::Low, West::None, South::None, false, North::Low, ) => 15689,
                ( true, East::Low, West::Low, South::None, false, North::Low, ) => 15690,
                ( true, East::Low, West::Tall, South::None, false, North::Low, ) => 15691,
                ( false, East::Low, West::None, South::None, false, North::Low, ) => 15692,
                ( false, East::Low, West::Low, South::None, false, North::Low, ) => 15693,
                ( false, East::Low, West::Tall, South::None, false, North::Low, ) => 15694,
                ( true, East::Low, West::None, South::Low, true, North::Low, ) => 15695,
                ( true, East::Low, West::Low, South::Low, true, North::Low, ) => 15696,
                ( true, East::Low, West::Tall, South::Low, true, North::Low, ) => 15697,
                ( false, East::Low, West::None, South::Low, true, North::Low, ) => 15698,
                ( false, East::Low, West::Low, South::Low, true, North::Low, ) => 15699,
                ( false, East::Low, West::Tall, South::Low, true, North::Low, ) => 15700,
                ( true, East::Low, West::None, South::Low, false, North::Low, ) => 15701,
                ( true, East::Low, West::Low, South::Low, false, North::Low, ) => 15702,
                ( true, East::Low, West::Tall, South::Low, false, North::Low, ) => 15703,
                ( false, East::Low, West::None, South::Low, false, North::Low, ) => 15704,
                ( false, East::Low, West::Low, South::Low, false, North::Low, ) => 15705,
                ( false, East::Low, West::Tall, South::Low, false, North::Low, ) => 15706,
                ( true, East::Low, West::None, South::Tall, true, North::Low, ) => 15707,
                ( true, East::Low, West::Low, South::Tall, true, North::Low, ) => 15708,
                ( true, East::Low, West::Tall, South::Tall, true, North::Low, ) => 15709,
                ( false, East::Low, West::None, South::Tall, true, North::Low, ) => 15710,
                ( false, East::Low, West::Low, South::Tall, true, North::Low, ) => 15711,
                ( false, East::Low, West::Tall, South::Tall, true, North::Low, ) => 15712,
                ( true, East::Low, West::None, South::Tall, false, North::Low, ) => 15713,
                ( true, East::Low, West::Low, South::Tall, false, North::Low, ) => 15714,
                ( true, East::Low, West::Tall, South::Tall, false, North::Low, ) => 15715,
                ( false, East::Low, West::None, South::Tall, false, North::Low, ) => 15716,
                ( false, East::Low, West::Low, South::Tall, false, North::Low, ) => 15717,
                ( false, East::Low, West::Tall, South::Tall, false, North::Low, ) => 15718,
                ( true, East::Low, West::None, South::None, true, North::Tall, ) => 15719,
                ( true, East::Low, West::Low, South::None, true, North::Tall, ) => 15720,
                ( true, East::Low, West::Tall, South::None, true, North::Tall, ) => 15721,
                ( false, East::Low, West::None, South::None, true, North::Tall, ) => 15722,
                ( false, East::Low, West::Low, South::None, true, North::Tall, ) => 15723,
                ( false, East::Low, West::Tall, South::None, true, North::Tall, ) => 15724,
                ( true, East::Low, West::None, South::None, false, North::Tall, ) => 15725,
                ( true, East::Low, West::Low, South::None, false, North::Tall, ) => 15726,
                ( true, East::Low, West::Tall, South::None, false, North::Tall, ) => 15727,
                ( false, East::Low, West::None, South::None, false, North::Tall, ) => 15728,
                ( false, East::Low, West::Low, South::None, false, North::Tall, ) => 15729,
                ( false, East::Low, West::Tall, South::None, false, North::Tall, ) => 15730,
                ( true, East::Low, West::None, South::Low, true, North::Tall, ) => 15731,
                ( true, East::Low, West::Low, South::Low, true, North::Tall, ) => 15732,
                ( true, East::Low, West::Tall, South::Low, true, North::Tall, ) => 15733,
                ( false, East::Low, West::None, South::Low, true, North::Tall, ) => 15734,
                ( false, East::Low, West::Low, South::Low, true, North::Tall, ) => 15735,
                ( false, East::Low, West::Tall, South::Low, true, North::Tall, ) => 15736,
                ( true, East::Low, West::None, South::Low, false, North::Tall, ) => 15737,
                ( true, East::Low, West::Low, South::Low, false, North::Tall, ) => 15738,
                ( true, East::Low, West::Tall, South::Low, false, North::Tall, ) => 15739,
                ( false, East::Low, West::None, South::Low, false, North::Tall, ) => 15740,
                ( false, East::Low, West::Low, South::Low, false, North::Tall, ) => 15741,
                ( false, East::Low, West::Tall, South::Low, false, North::Tall, ) => 15742,
                ( true, East::Low, West::None, South::Tall, true, North::Tall, ) => 15743,
                ( true, East::Low, West::Low, South::Tall, true, North::Tall, ) => 15744,
                ( true, East::Low, West::Tall, South::Tall, true, North::Tall, ) => 15745,
                ( false, East::Low, West::None, South::Tall, true, North::Tall, ) => 15746,
                ( false, East::Low, West::Low, South::Tall, true, North::Tall, ) => 15747,
                ( false, East::Low, West::Tall, South::Tall, true, North::Tall, ) => 15748,
                ( true, East::Low, West::None, South::Tall, false, North::Tall, ) => 15749,
                ( true, East::Low, West::Low, South::Tall, false, North::Tall, ) => 15750,
                ( true, East::Low, West::Tall, South::Tall, false, North::Tall, ) => 15751,
                ( false, East::Low, West::None, South::Tall, false, North::Tall, ) => 15752,
                ( false, East::Low, West::Low, South::Tall, false, North::Tall, ) => 15753,
                ( false, East::Low, West::Tall, South::Tall, false, North::Tall, ) => 15754,
                ( true, East::Tall, West::None, South::None, true, North::None, ) => 15755,
                ( true, East::Tall, West::Low, South::None, true, North::None, ) => 15756,
                ( true, East::Tall, West::Tall, South::None, true, North::None, ) => 15757,
                ( false, East::Tall, West::None, South::None, true, North::None, ) => 15758,
                ( false, East::Tall, West::Low, South::None, true, North::None, ) => 15759,
                ( false, East::Tall, West::Tall, South::None, true, North::None, ) => 15760,
                ( true, East::Tall, West::None, South::None, false, North::None, ) => 15761,
                ( true, East::Tall, West::Low, South::None, false, North::None, ) => 15762,
                ( true, East::Tall, West::Tall, South::None, false, North::None, ) => 15763,
                ( false, East::Tall, West::None, South::None, false, North::None, ) => 15764,
                ( false, East::Tall, West::Low, South::None, false, North::None, ) => 15765,
                ( false, East::Tall, West::Tall, South::None, false, North::None, ) => 15766,
                ( true, East::Tall, West::None, South::Low, true, North::None, ) => 15767,
                ( true, East::Tall, West::Low, South::Low, true, North::None, ) => 15768,
                ( true, East::Tall, West::Tall, South::Low, true, North::None, ) => 15769,
                ( false, East::Tall, West::None, South::Low, true, North::None, ) => 15770,
                ( false, East::Tall, West::Low, South::Low, true, North::None, ) => 15771,
                ( false, East::Tall, West::Tall, South::Low, true, North::None, ) => 15772,
                ( true, East::Tall, West::None, South::Low, false, North::None, ) => 15773,
                ( true, East::Tall, West::Low, South::Low, false, North::None, ) => 15774,
                ( true, East::Tall, West::Tall, South::Low, false, North::None, ) => 15775,
                ( false, East::Tall, West::None, South::Low, false, North::None, ) => 15776,
                ( false, East::Tall, West::Low, South::Low, false, North::None, ) => 15777,
                ( false, East::Tall, West::Tall, South::Low, false, North::None, ) => 15778,
                ( true, East::Tall, West::None, South::Tall, true, North::None, ) => 15779,
                ( true, East::Tall, West::Low, South::Tall, true, North::None, ) => 15780,
                ( true, East::Tall, West::Tall, South::Tall, true, North::None, ) => 15781,
                ( false, East::Tall, West::None, South::Tall, true, North::None, ) => 15782,
                ( false, East::Tall, West::Low, South::Tall, true, North::None, ) => 15783,
                ( false, East::Tall, West::Tall, South::Tall, true, North::None, ) => 15784,
                ( true, East::Tall, West::None, South::Tall, false, North::None, ) => 15785,
                ( true, East::Tall, West::Low, South::Tall, false, North::None, ) => 15786,
                ( true, East::Tall, West::Tall, South::Tall, false, North::None, ) => 15787,
                ( false, East::Tall, West::None, South::Tall, false, North::None, ) => 15788,
                ( false, East::Tall, West::Low, South::Tall, false, North::None, ) => 15789,
                ( false, East::Tall, West::Tall, South::Tall, false, North::None, ) => 15790,
                ( true, East::Tall, West::None, South::None, true, North::Low, ) => 15791,
                ( true, East::Tall, West::Low, South::None, true, North::Low, ) => 15792,
                ( true, East::Tall, West::Tall, South::None, true, North::Low, ) => 15793,
                ( false, East::Tall, West::None, South::None, true, North::Low, ) => 15794,
                ( false, East::Tall, West::Low, South::None, true, North::Low, ) => 15795,
                ( false, East::Tall, West::Tall, South::None, true, North::Low, ) => 15796,
                ( true, East::Tall, West::None, South::None, false, North::Low, ) => 15797,
                ( true, East::Tall, West::Low, South::None, false, North::Low, ) => 15798,
                ( true, East::Tall, West::Tall, South::None, false, North::Low, ) => 15799,
                ( false, East::Tall, West::None, South::None, false, North::Low, ) => 15800,
                ( false, East::Tall, West::Low, South::None, false, North::Low, ) => 15801,
                ( false, East::Tall, West::Tall, South::None, false, North::Low, ) => 15802,
                ( true, East::Tall, West::None, South::Low, true, North::Low, ) => 15803,
                ( true, East::Tall, West::Low, South::Low, true, North::Low, ) => 15804,
                ( true, East::Tall, West::Tall, South::Low, true, North::Low, ) => 15805,
                ( false, East::Tall, West::None, South::Low, true, North::Low, ) => 15806,
                ( false, East::Tall, West::Low, South::Low, true, North::Low, ) => 15807,
                ( false, East::Tall, West::Tall, South::Low, true, North::Low, ) => 15808,
                ( true, East::Tall, West::None, South::Low, false, North::Low, ) => 15809,
                ( true, East::Tall, West::Low, South::Low, false, North::Low, ) => 15810,
                ( true, East::Tall, West::Tall, South::Low, false, North::Low, ) => 15811,
                ( false, East::Tall, West::None, South::Low, false, North::Low, ) => 15812,
                ( false, East::Tall, West::Low, South::Low, false, North::Low, ) => 15813,
                ( false, East::Tall, West::Tall, South::Low, false, North::Low, ) => 15814,
                ( true, East::Tall, West::None, South::Tall, true, North::Low, ) => 15815,
                ( true, East::Tall, West::Low, South::Tall, true, North::Low, ) => 15816,
                ( true, East::Tall, West::Tall, South::Tall, true, North::Low, ) => 15817,
                ( false, East::Tall, West::None, South::Tall, true, North::Low, ) => 15818,
                ( false, East::Tall, West::Low, South::Tall, true, North::Low, ) => 15819,
                ( false, East::Tall, West::Tall, South::Tall, true, North::Low, ) => 15820,
                ( true, East::Tall, West::None, South::Tall, false, North::Low, ) => 15821,
                ( true, East::Tall, West::Low, South::Tall, false, North::Low, ) => 15822,
                ( true, East::Tall, West::Tall, South::Tall, false, North::Low, ) => 15823,
                ( false, East::Tall, West::None, South::Tall, false, North::Low, ) => 15824,
                ( false, East::Tall, West::Low, South::Tall, false, North::Low, ) => 15825,
                ( false, East::Tall, West::Tall, South::Tall, false, North::Low, ) => 15826,
                ( true, East::Tall, West::None, South::None, true, North::Tall, ) => 15827,
                ( true, East::Tall, West::Low, South::None, true, North::Tall, ) => 15828,
                ( true, East::Tall, West::Tall, South::None, true, North::Tall, ) => 15829,
                ( false, East::Tall, West::None, South::None, true, North::Tall, ) => 15830,
                ( false, East::Tall, West::Low, South::None, true, North::Tall, ) => 15831,
                ( false, East::Tall, West::Tall, South::None, true, North::Tall, ) => 15832,
                ( true, East::Tall, West::None, South::None, false, North::Tall, ) => 15833,
                ( true, East::Tall, West::Low, South::None, false, North::Tall, ) => 15834,
                ( true, East::Tall, West::Tall, South::None, false, North::Tall, ) => 15835,
                ( false, East::Tall, West::None, South::None, false, North::Tall, ) => 15836,
                ( false, East::Tall, West::Low, South::None, false, North::Tall, ) => 15837,
                ( false, East::Tall, West::Tall, South::None, false, North::Tall, ) => 15838,
                ( true, East::Tall, West::None, South::Low, true, North::Tall, ) => 15839,
                ( true, East::Tall, West::Low, South::Low, true, North::Tall, ) => 15840,
                ( true, East::Tall, West::Tall, South::Low, true, North::Tall, ) => 15841,
                ( false, East::Tall, West::None, South::Low, true, North::Tall, ) => 15842,
                ( false, East::Tall, West::Low, South::Low, true, North::Tall, ) => 15843,
                ( false, East::Tall, West::Tall, South::Low, true, North::Tall, ) => 15844,
                ( true, East::Tall, West::None, South::Low, false, North::Tall, ) => 15845,
                ( true, East::Tall, West::Low, South::Low, false, North::Tall, ) => 15846,
                ( true, East::Tall, West::Tall, South::Low, false, North::Tall, ) => 15847,
                ( false, East::Tall, West::None, South::Low, false, North::Tall, ) => 15848,
                ( false, East::Tall, West::Low, South::Low, false, North::Tall, ) => 15849,
                ( false, East::Tall, West::Tall, South::Low, false, North::Tall, ) => 15850,
                ( true, East::Tall, West::None, South::Tall, true, North::Tall, ) => 15851,
                ( true, East::Tall, West::Low, South::Tall, true, North::Tall, ) => 15852,
                ( true, East::Tall, West::Tall, South::Tall, true, North::Tall, ) => 15853,
                ( false, East::Tall, West::None, South::Tall, true, North::Tall, ) => 15854,
                ( false, East::Tall, West::Low, South::Tall, true, North::Tall, ) => 15855,
                ( false, East::Tall, West::Tall, South::Tall, true, North::Tall, ) => 15856,
                ( true, East::Tall, West::None, South::Tall, false, North::Tall, ) => 15857,
                ( true, East::Tall, West::Low, South::Tall, false, North::Tall, ) => 15858,
                ( true, East::Tall, West::Tall, South::Tall, false, North::Tall, ) => 15859,
                ( false, East::Tall, West::None, South::Tall, false, North::Tall, ) => 15860,
                ( false, East::Tall, West::Low, South::Tall, false, North::Tall, ) => 15861,
                ( false, East::Tall, West::Tall, South::Tall, false, North::Tall, ) => 15862,
            })
        }
    }

    impl From<PrismarineWall> for BlockState {
        #[inline(always)]
        fn from(value : PrismarineWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PrismarineWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PrismarineWall { }

    impl Block for PrismarineWall {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            east : East::None,
            west : West::None,
            south : South::None,
            up : true,
            north : North::None,
        };
    }

}

/// `minecraft:acacia_planks` block.
pub mod acacia_planks {
    use super::*;

    /// `minecraft:acacia_planks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaPlanks;

    impl AcaciaPlanks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19)
        }
    }

    impl From<AcaciaPlanks> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaPlanks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaPlanks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaPlanks { }

    impl Block for AcaciaPlanks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:orange_banner` block.
pub mod orange_banner {
    use super::*;

    /// `minecraft:orange_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl OrangeBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11664,
                ( Rotation::N1, ) => 11665,
                ( Rotation::N2, ) => 11666,
                ( Rotation::N3, ) => 11667,
                ( Rotation::N4, ) => 11668,
                ( Rotation::N5, ) => 11669,
                ( Rotation::N6, ) => 11670,
                ( Rotation::N7, ) => 11671,
                ( Rotation::N8, ) => 11672,
                ( Rotation::N9, ) => 11673,
                ( Rotation::N10, ) => 11674,
                ( Rotation::N11, ) => 11675,
                ( Rotation::N12, ) => 11676,
                ( Rotation::N13, ) => 11677,
                ( Rotation::N14, ) => 11678,
                ( Rotation::N15, ) => 11679,
            })
        }
    }

    impl From<OrangeBanner> for BlockState {
        #[inline(always)]
        fn from(value : OrangeBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeBanner { }

    impl Block for OrangeBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:gray_concrete` block.
pub mod gray_concrete {
    use super::*;

    /// `minecraft:gray_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayConcrete;

    impl GrayConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13758)
        }
    }

    impl From<GrayConcrete> for BlockState {
        #[inline(always)]
        fn from(value : GrayConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayConcrete { }

    impl Block for GrayConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:black_stained_glass` block.
pub mod black_stained_glass {
    use super::*;

    /// `minecraft:black_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackStainedGlass;

    impl BlackStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6139)
        }
    }

    impl From<BlackStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : BlackStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackStainedGlass { }

    impl Block for BlackStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:exposed_cut_copper_slab` block.
pub mod exposed_cut_copper_slab {
    use super::*;

    /// `minecraft:exposed_cut_copper_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ExposedCutCopperSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl ExposedCutCopperSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 24348,
                ( false, Kind::Top, ) => 24349,
                ( true, Kind::Bottom, ) => 24350,
                ( false, Kind::Bottom, ) => 24351,
                ( true, Kind::Double, ) => 24352,
                ( false, Kind::Double, ) => 24353,
            })
        }
    }

    impl From<ExposedCutCopperSlab> for BlockState {
        #[inline(always)]
        fn from(value : ExposedCutCopperSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ExposedCutCopperSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ExposedCutCopperSlab { }

    impl Block for ExposedCutCopperSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:acacia_door` block.
pub mod acacia_door {
    use super::*;

    /// `minecraft:acacia_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaDoor {
        /// `half` state.
        pub half : Half,
        /// `hinge` state.
        pub hinge : Hinge,
        /// `facing` state.
        pub facing : Facing,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl AcaciaDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.hinge, self.facing, self.open, self.powered, )) {
                ( Half::Upper, Hinge::Left, Facing::North, true, true, ) => 12973,
                ( Half::Upper, Hinge::Left, Facing::North, true, false, ) => 12974,
                ( Half::Upper, Hinge::Left, Facing::North, false, true, ) => 12975,
                ( Half::Upper, Hinge::Left, Facing::North, false, false, ) => 12976,
                ( Half::Upper, Hinge::Right, Facing::North, true, true, ) => 12977,
                ( Half::Upper, Hinge::Right, Facing::North, true, false, ) => 12978,
                ( Half::Upper, Hinge::Right, Facing::North, false, true, ) => 12979,
                ( Half::Upper, Hinge::Right, Facing::North, false, false, ) => 12980,
                ( Half::Lower, Hinge::Left, Facing::North, true, true, ) => 12981,
                ( Half::Lower, Hinge::Left, Facing::North, true, false, ) => 12982,
                ( Half::Lower, Hinge::Left, Facing::North, false, true, ) => 12983,
                ( Half::Lower, Hinge::Left, Facing::North, false, false, ) => 12984,
                ( Half::Lower, Hinge::Right, Facing::North, true, true, ) => 12985,
                ( Half::Lower, Hinge::Right, Facing::North, true, false, ) => 12986,
                ( Half::Lower, Hinge::Right, Facing::North, false, true, ) => 12987,
                ( Half::Lower, Hinge::Right, Facing::North, false, false, ) => 12988,
                ( Half::Upper, Hinge::Left, Facing::South, true, true, ) => 12989,
                ( Half::Upper, Hinge::Left, Facing::South, true, false, ) => 12990,
                ( Half::Upper, Hinge::Left, Facing::South, false, true, ) => 12991,
                ( Half::Upper, Hinge::Left, Facing::South, false, false, ) => 12992,
                ( Half::Upper, Hinge::Right, Facing::South, true, true, ) => 12993,
                ( Half::Upper, Hinge::Right, Facing::South, true, false, ) => 12994,
                ( Half::Upper, Hinge::Right, Facing::South, false, true, ) => 12995,
                ( Half::Upper, Hinge::Right, Facing::South, false, false, ) => 12996,
                ( Half::Lower, Hinge::Left, Facing::South, true, true, ) => 12997,
                ( Half::Lower, Hinge::Left, Facing::South, true, false, ) => 12998,
                ( Half::Lower, Hinge::Left, Facing::South, false, true, ) => 12999,
                ( Half::Lower, Hinge::Left, Facing::South, false, false, ) => 13000,
                ( Half::Lower, Hinge::Right, Facing::South, true, true, ) => 13001,
                ( Half::Lower, Hinge::Right, Facing::South, true, false, ) => 13002,
                ( Half::Lower, Hinge::Right, Facing::South, false, true, ) => 13003,
                ( Half::Lower, Hinge::Right, Facing::South, false, false, ) => 13004,
                ( Half::Upper, Hinge::Left, Facing::West, true, true, ) => 13005,
                ( Half::Upper, Hinge::Left, Facing::West, true, false, ) => 13006,
                ( Half::Upper, Hinge::Left, Facing::West, false, true, ) => 13007,
                ( Half::Upper, Hinge::Left, Facing::West, false, false, ) => 13008,
                ( Half::Upper, Hinge::Right, Facing::West, true, true, ) => 13009,
                ( Half::Upper, Hinge::Right, Facing::West, true, false, ) => 13010,
                ( Half::Upper, Hinge::Right, Facing::West, false, true, ) => 13011,
                ( Half::Upper, Hinge::Right, Facing::West, false, false, ) => 13012,
                ( Half::Lower, Hinge::Left, Facing::West, true, true, ) => 13013,
                ( Half::Lower, Hinge::Left, Facing::West, true, false, ) => 13014,
                ( Half::Lower, Hinge::Left, Facing::West, false, true, ) => 13015,
                ( Half::Lower, Hinge::Left, Facing::West, false, false, ) => 13016,
                ( Half::Lower, Hinge::Right, Facing::West, true, true, ) => 13017,
                ( Half::Lower, Hinge::Right, Facing::West, true, false, ) => 13018,
                ( Half::Lower, Hinge::Right, Facing::West, false, true, ) => 13019,
                ( Half::Lower, Hinge::Right, Facing::West, false, false, ) => 13020,
                ( Half::Upper, Hinge::Left, Facing::East, true, true, ) => 13021,
                ( Half::Upper, Hinge::Left, Facing::East, true, false, ) => 13022,
                ( Half::Upper, Hinge::Left, Facing::East, false, true, ) => 13023,
                ( Half::Upper, Hinge::Left, Facing::East, false, false, ) => 13024,
                ( Half::Upper, Hinge::Right, Facing::East, true, true, ) => 13025,
                ( Half::Upper, Hinge::Right, Facing::East, true, false, ) => 13026,
                ( Half::Upper, Hinge::Right, Facing::East, false, true, ) => 13027,
                ( Half::Upper, Hinge::Right, Facing::East, false, false, ) => 13028,
                ( Half::Lower, Hinge::Left, Facing::East, true, true, ) => 13029,
                ( Half::Lower, Hinge::Left, Facing::East, true, false, ) => 13030,
                ( Half::Lower, Hinge::Left, Facing::East, false, true, ) => 13031,
                ( Half::Lower, Hinge::Left, Facing::East, false, false, ) => 13032,
                ( Half::Lower, Hinge::Right, Facing::East, true, true, ) => 13033,
                ( Half::Lower, Hinge::Right, Facing::East, true, false, ) => 13034,
                ( Half::Lower, Hinge::Right, Facing::East, false, true, ) => 13035,
                ( Half::Lower, Hinge::Right, Facing::East, false, false, ) => 13036,
            })
        }
    }

    impl From<AcaciaDoor> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaDoor { }

    impl Block for AcaciaDoor {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
            hinge : Hinge::Left,
            facing : Facing::North,
            open : false,
            powered : false,
        };
    }

}

/// `minecraft:pale_oak_wall_sign` block.
pub mod pale_oak_wall_sign {
    use super::*;

    /// `minecraft:pale_oak_wall_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakWallSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PaleOakWallSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 4914,
                ( false, Facing::North, ) => 4915,
                ( true, Facing::South, ) => 4916,
                ( false, Facing::South, ) => 4917,
                ( true, Facing::West, ) => 4918,
                ( false, Facing::West, ) => 4919,
                ( true, Facing::East, ) => 4920,
                ( false, Facing::East, ) => 4921,
            })
        }
    }

    impl From<PaleOakWallSign> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakWallSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakWallSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakWallSign { }

    impl Block for PaleOakWallSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:purple_carpet` block.
pub mod purple_carpet {
    use super::*;

    /// `minecraft:purple_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleCarpet;

    impl PurpleCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11627)
        }
    }

    impl From<PurpleCarpet> for BlockState {
        #[inline(always)]
        fn from(value : PurpleCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleCarpet { }

    impl Block for PurpleCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:polished_diorite` block.
pub mod polished_diorite {
    use super::*;

    /// `minecraft:polished_diorite` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedDiorite;

    impl PolishedDiorite {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(5)
        }
    }

    impl From<PolishedDiorite> for BlockState {
        #[inline(always)]
        fn from(value : PolishedDiorite) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedDiorite {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedDiorite { }

    impl Block for PolishedDiorite {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:red_tulip` block.
pub mod red_tulip {
    use super::*;

    /// `minecraft:red_tulip` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedTulip;

    impl RedTulip {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2127)
        }
    }

    impl From<RedTulip> for BlockState {
        #[inline(always)]
        fn from(value : RedTulip) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedTulip {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedTulip { }

    impl Block for RedTulip {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_cut_copper_slab` block.
pub mod waxed_cut_copper_slab {
    use super::*;

    /// `minecraft:waxed_cut_copper_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedCutCopperSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl WaxedCutCopperSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 24706,
                ( false, Kind::Top, ) => 24707,
                ( true, Kind::Bottom, ) => 24708,
                ( false, Kind::Bottom, ) => 24709,
                ( true, Kind::Double, ) => 24710,
                ( false, Kind::Double, ) => 24711,
            })
        }
    }

    impl From<WaxedCutCopperSlab> for BlockState {
        #[inline(always)]
        fn from(value : WaxedCutCopperSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedCutCopperSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedCutCopperSlab { }

    impl Block for WaxedCutCopperSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:wet_sponge` block.
pub mod wet_sponge {
    use super::*;

    /// `minecraft:wet_sponge` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WetSponge;

    impl WetSponge {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(561)
        }
    }

    impl From<WetSponge> for BlockState {
        #[inline(always)]
        fn from(value : WetSponge) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WetSponge {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WetSponge { }

    impl Block for WetSponge {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:moving_piston` block.
pub mod moving_piston {
    use super::*;

    /// `minecraft:moving_piston` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MovingPiston {
        /// `facing` state.
        pub facing : Facing,
        /// `type` state.
        pub kind : Kind,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `normal` variant.
        Normal,
        /// `sticky` variant.
        Sticky,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl MovingPiston {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.kind, )) {
                ( Facing::North, Kind::Normal, ) => 2109,
                ( Facing::North, Kind::Sticky, ) => 2110,
                ( Facing::East, Kind::Normal, ) => 2111,
                ( Facing::East, Kind::Sticky, ) => 2112,
                ( Facing::South, Kind::Normal, ) => 2113,
                ( Facing::South, Kind::Sticky, ) => 2114,
                ( Facing::West, Kind::Normal, ) => 2115,
                ( Facing::West, Kind::Sticky, ) => 2116,
                ( Facing::Up, Kind::Normal, ) => 2117,
                ( Facing::Up, Kind::Sticky, ) => 2118,
                ( Facing::Down, Kind::Normal, ) => 2119,
                ( Facing::Down, Kind::Sticky, ) => 2120,
            })
        }
    }

    impl From<MovingPiston> for BlockState {
        #[inline(always)]
        fn from(value : MovingPiston) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MovingPiston {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MovingPiston { }

    impl Block for MovingPiston {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            kind : Kind::Normal,
        };
    }

}

/// `minecraft:enchanting_table` block.
pub mod enchanting_table {
    use super::*;

    /// `minecraft:enchanting_table` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct EnchantingTable;

    impl EnchantingTable {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(8173)
        }
    }

    impl From<EnchantingTable> for BlockState {
        #[inline(always)]
        fn from(value : EnchantingTable) -> Self {
            value.to_block_state()
        }
    }

    impl Default for EnchantingTable {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for EnchantingTable { }

    impl Block for EnchantingTable {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:oxidized_copper_door` block.
pub mod oxidized_copper_door {
    use super::*;

    /// `minecraft:oxidized_copper_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OxidizedCopperDoor {
        /// `hinge` state.
        pub hinge : Hinge,
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
        /// `open` state.
        pub open : bool,
        /// `half` state.
        pub half : Half,
    }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl OxidizedCopperDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.hinge, self.facing, self.powered, self.open, self.half, )) {
                ( Hinge::Left, Facing::North, true, true, Half::Upper, ) => 24840,
                ( Hinge::Left, Facing::North, false, true, Half::Upper, ) => 24841,
                ( Hinge::Left, Facing::North, true, false, Half::Upper, ) => 24842,
                ( Hinge::Left, Facing::North, false, false, Half::Upper, ) => 24843,
                ( Hinge::Right, Facing::North, true, true, Half::Upper, ) => 24844,
                ( Hinge::Right, Facing::North, false, true, Half::Upper, ) => 24845,
                ( Hinge::Right, Facing::North, true, false, Half::Upper, ) => 24846,
                ( Hinge::Right, Facing::North, false, false, Half::Upper, ) => 24847,
                ( Hinge::Left, Facing::North, true, true, Half::Lower, ) => 24848,
                ( Hinge::Left, Facing::North, false, true, Half::Lower, ) => 24849,
                ( Hinge::Left, Facing::North, true, false, Half::Lower, ) => 24850,
                ( Hinge::Left, Facing::North, false, false, Half::Lower, ) => 24851,
                ( Hinge::Right, Facing::North, true, true, Half::Lower, ) => 24852,
                ( Hinge::Right, Facing::North, false, true, Half::Lower, ) => 24853,
                ( Hinge::Right, Facing::North, true, false, Half::Lower, ) => 24854,
                ( Hinge::Right, Facing::North, false, false, Half::Lower, ) => 24855,
                ( Hinge::Left, Facing::South, true, true, Half::Upper, ) => 24856,
                ( Hinge::Left, Facing::South, false, true, Half::Upper, ) => 24857,
                ( Hinge::Left, Facing::South, true, false, Half::Upper, ) => 24858,
                ( Hinge::Left, Facing::South, false, false, Half::Upper, ) => 24859,
                ( Hinge::Right, Facing::South, true, true, Half::Upper, ) => 24860,
                ( Hinge::Right, Facing::South, false, true, Half::Upper, ) => 24861,
                ( Hinge::Right, Facing::South, true, false, Half::Upper, ) => 24862,
                ( Hinge::Right, Facing::South, false, false, Half::Upper, ) => 24863,
                ( Hinge::Left, Facing::South, true, true, Half::Lower, ) => 24864,
                ( Hinge::Left, Facing::South, false, true, Half::Lower, ) => 24865,
                ( Hinge::Left, Facing::South, true, false, Half::Lower, ) => 24866,
                ( Hinge::Left, Facing::South, false, false, Half::Lower, ) => 24867,
                ( Hinge::Right, Facing::South, true, true, Half::Lower, ) => 24868,
                ( Hinge::Right, Facing::South, false, true, Half::Lower, ) => 24869,
                ( Hinge::Right, Facing::South, true, false, Half::Lower, ) => 24870,
                ( Hinge::Right, Facing::South, false, false, Half::Lower, ) => 24871,
                ( Hinge::Left, Facing::West, true, true, Half::Upper, ) => 24872,
                ( Hinge::Left, Facing::West, false, true, Half::Upper, ) => 24873,
                ( Hinge::Left, Facing::West, true, false, Half::Upper, ) => 24874,
                ( Hinge::Left, Facing::West, false, false, Half::Upper, ) => 24875,
                ( Hinge::Right, Facing::West, true, true, Half::Upper, ) => 24876,
                ( Hinge::Right, Facing::West, false, true, Half::Upper, ) => 24877,
                ( Hinge::Right, Facing::West, true, false, Half::Upper, ) => 24878,
                ( Hinge::Right, Facing::West, false, false, Half::Upper, ) => 24879,
                ( Hinge::Left, Facing::West, true, true, Half::Lower, ) => 24880,
                ( Hinge::Left, Facing::West, false, true, Half::Lower, ) => 24881,
                ( Hinge::Left, Facing::West, true, false, Half::Lower, ) => 24882,
                ( Hinge::Left, Facing::West, false, false, Half::Lower, ) => 24883,
                ( Hinge::Right, Facing::West, true, true, Half::Lower, ) => 24884,
                ( Hinge::Right, Facing::West, false, true, Half::Lower, ) => 24885,
                ( Hinge::Right, Facing::West, true, false, Half::Lower, ) => 24886,
                ( Hinge::Right, Facing::West, false, false, Half::Lower, ) => 24887,
                ( Hinge::Left, Facing::East, true, true, Half::Upper, ) => 24888,
                ( Hinge::Left, Facing::East, false, true, Half::Upper, ) => 24889,
                ( Hinge::Left, Facing::East, true, false, Half::Upper, ) => 24890,
                ( Hinge::Left, Facing::East, false, false, Half::Upper, ) => 24891,
                ( Hinge::Right, Facing::East, true, true, Half::Upper, ) => 24892,
                ( Hinge::Right, Facing::East, false, true, Half::Upper, ) => 24893,
                ( Hinge::Right, Facing::East, true, false, Half::Upper, ) => 24894,
                ( Hinge::Right, Facing::East, false, false, Half::Upper, ) => 24895,
                ( Hinge::Left, Facing::East, true, true, Half::Lower, ) => 24896,
                ( Hinge::Left, Facing::East, false, true, Half::Lower, ) => 24897,
                ( Hinge::Left, Facing::East, true, false, Half::Lower, ) => 24898,
                ( Hinge::Left, Facing::East, false, false, Half::Lower, ) => 24899,
                ( Hinge::Right, Facing::East, true, true, Half::Lower, ) => 24900,
                ( Hinge::Right, Facing::East, false, true, Half::Lower, ) => 24901,
                ( Hinge::Right, Facing::East, true, false, Half::Lower, ) => 24902,
                ( Hinge::Right, Facing::East, false, false, Half::Lower, ) => 24903,
            })
        }
    }

    impl From<OxidizedCopperDoor> for BlockState {
        #[inline(always)]
        fn from(value : OxidizedCopperDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OxidizedCopperDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OxidizedCopperDoor { }

    impl Block for OxidizedCopperDoor {
        const DEFAULT_STATE : Self = Self {
            hinge : Hinge::Left,
            facing : Facing::North,
            powered : false,
            open : false,
            half : Half::Lower,
        };
    }

}

/// `minecraft:orange_carpet` block.
pub mod orange_carpet {
    use super::*;

    /// `minecraft:orange_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeCarpet;

    impl OrangeCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11618)
        }
    }

    impl From<OrangeCarpet> for BlockState {
        #[inline(always)]
        fn from(value : OrangeCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeCarpet { }

    impl Block for OrangeCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_oxidized_chiseled_copper` block.
pub mod waxed_oxidized_chiseled_copper {
    use super::*;

    /// `minecraft:waxed_oxidized_chiseled_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedOxidizedChiseledCopper;

    impl WaxedOxidizedChiseledCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24012)
        }
    }

    impl From<WaxedOxidizedChiseledCopper> for BlockState {
        #[inline(always)]
        fn from(value : WaxedOxidizedChiseledCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedOxidizedChiseledCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedOxidizedChiseledCopper { }

    impl Block for WaxedOxidizedChiseledCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:weathered_copper_bulb` block.
pub mod weathered_copper_bulb {
    use super::*;

    /// `minecraft:weathered_copper_bulb` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WeatheredCopperBulb {
        /// `powered` state.
        pub powered : bool,
        /// `lit` state.
        pub lit : bool,
    }

    impl WeatheredCopperBulb {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.lit, )) {
                ( true, true, ) => 25760,
                ( false, true, ) => 25761,
                ( true, false, ) => 25762,
                ( false, false, ) => 25763,
            })
        }
    }

    impl From<WeatheredCopperBulb> for BlockState {
        #[inline(always)]
        fn from(value : WeatheredCopperBulb) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WeatheredCopperBulb {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WeatheredCopperBulb { }

    impl Block for WeatheredCopperBulb {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            lit : false,
        };
    }

}

/// `minecraft:cyan_candle_cake` block.
pub mod cyan_candle_cake {
    use super::*;

    /// `minecraft:cyan_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl CyanCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22077,
                ( false, ) => 22078,
            })
        }
    }

    impl From<CyanCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : CyanCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanCandleCake { }

    impl Block for CyanCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:potted_pale_oak_sapling` block.
pub mod potted_pale_oak_sapling {
    use super::*;

    /// `minecraft:potted_pale_oak_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedPaleOakSapling;

    impl PottedPaleOakSapling {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9360)
        }
    }

    impl From<PottedPaleOakSapling> for BlockState {
        #[inline(always)]
        fn from(value : PottedPaleOakSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedPaleOakSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedPaleOakSapling { }

    impl Block for PottedPaleOakSapling {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:blue_wall_banner` block.
pub mod blue_wall_banner {
    use super::*;

    /// `minecraft:blue_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BlueWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11948,
                ( Facing::South, ) => 11949,
                ( Facing::West, ) => 11950,
                ( Facing::East, ) => 11951,
            })
        }
    }

    impl From<BlueWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : BlueWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueWallBanner { }

    impl Block for BlueWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:bedrock` block.
pub mod bedrock {
    use super::*;

    /// `minecraft:bedrock` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Bedrock;

    impl Bedrock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(85)
        }
    }

    impl From<Bedrock> for BlockState {
        #[inline(always)]
        fn from(value : Bedrock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Bedrock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Bedrock { }

    impl Block for Bedrock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:blue_orchid` block.
pub mod blue_orchid {
    use super::*;

    /// `minecraft:blue_orchid` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueOrchid;

    impl BlueOrchid {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2124)
        }
    }

    impl From<BlueOrchid> for BlockState {
        #[inline(always)]
        fn from(value : BlueOrchid) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueOrchid {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueOrchid { }

    impl Block for BlueOrchid {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:candle` block.
pub mod candle {
    use super::*;

    /// `minecraft:candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Candle {
        /// `lit` state.
        pub lit : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `candles` state.
        pub candles : Candles,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl Candle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, self.waterlogged, self.candles, )) {
                ( true, true, Candles::N1, ) => 21785,
                ( true, false, Candles::N1, ) => 21786,
                ( false, true, Candles::N1, ) => 21787,
                ( false, false, Candles::N1, ) => 21788,
                ( true, true, Candles::N2, ) => 21789,
                ( true, false, Candles::N2, ) => 21790,
                ( false, true, Candles::N2, ) => 21791,
                ( false, false, Candles::N2, ) => 21792,
                ( true, true, Candles::N3, ) => 21793,
                ( true, false, Candles::N3, ) => 21794,
                ( false, true, Candles::N3, ) => 21795,
                ( false, false, Candles::N3, ) => 21796,
                ( true, true, Candles::N4, ) => 21797,
                ( true, false, Candles::N4, ) => 21798,
                ( false, true, Candles::N4, ) => 21799,
                ( false, false, Candles::N4, ) => 21800,
            })
        }
    }

    impl From<Candle> for BlockState {
        #[inline(always)]
        fn from(value : Candle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Candle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Candle { }

    impl Block for Candle {
        const DEFAULT_STATE : Self = Self {
            lit : false,
            waterlogged : false,
            candles : Candles::N1,
        };
    }

}

/// `minecraft:acacia_sign` block.
pub mod acacia_sign {
    use super::*;

    /// `minecraft:acacia_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl AcaciaSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.rotation, )) {
                ( true, Rotation::N0, ) => 4462,
                ( false, Rotation::N0, ) => 4463,
                ( true, Rotation::N1, ) => 4464,
                ( false, Rotation::N1, ) => 4465,
                ( true, Rotation::N2, ) => 4466,
                ( false, Rotation::N2, ) => 4467,
                ( true, Rotation::N3, ) => 4468,
                ( false, Rotation::N3, ) => 4469,
                ( true, Rotation::N4, ) => 4470,
                ( false, Rotation::N4, ) => 4471,
                ( true, Rotation::N5, ) => 4472,
                ( false, Rotation::N5, ) => 4473,
                ( true, Rotation::N6, ) => 4474,
                ( false, Rotation::N6, ) => 4475,
                ( true, Rotation::N7, ) => 4476,
                ( false, Rotation::N7, ) => 4477,
                ( true, Rotation::N8, ) => 4478,
                ( false, Rotation::N8, ) => 4479,
                ( true, Rotation::N9, ) => 4480,
                ( false, Rotation::N9, ) => 4481,
                ( true, Rotation::N10, ) => 4482,
                ( false, Rotation::N10, ) => 4483,
                ( true, Rotation::N11, ) => 4484,
                ( false, Rotation::N11, ) => 4485,
                ( true, Rotation::N12, ) => 4486,
                ( false, Rotation::N12, ) => 4487,
                ( true, Rotation::N13, ) => 4488,
                ( false, Rotation::N13, ) => 4489,
                ( true, Rotation::N14, ) => 4490,
                ( false, Rotation::N14, ) => 4491,
                ( true, Rotation::N15, ) => 4492,
                ( false, Rotation::N15, ) => 4493,
            })
        }
    }

    impl From<AcaciaSign> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaSign { }

    impl Block for AcaciaSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:comparator` block.
pub mod comparator {
    use super::*;

    /// `minecraft:comparator` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Comparator {
        /// `mode` state.
        pub mode : Mode,
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `mode` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Mode {
        /// `compare` variant.
        Compare,
        /// `subtract` variant.
        Subtract,
    }
    impl crate::Sealed for Mode { }
    impl BlockProperty for Mode { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Comparator {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.mode, self.powered, self.facing, )) {
                ( Mode::Compare, true, Facing::North, ) => 9984,
                ( Mode::Compare, false, Facing::North, ) => 9985,
                ( Mode::Subtract, true, Facing::North, ) => 9986,
                ( Mode::Subtract, false, Facing::North, ) => 9987,
                ( Mode::Compare, true, Facing::South, ) => 9988,
                ( Mode::Compare, false, Facing::South, ) => 9989,
                ( Mode::Subtract, true, Facing::South, ) => 9990,
                ( Mode::Subtract, false, Facing::South, ) => 9991,
                ( Mode::Compare, true, Facing::West, ) => 9992,
                ( Mode::Compare, false, Facing::West, ) => 9993,
                ( Mode::Subtract, true, Facing::West, ) => 9994,
                ( Mode::Subtract, false, Facing::West, ) => 9995,
                ( Mode::Compare, true, Facing::East, ) => 9996,
                ( Mode::Compare, false, Facing::East, ) => 9997,
                ( Mode::Subtract, true, Facing::East, ) => 9998,
                ( Mode::Subtract, false, Facing::East, ) => 9999,
            })
        }
    }

    impl From<Comparator> for BlockState {
        #[inline(always)]
        fn from(value : Comparator) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Comparator {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Comparator { }

    impl Block for Comparator {
        const DEFAULT_STATE : Self = Self {
            mode : Mode::Compare,
            powered : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:dead_bubble_coral_fan` block.
pub mod dead_bubble_coral_fan {
    use super::*;

    /// `minecraft:dead_bubble_coral_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadBubbleCoralFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl DeadBubbleCoralFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13892,
                ( false, ) => 13893,
            })
        }
    }

    impl From<DeadBubbleCoralFan> for BlockState {
        #[inline(always)]
        fn from(value : DeadBubbleCoralFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadBubbleCoralFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadBubbleCoralFan { }

    impl Block for DeadBubbleCoralFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:snow_block` block.
pub mod snow_block {
    use super::*;

    /// `minecraft:snow_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SnowBlock;

    impl SnowBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(5959)
        }
    }

    impl From<SnowBlock> for BlockState {
        #[inline(always)]
        fn from(value : SnowBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SnowBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SnowBlock { }

    impl Block for SnowBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:green_glazed_terracotta` block.
pub mod green_glazed_terracotta {
    use super::*;

    /// `minecraft:green_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl GreenGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13739,
                ( Facing::South, ) => 13740,
                ( Facing::West, ) => 13741,
                ( Facing::East, ) => 13742,
            })
        }
    }

    impl From<GreenGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : GreenGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenGlazedTerracotta { }

    impl Block for GreenGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:warped_trapdoor` block.
pub mod warped_trapdoor {
    use super::*;

    /// `minecraft:warped_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedTrapdoor {
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl WarpedTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.half, self.open, self.powered, self.waterlogged, )) {
                ( Facing::North, Half::Top, true, true, true, ) => 19867,
                ( Facing::North, Half::Top, true, true, false, ) => 19868,
                ( Facing::North, Half::Top, true, false, true, ) => 19869,
                ( Facing::North, Half::Top, true, false, false, ) => 19870,
                ( Facing::North, Half::Top, false, true, true, ) => 19871,
                ( Facing::North, Half::Top, false, true, false, ) => 19872,
                ( Facing::North, Half::Top, false, false, true, ) => 19873,
                ( Facing::North, Half::Top, false, false, false, ) => 19874,
                ( Facing::North, Half::Bottom, true, true, true, ) => 19875,
                ( Facing::North, Half::Bottom, true, true, false, ) => 19876,
                ( Facing::North, Half::Bottom, true, false, true, ) => 19877,
                ( Facing::North, Half::Bottom, true, false, false, ) => 19878,
                ( Facing::North, Half::Bottom, false, true, true, ) => 19879,
                ( Facing::North, Half::Bottom, false, true, false, ) => 19880,
                ( Facing::North, Half::Bottom, false, false, true, ) => 19881,
                ( Facing::North, Half::Bottom, false, false, false, ) => 19882,
                ( Facing::South, Half::Top, true, true, true, ) => 19883,
                ( Facing::South, Half::Top, true, true, false, ) => 19884,
                ( Facing::South, Half::Top, true, false, true, ) => 19885,
                ( Facing::South, Half::Top, true, false, false, ) => 19886,
                ( Facing::South, Half::Top, false, true, true, ) => 19887,
                ( Facing::South, Half::Top, false, true, false, ) => 19888,
                ( Facing::South, Half::Top, false, false, true, ) => 19889,
                ( Facing::South, Half::Top, false, false, false, ) => 19890,
                ( Facing::South, Half::Bottom, true, true, true, ) => 19891,
                ( Facing::South, Half::Bottom, true, true, false, ) => 19892,
                ( Facing::South, Half::Bottom, true, false, true, ) => 19893,
                ( Facing::South, Half::Bottom, true, false, false, ) => 19894,
                ( Facing::South, Half::Bottom, false, true, true, ) => 19895,
                ( Facing::South, Half::Bottom, false, true, false, ) => 19896,
                ( Facing::South, Half::Bottom, false, false, true, ) => 19897,
                ( Facing::South, Half::Bottom, false, false, false, ) => 19898,
                ( Facing::West, Half::Top, true, true, true, ) => 19899,
                ( Facing::West, Half::Top, true, true, false, ) => 19900,
                ( Facing::West, Half::Top, true, false, true, ) => 19901,
                ( Facing::West, Half::Top, true, false, false, ) => 19902,
                ( Facing::West, Half::Top, false, true, true, ) => 19903,
                ( Facing::West, Half::Top, false, true, false, ) => 19904,
                ( Facing::West, Half::Top, false, false, true, ) => 19905,
                ( Facing::West, Half::Top, false, false, false, ) => 19906,
                ( Facing::West, Half::Bottom, true, true, true, ) => 19907,
                ( Facing::West, Half::Bottom, true, true, false, ) => 19908,
                ( Facing::West, Half::Bottom, true, false, true, ) => 19909,
                ( Facing::West, Half::Bottom, true, false, false, ) => 19910,
                ( Facing::West, Half::Bottom, false, true, true, ) => 19911,
                ( Facing::West, Half::Bottom, false, true, false, ) => 19912,
                ( Facing::West, Half::Bottom, false, false, true, ) => 19913,
                ( Facing::West, Half::Bottom, false, false, false, ) => 19914,
                ( Facing::East, Half::Top, true, true, true, ) => 19915,
                ( Facing::East, Half::Top, true, true, false, ) => 19916,
                ( Facing::East, Half::Top, true, false, true, ) => 19917,
                ( Facing::East, Half::Top, true, false, false, ) => 19918,
                ( Facing::East, Half::Top, false, true, true, ) => 19919,
                ( Facing::East, Half::Top, false, true, false, ) => 19920,
                ( Facing::East, Half::Top, false, false, true, ) => 19921,
                ( Facing::East, Half::Top, false, false, false, ) => 19922,
                ( Facing::East, Half::Bottom, true, true, true, ) => 19923,
                ( Facing::East, Half::Bottom, true, true, false, ) => 19924,
                ( Facing::East, Half::Bottom, true, false, true, ) => 19925,
                ( Facing::East, Half::Bottom, true, false, false, ) => 19926,
                ( Facing::East, Half::Bottom, false, true, true, ) => 19927,
                ( Facing::East, Half::Bottom, false, true, false, ) => 19928,
                ( Facing::East, Half::Bottom, false, false, true, ) => 19929,
                ( Facing::East, Half::Bottom, false, false, false, ) => 19930,
            })
        }
    }

    impl From<WarpedTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : WarpedTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedTrapdoor { }

    impl Block for WarpedTrapdoor {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            half : Half::Bottom,
            open : false,
            powered : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:rail` block.
pub mod rail {
    use super::*;

    /// `minecraft:rail` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Rail {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `north_south` variant.
        NorthSouth,
        /// `east_west` variant.
        EastWest,
        /// `ascending_east` variant.
        AscendingEast,
        /// `ascending_west` variant.
        AscendingWest,
        /// `ascending_north` variant.
        AscendingNorth,
        /// `ascending_south` variant.
        AscendingSouth,
        /// `south_east` variant.
        SouthEast,
        /// `south_west` variant.
        SouthWest,
        /// `north_west` variant.
        NorthWest,
        /// `north_east` variant.
        NorthEast,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl Rail {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.shape, )) {
                ( true, Shape::NorthSouth, ) => 4758,
                ( false, Shape::NorthSouth, ) => 4759,
                ( true, Shape::EastWest, ) => 4760,
                ( false, Shape::EastWest, ) => 4761,
                ( true, Shape::AscendingEast, ) => 4762,
                ( false, Shape::AscendingEast, ) => 4763,
                ( true, Shape::AscendingWest, ) => 4764,
                ( false, Shape::AscendingWest, ) => 4765,
                ( true, Shape::AscendingNorth, ) => 4766,
                ( false, Shape::AscendingNorth, ) => 4767,
                ( true, Shape::AscendingSouth, ) => 4768,
                ( false, Shape::AscendingSouth, ) => 4769,
                ( true, Shape::SouthEast, ) => 4770,
                ( false, Shape::SouthEast, ) => 4771,
                ( true, Shape::SouthWest, ) => 4772,
                ( false, Shape::SouthWest, ) => 4773,
                ( true, Shape::NorthWest, ) => 4774,
                ( false, Shape::NorthWest, ) => 4775,
                ( true, Shape::NorthEast, ) => 4776,
                ( false, Shape::NorthEast, ) => 4777,
            })
        }
    }

    impl From<Rail> for BlockState {
        #[inline(always)]
        fn from(value : Rail) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Rail {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Rail { }

    impl Block for Rail {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            shape : Shape::NorthSouth,
        };
    }

}

/// `minecraft:jungle_wood` block.
pub mod jungle_wood {
    use super::*;

    /// `minecraft:jungle_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl JungleWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 210,
                ( Axis::Y, ) => 211,
                ( Axis::Z, ) => 212,
            })
        }
    }

    impl From<JungleWood> for BlockState {
        #[inline(always)]
        fn from(value : JungleWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleWood { }

    impl Block for JungleWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:tuff_wall` block.
pub mod tuff_wall {
    use super::*;

    /// `minecraft:tuff_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TuffWall {
        /// `north` state.
        pub north : North,
        /// `east` state.
        pub east : East,
        /// `west` state.
        pub west : West,
        /// `up` state.
        pub up : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `south` state.
        pub south : South,
    }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    impl TuffWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.east, self.west, self.up, self.waterlogged, self.south, )) {
                ( North::None, East::None, West::None, true, true, South::None, ) => 22228,
                ( North::None, East::None, West::Low, true, true, South::None, ) => 22229,
                ( North::None, East::None, West::Tall, true, true, South::None, ) => 22230,
                ( North::None, East::None, West::None, true, false, South::None, ) => 22231,
                ( North::None, East::None, West::Low, true, false, South::None, ) => 22232,
                ( North::None, East::None, West::Tall, true, false, South::None, ) => 22233,
                ( North::None, East::None, West::None, false, true, South::None, ) => 22234,
                ( North::None, East::None, West::Low, false, true, South::None, ) => 22235,
                ( North::None, East::None, West::Tall, false, true, South::None, ) => 22236,
                ( North::None, East::None, West::None, false, false, South::None, ) => 22237,
                ( North::None, East::None, West::Low, false, false, South::None, ) => 22238,
                ( North::None, East::None, West::Tall, false, false, South::None, ) => 22239,
                ( North::None, East::None, West::None, true, true, South::Low, ) => 22240,
                ( North::None, East::None, West::Low, true, true, South::Low, ) => 22241,
                ( North::None, East::None, West::Tall, true, true, South::Low, ) => 22242,
                ( North::None, East::None, West::None, true, false, South::Low, ) => 22243,
                ( North::None, East::None, West::Low, true, false, South::Low, ) => 22244,
                ( North::None, East::None, West::Tall, true, false, South::Low, ) => 22245,
                ( North::None, East::None, West::None, false, true, South::Low, ) => 22246,
                ( North::None, East::None, West::Low, false, true, South::Low, ) => 22247,
                ( North::None, East::None, West::Tall, false, true, South::Low, ) => 22248,
                ( North::None, East::None, West::None, false, false, South::Low, ) => 22249,
                ( North::None, East::None, West::Low, false, false, South::Low, ) => 22250,
                ( North::None, East::None, West::Tall, false, false, South::Low, ) => 22251,
                ( North::None, East::None, West::None, true, true, South::Tall, ) => 22252,
                ( North::None, East::None, West::Low, true, true, South::Tall, ) => 22253,
                ( North::None, East::None, West::Tall, true, true, South::Tall, ) => 22254,
                ( North::None, East::None, West::None, true, false, South::Tall, ) => 22255,
                ( North::None, East::None, West::Low, true, false, South::Tall, ) => 22256,
                ( North::None, East::None, West::Tall, true, false, South::Tall, ) => 22257,
                ( North::None, East::None, West::None, false, true, South::Tall, ) => 22258,
                ( North::None, East::None, West::Low, false, true, South::Tall, ) => 22259,
                ( North::None, East::None, West::Tall, false, true, South::Tall, ) => 22260,
                ( North::None, East::None, West::None, false, false, South::Tall, ) => 22261,
                ( North::None, East::None, West::Low, false, false, South::Tall, ) => 22262,
                ( North::None, East::None, West::Tall, false, false, South::Tall, ) => 22263,
                ( North::Low, East::None, West::None, true, true, South::None, ) => 22264,
                ( North::Low, East::None, West::Low, true, true, South::None, ) => 22265,
                ( North::Low, East::None, West::Tall, true, true, South::None, ) => 22266,
                ( North::Low, East::None, West::None, true, false, South::None, ) => 22267,
                ( North::Low, East::None, West::Low, true, false, South::None, ) => 22268,
                ( North::Low, East::None, West::Tall, true, false, South::None, ) => 22269,
                ( North::Low, East::None, West::None, false, true, South::None, ) => 22270,
                ( North::Low, East::None, West::Low, false, true, South::None, ) => 22271,
                ( North::Low, East::None, West::Tall, false, true, South::None, ) => 22272,
                ( North::Low, East::None, West::None, false, false, South::None, ) => 22273,
                ( North::Low, East::None, West::Low, false, false, South::None, ) => 22274,
                ( North::Low, East::None, West::Tall, false, false, South::None, ) => 22275,
                ( North::Low, East::None, West::None, true, true, South::Low, ) => 22276,
                ( North::Low, East::None, West::Low, true, true, South::Low, ) => 22277,
                ( North::Low, East::None, West::Tall, true, true, South::Low, ) => 22278,
                ( North::Low, East::None, West::None, true, false, South::Low, ) => 22279,
                ( North::Low, East::None, West::Low, true, false, South::Low, ) => 22280,
                ( North::Low, East::None, West::Tall, true, false, South::Low, ) => 22281,
                ( North::Low, East::None, West::None, false, true, South::Low, ) => 22282,
                ( North::Low, East::None, West::Low, false, true, South::Low, ) => 22283,
                ( North::Low, East::None, West::Tall, false, true, South::Low, ) => 22284,
                ( North::Low, East::None, West::None, false, false, South::Low, ) => 22285,
                ( North::Low, East::None, West::Low, false, false, South::Low, ) => 22286,
                ( North::Low, East::None, West::Tall, false, false, South::Low, ) => 22287,
                ( North::Low, East::None, West::None, true, true, South::Tall, ) => 22288,
                ( North::Low, East::None, West::Low, true, true, South::Tall, ) => 22289,
                ( North::Low, East::None, West::Tall, true, true, South::Tall, ) => 22290,
                ( North::Low, East::None, West::None, true, false, South::Tall, ) => 22291,
                ( North::Low, East::None, West::Low, true, false, South::Tall, ) => 22292,
                ( North::Low, East::None, West::Tall, true, false, South::Tall, ) => 22293,
                ( North::Low, East::None, West::None, false, true, South::Tall, ) => 22294,
                ( North::Low, East::None, West::Low, false, true, South::Tall, ) => 22295,
                ( North::Low, East::None, West::Tall, false, true, South::Tall, ) => 22296,
                ( North::Low, East::None, West::None, false, false, South::Tall, ) => 22297,
                ( North::Low, East::None, West::Low, false, false, South::Tall, ) => 22298,
                ( North::Low, East::None, West::Tall, false, false, South::Tall, ) => 22299,
                ( North::Tall, East::None, West::None, true, true, South::None, ) => 22300,
                ( North::Tall, East::None, West::Low, true, true, South::None, ) => 22301,
                ( North::Tall, East::None, West::Tall, true, true, South::None, ) => 22302,
                ( North::Tall, East::None, West::None, true, false, South::None, ) => 22303,
                ( North::Tall, East::None, West::Low, true, false, South::None, ) => 22304,
                ( North::Tall, East::None, West::Tall, true, false, South::None, ) => 22305,
                ( North::Tall, East::None, West::None, false, true, South::None, ) => 22306,
                ( North::Tall, East::None, West::Low, false, true, South::None, ) => 22307,
                ( North::Tall, East::None, West::Tall, false, true, South::None, ) => 22308,
                ( North::Tall, East::None, West::None, false, false, South::None, ) => 22309,
                ( North::Tall, East::None, West::Low, false, false, South::None, ) => 22310,
                ( North::Tall, East::None, West::Tall, false, false, South::None, ) => 22311,
                ( North::Tall, East::None, West::None, true, true, South::Low, ) => 22312,
                ( North::Tall, East::None, West::Low, true, true, South::Low, ) => 22313,
                ( North::Tall, East::None, West::Tall, true, true, South::Low, ) => 22314,
                ( North::Tall, East::None, West::None, true, false, South::Low, ) => 22315,
                ( North::Tall, East::None, West::Low, true, false, South::Low, ) => 22316,
                ( North::Tall, East::None, West::Tall, true, false, South::Low, ) => 22317,
                ( North::Tall, East::None, West::None, false, true, South::Low, ) => 22318,
                ( North::Tall, East::None, West::Low, false, true, South::Low, ) => 22319,
                ( North::Tall, East::None, West::Tall, false, true, South::Low, ) => 22320,
                ( North::Tall, East::None, West::None, false, false, South::Low, ) => 22321,
                ( North::Tall, East::None, West::Low, false, false, South::Low, ) => 22322,
                ( North::Tall, East::None, West::Tall, false, false, South::Low, ) => 22323,
                ( North::Tall, East::None, West::None, true, true, South::Tall, ) => 22324,
                ( North::Tall, East::None, West::Low, true, true, South::Tall, ) => 22325,
                ( North::Tall, East::None, West::Tall, true, true, South::Tall, ) => 22326,
                ( North::Tall, East::None, West::None, true, false, South::Tall, ) => 22327,
                ( North::Tall, East::None, West::Low, true, false, South::Tall, ) => 22328,
                ( North::Tall, East::None, West::Tall, true, false, South::Tall, ) => 22329,
                ( North::Tall, East::None, West::None, false, true, South::Tall, ) => 22330,
                ( North::Tall, East::None, West::Low, false, true, South::Tall, ) => 22331,
                ( North::Tall, East::None, West::Tall, false, true, South::Tall, ) => 22332,
                ( North::Tall, East::None, West::None, false, false, South::Tall, ) => 22333,
                ( North::Tall, East::None, West::Low, false, false, South::Tall, ) => 22334,
                ( North::Tall, East::None, West::Tall, false, false, South::Tall, ) => 22335,
                ( North::None, East::Low, West::None, true, true, South::None, ) => 22336,
                ( North::None, East::Low, West::Low, true, true, South::None, ) => 22337,
                ( North::None, East::Low, West::Tall, true, true, South::None, ) => 22338,
                ( North::None, East::Low, West::None, true, false, South::None, ) => 22339,
                ( North::None, East::Low, West::Low, true, false, South::None, ) => 22340,
                ( North::None, East::Low, West::Tall, true, false, South::None, ) => 22341,
                ( North::None, East::Low, West::None, false, true, South::None, ) => 22342,
                ( North::None, East::Low, West::Low, false, true, South::None, ) => 22343,
                ( North::None, East::Low, West::Tall, false, true, South::None, ) => 22344,
                ( North::None, East::Low, West::None, false, false, South::None, ) => 22345,
                ( North::None, East::Low, West::Low, false, false, South::None, ) => 22346,
                ( North::None, East::Low, West::Tall, false, false, South::None, ) => 22347,
                ( North::None, East::Low, West::None, true, true, South::Low, ) => 22348,
                ( North::None, East::Low, West::Low, true, true, South::Low, ) => 22349,
                ( North::None, East::Low, West::Tall, true, true, South::Low, ) => 22350,
                ( North::None, East::Low, West::None, true, false, South::Low, ) => 22351,
                ( North::None, East::Low, West::Low, true, false, South::Low, ) => 22352,
                ( North::None, East::Low, West::Tall, true, false, South::Low, ) => 22353,
                ( North::None, East::Low, West::None, false, true, South::Low, ) => 22354,
                ( North::None, East::Low, West::Low, false, true, South::Low, ) => 22355,
                ( North::None, East::Low, West::Tall, false, true, South::Low, ) => 22356,
                ( North::None, East::Low, West::None, false, false, South::Low, ) => 22357,
                ( North::None, East::Low, West::Low, false, false, South::Low, ) => 22358,
                ( North::None, East::Low, West::Tall, false, false, South::Low, ) => 22359,
                ( North::None, East::Low, West::None, true, true, South::Tall, ) => 22360,
                ( North::None, East::Low, West::Low, true, true, South::Tall, ) => 22361,
                ( North::None, East::Low, West::Tall, true, true, South::Tall, ) => 22362,
                ( North::None, East::Low, West::None, true, false, South::Tall, ) => 22363,
                ( North::None, East::Low, West::Low, true, false, South::Tall, ) => 22364,
                ( North::None, East::Low, West::Tall, true, false, South::Tall, ) => 22365,
                ( North::None, East::Low, West::None, false, true, South::Tall, ) => 22366,
                ( North::None, East::Low, West::Low, false, true, South::Tall, ) => 22367,
                ( North::None, East::Low, West::Tall, false, true, South::Tall, ) => 22368,
                ( North::None, East::Low, West::None, false, false, South::Tall, ) => 22369,
                ( North::None, East::Low, West::Low, false, false, South::Tall, ) => 22370,
                ( North::None, East::Low, West::Tall, false, false, South::Tall, ) => 22371,
                ( North::Low, East::Low, West::None, true, true, South::None, ) => 22372,
                ( North::Low, East::Low, West::Low, true, true, South::None, ) => 22373,
                ( North::Low, East::Low, West::Tall, true, true, South::None, ) => 22374,
                ( North::Low, East::Low, West::None, true, false, South::None, ) => 22375,
                ( North::Low, East::Low, West::Low, true, false, South::None, ) => 22376,
                ( North::Low, East::Low, West::Tall, true, false, South::None, ) => 22377,
                ( North::Low, East::Low, West::None, false, true, South::None, ) => 22378,
                ( North::Low, East::Low, West::Low, false, true, South::None, ) => 22379,
                ( North::Low, East::Low, West::Tall, false, true, South::None, ) => 22380,
                ( North::Low, East::Low, West::None, false, false, South::None, ) => 22381,
                ( North::Low, East::Low, West::Low, false, false, South::None, ) => 22382,
                ( North::Low, East::Low, West::Tall, false, false, South::None, ) => 22383,
                ( North::Low, East::Low, West::None, true, true, South::Low, ) => 22384,
                ( North::Low, East::Low, West::Low, true, true, South::Low, ) => 22385,
                ( North::Low, East::Low, West::Tall, true, true, South::Low, ) => 22386,
                ( North::Low, East::Low, West::None, true, false, South::Low, ) => 22387,
                ( North::Low, East::Low, West::Low, true, false, South::Low, ) => 22388,
                ( North::Low, East::Low, West::Tall, true, false, South::Low, ) => 22389,
                ( North::Low, East::Low, West::None, false, true, South::Low, ) => 22390,
                ( North::Low, East::Low, West::Low, false, true, South::Low, ) => 22391,
                ( North::Low, East::Low, West::Tall, false, true, South::Low, ) => 22392,
                ( North::Low, East::Low, West::None, false, false, South::Low, ) => 22393,
                ( North::Low, East::Low, West::Low, false, false, South::Low, ) => 22394,
                ( North::Low, East::Low, West::Tall, false, false, South::Low, ) => 22395,
                ( North::Low, East::Low, West::None, true, true, South::Tall, ) => 22396,
                ( North::Low, East::Low, West::Low, true, true, South::Tall, ) => 22397,
                ( North::Low, East::Low, West::Tall, true, true, South::Tall, ) => 22398,
                ( North::Low, East::Low, West::None, true, false, South::Tall, ) => 22399,
                ( North::Low, East::Low, West::Low, true, false, South::Tall, ) => 22400,
                ( North::Low, East::Low, West::Tall, true, false, South::Tall, ) => 22401,
                ( North::Low, East::Low, West::None, false, true, South::Tall, ) => 22402,
                ( North::Low, East::Low, West::Low, false, true, South::Tall, ) => 22403,
                ( North::Low, East::Low, West::Tall, false, true, South::Tall, ) => 22404,
                ( North::Low, East::Low, West::None, false, false, South::Tall, ) => 22405,
                ( North::Low, East::Low, West::Low, false, false, South::Tall, ) => 22406,
                ( North::Low, East::Low, West::Tall, false, false, South::Tall, ) => 22407,
                ( North::Tall, East::Low, West::None, true, true, South::None, ) => 22408,
                ( North::Tall, East::Low, West::Low, true, true, South::None, ) => 22409,
                ( North::Tall, East::Low, West::Tall, true, true, South::None, ) => 22410,
                ( North::Tall, East::Low, West::None, true, false, South::None, ) => 22411,
                ( North::Tall, East::Low, West::Low, true, false, South::None, ) => 22412,
                ( North::Tall, East::Low, West::Tall, true, false, South::None, ) => 22413,
                ( North::Tall, East::Low, West::None, false, true, South::None, ) => 22414,
                ( North::Tall, East::Low, West::Low, false, true, South::None, ) => 22415,
                ( North::Tall, East::Low, West::Tall, false, true, South::None, ) => 22416,
                ( North::Tall, East::Low, West::None, false, false, South::None, ) => 22417,
                ( North::Tall, East::Low, West::Low, false, false, South::None, ) => 22418,
                ( North::Tall, East::Low, West::Tall, false, false, South::None, ) => 22419,
                ( North::Tall, East::Low, West::None, true, true, South::Low, ) => 22420,
                ( North::Tall, East::Low, West::Low, true, true, South::Low, ) => 22421,
                ( North::Tall, East::Low, West::Tall, true, true, South::Low, ) => 22422,
                ( North::Tall, East::Low, West::None, true, false, South::Low, ) => 22423,
                ( North::Tall, East::Low, West::Low, true, false, South::Low, ) => 22424,
                ( North::Tall, East::Low, West::Tall, true, false, South::Low, ) => 22425,
                ( North::Tall, East::Low, West::None, false, true, South::Low, ) => 22426,
                ( North::Tall, East::Low, West::Low, false, true, South::Low, ) => 22427,
                ( North::Tall, East::Low, West::Tall, false, true, South::Low, ) => 22428,
                ( North::Tall, East::Low, West::None, false, false, South::Low, ) => 22429,
                ( North::Tall, East::Low, West::Low, false, false, South::Low, ) => 22430,
                ( North::Tall, East::Low, West::Tall, false, false, South::Low, ) => 22431,
                ( North::Tall, East::Low, West::None, true, true, South::Tall, ) => 22432,
                ( North::Tall, East::Low, West::Low, true, true, South::Tall, ) => 22433,
                ( North::Tall, East::Low, West::Tall, true, true, South::Tall, ) => 22434,
                ( North::Tall, East::Low, West::None, true, false, South::Tall, ) => 22435,
                ( North::Tall, East::Low, West::Low, true, false, South::Tall, ) => 22436,
                ( North::Tall, East::Low, West::Tall, true, false, South::Tall, ) => 22437,
                ( North::Tall, East::Low, West::None, false, true, South::Tall, ) => 22438,
                ( North::Tall, East::Low, West::Low, false, true, South::Tall, ) => 22439,
                ( North::Tall, East::Low, West::Tall, false, true, South::Tall, ) => 22440,
                ( North::Tall, East::Low, West::None, false, false, South::Tall, ) => 22441,
                ( North::Tall, East::Low, West::Low, false, false, South::Tall, ) => 22442,
                ( North::Tall, East::Low, West::Tall, false, false, South::Tall, ) => 22443,
                ( North::None, East::Tall, West::None, true, true, South::None, ) => 22444,
                ( North::None, East::Tall, West::Low, true, true, South::None, ) => 22445,
                ( North::None, East::Tall, West::Tall, true, true, South::None, ) => 22446,
                ( North::None, East::Tall, West::None, true, false, South::None, ) => 22447,
                ( North::None, East::Tall, West::Low, true, false, South::None, ) => 22448,
                ( North::None, East::Tall, West::Tall, true, false, South::None, ) => 22449,
                ( North::None, East::Tall, West::None, false, true, South::None, ) => 22450,
                ( North::None, East::Tall, West::Low, false, true, South::None, ) => 22451,
                ( North::None, East::Tall, West::Tall, false, true, South::None, ) => 22452,
                ( North::None, East::Tall, West::None, false, false, South::None, ) => 22453,
                ( North::None, East::Tall, West::Low, false, false, South::None, ) => 22454,
                ( North::None, East::Tall, West::Tall, false, false, South::None, ) => 22455,
                ( North::None, East::Tall, West::None, true, true, South::Low, ) => 22456,
                ( North::None, East::Tall, West::Low, true, true, South::Low, ) => 22457,
                ( North::None, East::Tall, West::Tall, true, true, South::Low, ) => 22458,
                ( North::None, East::Tall, West::None, true, false, South::Low, ) => 22459,
                ( North::None, East::Tall, West::Low, true, false, South::Low, ) => 22460,
                ( North::None, East::Tall, West::Tall, true, false, South::Low, ) => 22461,
                ( North::None, East::Tall, West::None, false, true, South::Low, ) => 22462,
                ( North::None, East::Tall, West::Low, false, true, South::Low, ) => 22463,
                ( North::None, East::Tall, West::Tall, false, true, South::Low, ) => 22464,
                ( North::None, East::Tall, West::None, false, false, South::Low, ) => 22465,
                ( North::None, East::Tall, West::Low, false, false, South::Low, ) => 22466,
                ( North::None, East::Tall, West::Tall, false, false, South::Low, ) => 22467,
                ( North::None, East::Tall, West::None, true, true, South::Tall, ) => 22468,
                ( North::None, East::Tall, West::Low, true, true, South::Tall, ) => 22469,
                ( North::None, East::Tall, West::Tall, true, true, South::Tall, ) => 22470,
                ( North::None, East::Tall, West::None, true, false, South::Tall, ) => 22471,
                ( North::None, East::Tall, West::Low, true, false, South::Tall, ) => 22472,
                ( North::None, East::Tall, West::Tall, true, false, South::Tall, ) => 22473,
                ( North::None, East::Tall, West::None, false, true, South::Tall, ) => 22474,
                ( North::None, East::Tall, West::Low, false, true, South::Tall, ) => 22475,
                ( North::None, East::Tall, West::Tall, false, true, South::Tall, ) => 22476,
                ( North::None, East::Tall, West::None, false, false, South::Tall, ) => 22477,
                ( North::None, East::Tall, West::Low, false, false, South::Tall, ) => 22478,
                ( North::None, East::Tall, West::Tall, false, false, South::Tall, ) => 22479,
                ( North::Low, East::Tall, West::None, true, true, South::None, ) => 22480,
                ( North::Low, East::Tall, West::Low, true, true, South::None, ) => 22481,
                ( North::Low, East::Tall, West::Tall, true, true, South::None, ) => 22482,
                ( North::Low, East::Tall, West::None, true, false, South::None, ) => 22483,
                ( North::Low, East::Tall, West::Low, true, false, South::None, ) => 22484,
                ( North::Low, East::Tall, West::Tall, true, false, South::None, ) => 22485,
                ( North::Low, East::Tall, West::None, false, true, South::None, ) => 22486,
                ( North::Low, East::Tall, West::Low, false, true, South::None, ) => 22487,
                ( North::Low, East::Tall, West::Tall, false, true, South::None, ) => 22488,
                ( North::Low, East::Tall, West::None, false, false, South::None, ) => 22489,
                ( North::Low, East::Tall, West::Low, false, false, South::None, ) => 22490,
                ( North::Low, East::Tall, West::Tall, false, false, South::None, ) => 22491,
                ( North::Low, East::Tall, West::None, true, true, South::Low, ) => 22492,
                ( North::Low, East::Tall, West::Low, true, true, South::Low, ) => 22493,
                ( North::Low, East::Tall, West::Tall, true, true, South::Low, ) => 22494,
                ( North::Low, East::Tall, West::None, true, false, South::Low, ) => 22495,
                ( North::Low, East::Tall, West::Low, true, false, South::Low, ) => 22496,
                ( North::Low, East::Tall, West::Tall, true, false, South::Low, ) => 22497,
                ( North::Low, East::Tall, West::None, false, true, South::Low, ) => 22498,
                ( North::Low, East::Tall, West::Low, false, true, South::Low, ) => 22499,
                ( North::Low, East::Tall, West::Tall, false, true, South::Low, ) => 22500,
                ( North::Low, East::Tall, West::None, false, false, South::Low, ) => 22501,
                ( North::Low, East::Tall, West::Low, false, false, South::Low, ) => 22502,
                ( North::Low, East::Tall, West::Tall, false, false, South::Low, ) => 22503,
                ( North::Low, East::Tall, West::None, true, true, South::Tall, ) => 22504,
                ( North::Low, East::Tall, West::Low, true, true, South::Tall, ) => 22505,
                ( North::Low, East::Tall, West::Tall, true, true, South::Tall, ) => 22506,
                ( North::Low, East::Tall, West::None, true, false, South::Tall, ) => 22507,
                ( North::Low, East::Tall, West::Low, true, false, South::Tall, ) => 22508,
                ( North::Low, East::Tall, West::Tall, true, false, South::Tall, ) => 22509,
                ( North::Low, East::Tall, West::None, false, true, South::Tall, ) => 22510,
                ( North::Low, East::Tall, West::Low, false, true, South::Tall, ) => 22511,
                ( North::Low, East::Tall, West::Tall, false, true, South::Tall, ) => 22512,
                ( North::Low, East::Tall, West::None, false, false, South::Tall, ) => 22513,
                ( North::Low, East::Tall, West::Low, false, false, South::Tall, ) => 22514,
                ( North::Low, East::Tall, West::Tall, false, false, South::Tall, ) => 22515,
                ( North::Tall, East::Tall, West::None, true, true, South::None, ) => 22516,
                ( North::Tall, East::Tall, West::Low, true, true, South::None, ) => 22517,
                ( North::Tall, East::Tall, West::Tall, true, true, South::None, ) => 22518,
                ( North::Tall, East::Tall, West::None, true, false, South::None, ) => 22519,
                ( North::Tall, East::Tall, West::Low, true, false, South::None, ) => 22520,
                ( North::Tall, East::Tall, West::Tall, true, false, South::None, ) => 22521,
                ( North::Tall, East::Tall, West::None, false, true, South::None, ) => 22522,
                ( North::Tall, East::Tall, West::Low, false, true, South::None, ) => 22523,
                ( North::Tall, East::Tall, West::Tall, false, true, South::None, ) => 22524,
                ( North::Tall, East::Tall, West::None, false, false, South::None, ) => 22525,
                ( North::Tall, East::Tall, West::Low, false, false, South::None, ) => 22526,
                ( North::Tall, East::Tall, West::Tall, false, false, South::None, ) => 22527,
                ( North::Tall, East::Tall, West::None, true, true, South::Low, ) => 22528,
                ( North::Tall, East::Tall, West::Low, true, true, South::Low, ) => 22529,
                ( North::Tall, East::Tall, West::Tall, true, true, South::Low, ) => 22530,
                ( North::Tall, East::Tall, West::None, true, false, South::Low, ) => 22531,
                ( North::Tall, East::Tall, West::Low, true, false, South::Low, ) => 22532,
                ( North::Tall, East::Tall, West::Tall, true, false, South::Low, ) => 22533,
                ( North::Tall, East::Tall, West::None, false, true, South::Low, ) => 22534,
                ( North::Tall, East::Tall, West::Low, false, true, South::Low, ) => 22535,
                ( North::Tall, East::Tall, West::Tall, false, true, South::Low, ) => 22536,
                ( North::Tall, East::Tall, West::None, false, false, South::Low, ) => 22537,
                ( North::Tall, East::Tall, West::Low, false, false, South::Low, ) => 22538,
                ( North::Tall, East::Tall, West::Tall, false, false, South::Low, ) => 22539,
                ( North::Tall, East::Tall, West::None, true, true, South::Tall, ) => 22540,
                ( North::Tall, East::Tall, West::Low, true, true, South::Tall, ) => 22541,
                ( North::Tall, East::Tall, West::Tall, true, true, South::Tall, ) => 22542,
                ( North::Tall, East::Tall, West::None, true, false, South::Tall, ) => 22543,
                ( North::Tall, East::Tall, West::Low, true, false, South::Tall, ) => 22544,
                ( North::Tall, East::Tall, West::Tall, true, false, South::Tall, ) => 22545,
                ( North::Tall, East::Tall, West::None, false, true, South::Tall, ) => 22546,
                ( North::Tall, East::Tall, West::Low, false, true, South::Tall, ) => 22547,
                ( North::Tall, East::Tall, West::Tall, false, true, South::Tall, ) => 22548,
                ( North::Tall, East::Tall, West::None, false, false, South::Tall, ) => 22549,
                ( North::Tall, East::Tall, West::Low, false, false, South::Tall, ) => 22550,
                ( North::Tall, East::Tall, West::Tall, false, false, South::Tall, ) => 22551,
            })
        }
    }

    impl From<TuffWall> for BlockState {
        #[inline(always)]
        fn from(value : TuffWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TuffWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TuffWall { }

    impl Block for TuffWall {
        const DEFAULT_STATE : Self = Self {
            north : North::None,
            east : East::None,
            west : West::None,
            up : true,
            waterlogged : false,
            south : South::None,
        };
    }

}

/// `minecraft:stone_pressure_plate` block.
pub mod stone_pressure_plate {
    use super::*;

    /// `minecraft:stone_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StonePressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl StonePressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 5826,
                ( false, ) => 5827,
            })
        }
    }

    impl From<StonePressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : StonePressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StonePressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StonePressurePlate { }

    impl Block for StonePressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:cut_sandstone_slab` block.
pub mod cut_sandstone_slab {
    use super::*;

    /// `minecraft:cut_sandstone_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CutSandstoneSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl CutSandstoneSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 12135,
                ( Kind::Top, false, ) => 12136,
                ( Kind::Bottom, true, ) => 12137,
                ( Kind::Bottom, false, ) => 12138,
                ( Kind::Double, true, ) => 12139,
                ( Kind::Double, false, ) => 12140,
            })
        }
    }

    impl From<CutSandstoneSlab> for BlockState {
        #[inline(always)]
        fn from(value : CutSandstoneSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CutSandstoneSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CutSandstoneSlab { }

    impl Block for CutSandstoneSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:fire` block.
pub mod fire {
    use super::*;

    /// `minecraft:fire` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Fire {
        /// `east` state.
        pub east : bool,
        /// `age` state.
        pub age : Age,
        /// `south` state.
        pub south : bool,
        /// `north` state.
        pub north : bool,
        /// `up` state.
        pub up : bool,
        /// `west` state.
        pub west : bool,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl Fire {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.age, self.south, self.north, self.up, self.west, )) {
                ( true, Age::N0, true, true, true, true, ) => 2406,
                ( true, Age::N0, true, true, true, false, ) => 2407,
                ( true, Age::N0, true, true, false, true, ) => 2408,
                ( true, Age::N0, true, true, false, false, ) => 2409,
                ( true, Age::N0, false, true, true, true, ) => 2410,
                ( true, Age::N0, false, true, true, false, ) => 2411,
                ( true, Age::N0, false, true, false, true, ) => 2412,
                ( true, Age::N0, false, true, false, false, ) => 2413,
                ( true, Age::N0, true, false, true, true, ) => 2414,
                ( true, Age::N0, true, false, true, false, ) => 2415,
                ( true, Age::N0, true, false, false, true, ) => 2416,
                ( true, Age::N0, true, false, false, false, ) => 2417,
                ( true, Age::N0, false, false, true, true, ) => 2418,
                ( true, Age::N0, false, false, true, false, ) => 2419,
                ( true, Age::N0, false, false, false, true, ) => 2420,
                ( true, Age::N0, false, false, false, false, ) => 2421,
                ( false, Age::N0, true, true, true, true, ) => 2422,
                ( false, Age::N0, true, true, true, false, ) => 2423,
                ( false, Age::N0, true, true, false, true, ) => 2424,
                ( false, Age::N0, true, true, false, false, ) => 2425,
                ( false, Age::N0, false, true, true, true, ) => 2426,
                ( false, Age::N0, false, true, true, false, ) => 2427,
                ( false, Age::N0, false, true, false, true, ) => 2428,
                ( false, Age::N0, false, true, false, false, ) => 2429,
                ( false, Age::N0, true, false, true, true, ) => 2430,
                ( false, Age::N0, true, false, true, false, ) => 2431,
                ( false, Age::N0, true, false, false, true, ) => 2432,
                ( false, Age::N0, true, false, false, false, ) => 2433,
                ( false, Age::N0, false, false, true, true, ) => 2434,
                ( false, Age::N0, false, false, true, false, ) => 2435,
                ( false, Age::N0, false, false, false, true, ) => 2436,
                ( false, Age::N0, false, false, false, false, ) => 2437,
                ( true, Age::N1, true, true, true, true, ) => 2438,
                ( true, Age::N1, true, true, true, false, ) => 2439,
                ( true, Age::N1, true, true, false, true, ) => 2440,
                ( true, Age::N1, true, true, false, false, ) => 2441,
                ( true, Age::N1, false, true, true, true, ) => 2442,
                ( true, Age::N1, false, true, true, false, ) => 2443,
                ( true, Age::N1, false, true, false, true, ) => 2444,
                ( true, Age::N1, false, true, false, false, ) => 2445,
                ( true, Age::N1, true, false, true, true, ) => 2446,
                ( true, Age::N1, true, false, true, false, ) => 2447,
                ( true, Age::N1, true, false, false, true, ) => 2448,
                ( true, Age::N1, true, false, false, false, ) => 2449,
                ( true, Age::N1, false, false, true, true, ) => 2450,
                ( true, Age::N1, false, false, true, false, ) => 2451,
                ( true, Age::N1, false, false, false, true, ) => 2452,
                ( true, Age::N1, false, false, false, false, ) => 2453,
                ( false, Age::N1, true, true, true, true, ) => 2454,
                ( false, Age::N1, true, true, true, false, ) => 2455,
                ( false, Age::N1, true, true, false, true, ) => 2456,
                ( false, Age::N1, true, true, false, false, ) => 2457,
                ( false, Age::N1, false, true, true, true, ) => 2458,
                ( false, Age::N1, false, true, true, false, ) => 2459,
                ( false, Age::N1, false, true, false, true, ) => 2460,
                ( false, Age::N1, false, true, false, false, ) => 2461,
                ( false, Age::N1, true, false, true, true, ) => 2462,
                ( false, Age::N1, true, false, true, false, ) => 2463,
                ( false, Age::N1, true, false, false, true, ) => 2464,
                ( false, Age::N1, true, false, false, false, ) => 2465,
                ( false, Age::N1, false, false, true, true, ) => 2466,
                ( false, Age::N1, false, false, true, false, ) => 2467,
                ( false, Age::N1, false, false, false, true, ) => 2468,
                ( false, Age::N1, false, false, false, false, ) => 2469,
                ( true, Age::N2, true, true, true, true, ) => 2470,
                ( true, Age::N2, true, true, true, false, ) => 2471,
                ( true, Age::N2, true, true, false, true, ) => 2472,
                ( true, Age::N2, true, true, false, false, ) => 2473,
                ( true, Age::N2, false, true, true, true, ) => 2474,
                ( true, Age::N2, false, true, true, false, ) => 2475,
                ( true, Age::N2, false, true, false, true, ) => 2476,
                ( true, Age::N2, false, true, false, false, ) => 2477,
                ( true, Age::N2, true, false, true, true, ) => 2478,
                ( true, Age::N2, true, false, true, false, ) => 2479,
                ( true, Age::N2, true, false, false, true, ) => 2480,
                ( true, Age::N2, true, false, false, false, ) => 2481,
                ( true, Age::N2, false, false, true, true, ) => 2482,
                ( true, Age::N2, false, false, true, false, ) => 2483,
                ( true, Age::N2, false, false, false, true, ) => 2484,
                ( true, Age::N2, false, false, false, false, ) => 2485,
                ( false, Age::N2, true, true, true, true, ) => 2486,
                ( false, Age::N2, true, true, true, false, ) => 2487,
                ( false, Age::N2, true, true, false, true, ) => 2488,
                ( false, Age::N2, true, true, false, false, ) => 2489,
                ( false, Age::N2, false, true, true, true, ) => 2490,
                ( false, Age::N2, false, true, true, false, ) => 2491,
                ( false, Age::N2, false, true, false, true, ) => 2492,
                ( false, Age::N2, false, true, false, false, ) => 2493,
                ( false, Age::N2, true, false, true, true, ) => 2494,
                ( false, Age::N2, true, false, true, false, ) => 2495,
                ( false, Age::N2, true, false, false, true, ) => 2496,
                ( false, Age::N2, true, false, false, false, ) => 2497,
                ( false, Age::N2, false, false, true, true, ) => 2498,
                ( false, Age::N2, false, false, true, false, ) => 2499,
                ( false, Age::N2, false, false, false, true, ) => 2500,
                ( false, Age::N2, false, false, false, false, ) => 2501,
                ( true, Age::N3, true, true, true, true, ) => 2502,
                ( true, Age::N3, true, true, true, false, ) => 2503,
                ( true, Age::N3, true, true, false, true, ) => 2504,
                ( true, Age::N3, true, true, false, false, ) => 2505,
                ( true, Age::N3, false, true, true, true, ) => 2506,
                ( true, Age::N3, false, true, true, false, ) => 2507,
                ( true, Age::N3, false, true, false, true, ) => 2508,
                ( true, Age::N3, false, true, false, false, ) => 2509,
                ( true, Age::N3, true, false, true, true, ) => 2510,
                ( true, Age::N3, true, false, true, false, ) => 2511,
                ( true, Age::N3, true, false, false, true, ) => 2512,
                ( true, Age::N3, true, false, false, false, ) => 2513,
                ( true, Age::N3, false, false, true, true, ) => 2514,
                ( true, Age::N3, false, false, true, false, ) => 2515,
                ( true, Age::N3, false, false, false, true, ) => 2516,
                ( true, Age::N3, false, false, false, false, ) => 2517,
                ( false, Age::N3, true, true, true, true, ) => 2518,
                ( false, Age::N3, true, true, true, false, ) => 2519,
                ( false, Age::N3, true, true, false, true, ) => 2520,
                ( false, Age::N3, true, true, false, false, ) => 2521,
                ( false, Age::N3, false, true, true, true, ) => 2522,
                ( false, Age::N3, false, true, true, false, ) => 2523,
                ( false, Age::N3, false, true, false, true, ) => 2524,
                ( false, Age::N3, false, true, false, false, ) => 2525,
                ( false, Age::N3, true, false, true, true, ) => 2526,
                ( false, Age::N3, true, false, true, false, ) => 2527,
                ( false, Age::N3, true, false, false, true, ) => 2528,
                ( false, Age::N3, true, false, false, false, ) => 2529,
                ( false, Age::N3, false, false, true, true, ) => 2530,
                ( false, Age::N3, false, false, true, false, ) => 2531,
                ( false, Age::N3, false, false, false, true, ) => 2532,
                ( false, Age::N3, false, false, false, false, ) => 2533,
                ( true, Age::N4, true, true, true, true, ) => 2534,
                ( true, Age::N4, true, true, true, false, ) => 2535,
                ( true, Age::N4, true, true, false, true, ) => 2536,
                ( true, Age::N4, true, true, false, false, ) => 2537,
                ( true, Age::N4, false, true, true, true, ) => 2538,
                ( true, Age::N4, false, true, true, false, ) => 2539,
                ( true, Age::N4, false, true, false, true, ) => 2540,
                ( true, Age::N4, false, true, false, false, ) => 2541,
                ( true, Age::N4, true, false, true, true, ) => 2542,
                ( true, Age::N4, true, false, true, false, ) => 2543,
                ( true, Age::N4, true, false, false, true, ) => 2544,
                ( true, Age::N4, true, false, false, false, ) => 2545,
                ( true, Age::N4, false, false, true, true, ) => 2546,
                ( true, Age::N4, false, false, true, false, ) => 2547,
                ( true, Age::N4, false, false, false, true, ) => 2548,
                ( true, Age::N4, false, false, false, false, ) => 2549,
                ( false, Age::N4, true, true, true, true, ) => 2550,
                ( false, Age::N4, true, true, true, false, ) => 2551,
                ( false, Age::N4, true, true, false, true, ) => 2552,
                ( false, Age::N4, true, true, false, false, ) => 2553,
                ( false, Age::N4, false, true, true, true, ) => 2554,
                ( false, Age::N4, false, true, true, false, ) => 2555,
                ( false, Age::N4, false, true, false, true, ) => 2556,
                ( false, Age::N4, false, true, false, false, ) => 2557,
                ( false, Age::N4, true, false, true, true, ) => 2558,
                ( false, Age::N4, true, false, true, false, ) => 2559,
                ( false, Age::N4, true, false, false, true, ) => 2560,
                ( false, Age::N4, true, false, false, false, ) => 2561,
                ( false, Age::N4, false, false, true, true, ) => 2562,
                ( false, Age::N4, false, false, true, false, ) => 2563,
                ( false, Age::N4, false, false, false, true, ) => 2564,
                ( false, Age::N4, false, false, false, false, ) => 2565,
                ( true, Age::N5, true, true, true, true, ) => 2566,
                ( true, Age::N5, true, true, true, false, ) => 2567,
                ( true, Age::N5, true, true, false, true, ) => 2568,
                ( true, Age::N5, true, true, false, false, ) => 2569,
                ( true, Age::N5, false, true, true, true, ) => 2570,
                ( true, Age::N5, false, true, true, false, ) => 2571,
                ( true, Age::N5, false, true, false, true, ) => 2572,
                ( true, Age::N5, false, true, false, false, ) => 2573,
                ( true, Age::N5, true, false, true, true, ) => 2574,
                ( true, Age::N5, true, false, true, false, ) => 2575,
                ( true, Age::N5, true, false, false, true, ) => 2576,
                ( true, Age::N5, true, false, false, false, ) => 2577,
                ( true, Age::N5, false, false, true, true, ) => 2578,
                ( true, Age::N5, false, false, true, false, ) => 2579,
                ( true, Age::N5, false, false, false, true, ) => 2580,
                ( true, Age::N5, false, false, false, false, ) => 2581,
                ( false, Age::N5, true, true, true, true, ) => 2582,
                ( false, Age::N5, true, true, true, false, ) => 2583,
                ( false, Age::N5, true, true, false, true, ) => 2584,
                ( false, Age::N5, true, true, false, false, ) => 2585,
                ( false, Age::N5, false, true, true, true, ) => 2586,
                ( false, Age::N5, false, true, true, false, ) => 2587,
                ( false, Age::N5, false, true, false, true, ) => 2588,
                ( false, Age::N5, false, true, false, false, ) => 2589,
                ( false, Age::N5, true, false, true, true, ) => 2590,
                ( false, Age::N5, true, false, true, false, ) => 2591,
                ( false, Age::N5, true, false, false, true, ) => 2592,
                ( false, Age::N5, true, false, false, false, ) => 2593,
                ( false, Age::N5, false, false, true, true, ) => 2594,
                ( false, Age::N5, false, false, true, false, ) => 2595,
                ( false, Age::N5, false, false, false, true, ) => 2596,
                ( false, Age::N5, false, false, false, false, ) => 2597,
                ( true, Age::N6, true, true, true, true, ) => 2598,
                ( true, Age::N6, true, true, true, false, ) => 2599,
                ( true, Age::N6, true, true, false, true, ) => 2600,
                ( true, Age::N6, true, true, false, false, ) => 2601,
                ( true, Age::N6, false, true, true, true, ) => 2602,
                ( true, Age::N6, false, true, true, false, ) => 2603,
                ( true, Age::N6, false, true, false, true, ) => 2604,
                ( true, Age::N6, false, true, false, false, ) => 2605,
                ( true, Age::N6, true, false, true, true, ) => 2606,
                ( true, Age::N6, true, false, true, false, ) => 2607,
                ( true, Age::N6, true, false, false, true, ) => 2608,
                ( true, Age::N6, true, false, false, false, ) => 2609,
                ( true, Age::N6, false, false, true, true, ) => 2610,
                ( true, Age::N6, false, false, true, false, ) => 2611,
                ( true, Age::N6, false, false, false, true, ) => 2612,
                ( true, Age::N6, false, false, false, false, ) => 2613,
                ( false, Age::N6, true, true, true, true, ) => 2614,
                ( false, Age::N6, true, true, true, false, ) => 2615,
                ( false, Age::N6, true, true, false, true, ) => 2616,
                ( false, Age::N6, true, true, false, false, ) => 2617,
                ( false, Age::N6, false, true, true, true, ) => 2618,
                ( false, Age::N6, false, true, true, false, ) => 2619,
                ( false, Age::N6, false, true, false, true, ) => 2620,
                ( false, Age::N6, false, true, false, false, ) => 2621,
                ( false, Age::N6, true, false, true, true, ) => 2622,
                ( false, Age::N6, true, false, true, false, ) => 2623,
                ( false, Age::N6, true, false, false, true, ) => 2624,
                ( false, Age::N6, true, false, false, false, ) => 2625,
                ( false, Age::N6, false, false, true, true, ) => 2626,
                ( false, Age::N6, false, false, true, false, ) => 2627,
                ( false, Age::N6, false, false, false, true, ) => 2628,
                ( false, Age::N6, false, false, false, false, ) => 2629,
                ( true, Age::N7, true, true, true, true, ) => 2630,
                ( true, Age::N7, true, true, true, false, ) => 2631,
                ( true, Age::N7, true, true, false, true, ) => 2632,
                ( true, Age::N7, true, true, false, false, ) => 2633,
                ( true, Age::N7, false, true, true, true, ) => 2634,
                ( true, Age::N7, false, true, true, false, ) => 2635,
                ( true, Age::N7, false, true, false, true, ) => 2636,
                ( true, Age::N7, false, true, false, false, ) => 2637,
                ( true, Age::N7, true, false, true, true, ) => 2638,
                ( true, Age::N7, true, false, true, false, ) => 2639,
                ( true, Age::N7, true, false, false, true, ) => 2640,
                ( true, Age::N7, true, false, false, false, ) => 2641,
                ( true, Age::N7, false, false, true, true, ) => 2642,
                ( true, Age::N7, false, false, true, false, ) => 2643,
                ( true, Age::N7, false, false, false, true, ) => 2644,
                ( true, Age::N7, false, false, false, false, ) => 2645,
                ( false, Age::N7, true, true, true, true, ) => 2646,
                ( false, Age::N7, true, true, true, false, ) => 2647,
                ( false, Age::N7, true, true, false, true, ) => 2648,
                ( false, Age::N7, true, true, false, false, ) => 2649,
                ( false, Age::N7, false, true, true, true, ) => 2650,
                ( false, Age::N7, false, true, true, false, ) => 2651,
                ( false, Age::N7, false, true, false, true, ) => 2652,
                ( false, Age::N7, false, true, false, false, ) => 2653,
                ( false, Age::N7, true, false, true, true, ) => 2654,
                ( false, Age::N7, true, false, true, false, ) => 2655,
                ( false, Age::N7, true, false, false, true, ) => 2656,
                ( false, Age::N7, true, false, false, false, ) => 2657,
                ( false, Age::N7, false, false, true, true, ) => 2658,
                ( false, Age::N7, false, false, true, false, ) => 2659,
                ( false, Age::N7, false, false, false, true, ) => 2660,
                ( false, Age::N7, false, false, false, false, ) => 2661,
                ( true, Age::N8, true, true, true, true, ) => 2662,
                ( true, Age::N8, true, true, true, false, ) => 2663,
                ( true, Age::N8, true, true, false, true, ) => 2664,
                ( true, Age::N8, true, true, false, false, ) => 2665,
                ( true, Age::N8, false, true, true, true, ) => 2666,
                ( true, Age::N8, false, true, true, false, ) => 2667,
                ( true, Age::N8, false, true, false, true, ) => 2668,
                ( true, Age::N8, false, true, false, false, ) => 2669,
                ( true, Age::N8, true, false, true, true, ) => 2670,
                ( true, Age::N8, true, false, true, false, ) => 2671,
                ( true, Age::N8, true, false, false, true, ) => 2672,
                ( true, Age::N8, true, false, false, false, ) => 2673,
                ( true, Age::N8, false, false, true, true, ) => 2674,
                ( true, Age::N8, false, false, true, false, ) => 2675,
                ( true, Age::N8, false, false, false, true, ) => 2676,
                ( true, Age::N8, false, false, false, false, ) => 2677,
                ( false, Age::N8, true, true, true, true, ) => 2678,
                ( false, Age::N8, true, true, true, false, ) => 2679,
                ( false, Age::N8, true, true, false, true, ) => 2680,
                ( false, Age::N8, true, true, false, false, ) => 2681,
                ( false, Age::N8, false, true, true, true, ) => 2682,
                ( false, Age::N8, false, true, true, false, ) => 2683,
                ( false, Age::N8, false, true, false, true, ) => 2684,
                ( false, Age::N8, false, true, false, false, ) => 2685,
                ( false, Age::N8, true, false, true, true, ) => 2686,
                ( false, Age::N8, true, false, true, false, ) => 2687,
                ( false, Age::N8, true, false, false, true, ) => 2688,
                ( false, Age::N8, true, false, false, false, ) => 2689,
                ( false, Age::N8, false, false, true, true, ) => 2690,
                ( false, Age::N8, false, false, true, false, ) => 2691,
                ( false, Age::N8, false, false, false, true, ) => 2692,
                ( false, Age::N8, false, false, false, false, ) => 2693,
                ( true, Age::N9, true, true, true, true, ) => 2694,
                ( true, Age::N9, true, true, true, false, ) => 2695,
                ( true, Age::N9, true, true, false, true, ) => 2696,
                ( true, Age::N9, true, true, false, false, ) => 2697,
                ( true, Age::N9, false, true, true, true, ) => 2698,
                ( true, Age::N9, false, true, true, false, ) => 2699,
                ( true, Age::N9, false, true, false, true, ) => 2700,
                ( true, Age::N9, false, true, false, false, ) => 2701,
                ( true, Age::N9, true, false, true, true, ) => 2702,
                ( true, Age::N9, true, false, true, false, ) => 2703,
                ( true, Age::N9, true, false, false, true, ) => 2704,
                ( true, Age::N9, true, false, false, false, ) => 2705,
                ( true, Age::N9, false, false, true, true, ) => 2706,
                ( true, Age::N9, false, false, true, false, ) => 2707,
                ( true, Age::N9, false, false, false, true, ) => 2708,
                ( true, Age::N9, false, false, false, false, ) => 2709,
                ( false, Age::N9, true, true, true, true, ) => 2710,
                ( false, Age::N9, true, true, true, false, ) => 2711,
                ( false, Age::N9, true, true, false, true, ) => 2712,
                ( false, Age::N9, true, true, false, false, ) => 2713,
                ( false, Age::N9, false, true, true, true, ) => 2714,
                ( false, Age::N9, false, true, true, false, ) => 2715,
                ( false, Age::N9, false, true, false, true, ) => 2716,
                ( false, Age::N9, false, true, false, false, ) => 2717,
                ( false, Age::N9, true, false, true, true, ) => 2718,
                ( false, Age::N9, true, false, true, false, ) => 2719,
                ( false, Age::N9, true, false, false, true, ) => 2720,
                ( false, Age::N9, true, false, false, false, ) => 2721,
                ( false, Age::N9, false, false, true, true, ) => 2722,
                ( false, Age::N9, false, false, true, false, ) => 2723,
                ( false, Age::N9, false, false, false, true, ) => 2724,
                ( false, Age::N9, false, false, false, false, ) => 2725,
                ( true, Age::N10, true, true, true, true, ) => 2726,
                ( true, Age::N10, true, true, true, false, ) => 2727,
                ( true, Age::N10, true, true, false, true, ) => 2728,
                ( true, Age::N10, true, true, false, false, ) => 2729,
                ( true, Age::N10, false, true, true, true, ) => 2730,
                ( true, Age::N10, false, true, true, false, ) => 2731,
                ( true, Age::N10, false, true, false, true, ) => 2732,
                ( true, Age::N10, false, true, false, false, ) => 2733,
                ( true, Age::N10, true, false, true, true, ) => 2734,
                ( true, Age::N10, true, false, true, false, ) => 2735,
                ( true, Age::N10, true, false, false, true, ) => 2736,
                ( true, Age::N10, true, false, false, false, ) => 2737,
                ( true, Age::N10, false, false, true, true, ) => 2738,
                ( true, Age::N10, false, false, true, false, ) => 2739,
                ( true, Age::N10, false, false, false, true, ) => 2740,
                ( true, Age::N10, false, false, false, false, ) => 2741,
                ( false, Age::N10, true, true, true, true, ) => 2742,
                ( false, Age::N10, true, true, true, false, ) => 2743,
                ( false, Age::N10, true, true, false, true, ) => 2744,
                ( false, Age::N10, true, true, false, false, ) => 2745,
                ( false, Age::N10, false, true, true, true, ) => 2746,
                ( false, Age::N10, false, true, true, false, ) => 2747,
                ( false, Age::N10, false, true, false, true, ) => 2748,
                ( false, Age::N10, false, true, false, false, ) => 2749,
                ( false, Age::N10, true, false, true, true, ) => 2750,
                ( false, Age::N10, true, false, true, false, ) => 2751,
                ( false, Age::N10, true, false, false, true, ) => 2752,
                ( false, Age::N10, true, false, false, false, ) => 2753,
                ( false, Age::N10, false, false, true, true, ) => 2754,
                ( false, Age::N10, false, false, true, false, ) => 2755,
                ( false, Age::N10, false, false, false, true, ) => 2756,
                ( false, Age::N10, false, false, false, false, ) => 2757,
                ( true, Age::N11, true, true, true, true, ) => 2758,
                ( true, Age::N11, true, true, true, false, ) => 2759,
                ( true, Age::N11, true, true, false, true, ) => 2760,
                ( true, Age::N11, true, true, false, false, ) => 2761,
                ( true, Age::N11, false, true, true, true, ) => 2762,
                ( true, Age::N11, false, true, true, false, ) => 2763,
                ( true, Age::N11, false, true, false, true, ) => 2764,
                ( true, Age::N11, false, true, false, false, ) => 2765,
                ( true, Age::N11, true, false, true, true, ) => 2766,
                ( true, Age::N11, true, false, true, false, ) => 2767,
                ( true, Age::N11, true, false, false, true, ) => 2768,
                ( true, Age::N11, true, false, false, false, ) => 2769,
                ( true, Age::N11, false, false, true, true, ) => 2770,
                ( true, Age::N11, false, false, true, false, ) => 2771,
                ( true, Age::N11, false, false, false, true, ) => 2772,
                ( true, Age::N11, false, false, false, false, ) => 2773,
                ( false, Age::N11, true, true, true, true, ) => 2774,
                ( false, Age::N11, true, true, true, false, ) => 2775,
                ( false, Age::N11, true, true, false, true, ) => 2776,
                ( false, Age::N11, true, true, false, false, ) => 2777,
                ( false, Age::N11, false, true, true, true, ) => 2778,
                ( false, Age::N11, false, true, true, false, ) => 2779,
                ( false, Age::N11, false, true, false, true, ) => 2780,
                ( false, Age::N11, false, true, false, false, ) => 2781,
                ( false, Age::N11, true, false, true, true, ) => 2782,
                ( false, Age::N11, true, false, true, false, ) => 2783,
                ( false, Age::N11, true, false, false, true, ) => 2784,
                ( false, Age::N11, true, false, false, false, ) => 2785,
                ( false, Age::N11, false, false, true, true, ) => 2786,
                ( false, Age::N11, false, false, true, false, ) => 2787,
                ( false, Age::N11, false, false, false, true, ) => 2788,
                ( false, Age::N11, false, false, false, false, ) => 2789,
                ( true, Age::N12, true, true, true, true, ) => 2790,
                ( true, Age::N12, true, true, true, false, ) => 2791,
                ( true, Age::N12, true, true, false, true, ) => 2792,
                ( true, Age::N12, true, true, false, false, ) => 2793,
                ( true, Age::N12, false, true, true, true, ) => 2794,
                ( true, Age::N12, false, true, true, false, ) => 2795,
                ( true, Age::N12, false, true, false, true, ) => 2796,
                ( true, Age::N12, false, true, false, false, ) => 2797,
                ( true, Age::N12, true, false, true, true, ) => 2798,
                ( true, Age::N12, true, false, true, false, ) => 2799,
                ( true, Age::N12, true, false, false, true, ) => 2800,
                ( true, Age::N12, true, false, false, false, ) => 2801,
                ( true, Age::N12, false, false, true, true, ) => 2802,
                ( true, Age::N12, false, false, true, false, ) => 2803,
                ( true, Age::N12, false, false, false, true, ) => 2804,
                ( true, Age::N12, false, false, false, false, ) => 2805,
                ( false, Age::N12, true, true, true, true, ) => 2806,
                ( false, Age::N12, true, true, true, false, ) => 2807,
                ( false, Age::N12, true, true, false, true, ) => 2808,
                ( false, Age::N12, true, true, false, false, ) => 2809,
                ( false, Age::N12, false, true, true, true, ) => 2810,
                ( false, Age::N12, false, true, true, false, ) => 2811,
                ( false, Age::N12, false, true, false, true, ) => 2812,
                ( false, Age::N12, false, true, false, false, ) => 2813,
                ( false, Age::N12, true, false, true, true, ) => 2814,
                ( false, Age::N12, true, false, true, false, ) => 2815,
                ( false, Age::N12, true, false, false, true, ) => 2816,
                ( false, Age::N12, true, false, false, false, ) => 2817,
                ( false, Age::N12, false, false, true, true, ) => 2818,
                ( false, Age::N12, false, false, true, false, ) => 2819,
                ( false, Age::N12, false, false, false, true, ) => 2820,
                ( false, Age::N12, false, false, false, false, ) => 2821,
                ( true, Age::N13, true, true, true, true, ) => 2822,
                ( true, Age::N13, true, true, true, false, ) => 2823,
                ( true, Age::N13, true, true, false, true, ) => 2824,
                ( true, Age::N13, true, true, false, false, ) => 2825,
                ( true, Age::N13, false, true, true, true, ) => 2826,
                ( true, Age::N13, false, true, true, false, ) => 2827,
                ( true, Age::N13, false, true, false, true, ) => 2828,
                ( true, Age::N13, false, true, false, false, ) => 2829,
                ( true, Age::N13, true, false, true, true, ) => 2830,
                ( true, Age::N13, true, false, true, false, ) => 2831,
                ( true, Age::N13, true, false, false, true, ) => 2832,
                ( true, Age::N13, true, false, false, false, ) => 2833,
                ( true, Age::N13, false, false, true, true, ) => 2834,
                ( true, Age::N13, false, false, true, false, ) => 2835,
                ( true, Age::N13, false, false, false, true, ) => 2836,
                ( true, Age::N13, false, false, false, false, ) => 2837,
                ( false, Age::N13, true, true, true, true, ) => 2838,
                ( false, Age::N13, true, true, true, false, ) => 2839,
                ( false, Age::N13, true, true, false, true, ) => 2840,
                ( false, Age::N13, true, true, false, false, ) => 2841,
                ( false, Age::N13, false, true, true, true, ) => 2842,
                ( false, Age::N13, false, true, true, false, ) => 2843,
                ( false, Age::N13, false, true, false, true, ) => 2844,
                ( false, Age::N13, false, true, false, false, ) => 2845,
                ( false, Age::N13, true, false, true, true, ) => 2846,
                ( false, Age::N13, true, false, true, false, ) => 2847,
                ( false, Age::N13, true, false, false, true, ) => 2848,
                ( false, Age::N13, true, false, false, false, ) => 2849,
                ( false, Age::N13, false, false, true, true, ) => 2850,
                ( false, Age::N13, false, false, true, false, ) => 2851,
                ( false, Age::N13, false, false, false, true, ) => 2852,
                ( false, Age::N13, false, false, false, false, ) => 2853,
                ( true, Age::N14, true, true, true, true, ) => 2854,
                ( true, Age::N14, true, true, true, false, ) => 2855,
                ( true, Age::N14, true, true, false, true, ) => 2856,
                ( true, Age::N14, true, true, false, false, ) => 2857,
                ( true, Age::N14, false, true, true, true, ) => 2858,
                ( true, Age::N14, false, true, true, false, ) => 2859,
                ( true, Age::N14, false, true, false, true, ) => 2860,
                ( true, Age::N14, false, true, false, false, ) => 2861,
                ( true, Age::N14, true, false, true, true, ) => 2862,
                ( true, Age::N14, true, false, true, false, ) => 2863,
                ( true, Age::N14, true, false, false, true, ) => 2864,
                ( true, Age::N14, true, false, false, false, ) => 2865,
                ( true, Age::N14, false, false, true, true, ) => 2866,
                ( true, Age::N14, false, false, true, false, ) => 2867,
                ( true, Age::N14, false, false, false, true, ) => 2868,
                ( true, Age::N14, false, false, false, false, ) => 2869,
                ( false, Age::N14, true, true, true, true, ) => 2870,
                ( false, Age::N14, true, true, true, false, ) => 2871,
                ( false, Age::N14, true, true, false, true, ) => 2872,
                ( false, Age::N14, true, true, false, false, ) => 2873,
                ( false, Age::N14, false, true, true, true, ) => 2874,
                ( false, Age::N14, false, true, true, false, ) => 2875,
                ( false, Age::N14, false, true, false, true, ) => 2876,
                ( false, Age::N14, false, true, false, false, ) => 2877,
                ( false, Age::N14, true, false, true, true, ) => 2878,
                ( false, Age::N14, true, false, true, false, ) => 2879,
                ( false, Age::N14, true, false, false, true, ) => 2880,
                ( false, Age::N14, true, false, false, false, ) => 2881,
                ( false, Age::N14, false, false, true, true, ) => 2882,
                ( false, Age::N14, false, false, true, false, ) => 2883,
                ( false, Age::N14, false, false, false, true, ) => 2884,
                ( false, Age::N14, false, false, false, false, ) => 2885,
                ( true, Age::N15, true, true, true, true, ) => 2886,
                ( true, Age::N15, true, true, true, false, ) => 2887,
                ( true, Age::N15, true, true, false, true, ) => 2888,
                ( true, Age::N15, true, true, false, false, ) => 2889,
                ( true, Age::N15, false, true, true, true, ) => 2890,
                ( true, Age::N15, false, true, true, false, ) => 2891,
                ( true, Age::N15, false, true, false, true, ) => 2892,
                ( true, Age::N15, false, true, false, false, ) => 2893,
                ( true, Age::N15, true, false, true, true, ) => 2894,
                ( true, Age::N15, true, false, true, false, ) => 2895,
                ( true, Age::N15, true, false, false, true, ) => 2896,
                ( true, Age::N15, true, false, false, false, ) => 2897,
                ( true, Age::N15, false, false, true, true, ) => 2898,
                ( true, Age::N15, false, false, true, false, ) => 2899,
                ( true, Age::N15, false, false, false, true, ) => 2900,
                ( true, Age::N15, false, false, false, false, ) => 2901,
                ( false, Age::N15, true, true, true, true, ) => 2902,
                ( false, Age::N15, true, true, true, false, ) => 2903,
                ( false, Age::N15, true, true, false, true, ) => 2904,
                ( false, Age::N15, true, true, false, false, ) => 2905,
                ( false, Age::N15, false, true, true, true, ) => 2906,
                ( false, Age::N15, false, true, true, false, ) => 2907,
                ( false, Age::N15, false, true, false, true, ) => 2908,
                ( false, Age::N15, false, true, false, false, ) => 2909,
                ( false, Age::N15, true, false, true, true, ) => 2910,
                ( false, Age::N15, true, false, true, false, ) => 2911,
                ( false, Age::N15, true, false, false, true, ) => 2912,
                ( false, Age::N15, true, false, false, false, ) => 2913,
                ( false, Age::N15, false, false, true, true, ) => 2914,
                ( false, Age::N15, false, false, true, false, ) => 2915,
                ( false, Age::N15, false, false, false, true, ) => 2916,
                ( false, Age::N15, false, false, false, false, ) => 2917,
            })
        }
    }

    impl From<Fire> for BlockState {
        #[inline(always)]
        fn from(value : Fire) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Fire {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Fire { }

    impl Block for Fire {
        const DEFAULT_STATE : Self = Self {
            east : false,
            age : Age::N0,
            south : false,
            north : false,
            up : false,
            west : false,
        };
    }

}

/// `minecraft:jungle_leaves` block.
pub mod jungle_leaves {
    use super::*;

    /// `minecraft:jungle_leaves` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleLeaves {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `persistent` state.
        pub persistent : bool,
        /// `distance` state.
        pub distance : Distance,
    }

    /// `distance` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Distance {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Distance { }
    impl BlockProperty for Distance { }

    impl JungleLeaves {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.persistent, self.distance, )) {
                ( true, true, Distance::N1, ) => 336,
                ( false, true, Distance::N1, ) => 337,
                ( true, false, Distance::N1, ) => 338,
                ( false, false, Distance::N1, ) => 339,
                ( true, true, Distance::N2, ) => 340,
                ( false, true, Distance::N2, ) => 341,
                ( true, false, Distance::N2, ) => 342,
                ( false, false, Distance::N2, ) => 343,
                ( true, true, Distance::N3, ) => 344,
                ( false, true, Distance::N3, ) => 345,
                ( true, false, Distance::N3, ) => 346,
                ( false, false, Distance::N3, ) => 347,
                ( true, true, Distance::N4, ) => 348,
                ( false, true, Distance::N4, ) => 349,
                ( true, false, Distance::N4, ) => 350,
                ( false, false, Distance::N4, ) => 351,
                ( true, true, Distance::N5, ) => 352,
                ( false, true, Distance::N5, ) => 353,
                ( true, false, Distance::N5, ) => 354,
                ( false, false, Distance::N5, ) => 355,
                ( true, true, Distance::N6, ) => 356,
                ( false, true, Distance::N6, ) => 357,
                ( true, false, Distance::N6, ) => 358,
                ( false, false, Distance::N6, ) => 359,
                ( true, true, Distance::N7, ) => 360,
                ( false, true, Distance::N7, ) => 361,
                ( true, false, Distance::N7, ) => 362,
                ( false, false, Distance::N7, ) => 363,
            })
        }
    }

    impl From<JungleLeaves> for BlockState {
        #[inline(always)]
        fn from(value : JungleLeaves) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleLeaves {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleLeaves { }

    impl Block for JungleLeaves {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            persistent : false,
            distance : Distance::N7,
        };
    }

}

/// `minecraft:light_blue_stained_glass_pane` block.
pub mod light_blue_stained_glass_pane {
    use super::*;

    /// `minecraft:light_blue_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueStainedGlassPane {
        /// `south` state.
        pub south : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `east` state.
        pub east : bool,
        /// `north` state.
        pub north : bool,
        /// `west` state.
        pub west : bool,
    }

    impl LightBlueStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.south, self.waterlogged, self.east, self.north, self.west, )) {
                ( true, true, true, true, true, ) => 10277,
                ( true, true, true, true, false, ) => 10278,
                ( true, false, true, true, true, ) => 10279,
                ( true, false, true, true, false, ) => 10280,
                ( false, true, true, true, true, ) => 10281,
                ( false, true, true, true, false, ) => 10282,
                ( false, false, true, true, true, ) => 10283,
                ( false, false, true, true, false, ) => 10284,
                ( true, true, true, false, true, ) => 10285,
                ( true, true, true, false, false, ) => 10286,
                ( true, false, true, false, true, ) => 10287,
                ( true, false, true, false, false, ) => 10288,
                ( false, true, true, false, true, ) => 10289,
                ( false, true, true, false, false, ) => 10290,
                ( false, false, true, false, true, ) => 10291,
                ( false, false, true, false, false, ) => 10292,
                ( true, true, false, true, true, ) => 10293,
                ( true, true, false, true, false, ) => 10294,
                ( true, false, false, true, true, ) => 10295,
                ( true, false, false, true, false, ) => 10296,
                ( false, true, false, true, true, ) => 10297,
                ( false, true, false, true, false, ) => 10298,
                ( false, false, false, true, true, ) => 10299,
                ( false, false, false, true, false, ) => 10300,
                ( true, true, false, false, true, ) => 10301,
                ( true, true, false, false, false, ) => 10302,
                ( true, false, false, false, true, ) => 10303,
                ( true, false, false, false, false, ) => 10304,
                ( false, true, false, false, true, ) => 10305,
                ( false, true, false, false, false, ) => 10306,
                ( false, false, false, false, true, ) => 10307,
                ( false, false, false, false, false, ) => 10308,
            })
        }
    }

    impl From<LightBlueStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueStainedGlassPane { }

    impl Block for LightBlueStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            south : false,
            waterlogged : false,
            east : false,
            north : false,
            west : false,
        };
    }

}

/// `minecraft:yellow_bed` block.
pub mod yellow_bed {
    use super::*;

    /// `minecraft:yellow_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowBed {
        /// `part` state.
        pub part : Part,
        /// `facing` state.
        pub facing : Facing,
        /// `occupied` state.
        pub occupied : bool,
    }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl YellowBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.part, self.facing, self.occupied, )) {
                ( Part::Head, Facing::North, true, ) => 1795,
                ( Part::Foot, Facing::North, true, ) => 1796,
                ( Part::Head, Facing::North, false, ) => 1797,
                ( Part::Foot, Facing::North, false, ) => 1798,
                ( Part::Head, Facing::South, true, ) => 1799,
                ( Part::Foot, Facing::South, true, ) => 1800,
                ( Part::Head, Facing::South, false, ) => 1801,
                ( Part::Foot, Facing::South, false, ) => 1802,
                ( Part::Head, Facing::West, true, ) => 1803,
                ( Part::Foot, Facing::West, true, ) => 1804,
                ( Part::Head, Facing::West, false, ) => 1805,
                ( Part::Foot, Facing::West, false, ) => 1806,
                ( Part::Head, Facing::East, true, ) => 1807,
                ( Part::Foot, Facing::East, true, ) => 1808,
                ( Part::Head, Facing::East, false, ) => 1809,
                ( Part::Foot, Facing::East, false, ) => 1810,
            })
        }
    }

    impl From<YellowBed> for BlockState {
        #[inline(always)]
        fn from(value : YellowBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowBed { }

    impl Block for YellowBed {
        const DEFAULT_STATE : Self = Self {
            part : Part::Foot,
            facing : Facing::North,
            occupied : false,
        };
    }

}

/// `minecraft:warped_stairs` block.
pub mod warped_stairs {
    use super::*;

    /// `minecraft:warped_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WarpedStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.shape, self.half, self.facing, )) {
                ( true, Shape::Straight, Half::Top, Facing::North, ) => 20075,
                ( false, Shape::Straight, Half::Top, Facing::North, ) => 20076,
                ( true, Shape::InnerLeft, Half::Top, Facing::North, ) => 20077,
                ( false, Shape::InnerLeft, Half::Top, Facing::North, ) => 20078,
                ( true, Shape::InnerRight, Half::Top, Facing::North, ) => 20079,
                ( false, Shape::InnerRight, Half::Top, Facing::North, ) => 20080,
                ( true, Shape::OuterLeft, Half::Top, Facing::North, ) => 20081,
                ( false, Shape::OuterLeft, Half::Top, Facing::North, ) => 20082,
                ( true, Shape::OuterRight, Half::Top, Facing::North, ) => 20083,
                ( false, Shape::OuterRight, Half::Top, Facing::North, ) => 20084,
                ( true, Shape::Straight, Half::Bottom, Facing::North, ) => 20085,
                ( false, Shape::Straight, Half::Bottom, Facing::North, ) => 20086,
                ( true, Shape::InnerLeft, Half::Bottom, Facing::North, ) => 20087,
                ( false, Shape::InnerLeft, Half::Bottom, Facing::North, ) => 20088,
                ( true, Shape::InnerRight, Half::Bottom, Facing::North, ) => 20089,
                ( false, Shape::InnerRight, Half::Bottom, Facing::North, ) => 20090,
                ( true, Shape::OuterLeft, Half::Bottom, Facing::North, ) => 20091,
                ( false, Shape::OuterLeft, Half::Bottom, Facing::North, ) => 20092,
                ( true, Shape::OuterRight, Half::Bottom, Facing::North, ) => 20093,
                ( false, Shape::OuterRight, Half::Bottom, Facing::North, ) => 20094,
                ( true, Shape::Straight, Half::Top, Facing::South, ) => 20095,
                ( false, Shape::Straight, Half::Top, Facing::South, ) => 20096,
                ( true, Shape::InnerLeft, Half::Top, Facing::South, ) => 20097,
                ( false, Shape::InnerLeft, Half::Top, Facing::South, ) => 20098,
                ( true, Shape::InnerRight, Half::Top, Facing::South, ) => 20099,
                ( false, Shape::InnerRight, Half::Top, Facing::South, ) => 20100,
                ( true, Shape::OuterLeft, Half::Top, Facing::South, ) => 20101,
                ( false, Shape::OuterLeft, Half::Top, Facing::South, ) => 20102,
                ( true, Shape::OuterRight, Half::Top, Facing::South, ) => 20103,
                ( false, Shape::OuterRight, Half::Top, Facing::South, ) => 20104,
                ( true, Shape::Straight, Half::Bottom, Facing::South, ) => 20105,
                ( false, Shape::Straight, Half::Bottom, Facing::South, ) => 20106,
                ( true, Shape::InnerLeft, Half::Bottom, Facing::South, ) => 20107,
                ( false, Shape::InnerLeft, Half::Bottom, Facing::South, ) => 20108,
                ( true, Shape::InnerRight, Half::Bottom, Facing::South, ) => 20109,
                ( false, Shape::InnerRight, Half::Bottom, Facing::South, ) => 20110,
                ( true, Shape::OuterLeft, Half::Bottom, Facing::South, ) => 20111,
                ( false, Shape::OuterLeft, Half::Bottom, Facing::South, ) => 20112,
                ( true, Shape::OuterRight, Half::Bottom, Facing::South, ) => 20113,
                ( false, Shape::OuterRight, Half::Bottom, Facing::South, ) => 20114,
                ( true, Shape::Straight, Half::Top, Facing::West, ) => 20115,
                ( false, Shape::Straight, Half::Top, Facing::West, ) => 20116,
                ( true, Shape::InnerLeft, Half::Top, Facing::West, ) => 20117,
                ( false, Shape::InnerLeft, Half::Top, Facing::West, ) => 20118,
                ( true, Shape::InnerRight, Half::Top, Facing::West, ) => 20119,
                ( false, Shape::InnerRight, Half::Top, Facing::West, ) => 20120,
                ( true, Shape::OuterLeft, Half::Top, Facing::West, ) => 20121,
                ( false, Shape::OuterLeft, Half::Top, Facing::West, ) => 20122,
                ( true, Shape::OuterRight, Half::Top, Facing::West, ) => 20123,
                ( false, Shape::OuterRight, Half::Top, Facing::West, ) => 20124,
                ( true, Shape::Straight, Half::Bottom, Facing::West, ) => 20125,
                ( false, Shape::Straight, Half::Bottom, Facing::West, ) => 20126,
                ( true, Shape::InnerLeft, Half::Bottom, Facing::West, ) => 20127,
                ( false, Shape::InnerLeft, Half::Bottom, Facing::West, ) => 20128,
                ( true, Shape::InnerRight, Half::Bottom, Facing::West, ) => 20129,
                ( false, Shape::InnerRight, Half::Bottom, Facing::West, ) => 20130,
                ( true, Shape::OuterLeft, Half::Bottom, Facing::West, ) => 20131,
                ( false, Shape::OuterLeft, Half::Bottom, Facing::West, ) => 20132,
                ( true, Shape::OuterRight, Half::Bottom, Facing::West, ) => 20133,
                ( false, Shape::OuterRight, Half::Bottom, Facing::West, ) => 20134,
                ( true, Shape::Straight, Half::Top, Facing::East, ) => 20135,
                ( false, Shape::Straight, Half::Top, Facing::East, ) => 20136,
                ( true, Shape::InnerLeft, Half::Top, Facing::East, ) => 20137,
                ( false, Shape::InnerLeft, Half::Top, Facing::East, ) => 20138,
                ( true, Shape::InnerRight, Half::Top, Facing::East, ) => 20139,
                ( false, Shape::InnerRight, Half::Top, Facing::East, ) => 20140,
                ( true, Shape::OuterLeft, Half::Top, Facing::East, ) => 20141,
                ( false, Shape::OuterLeft, Half::Top, Facing::East, ) => 20142,
                ( true, Shape::OuterRight, Half::Top, Facing::East, ) => 20143,
                ( false, Shape::OuterRight, Half::Top, Facing::East, ) => 20144,
                ( true, Shape::Straight, Half::Bottom, Facing::East, ) => 20145,
                ( false, Shape::Straight, Half::Bottom, Facing::East, ) => 20146,
                ( true, Shape::InnerLeft, Half::Bottom, Facing::East, ) => 20147,
                ( false, Shape::InnerLeft, Half::Bottom, Facing::East, ) => 20148,
                ( true, Shape::InnerRight, Half::Bottom, Facing::East, ) => 20149,
                ( false, Shape::InnerRight, Half::Bottom, Facing::East, ) => 20150,
                ( true, Shape::OuterLeft, Half::Bottom, Facing::East, ) => 20151,
                ( false, Shape::OuterLeft, Half::Bottom, Facing::East, ) => 20152,
                ( true, Shape::OuterRight, Half::Bottom, Facing::East, ) => 20153,
                ( false, Shape::OuterRight, Half::Bottom, Facing::East, ) => 20154,
            })
        }
    }

    impl From<WarpedStairs> for BlockState {
        #[inline(always)]
        fn from(value : WarpedStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedStairs { }

    impl Block for WarpedStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            shape : Shape::Straight,
            half : Half::Bottom,
            facing : Facing::North,
        };
    }

}

/// `minecraft:red_glazed_terracotta` block.
pub mod red_glazed_terracotta {
    use super::*;

    /// `minecraft:red_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl RedGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13743,
                ( Facing::South, ) => 13744,
                ( Facing::West, ) => 13745,
                ( Facing::East, ) => 13746,
            })
        }
    }

    impl From<RedGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : RedGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedGlazedTerracotta { }

    impl Block for RedGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:iron_bars` block.
pub mod iron_bars {
    use super::*;

    /// `minecraft:iron_bars` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct IronBars {
        /// `west` state.
        pub west : bool,
        /// `north` state.
        pub north : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `south` state.
        pub south : bool,
        /// `east` state.
        pub east : bool,
    }

    impl IronBars {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.west, self.north, self.waterlogged, self.south, self.east, )) {
                ( true, true, true, true, true, ) => 6984,
                ( false, true, true, true, true, ) => 6985,
                ( true, true, false, true, true, ) => 6986,
                ( false, true, false, true, true, ) => 6987,
                ( true, true, true, false, true, ) => 6988,
                ( false, true, true, false, true, ) => 6989,
                ( true, true, false, false, true, ) => 6990,
                ( false, true, false, false, true, ) => 6991,
                ( true, false, true, true, true, ) => 6992,
                ( false, false, true, true, true, ) => 6993,
                ( true, false, false, true, true, ) => 6994,
                ( false, false, false, true, true, ) => 6995,
                ( true, false, true, false, true, ) => 6996,
                ( false, false, true, false, true, ) => 6997,
                ( true, false, false, false, true, ) => 6998,
                ( false, false, false, false, true, ) => 6999,
                ( true, true, true, true, false, ) => 7000,
                ( false, true, true, true, false, ) => 7001,
                ( true, true, false, true, false, ) => 7002,
                ( false, true, false, true, false, ) => 7003,
                ( true, true, true, false, false, ) => 7004,
                ( false, true, true, false, false, ) => 7005,
                ( true, true, false, false, false, ) => 7006,
                ( false, true, false, false, false, ) => 7007,
                ( true, false, true, true, false, ) => 7008,
                ( false, false, true, true, false, ) => 7009,
                ( true, false, false, true, false, ) => 7010,
                ( false, false, false, true, false, ) => 7011,
                ( true, false, true, false, false, ) => 7012,
                ( false, false, true, false, false, ) => 7013,
                ( true, false, false, false, false, ) => 7014,
                ( false, false, false, false, false, ) => 7015,
            })
        }
    }

    impl From<IronBars> for BlockState {
        #[inline(always)]
        fn from(value : IronBars) -> Self {
            value.to_block_state()
        }
    }

    impl Default for IronBars {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for IronBars { }

    impl Block for IronBars {
        const DEFAULT_STATE : Self = Self {
            west : false,
            north : false,
            waterlogged : false,
            south : false,
            east : false,
        };
    }

}

/// `minecraft:blue_stained_glass` block.
pub mod blue_stained_glass {
    use super::*;

    /// `minecraft:blue_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueStainedGlass;

    impl BlueStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6135)
        }
    }

    impl From<BlueStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : BlueStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueStainedGlass { }

    impl Block for BlueStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_exposed_copper_grate` block.
pub mod waxed_exposed_copper_grate {
    use super::*;

    /// `minecraft:waxed_exposed_copper_grate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedExposedCopperGrate {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl WaxedExposedCopperGrate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 25746,
                ( false, ) => 25747,
            })
        }
    }

    impl From<WaxedExposedCopperGrate> for BlockState {
        #[inline(always)]
        fn from(value : WaxedExposedCopperGrate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedExposedCopperGrate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedExposedCopperGrate { }

    impl Block for WaxedExposedCopperGrate {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
        };
    }

}

/// `minecraft:white_candle` block.
pub mod white_candle {
    use super::*;

    /// `minecraft:white_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteCandle {
        /// `candles` state.
        pub candles : Candles,
        /// `lit` state.
        pub lit : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl WhiteCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.candles, self.lit, self.waterlogged, )) {
                ( Candles::N1, true, true, ) => 21801,
                ( Candles::N1, true, false, ) => 21802,
                ( Candles::N1, false, true, ) => 21803,
                ( Candles::N1, false, false, ) => 21804,
                ( Candles::N2, true, true, ) => 21805,
                ( Candles::N2, true, false, ) => 21806,
                ( Candles::N2, false, true, ) => 21807,
                ( Candles::N2, false, false, ) => 21808,
                ( Candles::N3, true, true, ) => 21809,
                ( Candles::N3, true, false, ) => 21810,
                ( Candles::N3, false, true, ) => 21811,
                ( Candles::N3, false, false, ) => 21812,
                ( Candles::N4, true, true, ) => 21813,
                ( Candles::N4, true, false, ) => 21814,
                ( Candles::N4, false, true, ) => 21815,
                ( Candles::N4, false, false, ) => 21816,
            })
        }
    }

    impl From<WhiteCandle> for BlockState {
        #[inline(always)]
        fn from(value : WhiteCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteCandle { }

    impl Block for WhiteCandle {
        const DEFAULT_STATE : Self = Self {
            candles : Candles::N1,
            lit : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:crimson_fungus` block.
pub mod crimson_fungus {
    use super::*;

    /// `minecraft:crimson_fungus` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonFungus;

    impl CrimsonFungus {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19664)
        }
    }

    impl From<CrimsonFungus> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonFungus) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonFungus {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonFungus { }

    impl Block for CrimsonFungus {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:bamboo_wall_sign` block.
pub mod bamboo_wall_sign {
    use super::*;

    /// `minecraft:bamboo_wall_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooWallSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BambooWallSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 4930,
                ( false, Facing::North, ) => 4931,
                ( true, Facing::South, ) => 4932,
                ( false, Facing::South, ) => 4933,
                ( true, Facing::West, ) => 4934,
                ( false, Facing::West, ) => 4935,
                ( true, Facing::East, ) => 4936,
                ( false, Facing::East, ) => 4937,
            })
        }
    }

    impl From<BambooWallSign> for BlockState {
        #[inline(always)]
        fn from(value : BambooWallSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooWallSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooWallSign { }

    impl Block for BambooWallSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:pink_petals` block.
pub mod pink_petals {
    use super::*;

    /// `minecraft:pink_petals` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkPetals {
        /// `flower_amount` state.
        pub flower_amount : FlowerAmount,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `flower_amount` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum FlowerAmount {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for FlowerAmount { }
    impl BlockProperty for FlowerAmount { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PinkPetals {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.flower_amount, self.facing, )) {
                ( FlowerAmount::N1, Facing::North, ) => 25887,
                ( FlowerAmount::N2, Facing::North, ) => 25888,
                ( FlowerAmount::N3, Facing::North, ) => 25889,
                ( FlowerAmount::N4, Facing::North, ) => 25890,
                ( FlowerAmount::N1, Facing::South, ) => 25891,
                ( FlowerAmount::N2, Facing::South, ) => 25892,
                ( FlowerAmount::N3, Facing::South, ) => 25893,
                ( FlowerAmount::N4, Facing::South, ) => 25894,
                ( FlowerAmount::N1, Facing::West, ) => 25895,
                ( FlowerAmount::N2, Facing::West, ) => 25896,
                ( FlowerAmount::N3, Facing::West, ) => 25897,
                ( FlowerAmount::N4, Facing::West, ) => 25898,
                ( FlowerAmount::N1, Facing::East, ) => 25899,
                ( FlowerAmount::N2, Facing::East, ) => 25900,
                ( FlowerAmount::N3, Facing::East, ) => 25901,
                ( FlowerAmount::N4, Facing::East, ) => 25902,
            })
        }
    }

    impl From<PinkPetals> for BlockState {
        #[inline(always)]
        fn from(value : PinkPetals) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkPetals {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkPetals { }

    impl Block for PinkPetals {
        const DEFAULT_STATE : Self = Self {
            flower_amount : FlowerAmount::N1,
            facing : Facing::North,
        };
    }

}

/// `minecraft:waxed_weathered_copper` block.
pub mod waxed_weathered_copper {
    use super::*;

    /// `minecraft:waxed_weathered_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedWeatheredCopper;

    impl WaxedWeatheredCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24361)
        }
    }

    impl From<WaxedWeatheredCopper> for BlockState {
        #[inline(always)]
        fn from(value : WaxedWeatheredCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedWeatheredCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedWeatheredCopper { }

    impl Block for WaxedWeatheredCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cyan_banner` block.
pub mod cyan_banner {
    use super::*;

    /// `minecraft:cyan_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl CyanBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11792,
                ( Rotation::N1, ) => 11793,
                ( Rotation::N2, ) => 11794,
                ( Rotation::N3, ) => 11795,
                ( Rotation::N4, ) => 11796,
                ( Rotation::N5, ) => 11797,
                ( Rotation::N6, ) => 11798,
                ( Rotation::N7, ) => 11799,
                ( Rotation::N8, ) => 11800,
                ( Rotation::N9, ) => 11801,
                ( Rotation::N10, ) => 11802,
                ( Rotation::N11, ) => 11803,
                ( Rotation::N12, ) => 11804,
                ( Rotation::N13, ) => 11805,
                ( Rotation::N14, ) => 11806,
                ( Rotation::N15, ) => 11807,
            })
        }
    }

    impl From<CyanBanner> for BlockState {
        #[inline(always)]
        fn from(value : CyanBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanBanner { }

    impl Block for CyanBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:glass` block.
pub mod glass {
    use super::*;

    /// `minecraft:glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Glass;

    impl Glass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(562)
        }
    }

    impl From<Glass> for BlockState {
        #[inline(always)]
        fn from(value : Glass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Glass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Glass { }

    impl Block for Glass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:spruce_fence` block.
pub mod spruce_fence {
    use super::*;

    /// `minecraft:spruce_fence` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceFence {
        /// `north` state.
        pub north : bool,
        /// `east` state.
        pub east : bool,
        /// `south` state.
        pub south : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : bool,
    }

    impl SpruceFence {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.east, self.south, self.waterlogged, self.west, )) {
                ( true, true, true, true, true, ) => 12493,
                ( true, true, true, true, false, ) => 12494,
                ( true, true, true, false, true, ) => 12495,
                ( true, true, true, false, false, ) => 12496,
                ( true, true, false, true, true, ) => 12497,
                ( true, true, false, true, false, ) => 12498,
                ( true, true, false, false, true, ) => 12499,
                ( true, true, false, false, false, ) => 12500,
                ( false, true, true, true, true, ) => 12501,
                ( false, true, true, true, false, ) => 12502,
                ( false, true, true, false, true, ) => 12503,
                ( false, true, true, false, false, ) => 12504,
                ( false, true, false, true, true, ) => 12505,
                ( false, true, false, true, false, ) => 12506,
                ( false, true, false, false, true, ) => 12507,
                ( false, true, false, false, false, ) => 12508,
                ( true, false, true, true, true, ) => 12509,
                ( true, false, true, true, false, ) => 12510,
                ( true, false, true, false, true, ) => 12511,
                ( true, false, true, false, false, ) => 12512,
                ( true, false, false, true, true, ) => 12513,
                ( true, false, false, true, false, ) => 12514,
                ( true, false, false, false, true, ) => 12515,
                ( true, false, false, false, false, ) => 12516,
                ( false, false, true, true, true, ) => 12517,
                ( false, false, true, true, false, ) => 12518,
                ( false, false, true, false, true, ) => 12519,
                ( false, false, true, false, false, ) => 12520,
                ( false, false, false, true, true, ) => 12521,
                ( false, false, false, true, false, ) => 12522,
                ( false, false, false, false, true, ) => 12523,
                ( false, false, false, false, false, ) => 12524,
            })
        }
    }

    impl From<SpruceFence> for BlockState {
        #[inline(always)]
        fn from(value : SpruceFence) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceFence {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceFence { }

    impl Block for SpruceFence {
        const DEFAULT_STATE : Self = Self {
            north : false,
            east : false,
            south : false,
            waterlogged : false,
            west : false,
        };
    }

}

/// `minecraft:warped_sign` block.
pub mod warped_sign {
    use super::*;

    /// `minecraft:warped_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedSign {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl WarpedSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.waterlogged, )) {
                ( Rotation::N0, true, ) => 20363,
                ( Rotation::N0, false, ) => 20364,
                ( Rotation::N1, true, ) => 20365,
                ( Rotation::N1, false, ) => 20366,
                ( Rotation::N2, true, ) => 20367,
                ( Rotation::N2, false, ) => 20368,
                ( Rotation::N3, true, ) => 20369,
                ( Rotation::N3, false, ) => 20370,
                ( Rotation::N4, true, ) => 20371,
                ( Rotation::N4, false, ) => 20372,
                ( Rotation::N5, true, ) => 20373,
                ( Rotation::N5, false, ) => 20374,
                ( Rotation::N6, true, ) => 20375,
                ( Rotation::N6, false, ) => 20376,
                ( Rotation::N7, true, ) => 20377,
                ( Rotation::N7, false, ) => 20378,
                ( Rotation::N8, true, ) => 20379,
                ( Rotation::N8, false, ) => 20380,
                ( Rotation::N9, true, ) => 20381,
                ( Rotation::N9, false, ) => 20382,
                ( Rotation::N10, true, ) => 20383,
                ( Rotation::N10, false, ) => 20384,
                ( Rotation::N11, true, ) => 20385,
                ( Rotation::N11, false, ) => 20386,
                ( Rotation::N12, true, ) => 20387,
                ( Rotation::N12, false, ) => 20388,
                ( Rotation::N13, true, ) => 20389,
                ( Rotation::N13, false, ) => 20390,
                ( Rotation::N14, true, ) => 20391,
                ( Rotation::N14, false, ) => 20392,
                ( Rotation::N15, true, ) => 20393,
                ( Rotation::N15, false, ) => 20394,
            })
        }
    }

    impl From<WarpedSign> for BlockState {
        #[inline(always)]
        fn from(value : WarpedSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedSign { }

    impl Block for WarpedSign {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            waterlogged : false,
        };
    }

}

/// `minecraft:black_shulker_box` block.
pub mod black_shulker_box {
    use super::*;

    /// `minecraft:black_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BlackShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13681,
                ( Facing::East, ) => 13682,
                ( Facing::South, ) => 13683,
                ( Facing::West, ) => 13684,
                ( Facing::Up, ) => 13685,
                ( Facing::Down, ) => 13686,
            })
        }
    }

    impl From<BlackShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : BlackShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackShulkerBox { }

    impl Block for BlackShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:mangrove_log` block.
pub mod mangrove_log {
    use super::*;

    /// `minecraft:mangrove_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl MangroveLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 160,
                ( Axis::Y, ) => 161,
                ( Axis::Z, ) => 162,
            })
        }
    }

    impl From<MangroveLog> for BlockState {
        #[inline(always)]
        fn from(value : MangroveLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveLog { }

    impl Block for MangroveLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:bone_block` block.
pub mod bone_block {
    use super::*;

    /// `minecraft:bone_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BoneBlock {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl BoneBlock {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 13569,
                ( Axis::Y, ) => 13570,
                ( Axis::Z, ) => 13571,
            })
        }
    }

    impl From<BoneBlock> for BlockState {
        #[inline(always)]
        fn from(value : BoneBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BoneBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BoneBlock { }

    impl Block for BoneBlock {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:exposed_copper` block.
pub mod exposed_copper {
    use super::*;

    /// `minecraft:exposed_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ExposedCopper;

    impl ExposedCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(23999)
        }
    }

    impl From<ExposedCopper> for BlockState {
        #[inline(always)]
        fn from(value : ExposedCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ExposedCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ExposedCopper { }

    impl Block for ExposedCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:end_stone_brick_stairs` block.
pub mod end_stone_brick_stairs {
    use super::*;

    /// `minecraft:end_stone_brick_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct EndStoneBrickStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl EndStoneBrickStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, self.shape, self.half, )) {
                ( Facing::North, true, Shape::Straight, Half::Top, ) => 14417,
                ( Facing::North, false, Shape::Straight, Half::Top, ) => 14418,
                ( Facing::North, true, Shape::InnerLeft, Half::Top, ) => 14419,
                ( Facing::North, false, Shape::InnerLeft, Half::Top, ) => 14420,
                ( Facing::North, true, Shape::InnerRight, Half::Top, ) => 14421,
                ( Facing::North, false, Shape::InnerRight, Half::Top, ) => 14422,
                ( Facing::North, true, Shape::OuterLeft, Half::Top, ) => 14423,
                ( Facing::North, false, Shape::OuterLeft, Half::Top, ) => 14424,
                ( Facing::North, true, Shape::OuterRight, Half::Top, ) => 14425,
                ( Facing::North, false, Shape::OuterRight, Half::Top, ) => 14426,
                ( Facing::North, true, Shape::Straight, Half::Bottom, ) => 14427,
                ( Facing::North, false, Shape::Straight, Half::Bottom, ) => 14428,
                ( Facing::North, true, Shape::InnerLeft, Half::Bottom, ) => 14429,
                ( Facing::North, false, Shape::InnerLeft, Half::Bottom, ) => 14430,
                ( Facing::North, true, Shape::InnerRight, Half::Bottom, ) => 14431,
                ( Facing::North, false, Shape::InnerRight, Half::Bottom, ) => 14432,
                ( Facing::North, true, Shape::OuterLeft, Half::Bottom, ) => 14433,
                ( Facing::North, false, Shape::OuterLeft, Half::Bottom, ) => 14434,
                ( Facing::North, true, Shape::OuterRight, Half::Bottom, ) => 14435,
                ( Facing::North, false, Shape::OuterRight, Half::Bottom, ) => 14436,
                ( Facing::South, true, Shape::Straight, Half::Top, ) => 14437,
                ( Facing::South, false, Shape::Straight, Half::Top, ) => 14438,
                ( Facing::South, true, Shape::InnerLeft, Half::Top, ) => 14439,
                ( Facing::South, false, Shape::InnerLeft, Half::Top, ) => 14440,
                ( Facing::South, true, Shape::InnerRight, Half::Top, ) => 14441,
                ( Facing::South, false, Shape::InnerRight, Half::Top, ) => 14442,
                ( Facing::South, true, Shape::OuterLeft, Half::Top, ) => 14443,
                ( Facing::South, false, Shape::OuterLeft, Half::Top, ) => 14444,
                ( Facing::South, true, Shape::OuterRight, Half::Top, ) => 14445,
                ( Facing::South, false, Shape::OuterRight, Half::Top, ) => 14446,
                ( Facing::South, true, Shape::Straight, Half::Bottom, ) => 14447,
                ( Facing::South, false, Shape::Straight, Half::Bottom, ) => 14448,
                ( Facing::South, true, Shape::InnerLeft, Half::Bottom, ) => 14449,
                ( Facing::South, false, Shape::InnerLeft, Half::Bottom, ) => 14450,
                ( Facing::South, true, Shape::InnerRight, Half::Bottom, ) => 14451,
                ( Facing::South, false, Shape::InnerRight, Half::Bottom, ) => 14452,
                ( Facing::South, true, Shape::OuterLeft, Half::Bottom, ) => 14453,
                ( Facing::South, false, Shape::OuterLeft, Half::Bottom, ) => 14454,
                ( Facing::South, true, Shape::OuterRight, Half::Bottom, ) => 14455,
                ( Facing::South, false, Shape::OuterRight, Half::Bottom, ) => 14456,
                ( Facing::West, true, Shape::Straight, Half::Top, ) => 14457,
                ( Facing::West, false, Shape::Straight, Half::Top, ) => 14458,
                ( Facing::West, true, Shape::InnerLeft, Half::Top, ) => 14459,
                ( Facing::West, false, Shape::InnerLeft, Half::Top, ) => 14460,
                ( Facing::West, true, Shape::InnerRight, Half::Top, ) => 14461,
                ( Facing::West, false, Shape::InnerRight, Half::Top, ) => 14462,
                ( Facing::West, true, Shape::OuterLeft, Half::Top, ) => 14463,
                ( Facing::West, false, Shape::OuterLeft, Half::Top, ) => 14464,
                ( Facing::West, true, Shape::OuterRight, Half::Top, ) => 14465,
                ( Facing::West, false, Shape::OuterRight, Half::Top, ) => 14466,
                ( Facing::West, true, Shape::Straight, Half::Bottom, ) => 14467,
                ( Facing::West, false, Shape::Straight, Half::Bottom, ) => 14468,
                ( Facing::West, true, Shape::InnerLeft, Half::Bottom, ) => 14469,
                ( Facing::West, false, Shape::InnerLeft, Half::Bottom, ) => 14470,
                ( Facing::West, true, Shape::InnerRight, Half::Bottom, ) => 14471,
                ( Facing::West, false, Shape::InnerRight, Half::Bottom, ) => 14472,
                ( Facing::West, true, Shape::OuterLeft, Half::Bottom, ) => 14473,
                ( Facing::West, false, Shape::OuterLeft, Half::Bottom, ) => 14474,
                ( Facing::West, true, Shape::OuterRight, Half::Bottom, ) => 14475,
                ( Facing::West, false, Shape::OuterRight, Half::Bottom, ) => 14476,
                ( Facing::East, true, Shape::Straight, Half::Top, ) => 14477,
                ( Facing::East, false, Shape::Straight, Half::Top, ) => 14478,
                ( Facing::East, true, Shape::InnerLeft, Half::Top, ) => 14479,
                ( Facing::East, false, Shape::InnerLeft, Half::Top, ) => 14480,
                ( Facing::East, true, Shape::InnerRight, Half::Top, ) => 14481,
                ( Facing::East, false, Shape::InnerRight, Half::Top, ) => 14482,
                ( Facing::East, true, Shape::OuterLeft, Half::Top, ) => 14483,
                ( Facing::East, false, Shape::OuterLeft, Half::Top, ) => 14484,
                ( Facing::East, true, Shape::OuterRight, Half::Top, ) => 14485,
                ( Facing::East, false, Shape::OuterRight, Half::Top, ) => 14486,
                ( Facing::East, true, Shape::Straight, Half::Bottom, ) => 14487,
                ( Facing::East, false, Shape::Straight, Half::Bottom, ) => 14488,
                ( Facing::East, true, Shape::InnerLeft, Half::Bottom, ) => 14489,
                ( Facing::East, false, Shape::InnerLeft, Half::Bottom, ) => 14490,
                ( Facing::East, true, Shape::InnerRight, Half::Bottom, ) => 14491,
                ( Facing::East, false, Shape::InnerRight, Half::Bottom, ) => 14492,
                ( Facing::East, true, Shape::OuterLeft, Half::Bottom, ) => 14493,
                ( Facing::East, false, Shape::OuterLeft, Half::Bottom, ) => 14494,
                ( Facing::East, true, Shape::OuterRight, Half::Bottom, ) => 14495,
                ( Facing::East, false, Shape::OuterRight, Half::Bottom, ) => 14496,
            })
        }
    }

    impl From<EndStoneBrickStairs> for BlockState {
        #[inline(always)]
        fn from(value : EndStoneBrickStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for EndStoneBrickStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for EndStoneBrickStairs { }

    impl Block for EndStoneBrickStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
            shape : Shape::Straight,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:oak_hanging_sign` block.
pub mod oak_hanging_sign {
    use super::*;

    /// `minecraft:oak_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakHangingSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `attached` state.
        pub attached : bool,
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl OakHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.attached, self.rotation, )) {
                ( true, true, Rotation::N0, ) => 4938,
                ( false, true, Rotation::N0, ) => 4939,
                ( true, true, Rotation::N1, ) => 4940,
                ( false, true, Rotation::N1, ) => 4941,
                ( true, true, Rotation::N2, ) => 4942,
                ( false, true, Rotation::N2, ) => 4943,
                ( true, true, Rotation::N3, ) => 4944,
                ( false, true, Rotation::N3, ) => 4945,
                ( true, true, Rotation::N4, ) => 4946,
                ( false, true, Rotation::N4, ) => 4947,
                ( true, true, Rotation::N5, ) => 4948,
                ( false, true, Rotation::N5, ) => 4949,
                ( true, true, Rotation::N6, ) => 4950,
                ( false, true, Rotation::N6, ) => 4951,
                ( true, true, Rotation::N7, ) => 4952,
                ( false, true, Rotation::N7, ) => 4953,
                ( true, true, Rotation::N8, ) => 4954,
                ( false, true, Rotation::N8, ) => 4955,
                ( true, true, Rotation::N9, ) => 4956,
                ( false, true, Rotation::N9, ) => 4957,
                ( true, true, Rotation::N10, ) => 4958,
                ( false, true, Rotation::N10, ) => 4959,
                ( true, true, Rotation::N11, ) => 4960,
                ( false, true, Rotation::N11, ) => 4961,
                ( true, true, Rotation::N12, ) => 4962,
                ( false, true, Rotation::N12, ) => 4963,
                ( true, true, Rotation::N13, ) => 4964,
                ( false, true, Rotation::N13, ) => 4965,
                ( true, true, Rotation::N14, ) => 4966,
                ( false, true, Rotation::N14, ) => 4967,
                ( true, true, Rotation::N15, ) => 4968,
                ( false, true, Rotation::N15, ) => 4969,
                ( true, false, Rotation::N0, ) => 4970,
                ( false, false, Rotation::N0, ) => 4971,
                ( true, false, Rotation::N1, ) => 4972,
                ( false, false, Rotation::N1, ) => 4973,
                ( true, false, Rotation::N2, ) => 4974,
                ( false, false, Rotation::N2, ) => 4975,
                ( true, false, Rotation::N3, ) => 4976,
                ( false, false, Rotation::N3, ) => 4977,
                ( true, false, Rotation::N4, ) => 4978,
                ( false, false, Rotation::N4, ) => 4979,
                ( true, false, Rotation::N5, ) => 4980,
                ( false, false, Rotation::N5, ) => 4981,
                ( true, false, Rotation::N6, ) => 4982,
                ( false, false, Rotation::N6, ) => 4983,
                ( true, false, Rotation::N7, ) => 4984,
                ( false, false, Rotation::N7, ) => 4985,
                ( true, false, Rotation::N8, ) => 4986,
                ( false, false, Rotation::N8, ) => 4987,
                ( true, false, Rotation::N9, ) => 4988,
                ( false, false, Rotation::N9, ) => 4989,
                ( true, false, Rotation::N10, ) => 4990,
                ( false, false, Rotation::N10, ) => 4991,
                ( true, false, Rotation::N11, ) => 4992,
                ( false, false, Rotation::N11, ) => 4993,
                ( true, false, Rotation::N12, ) => 4994,
                ( false, false, Rotation::N12, ) => 4995,
                ( true, false, Rotation::N13, ) => 4996,
                ( false, false, Rotation::N13, ) => 4997,
                ( true, false, Rotation::N14, ) => 4998,
                ( false, false, Rotation::N14, ) => 4999,
                ( true, false, Rotation::N15, ) => 5000,
                ( false, false, Rotation::N15, ) => 5001,
            })
        }
    }

    impl From<OakHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : OakHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakHangingSign { }

    impl Block for OakHangingSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            attached : false,
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:sculk_catalyst` block.
pub mod sculk_catalyst {
    use super::*;

    /// `minecraft:sculk_catalyst` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SculkCatalyst {
        /// `bloom` state.
        pub bloom : bool,
    }

    impl SculkCatalyst {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.bloom, )) {
                ( true, ) => 23988,
                ( false, ) => 23989,
            })
        }
    }

    impl From<SculkCatalyst> for BlockState {
        #[inline(always)]
        fn from(value : SculkCatalyst) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SculkCatalyst {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SculkCatalyst { }

    impl Block for SculkCatalyst {
        const DEFAULT_STATE : Self = Self {
            bloom : false,
        };
    }

}

/// `minecraft:red_nether_bricks` block.
pub mod red_nether_bricks {
    use super::*;

    /// `minecraft:red_nether_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedNetherBricks;

    impl RedNetherBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13568)
        }
    }

    impl From<RedNetherBricks> for BlockState {
        #[inline(always)]
        fn from(value : RedNetherBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedNetherBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedNetherBricks { }

    impl Block for RedNetherBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:raw_copper_block` block.
pub mod raw_copper_block {
    use super::*;

    /// `minecraft:raw_copper_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RawCopperBlock;

    impl RawCopperBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27651)
        }
    }

    impl From<RawCopperBlock> for BlockState {
        #[inline(always)]
        fn from(value : RawCopperBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RawCopperBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RawCopperBlock { }

    impl Block for RawCopperBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:respawn_anchor` block.
pub mod respawn_anchor {
    use super::*;

    /// `minecraft:respawn_anchor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RespawnAnchor {
        /// `charges` state.
        pub charges : Charges,
    }

    /// `charges` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Charges {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Charges { }
    impl BlockProperty for Charges { }

    impl RespawnAnchor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.charges, )) {
                ( Charges::N0, ) => 20510,
                ( Charges::N1, ) => 20511,
                ( Charges::N2, ) => 20512,
                ( Charges::N3, ) => 20513,
                ( Charges::N4, ) => 20514,
            })
        }
    }

    impl From<RespawnAnchor> for BlockState {
        #[inline(always)]
        fn from(value : RespawnAnchor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RespawnAnchor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RespawnAnchor { }

    impl Block for RespawnAnchor {
        const DEFAULT_STATE : Self = Self {
            charges : Charges::N0,
        };
    }

}

/// `minecraft:gray_bed` block.
pub mod gray_bed {
    use super::*;

    /// `minecraft:gray_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayBed {
        /// `part` state.
        pub part : Part,
        /// `facing` state.
        pub facing : Facing,
        /// `occupied` state.
        pub occupied : bool,
    }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl GrayBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.part, self.facing, self.occupied, )) {
                ( Part::Head, Facing::North, true, ) => 1843,
                ( Part::Foot, Facing::North, true, ) => 1844,
                ( Part::Head, Facing::North, false, ) => 1845,
                ( Part::Foot, Facing::North, false, ) => 1846,
                ( Part::Head, Facing::South, true, ) => 1847,
                ( Part::Foot, Facing::South, true, ) => 1848,
                ( Part::Head, Facing::South, false, ) => 1849,
                ( Part::Foot, Facing::South, false, ) => 1850,
                ( Part::Head, Facing::West, true, ) => 1851,
                ( Part::Foot, Facing::West, true, ) => 1852,
                ( Part::Head, Facing::West, false, ) => 1853,
                ( Part::Foot, Facing::West, false, ) => 1854,
                ( Part::Head, Facing::East, true, ) => 1855,
                ( Part::Foot, Facing::East, true, ) => 1856,
                ( Part::Head, Facing::East, false, ) => 1857,
                ( Part::Foot, Facing::East, false, ) => 1858,
            })
        }
    }

    impl From<GrayBed> for BlockState {
        #[inline(always)]
        fn from(value : GrayBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayBed { }

    impl Block for GrayBed {
        const DEFAULT_STATE : Self = Self {
            part : Part::Foot,
            facing : Facing::North,
            occupied : false,
        };
    }

}

/// `minecraft:piston_head` block.
pub mod piston_head {
    use super::*;

    /// `minecraft:piston_head` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PistonHead {
        /// `type` state.
        pub kind : Kind,
        /// `short` state.
        pub short : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `normal` variant.
        Normal,
        /// `sticky` variant.
        Sticky,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PistonHead {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.short, self.facing, )) {
                ( Kind::Normal, true, Facing::North, ) => 2069,
                ( Kind::Sticky, true, Facing::North, ) => 2070,
                ( Kind::Normal, false, Facing::North, ) => 2071,
                ( Kind::Sticky, false, Facing::North, ) => 2072,
                ( Kind::Normal, true, Facing::East, ) => 2073,
                ( Kind::Sticky, true, Facing::East, ) => 2074,
                ( Kind::Normal, false, Facing::East, ) => 2075,
                ( Kind::Sticky, false, Facing::East, ) => 2076,
                ( Kind::Normal, true, Facing::South, ) => 2077,
                ( Kind::Sticky, true, Facing::South, ) => 2078,
                ( Kind::Normal, false, Facing::South, ) => 2079,
                ( Kind::Sticky, false, Facing::South, ) => 2080,
                ( Kind::Normal, true, Facing::West, ) => 2081,
                ( Kind::Sticky, true, Facing::West, ) => 2082,
                ( Kind::Normal, false, Facing::West, ) => 2083,
                ( Kind::Sticky, false, Facing::West, ) => 2084,
                ( Kind::Normal, true, Facing::Up, ) => 2085,
                ( Kind::Sticky, true, Facing::Up, ) => 2086,
                ( Kind::Normal, false, Facing::Up, ) => 2087,
                ( Kind::Sticky, false, Facing::Up, ) => 2088,
                ( Kind::Normal, true, Facing::Down, ) => 2089,
                ( Kind::Sticky, true, Facing::Down, ) => 2090,
                ( Kind::Normal, false, Facing::Down, ) => 2091,
                ( Kind::Sticky, false, Facing::Down, ) => 2092,
            })
        }
    }

    impl From<PistonHead> for BlockState {
        #[inline(always)]
        fn from(value : PistonHead) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PistonHead {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PistonHead { }

    impl Block for PistonHead {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Normal,
            short : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:pale_oak_wall_hanging_sign` block.
pub mod pale_oak_wall_hanging_sign {
    use super::*;

    /// `minecraft:pale_oak_wall_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakWallHangingSign {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PaleOakWallHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 5762,
                ( Facing::North, false, ) => 5763,
                ( Facing::South, true, ) => 5764,
                ( Facing::South, false, ) => 5765,
                ( Facing::West, true, ) => 5766,
                ( Facing::West, false, ) => 5767,
                ( Facing::East, true, ) => 5768,
                ( Facing::East, false, ) => 5769,
            })
        }
    }

    impl From<PaleOakWallHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakWallHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakWallHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakWallHangingSign { }

    impl Block for PaleOakWallHangingSign {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:structure_void` block.
pub mod structure_void {
    use super::*;

    /// `minecraft:structure_void` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StructureVoid;

    impl StructureVoid {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13572)
        }
    }

    impl From<StructureVoid> for BlockState {
        #[inline(always)]
        fn from(value : StructureVoid) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StructureVoid {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StructureVoid { }

    impl Block for StructureVoid {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cherry_wood` block.
pub mod cherry_wood {
    use super::*;

    /// `minecraft:cherry_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl CherryWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 216,
                ( Axis::Y, ) => 217,
                ( Axis::Z, ) => 218,
            })
        }
    }

    impl From<CherryWood> for BlockState {
        #[inline(always)]
        fn from(value : CherryWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryWood { }

    impl Block for CherryWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:warped_hyphae` block.
pub mod warped_hyphae {
    use super::*;

    /// `minecraft:warped_hyphae` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedHyphae {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl WarpedHyphae {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 19640,
                ( Axis::Y, ) => 19641,
                ( Axis::Z, ) => 19642,
            })
        }
    }

    impl From<WarpedHyphae> for BlockState {
        #[inline(always)]
        fn from(value : WarpedHyphae) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedHyphae {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedHyphae { }

    impl Block for WarpedHyphae {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:deepslate_brick_wall` block.
pub mod deepslate_brick_wall {
    use super::*;

    /// `minecraft:deepslate_brick_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateBrickWall {
        /// `west` state.
        pub west : West,
        /// `south` state.
        pub south : South,
        /// `north` state.
        pub north : North,
        /// `up` state.
        pub up : bool,
        /// `east` state.
        pub east : East,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    impl DeepslateBrickWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.west, self.south, self.north, self.up, self.east, self.waterlogged, )) {
                ( West::None, South::None, North::None, true, East::None, true, ) => 27319,
                ( West::Low, South::None, North::None, true, East::None, true, ) => 27320,
                ( West::Tall, South::None, North::None, true, East::None, true, ) => 27321,
                ( West::None, South::None, North::None, true, East::None, false, ) => 27322,
                ( West::Low, South::None, North::None, true, East::None, false, ) => 27323,
                ( West::Tall, South::None, North::None, true, East::None, false, ) => 27324,
                ( West::None, South::None, North::None, false, East::None, true, ) => 27325,
                ( West::Low, South::None, North::None, false, East::None, true, ) => 27326,
                ( West::Tall, South::None, North::None, false, East::None, true, ) => 27327,
                ( West::None, South::None, North::None, false, East::None, false, ) => 27328,
                ( West::Low, South::None, North::None, false, East::None, false, ) => 27329,
                ( West::Tall, South::None, North::None, false, East::None, false, ) => 27330,
                ( West::None, South::Low, North::None, true, East::None, true, ) => 27331,
                ( West::Low, South::Low, North::None, true, East::None, true, ) => 27332,
                ( West::Tall, South::Low, North::None, true, East::None, true, ) => 27333,
                ( West::None, South::Low, North::None, true, East::None, false, ) => 27334,
                ( West::Low, South::Low, North::None, true, East::None, false, ) => 27335,
                ( West::Tall, South::Low, North::None, true, East::None, false, ) => 27336,
                ( West::None, South::Low, North::None, false, East::None, true, ) => 27337,
                ( West::Low, South::Low, North::None, false, East::None, true, ) => 27338,
                ( West::Tall, South::Low, North::None, false, East::None, true, ) => 27339,
                ( West::None, South::Low, North::None, false, East::None, false, ) => 27340,
                ( West::Low, South::Low, North::None, false, East::None, false, ) => 27341,
                ( West::Tall, South::Low, North::None, false, East::None, false, ) => 27342,
                ( West::None, South::Tall, North::None, true, East::None, true, ) => 27343,
                ( West::Low, South::Tall, North::None, true, East::None, true, ) => 27344,
                ( West::Tall, South::Tall, North::None, true, East::None, true, ) => 27345,
                ( West::None, South::Tall, North::None, true, East::None, false, ) => 27346,
                ( West::Low, South::Tall, North::None, true, East::None, false, ) => 27347,
                ( West::Tall, South::Tall, North::None, true, East::None, false, ) => 27348,
                ( West::None, South::Tall, North::None, false, East::None, true, ) => 27349,
                ( West::Low, South::Tall, North::None, false, East::None, true, ) => 27350,
                ( West::Tall, South::Tall, North::None, false, East::None, true, ) => 27351,
                ( West::None, South::Tall, North::None, false, East::None, false, ) => 27352,
                ( West::Low, South::Tall, North::None, false, East::None, false, ) => 27353,
                ( West::Tall, South::Tall, North::None, false, East::None, false, ) => 27354,
                ( West::None, South::None, North::Low, true, East::None, true, ) => 27355,
                ( West::Low, South::None, North::Low, true, East::None, true, ) => 27356,
                ( West::Tall, South::None, North::Low, true, East::None, true, ) => 27357,
                ( West::None, South::None, North::Low, true, East::None, false, ) => 27358,
                ( West::Low, South::None, North::Low, true, East::None, false, ) => 27359,
                ( West::Tall, South::None, North::Low, true, East::None, false, ) => 27360,
                ( West::None, South::None, North::Low, false, East::None, true, ) => 27361,
                ( West::Low, South::None, North::Low, false, East::None, true, ) => 27362,
                ( West::Tall, South::None, North::Low, false, East::None, true, ) => 27363,
                ( West::None, South::None, North::Low, false, East::None, false, ) => 27364,
                ( West::Low, South::None, North::Low, false, East::None, false, ) => 27365,
                ( West::Tall, South::None, North::Low, false, East::None, false, ) => 27366,
                ( West::None, South::Low, North::Low, true, East::None, true, ) => 27367,
                ( West::Low, South::Low, North::Low, true, East::None, true, ) => 27368,
                ( West::Tall, South::Low, North::Low, true, East::None, true, ) => 27369,
                ( West::None, South::Low, North::Low, true, East::None, false, ) => 27370,
                ( West::Low, South::Low, North::Low, true, East::None, false, ) => 27371,
                ( West::Tall, South::Low, North::Low, true, East::None, false, ) => 27372,
                ( West::None, South::Low, North::Low, false, East::None, true, ) => 27373,
                ( West::Low, South::Low, North::Low, false, East::None, true, ) => 27374,
                ( West::Tall, South::Low, North::Low, false, East::None, true, ) => 27375,
                ( West::None, South::Low, North::Low, false, East::None, false, ) => 27376,
                ( West::Low, South::Low, North::Low, false, East::None, false, ) => 27377,
                ( West::Tall, South::Low, North::Low, false, East::None, false, ) => 27378,
                ( West::None, South::Tall, North::Low, true, East::None, true, ) => 27379,
                ( West::Low, South::Tall, North::Low, true, East::None, true, ) => 27380,
                ( West::Tall, South::Tall, North::Low, true, East::None, true, ) => 27381,
                ( West::None, South::Tall, North::Low, true, East::None, false, ) => 27382,
                ( West::Low, South::Tall, North::Low, true, East::None, false, ) => 27383,
                ( West::Tall, South::Tall, North::Low, true, East::None, false, ) => 27384,
                ( West::None, South::Tall, North::Low, false, East::None, true, ) => 27385,
                ( West::Low, South::Tall, North::Low, false, East::None, true, ) => 27386,
                ( West::Tall, South::Tall, North::Low, false, East::None, true, ) => 27387,
                ( West::None, South::Tall, North::Low, false, East::None, false, ) => 27388,
                ( West::Low, South::Tall, North::Low, false, East::None, false, ) => 27389,
                ( West::Tall, South::Tall, North::Low, false, East::None, false, ) => 27390,
                ( West::None, South::None, North::Tall, true, East::None, true, ) => 27391,
                ( West::Low, South::None, North::Tall, true, East::None, true, ) => 27392,
                ( West::Tall, South::None, North::Tall, true, East::None, true, ) => 27393,
                ( West::None, South::None, North::Tall, true, East::None, false, ) => 27394,
                ( West::Low, South::None, North::Tall, true, East::None, false, ) => 27395,
                ( West::Tall, South::None, North::Tall, true, East::None, false, ) => 27396,
                ( West::None, South::None, North::Tall, false, East::None, true, ) => 27397,
                ( West::Low, South::None, North::Tall, false, East::None, true, ) => 27398,
                ( West::Tall, South::None, North::Tall, false, East::None, true, ) => 27399,
                ( West::None, South::None, North::Tall, false, East::None, false, ) => 27400,
                ( West::Low, South::None, North::Tall, false, East::None, false, ) => 27401,
                ( West::Tall, South::None, North::Tall, false, East::None, false, ) => 27402,
                ( West::None, South::Low, North::Tall, true, East::None, true, ) => 27403,
                ( West::Low, South::Low, North::Tall, true, East::None, true, ) => 27404,
                ( West::Tall, South::Low, North::Tall, true, East::None, true, ) => 27405,
                ( West::None, South::Low, North::Tall, true, East::None, false, ) => 27406,
                ( West::Low, South::Low, North::Tall, true, East::None, false, ) => 27407,
                ( West::Tall, South::Low, North::Tall, true, East::None, false, ) => 27408,
                ( West::None, South::Low, North::Tall, false, East::None, true, ) => 27409,
                ( West::Low, South::Low, North::Tall, false, East::None, true, ) => 27410,
                ( West::Tall, South::Low, North::Tall, false, East::None, true, ) => 27411,
                ( West::None, South::Low, North::Tall, false, East::None, false, ) => 27412,
                ( West::Low, South::Low, North::Tall, false, East::None, false, ) => 27413,
                ( West::Tall, South::Low, North::Tall, false, East::None, false, ) => 27414,
                ( West::None, South::Tall, North::Tall, true, East::None, true, ) => 27415,
                ( West::Low, South::Tall, North::Tall, true, East::None, true, ) => 27416,
                ( West::Tall, South::Tall, North::Tall, true, East::None, true, ) => 27417,
                ( West::None, South::Tall, North::Tall, true, East::None, false, ) => 27418,
                ( West::Low, South::Tall, North::Tall, true, East::None, false, ) => 27419,
                ( West::Tall, South::Tall, North::Tall, true, East::None, false, ) => 27420,
                ( West::None, South::Tall, North::Tall, false, East::None, true, ) => 27421,
                ( West::Low, South::Tall, North::Tall, false, East::None, true, ) => 27422,
                ( West::Tall, South::Tall, North::Tall, false, East::None, true, ) => 27423,
                ( West::None, South::Tall, North::Tall, false, East::None, false, ) => 27424,
                ( West::Low, South::Tall, North::Tall, false, East::None, false, ) => 27425,
                ( West::Tall, South::Tall, North::Tall, false, East::None, false, ) => 27426,
                ( West::None, South::None, North::None, true, East::Low, true, ) => 27427,
                ( West::Low, South::None, North::None, true, East::Low, true, ) => 27428,
                ( West::Tall, South::None, North::None, true, East::Low, true, ) => 27429,
                ( West::None, South::None, North::None, true, East::Low, false, ) => 27430,
                ( West::Low, South::None, North::None, true, East::Low, false, ) => 27431,
                ( West::Tall, South::None, North::None, true, East::Low, false, ) => 27432,
                ( West::None, South::None, North::None, false, East::Low, true, ) => 27433,
                ( West::Low, South::None, North::None, false, East::Low, true, ) => 27434,
                ( West::Tall, South::None, North::None, false, East::Low, true, ) => 27435,
                ( West::None, South::None, North::None, false, East::Low, false, ) => 27436,
                ( West::Low, South::None, North::None, false, East::Low, false, ) => 27437,
                ( West::Tall, South::None, North::None, false, East::Low, false, ) => 27438,
                ( West::None, South::Low, North::None, true, East::Low, true, ) => 27439,
                ( West::Low, South::Low, North::None, true, East::Low, true, ) => 27440,
                ( West::Tall, South::Low, North::None, true, East::Low, true, ) => 27441,
                ( West::None, South::Low, North::None, true, East::Low, false, ) => 27442,
                ( West::Low, South::Low, North::None, true, East::Low, false, ) => 27443,
                ( West::Tall, South::Low, North::None, true, East::Low, false, ) => 27444,
                ( West::None, South::Low, North::None, false, East::Low, true, ) => 27445,
                ( West::Low, South::Low, North::None, false, East::Low, true, ) => 27446,
                ( West::Tall, South::Low, North::None, false, East::Low, true, ) => 27447,
                ( West::None, South::Low, North::None, false, East::Low, false, ) => 27448,
                ( West::Low, South::Low, North::None, false, East::Low, false, ) => 27449,
                ( West::Tall, South::Low, North::None, false, East::Low, false, ) => 27450,
                ( West::None, South::Tall, North::None, true, East::Low, true, ) => 27451,
                ( West::Low, South::Tall, North::None, true, East::Low, true, ) => 27452,
                ( West::Tall, South::Tall, North::None, true, East::Low, true, ) => 27453,
                ( West::None, South::Tall, North::None, true, East::Low, false, ) => 27454,
                ( West::Low, South::Tall, North::None, true, East::Low, false, ) => 27455,
                ( West::Tall, South::Tall, North::None, true, East::Low, false, ) => 27456,
                ( West::None, South::Tall, North::None, false, East::Low, true, ) => 27457,
                ( West::Low, South::Tall, North::None, false, East::Low, true, ) => 27458,
                ( West::Tall, South::Tall, North::None, false, East::Low, true, ) => 27459,
                ( West::None, South::Tall, North::None, false, East::Low, false, ) => 27460,
                ( West::Low, South::Tall, North::None, false, East::Low, false, ) => 27461,
                ( West::Tall, South::Tall, North::None, false, East::Low, false, ) => 27462,
                ( West::None, South::None, North::Low, true, East::Low, true, ) => 27463,
                ( West::Low, South::None, North::Low, true, East::Low, true, ) => 27464,
                ( West::Tall, South::None, North::Low, true, East::Low, true, ) => 27465,
                ( West::None, South::None, North::Low, true, East::Low, false, ) => 27466,
                ( West::Low, South::None, North::Low, true, East::Low, false, ) => 27467,
                ( West::Tall, South::None, North::Low, true, East::Low, false, ) => 27468,
                ( West::None, South::None, North::Low, false, East::Low, true, ) => 27469,
                ( West::Low, South::None, North::Low, false, East::Low, true, ) => 27470,
                ( West::Tall, South::None, North::Low, false, East::Low, true, ) => 27471,
                ( West::None, South::None, North::Low, false, East::Low, false, ) => 27472,
                ( West::Low, South::None, North::Low, false, East::Low, false, ) => 27473,
                ( West::Tall, South::None, North::Low, false, East::Low, false, ) => 27474,
                ( West::None, South::Low, North::Low, true, East::Low, true, ) => 27475,
                ( West::Low, South::Low, North::Low, true, East::Low, true, ) => 27476,
                ( West::Tall, South::Low, North::Low, true, East::Low, true, ) => 27477,
                ( West::None, South::Low, North::Low, true, East::Low, false, ) => 27478,
                ( West::Low, South::Low, North::Low, true, East::Low, false, ) => 27479,
                ( West::Tall, South::Low, North::Low, true, East::Low, false, ) => 27480,
                ( West::None, South::Low, North::Low, false, East::Low, true, ) => 27481,
                ( West::Low, South::Low, North::Low, false, East::Low, true, ) => 27482,
                ( West::Tall, South::Low, North::Low, false, East::Low, true, ) => 27483,
                ( West::None, South::Low, North::Low, false, East::Low, false, ) => 27484,
                ( West::Low, South::Low, North::Low, false, East::Low, false, ) => 27485,
                ( West::Tall, South::Low, North::Low, false, East::Low, false, ) => 27486,
                ( West::None, South::Tall, North::Low, true, East::Low, true, ) => 27487,
                ( West::Low, South::Tall, North::Low, true, East::Low, true, ) => 27488,
                ( West::Tall, South::Tall, North::Low, true, East::Low, true, ) => 27489,
                ( West::None, South::Tall, North::Low, true, East::Low, false, ) => 27490,
                ( West::Low, South::Tall, North::Low, true, East::Low, false, ) => 27491,
                ( West::Tall, South::Tall, North::Low, true, East::Low, false, ) => 27492,
                ( West::None, South::Tall, North::Low, false, East::Low, true, ) => 27493,
                ( West::Low, South::Tall, North::Low, false, East::Low, true, ) => 27494,
                ( West::Tall, South::Tall, North::Low, false, East::Low, true, ) => 27495,
                ( West::None, South::Tall, North::Low, false, East::Low, false, ) => 27496,
                ( West::Low, South::Tall, North::Low, false, East::Low, false, ) => 27497,
                ( West::Tall, South::Tall, North::Low, false, East::Low, false, ) => 27498,
                ( West::None, South::None, North::Tall, true, East::Low, true, ) => 27499,
                ( West::Low, South::None, North::Tall, true, East::Low, true, ) => 27500,
                ( West::Tall, South::None, North::Tall, true, East::Low, true, ) => 27501,
                ( West::None, South::None, North::Tall, true, East::Low, false, ) => 27502,
                ( West::Low, South::None, North::Tall, true, East::Low, false, ) => 27503,
                ( West::Tall, South::None, North::Tall, true, East::Low, false, ) => 27504,
                ( West::None, South::None, North::Tall, false, East::Low, true, ) => 27505,
                ( West::Low, South::None, North::Tall, false, East::Low, true, ) => 27506,
                ( West::Tall, South::None, North::Tall, false, East::Low, true, ) => 27507,
                ( West::None, South::None, North::Tall, false, East::Low, false, ) => 27508,
                ( West::Low, South::None, North::Tall, false, East::Low, false, ) => 27509,
                ( West::Tall, South::None, North::Tall, false, East::Low, false, ) => 27510,
                ( West::None, South::Low, North::Tall, true, East::Low, true, ) => 27511,
                ( West::Low, South::Low, North::Tall, true, East::Low, true, ) => 27512,
                ( West::Tall, South::Low, North::Tall, true, East::Low, true, ) => 27513,
                ( West::None, South::Low, North::Tall, true, East::Low, false, ) => 27514,
                ( West::Low, South::Low, North::Tall, true, East::Low, false, ) => 27515,
                ( West::Tall, South::Low, North::Tall, true, East::Low, false, ) => 27516,
                ( West::None, South::Low, North::Tall, false, East::Low, true, ) => 27517,
                ( West::Low, South::Low, North::Tall, false, East::Low, true, ) => 27518,
                ( West::Tall, South::Low, North::Tall, false, East::Low, true, ) => 27519,
                ( West::None, South::Low, North::Tall, false, East::Low, false, ) => 27520,
                ( West::Low, South::Low, North::Tall, false, East::Low, false, ) => 27521,
                ( West::Tall, South::Low, North::Tall, false, East::Low, false, ) => 27522,
                ( West::None, South::Tall, North::Tall, true, East::Low, true, ) => 27523,
                ( West::Low, South::Tall, North::Tall, true, East::Low, true, ) => 27524,
                ( West::Tall, South::Tall, North::Tall, true, East::Low, true, ) => 27525,
                ( West::None, South::Tall, North::Tall, true, East::Low, false, ) => 27526,
                ( West::Low, South::Tall, North::Tall, true, East::Low, false, ) => 27527,
                ( West::Tall, South::Tall, North::Tall, true, East::Low, false, ) => 27528,
                ( West::None, South::Tall, North::Tall, false, East::Low, true, ) => 27529,
                ( West::Low, South::Tall, North::Tall, false, East::Low, true, ) => 27530,
                ( West::Tall, South::Tall, North::Tall, false, East::Low, true, ) => 27531,
                ( West::None, South::Tall, North::Tall, false, East::Low, false, ) => 27532,
                ( West::Low, South::Tall, North::Tall, false, East::Low, false, ) => 27533,
                ( West::Tall, South::Tall, North::Tall, false, East::Low, false, ) => 27534,
                ( West::None, South::None, North::None, true, East::Tall, true, ) => 27535,
                ( West::Low, South::None, North::None, true, East::Tall, true, ) => 27536,
                ( West::Tall, South::None, North::None, true, East::Tall, true, ) => 27537,
                ( West::None, South::None, North::None, true, East::Tall, false, ) => 27538,
                ( West::Low, South::None, North::None, true, East::Tall, false, ) => 27539,
                ( West::Tall, South::None, North::None, true, East::Tall, false, ) => 27540,
                ( West::None, South::None, North::None, false, East::Tall, true, ) => 27541,
                ( West::Low, South::None, North::None, false, East::Tall, true, ) => 27542,
                ( West::Tall, South::None, North::None, false, East::Tall, true, ) => 27543,
                ( West::None, South::None, North::None, false, East::Tall, false, ) => 27544,
                ( West::Low, South::None, North::None, false, East::Tall, false, ) => 27545,
                ( West::Tall, South::None, North::None, false, East::Tall, false, ) => 27546,
                ( West::None, South::Low, North::None, true, East::Tall, true, ) => 27547,
                ( West::Low, South::Low, North::None, true, East::Tall, true, ) => 27548,
                ( West::Tall, South::Low, North::None, true, East::Tall, true, ) => 27549,
                ( West::None, South::Low, North::None, true, East::Tall, false, ) => 27550,
                ( West::Low, South::Low, North::None, true, East::Tall, false, ) => 27551,
                ( West::Tall, South::Low, North::None, true, East::Tall, false, ) => 27552,
                ( West::None, South::Low, North::None, false, East::Tall, true, ) => 27553,
                ( West::Low, South::Low, North::None, false, East::Tall, true, ) => 27554,
                ( West::Tall, South::Low, North::None, false, East::Tall, true, ) => 27555,
                ( West::None, South::Low, North::None, false, East::Tall, false, ) => 27556,
                ( West::Low, South::Low, North::None, false, East::Tall, false, ) => 27557,
                ( West::Tall, South::Low, North::None, false, East::Tall, false, ) => 27558,
                ( West::None, South::Tall, North::None, true, East::Tall, true, ) => 27559,
                ( West::Low, South::Tall, North::None, true, East::Tall, true, ) => 27560,
                ( West::Tall, South::Tall, North::None, true, East::Tall, true, ) => 27561,
                ( West::None, South::Tall, North::None, true, East::Tall, false, ) => 27562,
                ( West::Low, South::Tall, North::None, true, East::Tall, false, ) => 27563,
                ( West::Tall, South::Tall, North::None, true, East::Tall, false, ) => 27564,
                ( West::None, South::Tall, North::None, false, East::Tall, true, ) => 27565,
                ( West::Low, South::Tall, North::None, false, East::Tall, true, ) => 27566,
                ( West::Tall, South::Tall, North::None, false, East::Tall, true, ) => 27567,
                ( West::None, South::Tall, North::None, false, East::Tall, false, ) => 27568,
                ( West::Low, South::Tall, North::None, false, East::Tall, false, ) => 27569,
                ( West::Tall, South::Tall, North::None, false, East::Tall, false, ) => 27570,
                ( West::None, South::None, North::Low, true, East::Tall, true, ) => 27571,
                ( West::Low, South::None, North::Low, true, East::Tall, true, ) => 27572,
                ( West::Tall, South::None, North::Low, true, East::Tall, true, ) => 27573,
                ( West::None, South::None, North::Low, true, East::Tall, false, ) => 27574,
                ( West::Low, South::None, North::Low, true, East::Tall, false, ) => 27575,
                ( West::Tall, South::None, North::Low, true, East::Tall, false, ) => 27576,
                ( West::None, South::None, North::Low, false, East::Tall, true, ) => 27577,
                ( West::Low, South::None, North::Low, false, East::Tall, true, ) => 27578,
                ( West::Tall, South::None, North::Low, false, East::Tall, true, ) => 27579,
                ( West::None, South::None, North::Low, false, East::Tall, false, ) => 27580,
                ( West::Low, South::None, North::Low, false, East::Tall, false, ) => 27581,
                ( West::Tall, South::None, North::Low, false, East::Tall, false, ) => 27582,
                ( West::None, South::Low, North::Low, true, East::Tall, true, ) => 27583,
                ( West::Low, South::Low, North::Low, true, East::Tall, true, ) => 27584,
                ( West::Tall, South::Low, North::Low, true, East::Tall, true, ) => 27585,
                ( West::None, South::Low, North::Low, true, East::Tall, false, ) => 27586,
                ( West::Low, South::Low, North::Low, true, East::Tall, false, ) => 27587,
                ( West::Tall, South::Low, North::Low, true, East::Tall, false, ) => 27588,
                ( West::None, South::Low, North::Low, false, East::Tall, true, ) => 27589,
                ( West::Low, South::Low, North::Low, false, East::Tall, true, ) => 27590,
                ( West::Tall, South::Low, North::Low, false, East::Tall, true, ) => 27591,
                ( West::None, South::Low, North::Low, false, East::Tall, false, ) => 27592,
                ( West::Low, South::Low, North::Low, false, East::Tall, false, ) => 27593,
                ( West::Tall, South::Low, North::Low, false, East::Tall, false, ) => 27594,
                ( West::None, South::Tall, North::Low, true, East::Tall, true, ) => 27595,
                ( West::Low, South::Tall, North::Low, true, East::Tall, true, ) => 27596,
                ( West::Tall, South::Tall, North::Low, true, East::Tall, true, ) => 27597,
                ( West::None, South::Tall, North::Low, true, East::Tall, false, ) => 27598,
                ( West::Low, South::Tall, North::Low, true, East::Tall, false, ) => 27599,
                ( West::Tall, South::Tall, North::Low, true, East::Tall, false, ) => 27600,
                ( West::None, South::Tall, North::Low, false, East::Tall, true, ) => 27601,
                ( West::Low, South::Tall, North::Low, false, East::Tall, true, ) => 27602,
                ( West::Tall, South::Tall, North::Low, false, East::Tall, true, ) => 27603,
                ( West::None, South::Tall, North::Low, false, East::Tall, false, ) => 27604,
                ( West::Low, South::Tall, North::Low, false, East::Tall, false, ) => 27605,
                ( West::Tall, South::Tall, North::Low, false, East::Tall, false, ) => 27606,
                ( West::None, South::None, North::Tall, true, East::Tall, true, ) => 27607,
                ( West::Low, South::None, North::Tall, true, East::Tall, true, ) => 27608,
                ( West::Tall, South::None, North::Tall, true, East::Tall, true, ) => 27609,
                ( West::None, South::None, North::Tall, true, East::Tall, false, ) => 27610,
                ( West::Low, South::None, North::Tall, true, East::Tall, false, ) => 27611,
                ( West::Tall, South::None, North::Tall, true, East::Tall, false, ) => 27612,
                ( West::None, South::None, North::Tall, false, East::Tall, true, ) => 27613,
                ( West::Low, South::None, North::Tall, false, East::Tall, true, ) => 27614,
                ( West::Tall, South::None, North::Tall, false, East::Tall, true, ) => 27615,
                ( West::None, South::None, North::Tall, false, East::Tall, false, ) => 27616,
                ( West::Low, South::None, North::Tall, false, East::Tall, false, ) => 27617,
                ( West::Tall, South::None, North::Tall, false, East::Tall, false, ) => 27618,
                ( West::None, South::Low, North::Tall, true, East::Tall, true, ) => 27619,
                ( West::Low, South::Low, North::Tall, true, East::Tall, true, ) => 27620,
                ( West::Tall, South::Low, North::Tall, true, East::Tall, true, ) => 27621,
                ( West::None, South::Low, North::Tall, true, East::Tall, false, ) => 27622,
                ( West::Low, South::Low, North::Tall, true, East::Tall, false, ) => 27623,
                ( West::Tall, South::Low, North::Tall, true, East::Tall, false, ) => 27624,
                ( West::None, South::Low, North::Tall, false, East::Tall, true, ) => 27625,
                ( West::Low, South::Low, North::Tall, false, East::Tall, true, ) => 27626,
                ( West::Tall, South::Low, North::Tall, false, East::Tall, true, ) => 27627,
                ( West::None, South::Low, North::Tall, false, East::Tall, false, ) => 27628,
                ( West::Low, South::Low, North::Tall, false, East::Tall, false, ) => 27629,
                ( West::Tall, South::Low, North::Tall, false, East::Tall, false, ) => 27630,
                ( West::None, South::Tall, North::Tall, true, East::Tall, true, ) => 27631,
                ( West::Low, South::Tall, North::Tall, true, East::Tall, true, ) => 27632,
                ( West::Tall, South::Tall, North::Tall, true, East::Tall, true, ) => 27633,
                ( West::None, South::Tall, North::Tall, true, East::Tall, false, ) => 27634,
                ( West::Low, South::Tall, North::Tall, true, East::Tall, false, ) => 27635,
                ( West::Tall, South::Tall, North::Tall, true, East::Tall, false, ) => 27636,
                ( West::None, South::Tall, North::Tall, false, East::Tall, true, ) => 27637,
                ( West::Low, South::Tall, North::Tall, false, East::Tall, true, ) => 27638,
                ( West::Tall, South::Tall, North::Tall, false, East::Tall, true, ) => 27639,
                ( West::None, South::Tall, North::Tall, false, East::Tall, false, ) => 27640,
                ( West::Low, South::Tall, North::Tall, false, East::Tall, false, ) => 27641,
                ( West::Tall, South::Tall, North::Tall, false, East::Tall, false, ) => 27642,
            })
        }
    }

    impl From<DeepslateBrickWall> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateBrickWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateBrickWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateBrickWall { }

    impl Block for DeepslateBrickWall {
        const DEFAULT_STATE : Self = Self {
            west : West::None,
            south : South::None,
            north : North::None,
            up : true,
            east : East::None,
            waterlogged : false,
        };
    }

}

/// `minecraft:polished_tuff_stairs` block.
pub mod polished_tuff_stairs {
    use super::*;

    /// `minecraft:polished_tuff_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedTuffStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl PolishedTuffStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.half, self.shape, self.waterlogged, )) {
                ( Facing::North, Half::Top, Shape::Straight, true, ) => 22559,
                ( Facing::North, Half::Top, Shape::Straight, false, ) => 22560,
                ( Facing::North, Half::Top, Shape::InnerLeft, true, ) => 22561,
                ( Facing::North, Half::Top, Shape::InnerLeft, false, ) => 22562,
                ( Facing::North, Half::Top, Shape::InnerRight, true, ) => 22563,
                ( Facing::North, Half::Top, Shape::InnerRight, false, ) => 22564,
                ( Facing::North, Half::Top, Shape::OuterLeft, true, ) => 22565,
                ( Facing::North, Half::Top, Shape::OuterLeft, false, ) => 22566,
                ( Facing::North, Half::Top, Shape::OuterRight, true, ) => 22567,
                ( Facing::North, Half::Top, Shape::OuterRight, false, ) => 22568,
                ( Facing::North, Half::Bottom, Shape::Straight, true, ) => 22569,
                ( Facing::North, Half::Bottom, Shape::Straight, false, ) => 22570,
                ( Facing::North, Half::Bottom, Shape::InnerLeft, true, ) => 22571,
                ( Facing::North, Half::Bottom, Shape::InnerLeft, false, ) => 22572,
                ( Facing::North, Half::Bottom, Shape::InnerRight, true, ) => 22573,
                ( Facing::North, Half::Bottom, Shape::InnerRight, false, ) => 22574,
                ( Facing::North, Half::Bottom, Shape::OuterLeft, true, ) => 22575,
                ( Facing::North, Half::Bottom, Shape::OuterLeft, false, ) => 22576,
                ( Facing::North, Half::Bottom, Shape::OuterRight, true, ) => 22577,
                ( Facing::North, Half::Bottom, Shape::OuterRight, false, ) => 22578,
                ( Facing::South, Half::Top, Shape::Straight, true, ) => 22579,
                ( Facing::South, Half::Top, Shape::Straight, false, ) => 22580,
                ( Facing::South, Half::Top, Shape::InnerLeft, true, ) => 22581,
                ( Facing::South, Half::Top, Shape::InnerLeft, false, ) => 22582,
                ( Facing::South, Half::Top, Shape::InnerRight, true, ) => 22583,
                ( Facing::South, Half::Top, Shape::InnerRight, false, ) => 22584,
                ( Facing::South, Half::Top, Shape::OuterLeft, true, ) => 22585,
                ( Facing::South, Half::Top, Shape::OuterLeft, false, ) => 22586,
                ( Facing::South, Half::Top, Shape::OuterRight, true, ) => 22587,
                ( Facing::South, Half::Top, Shape::OuterRight, false, ) => 22588,
                ( Facing::South, Half::Bottom, Shape::Straight, true, ) => 22589,
                ( Facing::South, Half::Bottom, Shape::Straight, false, ) => 22590,
                ( Facing::South, Half::Bottom, Shape::InnerLeft, true, ) => 22591,
                ( Facing::South, Half::Bottom, Shape::InnerLeft, false, ) => 22592,
                ( Facing::South, Half::Bottom, Shape::InnerRight, true, ) => 22593,
                ( Facing::South, Half::Bottom, Shape::InnerRight, false, ) => 22594,
                ( Facing::South, Half::Bottom, Shape::OuterLeft, true, ) => 22595,
                ( Facing::South, Half::Bottom, Shape::OuterLeft, false, ) => 22596,
                ( Facing::South, Half::Bottom, Shape::OuterRight, true, ) => 22597,
                ( Facing::South, Half::Bottom, Shape::OuterRight, false, ) => 22598,
                ( Facing::West, Half::Top, Shape::Straight, true, ) => 22599,
                ( Facing::West, Half::Top, Shape::Straight, false, ) => 22600,
                ( Facing::West, Half::Top, Shape::InnerLeft, true, ) => 22601,
                ( Facing::West, Half::Top, Shape::InnerLeft, false, ) => 22602,
                ( Facing::West, Half::Top, Shape::InnerRight, true, ) => 22603,
                ( Facing::West, Half::Top, Shape::InnerRight, false, ) => 22604,
                ( Facing::West, Half::Top, Shape::OuterLeft, true, ) => 22605,
                ( Facing::West, Half::Top, Shape::OuterLeft, false, ) => 22606,
                ( Facing::West, Half::Top, Shape::OuterRight, true, ) => 22607,
                ( Facing::West, Half::Top, Shape::OuterRight, false, ) => 22608,
                ( Facing::West, Half::Bottom, Shape::Straight, true, ) => 22609,
                ( Facing::West, Half::Bottom, Shape::Straight, false, ) => 22610,
                ( Facing::West, Half::Bottom, Shape::InnerLeft, true, ) => 22611,
                ( Facing::West, Half::Bottom, Shape::InnerLeft, false, ) => 22612,
                ( Facing::West, Half::Bottom, Shape::InnerRight, true, ) => 22613,
                ( Facing::West, Half::Bottom, Shape::InnerRight, false, ) => 22614,
                ( Facing::West, Half::Bottom, Shape::OuterLeft, true, ) => 22615,
                ( Facing::West, Half::Bottom, Shape::OuterLeft, false, ) => 22616,
                ( Facing::West, Half::Bottom, Shape::OuterRight, true, ) => 22617,
                ( Facing::West, Half::Bottom, Shape::OuterRight, false, ) => 22618,
                ( Facing::East, Half::Top, Shape::Straight, true, ) => 22619,
                ( Facing::East, Half::Top, Shape::Straight, false, ) => 22620,
                ( Facing::East, Half::Top, Shape::InnerLeft, true, ) => 22621,
                ( Facing::East, Half::Top, Shape::InnerLeft, false, ) => 22622,
                ( Facing::East, Half::Top, Shape::InnerRight, true, ) => 22623,
                ( Facing::East, Half::Top, Shape::InnerRight, false, ) => 22624,
                ( Facing::East, Half::Top, Shape::OuterLeft, true, ) => 22625,
                ( Facing::East, Half::Top, Shape::OuterLeft, false, ) => 22626,
                ( Facing::East, Half::Top, Shape::OuterRight, true, ) => 22627,
                ( Facing::East, Half::Top, Shape::OuterRight, false, ) => 22628,
                ( Facing::East, Half::Bottom, Shape::Straight, true, ) => 22629,
                ( Facing::East, Half::Bottom, Shape::Straight, false, ) => 22630,
                ( Facing::East, Half::Bottom, Shape::InnerLeft, true, ) => 22631,
                ( Facing::East, Half::Bottom, Shape::InnerLeft, false, ) => 22632,
                ( Facing::East, Half::Bottom, Shape::InnerRight, true, ) => 22633,
                ( Facing::East, Half::Bottom, Shape::InnerRight, false, ) => 22634,
                ( Facing::East, Half::Bottom, Shape::OuterLeft, true, ) => 22635,
                ( Facing::East, Half::Bottom, Shape::OuterLeft, false, ) => 22636,
                ( Facing::East, Half::Bottom, Shape::OuterRight, true, ) => 22637,
                ( Facing::East, Half::Bottom, Shape::OuterRight, false, ) => 22638,
            })
        }
    }

    impl From<PolishedTuffStairs> for BlockState {
        #[inline(always)]
        fn from(value : PolishedTuffStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedTuffStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedTuffStairs { }

    impl Block for PolishedTuffStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            half : Half::Bottom,
            shape : Shape::Straight,
            waterlogged : false,
        };
    }

}

/// `minecraft:waxed_copper_grate` block.
pub mod waxed_copper_grate {
    use super::*;

    /// `minecraft:waxed_copper_grate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedCopperGrate {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl WaxedCopperGrate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 25744,
                ( false, ) => 25745,
            })
        }
    }

    impl From<WaxedCopperGrate> for BlockState {
        #[inline(always)]
        fn from(value : WaxedCopperGrate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedCopperGrate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedCopperGrate { }

    impl Block for WaxedCopperGrate {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
        };
    }

}

/// `minecraft:moss_block` block.
pub mod moss_block {
    use super::*;

    /// `minecraft:moss_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MossBlock;

    impl MossBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(25935)
        }
    }

    impl From<MossBlock> for BlockState {
        #[inline(always)]
        fn from(value : MossBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MossBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MossBlock { }

    impl Block for MossBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:water` block.
pub mod water {
    use super::*;

    /// `minecraft:water` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Water {
        /// `level` state.
        pub level : Level,
    }

    /// `level` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Level {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Level { }
    impl BlockProperty for Level { }

    impl Water {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.level, )) {
                ( Level::N0, ) => 86,
                ( Level::N1, ) => 87,
                ( Level::N2, ) => 88,
                ( Level::N3, ) => 89,
                ( Level::N4, ) => 90,
                ( Level::N5, ) => 91,
                ( Level::N6, ) => 92,
                ( Level::N7, ) => 93,
                ( Level::N8, ) => 94,
                ( Level::N9, ) => 95,
                ( Level::N10, ) => 96,
                ( Level::N11, ) => 97,
                ( Level::N12, ) => 98,
                ( Level::N13, ) => 99,
                ( Level::N14, ) => 100,
                ( Level::N15, ) => 101,
            })
        }
    }

    impl From<Water> for BlockState {
        #[inline(always)]
        fn from(value : Water) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Water {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Water { }

    impl Block for Water {
        const DEFAULT_STATE : Self = Self {
            level : Level::N0,
        };
    }

}

/// `minecraft:oak_sapling` block.
pub mod oak_sapling {
    use super::*;

    /// `minecraft:oak_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakSapling {
        /// `stage` state.
        pub stage : Stage,
    }

    /// `stage` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Stage {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
    }
    impl crate::Sealed for Stage { }
    impl BlockProperty for Stage { }

    impl OakSapling {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.stage, )) {
                ( Stage::N0, ) => 29,
                ( Stage::N1, ) => 30,
            })
        }
    }

    impl From<OakSapling> for BlockState {
        #[inline(always)]
        fn from(value : OakSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakSapling { }

    impl Block for OakSapling {
        const DEFAULT_STATE : Self = Self {
            stage : Stage::N0,
        };
    }

}

/// `minecraft:stripped_spruce_wood` block.
pub mod stripped_spruce_wood {
    use super::*;

    /// `minecraft:stripped_spruce_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedSpruceWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedSpruceWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 228,
                ( Axis::Y, ) => 229,
                ( Axis::Z, ) => 230,
            })
        }
    }

    impl From<StrippedSpruceWood> for BlockState {
        #[inline(always)]
        fn from(value : StrippedSpruceWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedSpruceWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedSpruceWood { }

    impl Block for StrippedSpruceWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:dead_horn_coral` block.
pub mod dead_horn_coral {
    use super::*;

    /// `minecraft:dead_horn_coral` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadHornCoral {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl DeadHornCoral {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13876,
                ( false, ) => 13877,
            })
        }
    }

    impl From<DeadHornCoral> for BlockState {
        #[inline(always)]
        fn from(value : DeadHornCoral) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadHornCoral {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadHornCoral { }

    impl Block for DeadHornCoral {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:gray_stained_glass` block.
pub mod gray_stained_glass {
    use super::*;

    /// `minecraft:gray_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayStainedGlass;

    impl GrayStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6131)
        }
    }

    impl From<GrayStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : GrayStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayStainedGlass { }

    impl Block for GrayStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:light_blue_wool` block.
pub mod light_blue_wool {
    use super::*;

    /// `minecraft:light_blue_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueWool;

    impl LightBlueWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2096)
        }
    }

    impl From<LightBlueWool> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueWool { }

    impl Block for LightBlueWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:polished_deepslate_wall` block.
pub mod polished_deepslate_wall {
    use super::*;

    /// `minecraft:polished_deepslate_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedDeepslateWall {
        /// `up` state.
        pub up : bool,
        /// `east` state.
        pub east : East,
        /// `north` state.
        pub north : North,
        /// `south` state.
        pub south : South,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : West,
    }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    impl PolishedDeepslateWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.up, self.east, self.north, self.south, self.waterlogged, self.west, )) {
                ( true, East::None, North::None, South::None, true, West::None, ) => 26497,
                ( true, East::None, North::None, South::None, true, West::Low, ) => 26498,
                ( true, East::None, North::None, South::None, true, West::Tall, ) => 26499,
                ( true, East::None, North::None, South::None, false, West::None, ) => 26500,
                ( true, East::None, North::None, South::None, false, West::Low, ) => 26501,
                ( true, East::None, North::None, South::None, false, West::Tall, ) => 26502,
                ( false, East::None, North::None, South::None, true, West::None, ) => 26503,
                ( false, East::None, North::None, South::None, true, West::Low, ) => 26504,
                ( false, East::None, North::None, South::None, true, West::Tall, ) => 26505,
                ( false, East::None, North::None, South::None, false, West::None, ) => 26506,
                ( false, East::None, North::None, South::None, false, West::Low, ) => 26507,
                ( false, East::None, North::None, South::None, false, West::Tall, ) => 26508,
                ( true, East::None, North::None, South::Low, true, West::None, ) => 26509,
                ( true, East::None, North::None, South::Low, true, West::Low, ) => 26510,
                ( true, East::None, North::None, South::Low, true, West::Tall, ) => 26511,
                ( true, East::None, North::None, South::Low, false, West::None, ) => 26512,
                ( true, East::None, North::None, South::Low, false, West::Low, ) => 26513,
                ( true, East::None, North::None, South::Low, false, West::Tall, ) => 26514,
                ( false, East::None, North::None, South::Low, true, West::None, ) => 26515,
                ( false, East::None, North::None, South::Low, true, West::Low, ) => 26516,
                ( false, East::None, North::None, South::Low, true, West::Tall, ) => 26517,
                ( false, East::None, North::None, South::Low, false, West::None, ) => 26518,
                ( false, East::None, North::None, South::Low, false, West::Low, ) => 26519,
                ( false, East::None, North::None, South::Low, false, West::Tall, ) => 26520,
                ( true, East::None, North::None, South::Tall, true, West::None, ) => 26521,
                ( true, East::None, North::None, South::Tall, true, West::Low, ) => 26522,
                ( true, East::None, North::None, South::Tall, true, West::Tall, ) => 26523,
                ( true, East::None, North::None, South::Tall, false, West::None, ) => 26524,
                ( true, East::None, North::None, South::Tall, false, West::Low, ) => 26525,
                ( true, East::None, North::None, South::Tall, false, West::Tall, ) => 26526,
                ( false, East::None, North::None, South::Tall, true, West::None, ) => 26527,
                ( false, East::None, North::None, South::Tall, true, West::Low, ) => 26528,
                ( false, East::None, North::None, South::Tall, true, West::Tall, ) => 26529,
                ( false, East::None, North::None, South::Tall, false, West::None, ) => 26530,
                ( false, East::None, North::None, South::Tall, false, West::Low, ) => 26531,
                ( false, East::None, North::None, South::Tall, false, West::Tall, ) => 26532,
                ( true, East::None, North::Low, South::None, true, West::None, ) => 26533,
                ( true, East::None, North::Low, South::None, true, West::Low, ) => 26534,
                ( true, East::None, North::Low, South::None, true, West::Tall, ) => 26535,
                ( true, East::None, North::Low, South::None, false, West::None, ) => 26536,
                ( true, East::None, North::Low, South::None, false, West::Low, ) => 26537,
                ( true, East::None, North::Low, South::None, false, West::Tall, ) => 26538,
                ( false, East::None, North::Low, South::None, true, West::None, ) => 26539,
                ( false, East::None, North::Low, South::None, true, West::Low, ) => 26540,
                ( false, East::None, North::Low, South::None, true, West::Tall, ) => 26541,
                ( false, East::None, North::Low, South::None, false, West::None, ) => 26542,
                ( false, East::None, North::Low, South::None, false, West::Low, ) => 26543,
                ( false, East::None, North::Low, South::None, false, West::Tall, ) => 26544,
                ( true, East::None, North::Low, South::Low, true, West::None, ) => 26545,
                ( true, East::None, North::Low, South::Low, true, West::Low, ) => 26546,
                ( true, East::None, North::Low, South::Low, true, West::Tall, ) => 26547,
                ( true, East::None, North::Low, South::Low, false, West::None, ) => 26548,
                ( true, East::None, North::Low, South::Low, false, West::Low, ) => 26549,
                ( true, East::None, North::Low, South::Low, false, West::Tall, ) => 26550,
                ( false, East::None, North::Low, South::Low, true, West::None, ) => 26551,
                ( false, East::None, North::Low, South::Low, true, West::Low, ) => 26552,
                ( false, East::None, North::Low, South::Low, true, West::Tall, ) => 26553,
                ( false, East::None, North::Low, South::Low, false, West::None, ) => 26554,
                ( false, East::None, North::Low, South::Low, false, West::Low, ) => 26555,
                ( false, East::None, North::Low, South::Low, false, West::Tall, ) => 26556,
                ( true, East::None, North::Low, South::Tall, true, West::None, ) => 26557,
                ( true, East::None, North::Low, South::Tall, true, West::Low, ) => 26558,
                ( true, East::None, North::Low, South::Tall, true, West::Tall, ) => 26559,
                ( true, East::None, North::Low, South::Tall, false, West::None, ) => 26560,
                ( true, East::None, North::Low, South::Tall, false, West::Low, ) => 26561,
                ( true, East::None, North::Low, South::Tall, false, West::Tall, ) => 26562,
                ( false, East::None, North::Low, South::Tall, true, West::None, ) => 26563,
                ( false, East::None, North::Low, South::Tall, true, West::Low, ) => 26564,
                ( false, East::None, North::Low, South::Tall, true, West::Tall, ) => 26565,
                ( false, East::None, North::Low, South::Tall, false, West::None, ) => 26566,
                ( false, East::None, North::Low, South::Tall, false, West::Low, ) => 26567,
                ( false, East::None, North::Low, South::Tall, false, West::Tall, ) => 26568,
                ( true, East::None, North::Tall, South::None, true, West::None, ) => 26569,
                ( true, East::None, North::Tall, South::None, true, West::Low, ) => 26570,
                ( true, East::None, North::Tall, South::None, true, West::Tall, ) => 26571,
                ( true, East::None, North::Tall, South::None, false, West::None, ) => 26572,
                ( true, East::None, North::Tall, South::None, false, West::Low, ) => 26573,
                ( true, East::None, North::Tall, South::None, false, West::Tall, ) => 26574,
                ( false, East::None, North::Tall, South::None, true, West::None, ) => 26575,
                ( false, East::None, North::Tall, South::None, true, West::Low, ) => 26576,
                ( false, East::None, North::Tall, South::None, true, West::Tall, ) => 26577,
                ( false, East::None, North::Tall, South::None, false, West::None, ) => 26578,
                ( false, East::None, North::Tall, South::None, false, West::Low, ) => 26579,
                ( false, East::None, North::Tall, South::None, false, West::Tall, ) => 26580,
                ( true, East::None, North::Tall, South::Low, true, West::None, ) => 26581,
                ( true, East::None, North::Tall, South::Low, true, West::Low, ) => 26582,
                ( true, East::None, North::Tall, South::Low, true, West::Tall, ) => 26583,
                ( true, East::None, North::Tall, South::Low, false, West::None, ) => 26584,
                ( true, East::None, North::Tall, South::Low, false, West::Low, ) => 26585,
                ( true, East::None, North::Tall, South::Low, false, West::Tall, ) => 26586,
                ( false, East::None, North::Tall, South::Low, true, West::None, ) => 26587,
                ( false, East::None, North::Tall, South::Low, true, West::Low, ) => 26588,
                ( false, East::None, North::Tall, South::Low, true, West::Tall, ) => 26589,
                ( false, East::None, North::Tall, South::Low, false, West::None, ) => 26590,
                ( false, East::None, North::Tall, South::Low, false, West::Low, ) => 26591,
                ( false, East::None, North::Tall, South::Low, false, West::Tall, ) => 26592,
                ( true, East::None, North::Tall, South::Tall, true, West::None, ) => 26593,
                ( true, East::None, North::Tall, South::Tall, true, West::Low, ) => 26594,
                ( true, East::None, North::Tall, South::Tall, true, West::Tall, ) => 26595,
                ( true, East::None, North::Tall, South::Tall, false, West::None, ) => 26596,
                ( true, East::None, North::Tall, South::Tall, false, West::Low, ) => 26597,
                ( true, East::None, North::Tall, South::Tall, false, West::Tall, ) => 26598,
                ( false, East::None, North::Tall, South::Tall, true, West::None, ) => 26599,
                ( false, East::None, North::Tall, South::Tall, true, West::Low, ) => 26600,
                ( false, East::None, North::Tall, South::Tall, true, West::Tall, ) => 26601,
                ( false, East::None, North::Tall, South::Tall, false, West::None, ) => 26602,
                ( false, East::None, North::Tall, South::Tall, false, West::Low, ) => 26603,
                ( false, East::None, North::Tall, South::Tall, false, West::Tall, ) => 26604,
                ( true, East::Low, North::None, South::None, true, West::None, ) => 26605,
                ( true, East::Low, North::None, South::None, true, West::Low, ) => 26606,
                ( true, East::Low, North::None, South::None, true, West::Tall, ) => 26607,
                ( true, East::Low, North::None, South::None, false, West::None, ) => 26608,
                ( true, East::Low, North::None, South::None, false, West::Low, ) => 26609,
                ( true, East::Low, North::None, South::None, false, West::Tall, ) => 26610,
                ( false, East::Low, North::None, South::None, true, West::None, ) => 26611,
                ( false, East::Low, North::None, South::None, true, West::Low, ) => 26612,
                ( false, East::Low, North::None, South::None, true, West::Tall, ) => 26613,
                ( false, East::Low, North::None, South::None, false, West::None, ) => 26614,
                ( false, East::Low, North::None, South::None, false, West::Low, ) => 26615,
                ( false, East::Low, North::None, South::None, false, West::Tall, ) => 26616,
                ( true, East::Low, North::None, South::Low, true, West::None, ) => 26617,
                ( true, East::Low, North::None, South::Low, true, West::Low, ) => 26618,
                ( true, East::Low, North::None, South::Low, true, West::Tall, ) => 26619,
                ( true, East::Low, North::None, South::Low, false, West::None, ) => 26620,
                ( true, East::Low, North::None, South::Low, false, West::Low, ) => 26621,
                ( true, East::Low, North::None, South::Low, false, West::Tall, ) => 26622,
                ( false, East::Low, North::None, South::Low, true, West::None, ) => 26623,
                ( false, East::Low, North::None, South::Low, true, West::Low, ) => 26624,
                ( false, East::Low, North::None, South::Low, true, West::Tall, ) => 26625,
                ( false, East::Low, North::None, South::Low, false, West::None, ) => 26626,
                ( false, East::Low, North::None, South::Low, false, West::Low, ) => 26627,
                ( false, East::Low, North::None, South::Low, false, West::Tall, ) => 26628,
                ( true, East::Low, North::None, South::Tall, true, West::None, ) => 26629,
                ( true, East::Low, North::None, South::Tall, true, West::Low, ) => 26630,
                ( true, East::Low, North::None, South::Tall, true, West::Tall, ) => 26631,
                ( true, East::Low, North::None, South::Tall, false, West::None, ) => 26632,
                ( true, East::Low, North::None, South::Tall, false, West::Low, ) => 26633,
                ( true, East::Low, North::None, South::Tall, false, West::Tall, ) => 26634,
                ( false, East::Low, North::None, South::Tall, true, West::None, ) => 26635,
                ( false, East::Low, North::None, South::Tall, true, West::Low, ) => 26636,
                ( false, East::Low, North::None, South::Tall, true, West::Tall, ) => 26637,
                ( false, East::Low, North::None, South::Tall, false, West::None, ) => 26638,
                ( false, East::Low, North::None, South::Tall, false, West::Low, ) => 26639,
                ( false, East::Low, North::None, South::Tall, false, West::Tall, ) => 26640,
                ( true, East::Low, North::Low, South::None, true, West::None, ) => 26641,
                ( true, East::Low, North::Low, South::None, true, West::Low, ) => 26642,
                ( true, East::Low, North::Low, South::None, true, West::Tall, ) => 26643,
                ( true, East::Low, North::Low, South::None, false, West::None, ) => 26644,
                ( true, East::Low, North::Low, South::None, false, West::Low, ) => 26645,
                ( true, East::Low, North::Low, South::None, false, West::Tall, ) => 26646,
                ( false, East::Low, North::Low, South::None, true, West::None, ) => 26647,
                ( false, East::Low, North::Low, South::None, true, West::Low, ) => 26648,
                ( false, East::Low, North::Low, South::None, true, West::Tall, ) => 26649,
                ( false, East::Low, North::Low, South::None, false, West::None, ) => 26650,
                ( false, East::Low, North::Low, South::None, false, West::Low, ) => 26651,
                ( false, East::Low, North::Low, South::None, false, West::Tall, ) => 26652,
                ( true, East::Low, North::Low, South::Low, true, West::None, ) => 26653,
                ( true, East::Low, North::Low, South::Low, true, West::Low, ) => 26654,
                ( true, East::Low, North::Low, South::Low, true, West::Tall, ) => 26655,
                ( true, East::Low, North::Low, South::Low, false, West::None, ) => 26656,
                ( true, East::Low, North::Low, South::Low, false, West::Low, ) => 26657,
                ( true, East::Low, North::Low, South::Low, false, West::Tall, ) => 26658,
                ( false, East::Low, North::Low, South::Low, true, West::None, ) => 26659,
                ( false, East::Low, North::Low, South::Low, true, West::Low, ) => 26660,
                ( false, East::Low, North::Low, South::Low, true, West::Tall, ) => 26661,
                ( false, East::Low, North::Low, South::Low, false, West::None, ) => 26662,
                ( false, East::Low, North::Low, South::Low, false, West::Low, ) => 26663,
                ( false, East::Low, North::Low, South::Low, false, West::Tall, ) => 26664,
                ( true, East::Low, North::Low, South::Tall, true, West::None, ) => 26665,
                ( true, East::Low, North::Low, South::Tall, true, West::Low, ) => 26666,
                ( true, East::Low, North::Low, South::Tall, true, West::Tall, ) => 26667,
                ( true, East::Low, North::Low, South::Tall, false, West::None, ) => 26668,
                ( true, East::Low, North::Low, South::Tall, false, West::Low, ) => 26669,
                ( true, East::Low, North::Low, South::Tall, false, West::Tall, ) => 26670,
                ( false, East::Low, North::Low, South::Tall, true, West::None, ) => 26671,
                ( false, East::Low, North::Low, South::Tall, true, West::Low, ) => 26672,
                ( false, East::Low, North::Low, South::Tall, true, West::Tall, ) => 26673,
                ( false, East::Low, North::Low, South::Tall, false, West::None, ) => 26674,
                ( false, East::Low, North::Low, South::Tall, false, West::Low, ) => 26675,
                ( false, East::Low, North::Low, South::Tall, false, West::Tall, ) => 26676,
                ( true, East::Low, North::Tall, South::None, true, West::None, ) => 26677,
                ( true, East::Low, North::Tall, South::None, true, West::Low, ) => 26678,
                ( true, East::Low, North::Tall, South::None, true, West::Tall, ) => 26679,
                ( true, East::Low, North::Tall, South::None, false, West::None, ) => 26680,
                ( true, East::Low, North::Tall, South::None, false, West::Low, ) => 26681,
                ( true, East::Low, North::Tall, South::None, false, West::Tall, ) => 26682,
                ( false, East::Low, North::Tall, South::None, true, West::None, ) => 26683,
                ( false, East::Low, North::Tall, South::None, true, West::Low, ) => 26684,
                ( false, East::Low, North::Tall, South::None, true, West::Tall, ) => 26685,
                ( false, East::Low, North::Tall, South::None, false, West::None, ) => 26686,
                ( false, East::Low, North::Tall, South::None, false, West::Low, ) => 26687,
                ( false, East::Low, North::Tall, South::None, false, West::Tall, ) => 26688,
                ( true, East::Low, North::Tall, South::Low, true, West::None, ) => 26689,
                ( true, East::Low, North::Tall, South::Low, true, West::Low, ) => 26690,
                ( true, East::Low, North::Tall, South::Low, true, West::Tall, ) => 26691,
                ( true, East::Low, North::Tall, South::Low, false, West::None, ) => 26692,
                ( true, East::Low, North::Tall, South::Low, false, West::Low, ) => 26693,
                ( true, East::Low, North::Tall, South::Low, false, West::Tall, ) => 26694,
                ( false, East::Low, North::Tall, South::Low, true, West::None, ) => 26695,
                ( false, East::Low, North::Tall, South::Low, true, West::Low, ) => 26696,
                ( false, East::Low, North::Tall, South::Low, true, West::Tall, ) => 26697,
                ( false, East::Low, North::Tall, South::Low, false, West::None, ) => 26698,
                ( false, East::Low, North::Tall, South::Low, false, West::Low, ) => 26699,
                ( false, East::Low, North::Tall, South::Low, false, West::Tall, ) => 26700,
                ( true, East::Low, North::Tall, South::Tall, true, West::None, ) => 26701,
                ( true, East::Low, North::Tall, South::Tall, true, West::Low, ) => 26702,
                ( true, East::Low, North::Tall, South::Tall, true, West::Tall, ) => 26703,
                ( true, East::Low, North::Tall, South::Tall, false, West::None, ) => 26704,
                ( true, East::Low, North::Tall, South::Tall, false, West::Low, ) => 26705,
                ( true, East::Low, North::Tall, South::Tall, false, West::Tall, ) => 26706,
                ( false, East::Low, North::Tall, South::Tall, true, West::None, ) => 26707,
                ( false, East::Low, North::Tall, South::Tall, true, West::Low, ) => 26708,
                ( false, East::Low, North::Tall, South::Tall, true, West::Tall, ) => 26709,
                ( false, East::Low, North::Tall, South::Tall, false, West::None, ) => 26710,
                ( false, East::Low, North::Tall, South::Tall, false, West::Low, ) => 26711,
                ( false, East::Low, North::Tall, South::Tall, false, West::Tall, ) => 26712,
                ( true, East::Tall, North::None, South::None, true, West::None, ) => 26713,
                ( true, East::Tall, North::None, South::None, true, West::Low, ) => 26714,
                ( true, East::Tall, North::None, South::None, true, West::Tall, ) => 26715,
                ( true, East::Tall, North::None, South::None, false, West::None, ) => 26716,
                ( true, East::Tall, North::None, South::None, false, West::Low, ) => 26717,
                ( true, East::Tall, North::None, South::None, false, West::Tall, ) => 26718,
                ( false, East::Tall, North::None, South::None, true, West::None, ) => 26719,
                ( false, East::Tall, North::None, South::None, true, West::Low, ) => 26720,
                ( false, East::Tall, North::None, South::None, true, West::Tall, ) => 26721,
                ( false, East::Tall, North::None, South::None, false, West::None, ) => 26722,
                ( false, East::Tall, North::None, South::None, false, West::Low, ) => 26723,
                ( false, East::Tall, North::None, South::None, false, West::Tall, ) => 26724,
                ( true, East::Tall, North::None, South::Low, true, West::None, ) => 26725,
                ( true, East::Tall, North::None, South::Low, true, West::Low, ) => 26726,
                ( true, East::Tall, North::None, South::Low, true, West::Tall, ) => 26727,
                ( true, East::Tall, North::None, South::Low, false, West::None, ) => 26728,
                ( true, East::Tall, North::None, South::Low, false, West::Low, ) => 26729,
                ( true, East::Tall, North::None, South::Low, false, West::Tall, ) => 26730,
                ( false, East::Tall, North::None, South::Low, true, West::None, ) => 26731,
                ( false, East::Tall, North::None, South::Low, true, West::Low, ) => 26732,
                ( false, East::Tall, North::None, South::Low, true, West::Tall, ) => 26733,
                ( false, East::Tall, North::None, South::Low, false, West::None, ) => 26734,
                ( false, East::Tall, North::None, South::Low, false, West::Low, ) => 26735,
                ( false, East::Tall, North::None, South::Low, false, West::Tall, ) => 26736,
                ( true, East::Tall, North::None, South::Tall, true, West::None, ) => 26737,
                ( true, East::Tall, North::None, South::Tall, true, West::Low, ) => 26738,
                ( true, East::Tall, North::None, South::Tall, true, West::Tall, ) => 26739,
                ( true, East::Tall, North::None, South::Tall, false, West::None, ) => 26740,
                ( true, East::Tall, North::None, South::Tall, false, West::Low, ) => 26741,
                ( true, East::Tall, North::None, South::Tall, false, West::Tall, ) => 26742,
                ( false, East::Tall, North::None, South::Tall, true, West::None, ) => 26743,
                ( false, East::Tall, North::None, South::Tall, true, West::Low, ) => 26744,
                ( false, East::Tall, North::None, South::Tall, true, West::Tall, ) => 26745,
                ( false, East::Tall, North::None, South::Tall, false, West::None, ) => 26746,
                ( false, East::Tall, North::None, South::Tall, false, West::Low, ) => 26747,
                ( false, East::Tall, North::None, South::Tall, false, West::Tall, ) => 26748,
                ( true, East::Tall, North::Low, South::None, true, West::None, ) => 26749,
                ( true, East::Tall, North::Low, South::None, true, West::Low, ) => 26750,
                ( true, East::Tall, North::Low, South::None, true, West::Tall, ) => 26751,
                ( true, East::Tall, North::Low, South::None, false, West::None, ) => 26752,
                ( true, East::Tall, North::Low, South::None, false, West::Low, ) => 26753,
                ( true, East::Tall, North::Low, South::None, false, West::Tall, ) => 26754,
                ( false, East::Tall, North::Low, South::None, true, West::None, ) => 26755,
                ( false, East::Tall, North::Low, South::None, true, West::Low, ) => 26756,
                ( false, East::Tall, North::Low, South::None, true, West::Tall, ) => 26757,
                ( false, East::Tall, North::Low, South::None, false, West::None, ) => 26758,
                ( false, East::Tall, North::Low, South::None, false, West::Low, ) => 26759,
                ( false, East::Tall, North::Low, South::None, false, West::Tall, ) => 26760,
                ( true, East::Tall, North::Low, South::Low, true, West::None, ) => 26761,
                ( true, East::Tall, North::Low, South::Low, true, West::Low, ) => 26762,
                ( true, East::Tall, North::Low, South::Low, true, West::Tall, ) => 26763,
                ( true, East::Tall, North::Low, South::Low, false, West::None, ) => 26764,
                ( true, East::Tall, North::Low, South::Low, false, West::Low, ) => 26765,
                ( true, East::Tall, North::Low, South::Low, false, West::Tall, ) => 26766,
                ( false, East::Tall, North::Low, South::Low, true, West::None, ) => 26767,
                ( false, East::Tall, North::Low, South::Low, true, West::Low, ) => 26768,
                ( false, East::Tall, North::Low, South::Low, true, West::Tall, ) => 26769,
                ( false, East::Tall, North::Low, South::Low, false, West::None, ) => 26770,
                ( false, East::Tall, North::Low, South::Low, false, West::Low, ) => 26771,
                ( false, East::Tall, North::Low, South::Low, false, West::Tall, ) => 26772,
                ( true, East::Tall, North::Low, South::Tall, true, West::None, ) => 26773,
                ( true, East::Tall, North::Low, South::Tall, true, West::Low, ) => 26774,
                ( true, East::Tall, North::Low, South::Tall, true, West::Tall, ) => 26775,
                ( true, East::Tall, North::Low, South::Tall, false, West::None, ) => 26776,
                ( true, East::Tall, North::Low, South::Tall, false, West::Low, ) => 26777,
                ( true, East::Tall, North::Low, South::Tall, false, West::Tall, ) => 26778,
                ( false, East::Tall, North::Low, South::Tall, true, West::None, ) => 26779,
                ( false, East::Tall, North::Low, South::Tall, true, West::Low, ) => 26780,
                ( false, East::Tall, North::Low, South::Tall, true, West::Tall, ) => 26781,
                ( false, East::Tall, North::Low, South::Tall, false, West::None, ) => 26782,
                ( false, East::Tall, North::Low, South::Tall, false, West::Low, ) => 26783,
                ( false, East::Tall, North::Low, South::Tall, false, West::Tall, ) => 26784,
                ( true, East::Tall, North::Tall, South::None, true, West::None, ) => 26785,
                ( true, East::Tall, North::Tall, South::None, true, West::Low, ) => 26786,
                ( true, East::Tall, North::Tall, South::None, true, West::Tall, ) => 26787,
                ( true, East::Tall, North::Tall, South::None, false, West::None, ) => 26788,
                ( true, East::Tall, North::Tall, South::None, false, West::Low, ) => 26789,
                ( true, East::Tall, North::Tall, South::None, false, West::Tall, ) => 26790,
                ( false, East::Tall, North::Tall, South::None, true, West::None, ) => 26791,
                ( false, East::Tall, North::Tall, South::None, true, West::Low, ) => 26792,
                ( false, East::Tall, North::Tall, South::None, true, West::Tall, ) => 26793,
                ( false, East::Tall, North::Tall, South::None, false, West::None, ) => 26794,
                ( false, East::Tall, North::Tall, South::None, false, West::Low, ) => 26795,
                ( false, East::Tall, North::Tall, South::None, false, West::Tall, ) => 26796,
                ( true, East::Tall, North::Tall, South::Low, true, West::None, ) => 26797,
                ( true, East::Tall, North::Tall, South::Low, true, West::Low, ) => 26798,
                ( true, East::Tall, North::Tall, South::Low, true, West::Tall, ) => 26799,
                ( true, East::Tall, North::Tall, South::Low, false, West::None, ) => 26800,
                ( true, East::Tall, North::Tall, South::Low, false, West::Low, ) => 26801,
                ( true, East::Tall, North::Tall, South::Low, false, West::Tall, ) => 26802,
                ( false, East::Tall, North::Tall, South::Low, true, West::None, ) => 26803,
                ( false, East::Tall, North::Tall, South::Low, true, West::Low, ) => 26804,
                ( false, East::Tall, North::Tall, South::Low, true, West::Tall, ) => 26805,
                ( false, East::Tall, North::Tall, South::Low, false, West::None, ) => 26806,
                ( false, East::Tall, North::Tall, South::Low, false, West::Low, ) => 26807,
                ( false, East::Tall, North::Tall, South::Low, false, West::Tall, ) => 26808,
                ( true, East::Tall, North::Tall, South::Tall, true, West::None, ) => 26809,
                ( true, East::Tall, North::Tall, South::Tall, true, West::Low, ) => 26810,
                ( true, East::Tall, North::Tall, South::Tall, true, West::Tall, ) => 26811,
                ( true, East::Tall, North::Tall, South::Tall, false, West::None, ) => 26812,
                ( true, East::Tall, North::Tall, South::Tall, false, West::Low, ) => 26813,
                ( true, East::Tall, North::Tall, South::Tall, false, West::Tall, ) => 26814,
                ( false, East::Tall, North::Tall, South::Tall, true, West::None, ) => 26815,
                ( false, East::Tall, North::Tall, South::Tall, true, West::Low, ) => 26816,
                ( false, East::Tall, North::Tall, South::Tall, true, West::Tall, ) => 26817,
                ( false, East::Tall, North::Tall, South::Tall, false, West::None, ) => 26818,
                ( false, East::Tall, North::Tall, South::Tall, false, West::Low, ) => 26819,
                ( false, East::Tall, North::Tall, South::Tall, false, West::Tall, ) => 26820,
            })
        }
    }

    impl From<PolishedDeepslateWall> for BlockState {
        #[inline(always)]
        fn from(value : PolishedDeepslateWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedDeepslateWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedDeepslateWall { }

    impl Block for PolishedDeepslateWall {
        const DEFAULT_STATE : Self = Self {
            up : true,
            east : East::None,
            north : North::None,
            south : South::None,
            waterlogged : false,
            west : West::None,
        };
    }

}

/// `minecraft:bamboo_slab` block.
pub mod bamboo_slab {
    use super::*;

    /// `minecraft:bamboo_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl BambooSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 12105,
                ( false, Kind::Top, ) => 12106,
                ( true, Kind::Bottom, ) => 12107,
                ( false, Kind::Bottom, ) => 12108,
                ( true, Kind::Double, ) => 12109,
                ( false, Kind::Double, ) => 12110,
            })
        }
    }

    impl From<BambooSlab> for BlockState {
        #[inline(always)]
        fn from(value : BambooSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooSlab { }

    impl Block for BambooSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:cobblestone_wall` block.
pub mod cobblestone_wall {
    use super::*;

    /// `minecraft:cobblestone_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CobblestoneWall {
        /// `up` state.
        pub up : bool,
        /// `east` state.
        pub east : East,
        /// `south` state.
        pub south : South,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : West,
        /// `north` state.
        pub north : North,
    }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    impl CobblestoneWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.up, self.east, self.south, self.waterlogged, self.west, self.north, )) {
                ( true, East::None, South::None, true, West::None, North::None, ) => 8703,
                ( true, East::None, South::None, true, West::Low, North::None, ) => 8704,
                ( true, East::None, South::None, true, West::Tall, North::None, ) => 8705,
                ( true, East::None, South::None, false, West::None, North::None, ) => 8706,
                ( true, East::None, South::None, false, West::Low, North::None, ) => 8707,
                ( true, East::None, South::None, false, West::Tall, North::None, ) => 8708,
                ( false, East::None, South::None, true, West::None, North::None, ) => 8709,
                ( false, East::None, South::None, true, West::Low, North::None, ) => 8710,
                ( false, East::None, South::None, true, West::Tall, North::None, ) => 8711,
                ( false, East::None, South::None, false, West::None, North::None, ) => 8712,
                ( false, East::None, South::None, false, West::Low, North::None, ) => 8713,
                ( false, East::None, South::None, false, West::Tall, North::None, ) => 8714,
                ( true, East::None, South::Low, true, West::None, North::None, ) => 8715,
                ( true, East::None, South::Low, true, West::Low, North::None, ) => 8716,
                ( true, East::None, South::Low, true, West::Tall, North::None, ) => 8717,
                ( true, East::None, South::Low, false, West::None, North::None, ) => 8718,
                ( true, East::None, South::Low, false, West::Low, North::None, ) => 8719,
                ( true, East::None, South::Low, false, West::Tall, North::None, ) => 8720,
                ( false, East::None, South::Low, true, West::None, North::None, ) => 8721,
                ( false, East::None, South::Low, true, West::Low, North::None, ) => 8722,
                ( false, East::None, South::Low, true, West::Tall, North::None, ) => 8723,
                ( false, East::None, South::Low, false, West::None, North::None, ) => 8724,
                ( false, East::None, South::Low, false, West::Low, North::None, ) => 8725,
                ( false, East::None, South::Low, false, West::Tall, North::None, ) => 8726,
                ( true, East::None, South::Tall, true, West::None, North::None, ) => 8727,
                ( true, East::None, South::Tall, true, West::Low, North::None, ) => 8728,
                ( true, East::None, South::Tall, true, West::Tall, North::None, ) => 8729,
                ( true, East::None, South::Tall, false, West::None, North::None, ) => 8730,
                ( true, East::None, South::Tall, false, West::Low, North::None, ) => 8731,
                ( true, East::None, South::Tall, false, West::Tall, North::None, ) => 8732,
                ( false, East::None, South::Tall, true, West::None, North::None, ) => 8733,
                ( false, East::None, South::Tall, true, West::Low, North::None, ) => 8734,
                ( false, East::None, South::Tall, true, West::Tall, North::None, ) => 8735,
                ( false, East::None, South::Tall, false, West::None, North::None, ) => 8736,
                ( false, East::None, South::Tall, false, West::Low, North::None, ) => 8737,
                ( false, East::None, South::Tall, false, West::Tall, North::None, ) => 8738,
                ( true, East::None, South::None, true, West::None, North::Low, ) => 8739,
                ( true, East::None, South::None, true, West::Low, North::Low, ) => 8740,
                ( true, East::None, South::None, true, West::Tall, North::Low, ) => 8741,
                ( true, East::None, South::None, false, West::None, North::Low, ) => 8742,
                ( true, East::None, South::None, false, West::Low, North::Low, ) => 8743,
                ( true, East::None, South::None, false, West::Tall, North::Low, ) => 8744,
                ( false, East::None, South::None, true, West::None, North::Low, ) => 8745,
                ( false, East::None, South::None, true, West::Low, North::Low, ) => 8746,
                ( false, East::None, South::None, true, West::Tall, North::Low, ) => 8747,
                ( false, East::None, South::None, false, West::None, North::Low, ) => 8748,
                ( false, East::None, South::None, false, West::Low, North::Low, ) => 8749,
                ( false, East::None, South::None, false, West::Tall, North::Low, ) => 8750,
                ( true, East::None, South::Low, true, West::None, North::Low, ) => 8751,
                ( true, East::None, South::Low, true, West::Low, North::Low, ) => 8752,
                ( true, East::None, South::Low, true, West::Tall, North::Low, ) => 8753,
                ( true, East::None, South::Low, false, West::None, North::Low, ) => 8754,
                ( true, East::None, South::Low, false, West::Low, North::Low, ) => 8755,
                ( true, East::None, South::Low, false, West::Tall, North::Low, ) => 8756,
                ( false, East::None, South::Low, true, West::None, North::Low, ) => 8757,
                ( false, East::None, South::Low, true, West::Low, North::Low, ) => 8758,
                ( false, East::None, South::Low, true, West::Tall, North::Low, ) => 8759,
                ( false, East::None, South::Low, false, West::None, North::Low, ) => 8760,
                ( false, East::None, South::Low, false, West::Low, North::Low, ) => 8761,
                ( false, East::None, South::Low, false, West::Tall, North::Low, ) => 8762,
                ( true, East::None, South::Tall, true, West::None, North::Low, ) => 8763,
                ( true, East::None, South::Tall, true, West::Low, North::Low, ) => 8764,
                ( true, East::None, South::Tall, true, West::Tall, North::Low, ) => 8765,
                ( true, East::None, South::Tall, false, West::None, North::Low, ) => 8766,
                ( true, East::None, South::Tall, false, West::Low, North::Low, ) => 8767,
                ( true, East::None, South::Tall, false, West::Tall, North::Low, ) => 8768,
                ( false, East::None, South::Tall, true, West::None, North::Low, ) => 8769,
                ( false, East::None, South::Tall, true, West::Low, North::Low, ) => 8770,
                ( false, East::None, South::Tall, true, West::Tall, North::Low, ) => 8771,
                ( false, East::None, South::Tall, false, West::None, North::Low, ) => 8772,
                ( false, East::None, South::Tall, false, West::Low, North::Low, ) => 8773,
                ( false, East::None, South::Tall, false, West::Tall, North::Low, ) => 8774,
                ( true, East::None, South::None, true, West::None, North::Tall, ) => 8775,
                ( true, East::None, South::None, true, West::Low, North::Tall, ) => 8776,
                ( true, East::None, South::None, true, West::Tall, North::Tall, ) => 8777,
                ( true, East::None, South::None, false, West::None, North::Tall, ) => 8778,
                ( true, East::None, South::None, false, West::Low, North::Tall, ) => 8779,
                ( true, East::None, South::None, false, West::Tall, North::Tall, ) => 8780,
                ( false, East::None, South::None, true, West::None, North::Tall, ) => 8781,
                ( false, East::None, South::None, true, West::Low, North::Tall, ) => 8782,
                ( false, East::None, South::None, true, West::Tall, North::Tall, ) => 8783,
                ( false, East::None, South::None, false, West::None, North::Tall, ) => 8784,
                ( false, East::None, South::None, false, West::Low, North::Tall, ) => 8785,
                ( false, East::None, South::None, false, West::Tall, North::Tall, ) => 8786,
                ( true, East::None, South::Low, true, West::None, North::Tall, ) => 8787,
                ( true, East::None, South::Low, true, West::Low, North::Tall, ) => 8788,
                ( true, East::None, South::Low, true, West::Tall, North::Tall, ) => 8789,
                ( true, East::None, South::Low, false, West::None, North::Tall, ) => 8790,
                ( true, East::None, South::Low, false, West::Low, North::Tall, ) => 8791,
                ( true, East::None, South::Low, false, West::Tall, North::Tall, ) => 8792,
                ( false, East::None, South::Low, true, West::None, North::Tall, ) => 8793,
                ( false, East::None, South::Low, true, West::Low, North::Tall, ) => 8794,
                ( false, East::None, South::Low, true, West::Tall, North::Tall, ) => 8795,
                ( false, East::None, South::Low, false, West::None, North::Tall, ) => 8796,
                ( false, East::None, South::Low, false, West::Low, North::Tall, ) => 8797,
                ( false, East::None, South::Low, false, West::Tall, North::Tall, ) => 8798,
                ( true, East::None, South::Tall, true, West::None, North::Tall, ) => 8799,
                ( true, East::None, South::Tall, true, West::Low, North::Tall, ) => 8800,
                ( true, East::None, South::Tall, true, West::Tall, North::Tall, ) => 8801,
                ( true, East::None, South::Tall, false, West::None, North::Tall, ) => 8802,
                ( true, East::None, South::Tall, false, West::Low, North::Tall, ) => 8803,
                ( true, East::None, South::Tall, false, West::Tall, North::Tall, ) => 8804,
                ( false, East::None, South::Tall, true, West::None, North::Tall, ) => 8805,
                ( false, East::None, South::Tall, true, West::Low, North::Tall, ) => 8806,
                ( false, East::None, South::Tall, true, West::Tall, North::Tall, ) => 8807,
                ( false, East::None, South::Tall, false, West::None, North::Tall, ) => 8808,
                ( false, East::None, South::Tall, false, West::Low, North::Tall, ) => 8809,
                ( false, East::None, South::Tall, false, West::Tall, North::Tall, ) => 8810,
                ( true, East::Low, South::None, true, West::None, North::None, ) => 8811,
                ( true, East::Low, South::None, true, West::Low, North::None, ) => 8812,
                ( true, East::Low, South::None, true, West::Tall, North::None, ) => 8813,
                ( true, East::Low, South::None, false, West::None, North::None, ) => 8814,
                ( true, East::Low, South::None, false, West::Low, North::None, ) => 8815,
                ( true, East::Low, South::None, false, West::Tall, North::None, ) => 8816,
                ( false, East::Low, South::None, true, West::None, North::None, ) => 8817,
                ( false, East::Low, South::None, true, West::Low, North::None, ) => 8818,
                ( false, East::Low, South::None, true, West::Tall, North::None, ) => 8819,
                ( false, East::Low, South::None, false, West::None, North::None, ) => 8820,
                ( false, East::Low, South::None, false, West::Low, North::None, ) => 8821,
                ( false, East::Low, South::None, false, West::Tall, North::None, ) => 8822,
                ( true, East::Low, South::Low, true, West::None, North::None, ) => 8823,
                ( true, East::Low, South::Low, true, West::Low, North::None, ) => 8824,
                ( true, East::Low, South::Low, true, West::Tall, North::None, ) => 8825,
                ( true, East::Low, South::Low, false, West::None, North::None, ) => 8826,
                ( true, East::Low, South::Low, false, West::Low, North::None, ) => 8827,
                ( true, East::Low, South::Low, false, West::Tall, North::None, ) => 8828,
                ( false, East::Low, South::Low, true, West::None, North::None, ) => 8829,
                ( false, East::Low, South::Low, true, West::Low, North::None, ) => 8830,
                ( false, East::Low, South::Low, true, West::Tall, North::None, ) => 8831,
                ( false, East::Low, South::Low, false, West::None, North::None, ) => 8832,
                ( false, East::Low, South::Low, false, West::Low, North::None, ) => 8833,
                ( false, East::Low, South::Low, false, West::Tall, North::None, ) => 8834,
                ( true, East::Low, South::Tall, true, West::None, North::None, ) => 8835,
                ( true, East::Low, South::Tall, true, West::Low, North::None, ) => 8836,
                ( true, East::Low, South::Tall, true, West::Tall, North::None, ) => 8837,
                ( true, East::Low, South::Tall, false, West::None, North::None, ) => 8838,
                ( true, East::Low, South::Tall, false, West::Low, North::None, ) => 8839,
                ( true, East::Low, South::Tall, false, West::Tall, North::None, ) => 8840,
                ( false, East::Low, South::Tall, true, West::None, North::None, ) => 8841,
                ( false, East::Low, South::Tall, true, West::Low, North::None, ) => 8842,
                ( false, East::Low, South::Tall, true, West::Tall, North::None, ) => 8843,
                ( false, East::Low, South::Tall, false, West::None, North::None, ) => 8844,
                ( false, East::Low, South::Tall, false, West::Low, North::None, ) => 8845,
                ( false, East::Low, South::Tall, false, West::Tall, North::None, ) => 8846,
                ( true, East::Low, South::None, true, West::None, North::Low, ) => 8847,
                ( true, East::Low, South::None, true, West::Low, North::Low, ) => 8848,
                ( true, East::Low, South::None, true, West::Tall, North::Low, ) => 8849,
                ( true, East::Low, South::None, false, West::None, North::Low, ) => 8850,
                ( true, East::Low, South::None, false, West::Low, North::Low, ) => 8851,
                ( true, East::Low, South::None, false, West::Tall, North::Low, ) => 8852,
                ( false, East::Low, South::None, true, West::None, North::Low, ) => 8853,
                ( false, East::Low, South::None, true, West::Low, North::Low, ) => 8854,
                ( false, East::Low, South::None, true, West::Tall, North::Low, ) => 8855,
                ( false, East::Low, South::None, false, West::None, North::Low, ) => 8856,
                ( false, East::Low, South::None, false, West::Low, North::Low, ) => 8857,
                ( false, East::Low, South::None, false, West::Tall, North::Low, ) => 8858,
                ( true, East::Low, South::Low, true, West::None, North::Low, ) => 8859,
                ( true, East::Low, South::Low, true, West::Low, North::Low, ) => 8860,
                ( true, East::Low, South::Low, true, West::Tall, North::Low, ) => 8861,
                ( true, East::Low, South::Low, false, West::None, North::Low, ) => 8862,
                ( true, East::Low, South::Low, false, West::Low, North::Low, ) => 8863,
                ( true, East::Low, South::Low, false, West::Tall, North::Low, ) => 8864,
                ( false, East::Low, South::Low, true, West::None, North::Low, ) => 8865,
                ( false, East::Low, South::Low, true, West::Low, North::Low, ) => 8866,
                ( false, East::Low, South::Low, true, West::Tall, North::Low, ) => 8867,
                ( false, East::Low, South::Low, false, West::None, North::Low, ) => 8868,
                ( false, East::Low, South::Low, false, West::Low, North::Low, ) => 8869,
                ( false, East::Low, South::Low, false, West::Tall, North::Low, ) => 8870,
                ( true, East::Low, South::Tall, true, West::None, North::Low, ) => 8871,
                ( true, East::Low, South::Tall, true, West::Low, North::Low, ) => 8872,
                ( true, East::Low, South::Tall, true, West::Tall, North::Low, ) => 8873,
                ( true, East::Low, South::Tall, false, West::None, North::Low, ) => 8874,
                ( true, East::Low, South::Tall, false, West::Low, North::Low, ) => 8875,
                ( true, East::Low, South::Tall, false, West::Tall, North::Low, ) => 8876,
                ( false, East::Low, South::Tall, true, West::None, North::Low, ) => 8877,
                ( false, East::Low, South::Tall, true, West::Low, North::Low, ) => 8878,
                ( false, East::Low, South::Tall, true, West::Tall, North::Low, ) => 8879,
                ( false, East::Low, South::Tall, false, West::None, North::Low, ) => 8880,
                ( false, East::Low, South::Tall, false, West::Low, North::Low, ) => 8881,
                ( false, East::Low, South::Tall, false, West::Tall, North::Low, ) => 8882,
                ( true, East::Low, South::None, true, West::None, North::Tall, ) => 8883,
                ( true, East::Low, South::None, true, West::Low, North::Tall, ) => 8884,
                ( true, East::Low, South::None, true, West::Tall, North::Tall, ) => 8885,
                ( true, East::Low, South::None, false, West::None, North::Tall, ) => 8886,
                ( true, East::Low, South::None, false, West::Low, North::Tall, ) => 8887,
                ( true, East::Low, South::None, false, West::Tall, North::Tall, ) => 8888,
                ( false, East::Low, South::None, true, West::None, North::Tall, ) => 8889,
                ( false, East::Low, South::None, true, West::Low, North::Tall, ) => 8890,
                ( false, East::Low, South::None, true, West::Tall, North::Tall, ) => 8891,
                ( false, East::Low, South::None, false, West::None, North::Tall, ) => 8892,
                ( false, East::Low, South::None, false, West::Low, North::Tall, ) => 8893,
                ( false, East::Low, South::None, false, West::Tall, North::Tall, ) => 8894,
                ( true, East::Low, South::Low, true, West::None, North::Tall, ) => 8895,
                ( true, East::Low, South::Low, true, West::Low, North::Tall, ) => 8896,
                ( true, East::Low, South::Low, true, West::Tall, North::Tall, ) => 8897,
                ( true, East::Low, South::Low, false, West::None, North::Tall, ) => 8898,
                ( true, East::Low, South::Low, false, West::Low, North::Tall, ) => 8899,
                ( true, East::Low, South::Low, false, West::Tall, North::Tall, ) => 8900,
                ( false, East::Low, South::Low, true, West::None, North::Tall, ) => 8901,
                ( false, East::Low, South::Low, true, West::Low, North::Tall, ) => 8902,
                ( false, East::Low, South::Low, true, West::Tall, North::Tall, ) => 8903,
                ( false, East::Low, South::Low, false, West::None, North::Tall, ) => 8904,
                ( false, East::Low, South::Low, false, West::Low, North::Tall, ) => 8905,
                ( false, East::Low, South::Low, false, West::Tall, North::Tall, ) => 8906,
                ( true, East::Low, South::Tall, true, West::None, North::Tall, ) => 8907,
                ( true, East::Low, South::Tall, true, West::Low, North::Tall, ) => 8908,
                ( true, East::Low, South::Tall, true, West::Tall, North::Tall, ) => 8909,
                ( true, East::Low, South::Tall, false, West::None, North::Tall, ) => 8910,
                ( true, East::Low, South::Tall, false, West::Low, North::Tall, ) => 8911,
                ( true, East::Low, South::Tall, false, West::Tall, North::Tall, ) => 8912,
                ( false, East::Low, South::Tall, true, West::None, North::Tall, ) => 8913,
                ( false, East::Low, South::Tall, true, West::Low, North::Tall, ) => 8914,
                ( false, East::Low, South::Tall, true, West::Tall, North::Tall, ) => 8915,
                ( false, East::Low, South::Tall, false, West::None, North::Tall, ) => 8916,
                ( false, East::Low, South::Tall, false, West::Low, North::Tall, ) => 8917,
                ( false, East::Low, South::Tall, false, West::Tall, North::Tall, ) => 8918,
                ( true, East::Tall, South::None, true, West::None, North::None, ) => 8919,
                ( true, East::Tall, South::None, true, West::Low, North::None, ) => 8920,
                ( true, East::Tall, South::None, true, West::Tall, North::None, ) => 8921,
                ( true, East::Tall, South::None, false, West::None, North::None, ) => 8922,
                ( true, East::Tall, South::None, false, West::Low, North::None, ) => 8923,
                ( true, East::Tall, South::None, false, West::Tall, North::None, ) => 8924,
                ( false, East::Tall, South::None, true, West::None, North::None, ) => 8925,
                ( false, East::Tall, South::None, true, West::Low, North::None, ) => 8926,
                ( false, East::Tall, South::None, true, West::Tall, North::None, ) => 8927,
                ( false, East::Tall, South::None, false, West::None, North::None, ) => 8928,
                ( false, East::Tall, South::None, false, West::Low, North::None, ) => 8929,
                ( false, East::Tall, South::None, false, West::Tall, North::None, ) => 8930,
                ( true, East::Tall, South::Low, true, West::None, North::None, ) => 8931,
                ( true, East::Tall, South::Low, true, West::Low, North::None, ) => 8932,
                ( true, East::Tall, South::Low, true, West::Tall, North::None, ) => 8933,
                ( true, East::Tall, South::Low, false, West::None, North::None, ) => 8934,
                ( true, East::Tall, South::Low, false, West::Low, North::None, ) => 8935,
                ( true, East::Tall, South::Low, false, West::Tall, North::None, ) => 8936,
                ( false, East::Tall, South::Low, true, West::None, North::None, ) => 8937,
                ( false, East::Tall, South::Low, true, West::Low, North::None, ) => 8938,
                ( false, East::Tall, South::Low, true, West::Tall, North::None, ) => 8939,
                ( false, East::Tall, South::Low, false, West::None, North::None, ) => 8940,
                ( false, East::Tall, South::Low, false, West::Low, North::None, ) => 8941,
                ( false, East::Tall, South::Low, false, West::Tall, North::None, ) => 8942,
                ( true, East::Tall, South::Tall, true, West::None, North::None, ) => 8943,
                ( true, East::Tall, South::Tall, true, West::Low, North::None, ) => 8944,
                ( true, East::Tall, South::Tall, true, West::Tall, North::None, ) => 8945,
                ( true, East::Tall, South::Tall, false, West::None, North::None, ) => 8946,
                ( true, East::Tall, South::Tall, false, West::Low, North::None, ) => 8947,
                ( true, East::Tall, South::Tall, false, West::Tall, North::None, ) => 8948,
                ( false, East::Tall, South::Tall, true, West::None, North::None, ) => 8949,
                ( false, East::Tall, South::Tall, true, West::Low, North::None, ) => 8950,
                ( false, East::Tall, South::Tall, true, West::Tall, North::None, ) => 8951,
                ( false, East::Tall, South::Tall, false, West::None, North::None, ) => 8952,
                ( false, East::Tall, South::Tall, false, West::Low, North::None, ) => 8953,
                ( false, East::Tall, South::Tall, false, West::Tall, North::None, ) => 8954,
                ( true, East::Tall, South::None, true, West::None, North::Low, ) => 8955,
                ( true, East::Tall, South::None, true, West::Low, North::Low, ) => 8956,
                ( true, East::Tall, South::None, true, West::Tall, North::Low, ) => 8957,
                ( true, East::Tall, South::None, false, West::None, North::Low, ) => 8958,
                ( true, East::Tall, South::None, false, West::Low, North::Low, ) => 8959,
                ( true, East::Tall, South::None, false, West::Tall, North::Low, ) => 8960,
                ( false, East::Tall, South::None, true, West::None, North::Low, ) => 8961,
                ( false, East::Tall, South::None, true, West::Low, North::Low, ) => 8962,
                ( false, East::Tall, South::None, true, West::Tall, North::Low, ) => 8963,
                ( false, East::Tall, South::None, false, West::None, North::Low, ) => 8964,
                ( false, East::Tall, South::None, false, West::Low, North::Low, ) => 8965,
                ( false, East::Tall, South::None, false, West::Tall, North::Low, ) => 8966,
                ( true, East::Tall, South::Low, true, West::None, North::Low, ) => 8967,
                ( true, East::Tall, South::Low, true, West::Low, North::Low, ) => 8968,
                ( true, East::Tall, South::Low, true, West::Tall, North::Low, ) => 8969,
                ( true, East::Tall, South::Low, false, West::None, North::Low, ) => 8970,
                ( true, East::Tall, South::Low, false, West::Low, North::Low, ) => 8971,
                ( true, East::Tall, South::Low, false, West::Tall, North::Low, ) => 8972,
                ( false, East::Tall, South::Low, true, West::None, North::Low, ) => 8973,
                ( false, East::Tall, South::Low, true, West::Low, North::Low, ) => 8974,
                ( false, East::Tall, South::Low, true, West::Tall, North::Low, ) => 8975,
                ( false, East::Tall, South::Low, false, West::None, North::Low, ) => 8976,
                ( false, East::Tall, South::Low, false, West::Low, North::Low, ) => 8977,
                ( false, East::Tall, South::Low, false, West::Tall, North::Low, ) => 8978,
                ( true, East::Tall, South::Tall, true, West::None, North::Low, ) => 8979,
                ( true, East::Tall, South::Tall, true, West::Low, North::Low, ) => 8980,
                ( true, East::Tall, South::Tall, true, West::Tall, North::Low, ) => 8981,
                ( true, East::Tall, South::Tall, false, West::None, North::Low, ) => 8982,
                ( true, East::Tall, South::Tall, false, West::Low, North::Low, ) => 8983,
                ( true, East::Tall, South::Tall, false, West::Tall, North::Low, ) => 8984,
                ( false, East::Tall, South::Tall, true, West::None, North::Low, ) => 8985,
                ( false, East::Tall, South::Tall, true, West::Low, North::Low, ) => 8986,
                ( false, East::Tall, South::Tall, true, West::Tall, North::Low, ) => 8987,
                ( false, East::Tall, South::Tall, false, West::None, North::Low, ) => 8988,
                ( false, East::Tall, South::Tall, false, West::Low, North::Low, ) => 8989,
                ( false, East::Tall, South::Tall, false, West::Tall, North::Low, ) => 8990,
                ( true, East::Tall, South::None, true, West::None, North::Tall, ) => 8991,
                ( true, East::Tall, South::None, true, West::Low, North::Tall, ) => 8992,
                ( true, East::Tall, South::None, true, West::Tall, North::Tall, ) => 8993,
                ( true, East::Tall, South::None, false, West::None, North::Tall, ) => 8994,
                ( true, East::Tall, South::None, false, West::Low, North::Tall, ) => 8995,
                ( true, East::Tall, South::None, false, West::Tall, North::Tall, ) => 8996,
                ( false, East::Tall, South::None, true, West::None, North::Tall, ) => 8997,
                ( false, East::Tall, South::None, true, West::Low, North::Tall, ) => 8998,
                ( false, East::Tall, South::None, true, West::Tall, North::Tall, ) => 8999,
                ( false, East::Tall, South::None, false, West::None, North::Tall, ) => 9000,
                ( false, East::Tall, South::None, false, West::Low, North::Tall, ) => 9001,
                ( false, East::Tall, South::None, false, West::Tall, North::Tall, ) => 9002,
                ( true, East::Tall, South::Low, true, West::None, North::Tall, ) => 9003,
                ( true, East::Tall, South::Low, true, West::Low, North::Tall, ) => 9004,
                ( true, East::Tall, South::Low, true, West::Tall, North::Tall, ) => 9005,
                ( true, East::Tall, South::Low, false, West::None, North::Tall, ) => 9006,
                ( true, East::Tall, South::Low, false, West::Low, North::Tall, ) => 9007,
                ( true, East::Tall, South::Low, false, West::Tall, North::Tall, ) => 9008,
                ( false, East::Tall, South::Low, true, West::None, North::Tall, ) => 9009,
                ( false, East::Tall, South::Low, true, West::Low, North::Tall, ) => 9010,
                ( false, East::Tall, South::Low, true, West::Tall, North::Tall, ) => 9011,
                ( false, East::Tall, South::Low, false, West::None, North::Tall, ) => 9012,
                ( false, East::Tall, South::Low, false, West::Low, North::Tall, ) => 9013,
                ( false, East::Tall, South::Low, false, West::Tall, North::Tall, ) => 9014,
                ( true, East::Tall, South::Tall, true, West::None, North::Tall, ) => 9015,
                ( true, East::Tall, South::Tall, true, West::Low, North::Tall, ) => 9016,
                ( true, East::Tall, South::Tall, true, West::Tall, North::Tall, ) => 9017,
                ( true, East::Tall, South::Tall, false, West::None, North::Tall, ) => 9018,
                ( true, East::Tall, South::Tall, false, West::Low, North::Tall, ) => 9019,
                ( true, East::Tall, South::Tall, false, West::Tall, North::Tall, ) => 9020,
                ( false, East::Tall, South::Tall, true, West::None, North::Tall, ) => 9021,
                ( false, East::Tall, South::Tall, true, West::Low, North::Tall, ) => 9022,
                ( false, East::Tall, South::Tall, true, West::Tall, North::Tall, ) => 9023,
                ( false, East::Tall, South::Tall, false, West::None, North::Tall, ) => 9024,
                ( false, East::Tall, South::Tall, false, West::Low, North::Tall, ) => 9025,
                ( false, East::Tall, South::Tall, false, West::Tall, North::Tall, ) => 9026,
            })
        }
    }

    impl From<CobblestoneWall> for BlockState {
        #[inline(always)]
        fn from(value : CobblestoneWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CobblestoneWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CobblestoneWall { }

    impl Block for CobblestoneWall {
        const DEFAULT_STATE : Self = Self {
            up : true,
            east : East::None,
            south : South::None,
            waterlogged : false,
            west : West::None,
            north : North::None,
        };
    }

}

/// `minecraft:melon` block.
pub mod melon {
    use super::*;

    /// `minecraft:melon` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Melon;

    impl Melon {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(7055)
        }
    }

    impl From<Melon> for BlockState {
        #[inline(always)]
        fn from(value : Melon) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Melon {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Melon { }

    impl Block for Melon {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:infested_cracked_stone_bricks` block.
pub mod infested_cracked_stone_bricks {
    use super::*;

    /// `minecraft:infested_cracked_stone_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct InfestedCrackedStoneBricks;

    impl InfestedCrackedStoneBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6790)
        }
    }

    impl From<InfestedCrackedStoneBricks> for BlockState {
        #[inline(always)]
        fn from(value : InfestedCrackedStoneBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for InfestedCrackedStoneBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for InfestedCrackedStoneBricks { }

    impl Block for InfestedCrackedStoneBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:mangrove_slab` block.
pub mod mangrove_slab {
    use super::*;

    /// `minecraft:mangrove_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl MangroveSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 12099,
                ( false, Kind::Top, ) => 12100,
                ( true, Kind::Bottom, ) => 12101,
                ( false, Kind::Bottom, ) => 12102,
                ( true, Kind::Double, ) => 12103,
                ( false, Kind::Double, ) => 12104,
            })
        }
    }

    impl From<MangroveSlab> for BlockState {
        #[inline(always)]
        fn from(value : MangroveSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveSlab { }

    impl Block for MangroveSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:white_bed` block.
pub mod white_bed {
    use super::*;

    /// `minecraft:white_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteBed {
        /// `facing` state.
        pub facing : Facing,
        /// `part` state.
        pub part : Part,
        /// `occupied` state.
        pub occupied : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    impl WhiteBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.part, self.occupied, )) {
                ( Facing::North, Part::Head, true, ) => 1731,
                ( Facing::North, Part::Foot, true, ) => 1732,
                ( Facing::North, Part::Head, false, ) => 1733,
                ( Facing::North, Part::Foot, false, ) => 1734,
                ( Facing::South, Part::Head, true, ) => 1735,
                ( Facing::South, Part::Foot, true, ) => 1736,
                ( Facing::South, Part::Head, false, ) => 1737,
                ( Facing::South, Part::Foot, false, ) => 1738,
                ( Facing::West, Part::Head, true, ) => 1739,
                ( Facing::West, Part::Foot, true, ) => 1740,
                ( Facing::West, Part::Head, false, ) => 1741,
                ( Facing::West, Part::Foot, false, ) => 1742,
                ( Facing::East, Part::Head, true, ) => 1743,
                ( Facing::East, Part::Foot, true, ) => 1744,
                ( Facing::East, Part::Head, false, ) => 1745,
                ( Facing::East, Part::Foot, false, ) => 1746,
            })
        }
    }

    impl From<WhiteBed> for BlockState {
        #[inline(always)]
        fn from(value : WhiteBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteBed { }

    impl Block for WhiteBed {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            part : Part::Foot,
            occupied : false,
        };
    }

}

/// `minecraft:iron_block` block.
pub mod iron_block {
    use super::*;

    /// `minecraft:iron_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct IronBlock;

    impl IronBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2138)
        }
    }

    impl From<IronBlock> for BlockState {
        #[inline(always)]
        fn from(value : IronBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for IronBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for IronBlock { }

    impl Block for IronBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:sandstone` block.
pub mod sandstone {
    use super::*;

    /// `minecraft:sandstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Sandstone;

    impl Sandstone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(578)
        }
    }

    impl From<Sandstone> for BlockState {
        #[inline(always)]
        fn from(value : Sandstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Sandstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Sandstone { }

    impl Block for Sandstone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:white_stained_glass_pane` block.
pub mod white_stained_glass_pane {
    use super::*;

    /// `minecraft:white_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteStainedGlassPane {
        /// `east` state.
        pub east : bool,
        /// `west` state.
        pub west : bool,
        /// `north` state.
        pub north : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `south` state.
        pub south : bool,
    }

    impl WhiteStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.west, self.north, self.waterlogged, self.south, )) {
                ( true, true, true, true, true, ) => 10181,
                ( true, false, true, true, true, ) => 10182,
                ( true, true, true, false, true, ) => 10183,
                ( true, false, true, false, true, ) => 10184,
                ( true, true, true, true, false, ) => 10185,
                ( true, false, true, true, false, ) => 10186,
                ( true, true, true, false, false, ) => 10187,
                ( true, false, true, false, false, ) => 10188,
                ( true, true, false, true, true, ) => 10189,
                ( true, false, false, true, true, ) => 10190,
                ( true, true, false, false, true, ) => 10191,
                ( true, false, false, false, true, ) => 10192,
                ( true, true, false, true, false, ) => 10193,
                ( true, false, false, true, false, ) => 10194,
                ( true, true, false, false, false, ) => 10195,
                ( true, false, false, false, false, ) => 10196,
                ( false, true, true, true, true, ) => 10197,
                ( false, false, true, true, true, ) => 10198,
                ( false, true, true, false, true, ) => 10199,
                ( false, false, true, false, true, ) => 10200,
                ( false, true, true, true, false, ) => 10201,
                ( false, false, true, true, false, ) => 10202,
                ( false, true, true, false, false, ) => 10203,
                ( false, false, true, false, false, ) => 10204,
                ( false, true, false, true, true, ) => 10205,
                ( false, false, false, true, true, ) => 10206,
                ( false, true, false, false, true, ) => 10207,
                ( false, false, false, false, true, ) => 10208,
                ( false, true, false, true, false, ) => 10209,
                ( false, false, false, true, false, ) => 10210,
                ( false, true, false, false, false, ) => 10211,
                ( false, false, false, false, false, ) => 10212,
            })
        }
    }

    impl From<WhiteStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : WhiteStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteStainedGlassPane { }

    impl Block for WhiteStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            east : false,
            west : false,
            north : false,
            waterlogged : false,
            south : false,
        };
    }

}

/// `minecraft:crimson_wall_sign` block.
pub mod crimson_wall_sign {
    use super::*;

    /// `minecraft:crimson_wall_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonWallSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CrimsonWallSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 20395,
                ( false, Facing::North, ) => 20396,
                ( true, Facing::South, ) => 20397,
                ( false, Facing::South, ) => 20398,
                ( true, Facing::West, ) => 20399,
                ( false, Facing::West, ) => 20400,
                ( true, Facing::East, ) => 20401,
                ( false, Facing::East, ) => 20402,
            })
        }
    }

    impl From<CrimsonWallSign> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonWallSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonWallSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonWallSign { }

    impl Block for CrimsonWallSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:jack_o_lantern` block.
pub mod jack_o_lantern {
    use super::*;

    /// `minecraft:jack_o_lantern` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JackOLantern {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl JackOLantern {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 6049,
                ( Facing::South, ) => 6050,
                ( Facing::West, ) => 6051,
                ( Facing::East, ) => 6052,
            })
        }
    }

    impl From<JackOLantern> for BlockState {
        #[inline(always)]
        fn from(value : JackOLantern) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JackOLantern {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JackOLantern { }

    impl Block for JackOLantern {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:chiseled_sandstone` block.
pub mod chiseled_sandstone {
    use super::*;

    /// `minecraft:chiseled_sandstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChiseledSandstone;

    impl ChiseledSandstone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(579)
        }
    }

    impl From<ChiseledSandstone> for BlockState {
        #[inline(always)]
        fn from(value : ChiseledSandstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChiseledSandstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChiseledSandstone { }

    impl Block for ChiseledSandstone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:crimson_pressure_plate` block.
pub mod crimson_pressure_plate {
    use super::*;

    /// `minecraft:crimson_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonPressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl CrimsonPressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 19735,
                ( false, ) => 19736,
            })
        }
    }

    impl From<CrimsonPressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonPressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonPressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonPressurePlate { }

    impl Block for CrimsonPressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:composter` block.
pub mod composter {
    use super::*;

    /// `minecraft:composter` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Composter {
        /// `level` state.
        pub level : Level,
    }

    /// `level` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Level {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
    }
    impl crate::Sealed for Level { }
    impl BlockProperty for Level { }

    impl Composter {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.level, )) {
                ( Level::N0, ) => 20432,
                ( Level::N1, ) => 20433,
                ( Level::N2, ) => 20434,
                ( Level::N3, ) => 20435,
                ( Level::N4, ) => 20436,
                ( Level::N5, ) => 20437,
                ( Level::N6, ) => 20438,
                ( Level::N7, ) => 20439,
                ( Level::N8, ) => 20440,
            })
        }
    }

    impl From<Composter> for BlockState {
        #[inline(always)]
        fn from(value : Composter) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Composter {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Composter { }

    impl Block for Composter {
        const DEFAULT_STATE : Self = Self {
            level : Level::N0,
        };
    }

}

/// `minecraft:sand` block.
pub mod sand {
    use super::*;

    /// `minecraft:sand` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Sand;

    impl Sand {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(118)
        }
    }

    impl From<Sand> for BlockState {
        #[inline(always)]
        fn from(value : Sand) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Sand {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Sand { }

    impl Block for Sand {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stone_slab` block.
pub mod stone_slab {
    use super::*;

    /// `minecraft:stone_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StoneSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl StoneSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 12117,
                ( false, Kind::Top, ) => 12118,
                ( true, Kind::Bottom, ) => 12119,
                ( false, Kind::Bottom, ) => 12120,
                ( true, Kind::Double, ) => 12121,
                ( false, Kind::Double, ) => 12122,
            })
        }
    }

    impl From<StoneSlab> for BlockState {
        #[inline(always)]
        fn from(value : StoneSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StoneSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StoneSlab { }

    impl Block for StoneSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:mossy_stone_bricks` block.
pub mod mossy_stone_bricks {
    use super::*;

    /// `minecraft:mossy_stone_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MossyStoneBricks;

    impl MossyStoneBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6781)
        }
    }

    impl From<MossyStoneBricks> for BlockState {
        #[inline(always)]
        fn from(value : MossyStoneBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MossyStoneBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MossyStoneBricks { }

    impl Block for MossyStoneBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:copper_bulb` block.
pub mod copper_bulb {
    use super::*;

    /// `minecraft:copper_bulb` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CopperBulb {
        /// `powered` state.
        pub powered : bool,
        /// `lit` state.
        pub lit : bool,
    }

    impl CopperBulb {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.lit, )) {
                ( true, true, ) => 25752,
                ( false, true, ) => 25753,
                ( true, false, ) => 25754,
                ( false, false, ) => 25755,
            })
        }
    }

    impl From<CopperBulb> for BlockState {
        #[inline(always)]
        fn from(value : CopperBulb) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CopperBulb {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CopperBulb { }

    impl Block for CopperBulb {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            lit : false,
        };
    }

}

/// `minecraft:dark_oak_hanging_sign` block.
pub mod dark_oak_hanging_sign {
    use super::*;

    /// `minecraft:dark_oak_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakHangingSign {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `attached` state.
        pub attached : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl DarkOakHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.waterlogged, self.attached, )) {
                ( Rotation::N0, true, true, ) => 5322,
                ( Rotation::N0, false, true, ) => 5323,
                ( Rotation::N1, true, true, ) => 5324,
                ( Rotation::N1, false, true, ) => 5325,
                ( Rotation::N2, true, true, ) => 5326,
                ( Rotation::N2, false, true, ) => 5327,
                ( Rotation::N3, true, true, ) => 5328,
                ( Rotation::N3, false, true, ) => 5329,
                ( Rotation::N4, true, true, ) => 5330,
                ( Rotation::N4, false, true, ) => 5331,
                ( Rotation::N5, true, true, ) => 5332,
                ( Rotation::N5, false, true, ) => 5333,
                ( Rotation::N6, true, true, ) => 5334,
                ( Rotation::N6, false, true, ) => 5335,
                ( Rotation::N7, true, true, ) => 5336,
                ( Rotation::N7, false, true, ) => 5337,
                ( Rotation::N8, true, true, ) => 5338,
                ( Rotation::N8, false, true, ) => 5339,
                ( Rotation::N9, true, true, ) => 5340,
                ( Rotation::N9, false, true, ) => 5341,
                ( Rotation::N10, true, true, ) => 5342,
                ( Rotation::N10, false, true, ) => 5343,
                ( Rotation::N11, true, true, ) => 5344,
                ( Rotation::N11, false, true, ) => 5345,
                ( Rotation::N12, true, true, ) => 5346,
                ( Rotation::N12, false, true, ) => 5347,
                ( Rotation::N13, true, true, ) => 5348,
                ( Rotation::N13, false, true, ) => 5349,
                ( Rotation::N14, true, true, ) => 5350,
                ( Rotation::N14, false, true, ) => 5351,
                ( Rotation::N15, true, true, ) => 5352,
                ( Rotation::N15, false, true, ) => 5353,
                ( Rotation::N0, true, false, ) => 5354,
                ( Rotation::N0, false, false, ) => 5355,
                ( Rotation::N1, true, false, ) => 5356,
                ( Rotation::N1, false, false, ) => 5357,
                ( Rotation::N2, true, false, ) => 5358,
                ( Rotation::N2, false, false, ) => 5359,
                ( Rotation::N3, true, false, ) => 5360,
                ( Rotation::N3, false, false, ) => 5361,
                ( Rotation::N4, true, false, ) => 5362,
                ( Rotation::N4, false, false, ) => 5363,
                ( Rotation::N5, true, false, ) => 5364,
                ( Rotation::N5, false, false, ) => 5365,
                ( Rotation::N6, true, false, ) => 5366,
                ( Rotation::N6, false, false, ) => 5367,
                ( Rotation::N7, true, false, ) => 5368,
                ( Rotation::N7, false, false, ) => 5369,
                ( Rotation::N8, true, false, ) => 5370,
                ( Rotation::N8, false, false, ) => 5371,
                ( Rotation::N9, true, false, ) => 5372,
                ( Rotation::N9, false, false, ) => 5373,
                ( Rotation::N10, true, false, ) => 5374,
                ( Rotation::N10, false, false, ) => 5375,
                ( Rotation::N11, true, false, ) => 5376,
                ( Rotation::N11, false, false, ) => 5377,
                ( Rotation::N12, true, false, ) => 5378,
                ( Rotation::N12, false, false, ) => 5379,
                ( Rotation::N13, true, false, ) => 5380,
                ( Rotation::N13, false, false, ) => 5381,
                ( Rotation::N14, true, false, ) => 5382,
                ( Rotation::N14, false, false, ) => 5383,
                ( Rotation::N15, true, false, ) => 5384,
                ( Rotation::N15, false, false, ) => 5385,
            })
        }
    }

    impl From<DarkOakHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakHangingSign { }

    impl Block for DarkOakHangingSign {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            waterlogged : false,
            attached : false,
        };
    }

}

/// `minecraft:bamboo_mosaic` block.
pub mod bamboo_mosaic {
    use super::*;

    /// `minecraft:bamboo_mosaic` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooMosaic;

    impl BambooMosaic {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(28)
        }
    }

    impl From<BambooMosaic> for BlockState {
        #[inline(always)]
        fn from(value : BambooMosaic) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooMosaic {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooMosaic { }

    impl Block for BambooMosaic {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:barrel` block.
pub mod barrel {
    use super::*;

    /// `minecraft:barrel` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Barrel {
        /// `open` state.
        pub open : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Barrel {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.open, self.facing, )) {
                ( true, Facing::North, ) => 19463,
                ( false, Facing::North, ) => 19464,
                ( true, Facing::East, ) => 19465,
                ( false, Facing::East, ) => 19466,
                ( true, Facing::South, ) => 19467,
                ( false, Facing::South, ) => 19468,
                ( true, Facing::West, ) => 19469,
                ( false, Facing::West, ) => 19470,
                ( true, Facing::Up, ) => 19471,
                ( false, Facing::Up, ) => 19472,
                ( true, Facing::Down, ) => 19473,
                ( false, Facing::Down, ) => 19474,
            })
        }
    }

    impl From<Barrel> for BlockState {
        #[inline(always)]
        fn from(value : Barrel) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Barrel {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Barrel { }

    impl Block for Barrel {
        const DEFAULT_STATE : Self = Self {
            open : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:pink_tulip` block.
pub mod pink_tulip {
    use super::*;

    /// `minecraft:pink_tulip` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkTulip;

    impl PinkTulip {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2130)
        }
    }

    impl From<PinkTulip> for BlockState {
        #[inline(always)]
        fn from(value : PinkTulip) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkTulip {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkTulip { }

    impl Block for PinkTulip {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:verdant_froglight` block.
pub mod verdant_froglight {
    use super::*;

    /// `minecraft:verdant_froglight` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct VerdantFroglight {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl VerdantFroglight {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 27658,
                ( Axis::Y, ) => 27659,
                ( Axis::Z, ) => 27660,
            })
        }
    }

    impl From<VerdantFroglight> for BlockState {
        #[inline(always)]
        fn from(value : VerdantFroglight) -> Self {
            value.to_block_state()
        }
    }

    impl Default for VerdantFroglight {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for VerdantFroglight { }

    impl Block for VerdantFroglight {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:mangrove_fence_gate` block.
pub mod mangrove_fence_gate {
    use super::*;

    /// `minecraft:mangrove_fence_gate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveFenceGate {
        /// `open` state.
        pub open : bool,
        /// `in_wall` state.
        pub in_wall : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl MangroveFenceGate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.open, self.in_wall, self.facing, self.powered, )) {
                ( true, true, Facing::North, true, ) => 12429,
                ( true, true, Facing::North, false, ) => 12430,
                ( false, true, Facing::North, true, ) => 12431,
                ( false, true, Facing::North, false, ) => 12432,
                ( true, false, Facing::North, true, ) => 12433,
                ( true, false, Facing::North, false, ) => 12434,
                ( false, false, Facing::North, true, ) => 12435,
                ( false, false, Facing::North, false, ) => 12436,
                ( true, true, Facing::South, true, ) => 12437,
                ( true, true, Facing::South, false, ) => 12438,
                ( false, true, Facing::South, true, ) => 12439,
                ( false, true, Facing::South, false, ) => 12440,
                ( true, false, Facing::South, true, ) => 12441,
                ( true, false, Facing::South, false, ) => 12442,
                ( false, false, Facing::South, true, ) => 12443,
                ( false, false, Facing::South, false, ) => 12444,
                ( true, true, Facing::West, true, ) => 12445,
                ( true, true, Facing::West, false, ) => 12446,
                ( false, true, Facing::West, true, ) => 12447,
                ( false, true, Facing::West, false, ) => 12448,
                ( true, false, Facing::West, true, ) => 12449,
                ( true, false, Facing::West, false, ) => 12450,
                ( false, false, Facing::West, true, ) => 12451,
                ( false, false, Facing::West, false, ) => 12452,
                ( true, true, Facing::East, true, ) => 12453,
                ( true, true, Facing::East, false, ) => 12454,
                ( false, true, Facing::East, true, ) => 12455,
                ( false, true, Facing::East, false, ) => 12456,
                ( true, false, Facing::East, true, ) => 12457,
                ( true, false, Facing::East, false, ) => 12458,
                ( false, false, Facing::East, true, ) => 12459,
                ( false, false, Facing::East, false, ) => 12460,
            })
        }
    }

    impl From<MangroveFenceGate> for BlockState {
        #[inline(always)]
        fn from(value : MangroveFenceGate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveFenceGate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveFenceGate { }

    impl Block for MangroveFenceGate {
        const DEFAULT_STATE : Self = Self {
            open : false,
            in_wall : false,
            facing : Facing::North,
            powered : false,
        };
    }

}

/// `minecraft:deepslate_emerald_ore` block.
pub mod deepslate_emerald_ore {
    use super::*;

    /// `minecraft:deepslate_emerald_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateEmeraldOre;

    impl DeepslateEmeraldOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(8296)
        }
    }

    impl From<DeepslateEmeraldOre> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateEmeraldOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateEmeraldOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateEmeraldOre { }

    impl Block for DeepslateEmeraldOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cyan_stained_glass` block.
pub mod cyan_stained_glass {
    use super::*;

    /// `minecraft:cyan_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanStainedGlass;

    impl CyanStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6133)
        }
    }

    impl From<CyanStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : CyanStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanStainedGlass { }

    impl Block for CyanStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:beetroots` block.
pub mod beetroots {
    use super::*;

    /// `minecraft:beetroots` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Beetroots {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl Beetroots {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 13532,
                ( Age::N1, ) => 13533,
                ( Age::N2, ) => 13534,
                ( Age::N3, ) => 13535,
            })
        }
    }

    impl From<Beetroots> for BlockState {
        #[inline(always)]
        fn from(value : Beetroots) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Beetroots {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Beetroots { }

    impl Block for Beetroots {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:polished_basalt` block.
pub mod polished_basalt {
    use super::*;

    /// `minecraft:polished_basalt` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedBasalt {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl PolishedBasalt {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 6034,
                ( Axis::Y, ) => 6035,
                ( Axis::Z, ) => 6036,
            })
        }
    }

    impl From<PolishedBasalt> for BlockState {
        #[inline(always)]
        fn from(value : PolishedBasalt) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedBasalt {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedBasalt { }

    impl Block for PolishedBasalt {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:polished_blackstone` block.
pub mod polished_blackstone {
    use super::*;

    /// `minecraft:polished_blackstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedBlackstone;

    impl PolishedBlackstone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20931)
        }
    }

    impl From<PolishedBlackstone> for BlockState {
        #[inline(always)]
        fn from(value : PolishedBlackstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedBlackstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedBlackstone { }

    impl Block for PolishedBlackstone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:crimson_hyphae` block.
pub mod crimson_hyphae {
    use super::*;

    /// `minecraft:crimson_hyphae` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonHyphae {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl CrimsonHyphae {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 19657,
                ( Axis::Y, ) => 19658,
                ( Axis::Z, ) => 19659,
            })
        }
    }

    impl From<CrimsonHyphae> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonHyphae) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonHyphae {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonHyphae { }

    impl Block for CrimsonHyphae {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:birch_log` block.
pub mod birch_log {
    use super::*;

    /// `minecraft:birch_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl BirchLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 142,
                ( Axis::Y, ) => 143,
                ( Axis::Z, ) => 144,
            })
        }
    }

    impl From<BirchLog> for BlockState {
        #[inline(always)]
        fn from(value : BirchLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchLog { }

    impl Block for BirchLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:red_shulker_box` block.
pub mod red_shulker_box {
    use super::*;

    /// `minecraft:red_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl RedShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13675,
                ( Facing::East, ) => 13676,
                ( Facing::South, ) => 13677,
                ( Facing::West, ) => 13678,
                ( Facing::Up, ) => 13679,
                ( Facing::Down, ) => 13680,
            })
        }
    }

    impl From<RedShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : RedShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedShulkerBox { }

    impl Block for RedShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:azalea_leaves` block.
pub mod azalea_leaves {
    use super::*;

    /// `minecraft:azalea_leaves` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AzaleaLeaves {
        /// `distance` state.
        pub distance : Distance,
        /// `persistent` state.
        pub persistent : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `distance` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Distance {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Distance { }
    impl BlockProperty for Distance { }

    impl AzaleaLeaves {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.distance, self.persistent, self.waterlogged, )) {
                ( Distance::N1, true, true, ) => 504,
                ( Distance::N1, true, false, ) => 505,
                ( Distance::N1, false, true, ) => 506,
                ( Distance::N1, false, false, ) => 507,
                ( Distance::N2, true, true, ) => 508,
                ( Distance::N2, true, false, ) => 509,
                ( Distance::N2, false, true, ) => 510,
                ( Distance::N2, false, false, ) => 511,
                ( Distance::N3, true, true, ) => 512,
                ( Distance::N3, true, false, ) => 513,
                ( Distance::N3, false, true, ) => 514,
                ( Distance::N3, false, false, ) => 515,
                ( Distance::N4, true, true, ) => 516,
                ( Distance::N4, true, false, ) => 517,
                ( Distance::N4, false, true, ) => 518,
                ( Distance::N4, false, false, ) => 519,
                ( Distance::N5, true, true, ) => 520,
                ( Distance::N5, true, false, ) => 521,
                ( Distance::N5, false, true, ) => 522,
                ( Distance::N5, false, false, ) => 523,
                ( Distance::N6, true, true, ) => 524,
                ( Distance::N6, true, false, ) => 525,
                ( Distance::N6, false, true, ) => 526,
                ( Distance::N6, false, false, ) => 527,
                ( Distance::N7, true, true, ) => 528,
                ( Distance::N7, true, false, ) => 529,
                ( Distance::N7, false, true, ) => 530,
                ( Distance::N7, false, false, ) => 531,
            })
        }
    }

    impl From<AzaleaLeaves> for BlockState {
        #[inline(always)]
        fn from(value : AzaleaLeaves) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AzaleaLeaves {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AzaleaLeaves { }

    impl Block for AzaleaLeaves {
        const DEFAULT_STATE : Self = Self {
            distance : Distance::N7,
            persistent : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:campfire` block.
pub mod campfire {
    use super::*;

    /// `minecraft:campfire` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Campfire {
        /// `signal_fire` state.
        pub signal_fire : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `lit` state.
        pub lit : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Campfire {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.signal_fire, self.waterlogged, self.lit, self.facing, )) {
                ( true, true, true, Facing::North, ) => 19566,
                ( true, false, true, Facing::North, ) => 19567,
                ( false, true, true, Facing::North, ) => 19568,
                ( false, false, true, Facing::North, ) => 19569,
                ( true, true, false, Facing::North, ) => 19570,
                ( true, false, false, Facing::North, ) => 19571,
                ( false, true, false, Facing::North, ) => 19572,
                ( false, false, false, Facing::North, ) => 19573,
                ( true, true, true, Facing::South, ) => 19574,
                ( true, false, true, Facing::South, ) => 19575,
                ( false, true, true, Facing::South, ) => 19576,
                ( false, false, true, Facing::South, ) => 19577,
                ( true, true, false, Facing::South, ) => 19578,
                ( true, false, false, Facing::South, ) => 19579,
                ( false, true, false, Facing::South, ) => 19580,
                ( false, false, false, Facing::South, ) => 19581,
                ( true, true, true, Facing::West, ) => 19582,
                ( true, false, true, Facing::West, ) => 19583,
                ( false, true, true, Facing::West, ) => 19584,
                ( false, false, true, Facing::West, ) => 19585,
                ( true, true, false, Facing::West, ) => 19586,
                ( true, false, false, Facing::West, ) => 19587,
                ( false, true, false, Facing::West, ) => 19588,
                ( false, false, false, Facing::West, ) => 19589,
                ( true, true, true, Facing::East, ) => 19590,
                ( true, false, true, Facing::East, ) => 19591,
                ( false, true, true, Facing::East, ) => 19592,
                ( false, false, true, Facing::East, ) => 19593,
                ( true, true, false, Facing::East, ) => 19594,
                ( true, false, false, Facing::East, ) => 19595,
                ( false, true, false, Facing::East, ) => 19596,
                ( false, false, false, Facing::East, ) => 19597,
            })
        }
    }

    impl From<Campfire> for BlockState {
        #[inline(always)]
        fn from(value : Campfire) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Campfire {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Campfire { }

    impl Block for Campfire {
        const DEFAULT_STATE : Self = Self {
            signal_fire : false,
            waterlogged : false,
            lit : true,
            facing : Facing::North,
        };
    }

}

/// `minecraft:chiseled_stone_bricks` block.
pub mod chiseled_stone_bricks {
    use super::*;

    /// `minecraft:chiseled_stone_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChiseledStoneBricks;

    impl ChiseledStoneBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6783)
        }
    }

    impl From<ChiseledStoneBricks> for BlockState {
        #[inline(always)]
        fn from(value : ChiseledStoneBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChiseledStoneBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChiseledStoneBricks { }

    impl Block for ChiseledStoneBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:flower_pot` block.
pub mod flower_pot {
    use super::*;

    /// `minecraft:flower_pot` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct FlowerPot;

    impl FlowerPot {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9351)
        }
    }

    impl From<FlowerPot> for BlockState {
        #[inline(always)]
        fn from(value : FlowerPot) -> Self {
            value.to_block_state()
        }
    }

    impl Default for FlowerPot {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for FlowerPot { }

    impl Block for FlowerPot {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:gold_block` block.
pub mod gold_block {
    use super::*;

    /// `minecraft:gold_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GoldBlock;

    impl GoldBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2137)
        }
    }

    impl From<GoldBlock> for BlockState {
        #[inline(always)]
        fn from(value : GoldBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GoldBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GoldBlock { }

    impl Block for GoldBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:mossy_cobblestone_wall` block.
pub mod mossy_cobblestone_wall {
    use super::*;

    /// `minecraft:mossy_cobblestone_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MossyCobblestoneWall {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `up` state.
        pub up : bool,
        /// `north` state.
        pub north : North,
        /// `west` state.
        pub west : West,
        /// `east` state.
        pub east : East,
        /// `south` state.
        pub south : South,
    }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    impl MossyCobblestoneWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.up, self.north, self.west, self.east, self.south, )) {
                ( true, true, North::None, West::None, East::None, South::None, ) => 9027,
                ( true, true, North::None, West::Low, East::None, South::None, ) => 9028,
                ( true, true, North::None, West::Tall, East::None, South::None, ) => 9029,
                ( false, true, North::None, West::None, East::None, South::None, ) => 9030,
                ( false, true, North::None, West::Low, East::None, South::None, ) => 9031,
                ( false, true, North::None, West::Tall, East::None, South::None, ) => 9032,
                ( true, false, North::None, West::None, East::None, South::None, ) => 9033,
                ( true, false, North::None, West::Low, East::None, South::None, ) => 9034,
                ( true, false, North::None, West::Tall, East::None, South::None, ) => 9035,
                ( false, false, North::None, West::None, East::None, South::None, ) => 9036,
                ( false, false, North::None, West::Low, East::None, South::None, ) => 9037,
                ( false, false, North::None, West::Tall, East::None, South::None, ) => 9038,
                ( true, true, North::None, West::None, East::None, South::Low, ) => 9039,
                ( true, true, North::None, West::Low, East::None, South::Low, ) => 9040,
                ( true, true, North::None, West::Tall, East::None, South::Low, ) => 9041,
                ( false, true, North::None, West::None, East::None, South::Low, ) => 9042,
                ( false, true, North::None, West::Low, East::None, South::Low, ) => 9043,
                ( false, true, North::None, West::Tall, East::None, South::Low, ) => 9044,
                ( true, false, North::None, West::None, East::None, South::Low, ) => 9045,
                ( true, false, North::None, West::Low, East::None, South::Low, ) => 9046,
                ( true, false, North::None, West::Tall, East::None, South::Low, ) => 9047,
                ( false, false, North::None, West::None, East::None, South::Low, ) => 9048,
                ( false, false, North::None, West::Low, East::None, South::Low, ) => 9049,
                ( false, false, North::None, West::Tall, East::None, South::Low, ) => 9050,
                ( true, true, North::None, West::None, East::None, South::Tall, ) => 9051,
                ( true, true, North::None, West::Low, East::None, South::Tall, ) => 9052,
                ( true, true, North::None, West::Tall, East::None, South::Tall, ) => 9053,
                ( false, true, North::None, West::None, East::None, South::Tall, ) => 9054,
                ( false, true, North::None, West::Low, East::None, South::Tall, ) => 9055,
                ( false, true, North::None, West::Tall, East::None, South::Tall, ) => 9056,
                ( true, false, North::None, West::None, East::None, South::Tall, ) => 9057,
                ( true, false, North::None, West::Low, East::None, South::Tall, ) => 9058,
                ( true, false, North::None, West::Tall, East::None, South::Tall, ) => 9059,
                ( false, false, North::None, West::None, East::None, South::Tall, ) => 9060,
                ( false, false, North::None, West::Low, East::None, South::Tall, ) => 9061,
                ( false, false, North::None, West::Tall, East::None, South::Tall, ) => 9062,
                ( true, true, North::Low, West::None, East::None, South::None, ) => 9063,
                ( true, true, North::Low, West::Low, East::None, South::None, ) => 9064,
                ( true, true, North::Low, West::Tall, East::None, South::None, ) => 9065,
                ( false, true, North::Low, West::None, East::None, South::None, ) => 9066,
                ( false, true, North::Low, West::Low, East::None, South::None, ) => 9067,
                ( false, true, North::Low, West::Tall, East::None, South::None, ) => 9068,
                ( true, false, North::Low, West::None, East::None, South::None, ) => 9069,
                ( true, false, North::Low, West::Low, East::None, South::None, ) => 9070,
                ( true, false, North::Low, West::Tall, East::None, South::None, ) => 9071,
                ( false, false, North::Low, West::None, East::None, South::None, ) => 9072,
                ( false, false, North::Low, West::Low, East::None, South::None, ) => 9073,
                ( false, false, North::Low, West::Tall, East::None, South::None, ) => 9074,
                ( true, true, North::Low, West::None, East::None, South::Low, ) => 9075,
                ( true, true, North::Low, West::Low, East::None, South::Low, ) => 9076,
                ( true, true, North::Low, West::Tall, East::None, South::Low, ) => 9077,
                ( false, true, North::Low, West::None, East::None, South::Low, ) => 9078,
                ( false, true, North::Low, West::Low, East::None, South::Low, ) => 9079,
                ( false, true, North::Low, West::Tall, East::None, South::Low, ) => 9080,
                ( true, false, North::Low, West::None, East::None, South::Low, ) => 9081,
                ( true, false, North::Low, West::Low, East::None, South::Low, ) => 9082,
                ( true, false, North::Low, West::Tall, East::None, South::Low, ) => 9083,
                ( false, false, North::Low, West::None, East::None, South::Low, ) => 9084,
                ( false, false, North::Low, West::Low, East::None, South::Low, ) => 9085,
                ( false, false, North::Low, West::Tall, East::None, South::Low, ) => 9086,
                ( true, true, North::Low, West::None, East::None, South::Tall, ) => 9087,
                ( true, true, North::Low, West::Low, East::None, South::Tall, ) => 9088,
                ( true, true, North::Low, West::Tall, East::None, South::Tall, ) => 9089,
                ( false, true, North::Low, West::None, East::None, South::Tall, ) => 9090,
                ( false, true, North::Low, West::Low, East::None, South::Tall, ) => 9091,
                ( false, true, North::Low, West::Tall, East::None, South::Tall, ) => 9092,
                ( true, false, North::Low, West::None, East::None, South::Tall, ) => 9093,
                ( true, false, North::Low, West::Low, East::None, South::Tall, ) => 9094,
                ( true, false, North::Low, West::Tall, East::None, South::Tall, ) => 9095,
                ( false, false, North::Low, West::None, East::None, South::Tall, ) => 9096,
                ( false, false, North::Low, West::Low, East::None, South::Tall, ) => 9097,
                ( false, false, North::Low, West::Tall, East::None, South::Tall, ) => 9098,
                ( true, true, North::Tall, West::None, East::None, South::None, ) => 9099,
                ( true, true, North::Tall, West::Low, East::None, South::None, ) => 9100,
                ( true, true, North::Tall, West::Tall, East::None, South::None, ) => 9101,
                ( false, true, North::Tall, West::None, East::None, South::None, ) => 9102,
                ( false, true, North::Tall, West::Low, East::None, South::None, ) => 9103,
                ( false, true, North::Tall, West::Tall, East::None, South::None, ) => 9104,
                ( true, false, North::Tall, West::None, East::None, South::None, ) => 9105,
                ( true, false, North::Tall, West::Low, East::None, South::None, ) => 9106,
                ( true, false, North::Tall, West::Tall, East::None, South::None, ) => 9107,
                ( false, false, North::Tall, West::None, East::None, South::None, ) => 9108,
                ( false, false, North::Tall, West::Low, East::None, South::None, ) => 9109,
                ( false, false, North::Tall, West::Tall, East::None, South::None, ) => 9110,
                ( true, true, North::Tall, West::None, East::None, South::Low, ) => 9111,
                ( true, true, North::Tall, West::Low, East::None, South::Low, ) => 9112,
                ( true, true, North::Tall, West::Tall, East::None, South::Low, ) => 9113,
                ( false, true, North::Tall, West::None, East::None, South::Low, ) => 9114,
                ( false, true, North::Tall, West::Low, East::None, South::Low, ) => 9115,
                ( false, true, North::Tall, West::Tall, East::None, South::Low, ) => 9116,
                ( true, false, North::Tall, West::None, East::None, South::Low, ) => 9117,
                ( true, false, North::Tall, West::Low, East::None, South::Low, ) => 9118,
                ( true, false, North::Tall, West::Tall, East::None, South::Low, ) => 9119,
                ( false, false, North::Tall, West::None, East::None, South::Low, ) => 9120,
                ( false, false, North::Tall, West::Low, East::None, South::Low, ) => 9121,
                ( false, false, North::Tall, West::Tall, East::None, South::Low, ) => 9122,
                ( true, true, North::Tall, West::None, East::None, South::Tall, ) => 9123,
                ( true, true, North::Tall, West::Low, East::None, South::Tall, ) => 9124,
                ( true, true, North::Tall, West::Tall, East::None, South::Tall, ) => 9125,
                ( false, true, North::Tall, West::None, East::None, South::Tall, ) => 9126,
                ( false, true, North::Tall, West::Low, East::None, South::Tall, ) => 9127,
                ( false, true, North::Tall, West::Tall, East::None, South::Tall, ) => 9128,
                ( true, false, North::Tall, West::None, East::None, South::Tall, ) => 9129,
                ( true, false, North::Tall, West::Low, East::None, South::Tall, ) => 9130,
                ( true, false, North::Tall, West::Tall, East::None, South::Tall, ) => 9131,
                ( false, false, North::Tall, West::None, East::None, South::Tall, ) => 9132,
                ( false, false, North::Tall, West::Low, East::None, South::Tall, ) => 9133,
                ( false, false, North::Tall, West::Tall, East::None, South::Tall, ) => 9134,
                ( true, true, North::None, West::None, East::Low, South::None, ) => 9135,
                ( true, true, North::None, West::Low, East::Low, South::None, ) => 9136,
                ( true, true, North::None, West::Tall, East::Low, South::None, ) => 9137,
                ( false, true, North::None, West::None, East::Low, South::None, ) => 9138,
                ( false, true, North::None, West::Low, East::Low, South::None, ) => 9139,
                ( false, true, North::None, West::Tall, East::Low, South::None, ) => 9140,
                ( true, false, North::None, West::None, East::Low, South::None, ) => 9141,
                ( true, false, North::None, West::Low, East::Low, South::None, ) => 9142,
                ( true, false, North::None, West::Tall, East::Low, South::None, ) => 9143,
                ( false, false, North::None, West::None, East::Low, South::None, ) => 9144,
                ( false, false, North::None, West::Low, East::Low, South::None, ) => 9145,
                ( false, false, North::None, West::Tall, East::Low, South::None, ) => 9146,
                ( true, true, North::None, West::None, East::Low, South::Low, ) => 9147,
                ( true, true, North::None, West::Low, East::Low, South::Low, ) => 9148,
                ( true, true, North::None, West::Tall, East::Low, South::Low, ) => 9149,
                ( false, true, North::None, West::None, East::Low, South::Low, ) => 9150,
                ( false, true, North::None, West::Low, East::Low, South::Low, ) => 9151,
                ( false, true, North::None, West::Tall, East::Low, South::Low, ) => 9152,
                ( true, false, North::None, West::None, East::Low, South::Low, ) => 9153,
                ( true, false, North::None, West::Low, East::Low, South::Low, ) => 9154,
                ( true, false, North::None, West::Tall, East::Low, South::Low, ) => 9155,
                ( false, false, North::None, West::None, East::Low, South::Low, ) => 9156,
                ( false, false, North::None, West::Low, East::Low, South::Low, ) => 9157,
                ( false, false, North::None, West::Tall, East::Low, South::Low, ) => 9158,
                ( true, true, North::None, West::None, East::Low, South::Tall, ) => 9159,
                ( true, true, North::None, West::Low, East::Low, South::Tall, ) => 9160,
                ( true, true, North::None, West::Tall, East::Low, South::Tall, ) => 9161,
                ( false, true, North::None, West::None, East::Low, South::Tall, ) => 9162,
                ( false, true, North::None, West::Low, East::Low, South::Tall, ) => 9163,
                ( false, true, North::None, West::Tall, East::Low, South::Tall, ) => 9164,
                ( true, false, North::None, West::None, East::Low, South::Tall, ) => 9165,
                ( true, false, North::None, West::Low, East::Low, South::Tall, ) => 9166,
                ( true, false, North::None, West::Tall, East::Low, South::Tall, ) => 9167,
                ( false, false, North::None, West::None, East::Low, South::Tall, ) => 9168,
                ( false, false, North::None, West::Low, East::Low, South::Tall, ) => 9169,
                ( false, false, North::None, West::Tall, East::Low, South::Tall, ) => 9170,
                ( true, true, North::Low, West::None, East::Low, South::None, ) => 9171,
                ( true, true, North::Low, West::Low, East::Low, South::None, ) => 9172,
                ( true, true, North::Low, West::Tall, East::Low, South::None, ) => 9173,
                ( false, true, North::Low, West::None, East::Low, South::None, ) => 9174,
                ( false, true, North::Low, West::Low, East::Low, South::None, ) => 9175,
                ( false, true, North::Low, West::Tall, East::Low, South::None, ) => 9176,
                ( true, false, North::Low, West::None, East::Low, South::None, ) => 9177,
                ( true, false, North::Low, West::Low, East::Low, South::None, ) => 9178,
                ( true, false, North::Low, West::Tall, East::Low, South::None, ) => 9179,
                ( false, false, North::Low, West::None, East::Low, South::None, ) => 9180,
                ( false, false, North::Low, West::Low, East::Low, South::None, ) => 9181,
                ( false, false, North::Low, West::Tall, East::Low, South::None, ) => 9182,
                ( true, true, North::Low, West::None, East::Low, South::Low, ) => 9183,
                ( true, true, North::Low, West::Low, East::Low, South::Low, ) => 9184,
                ( true, true, North::Low, West::Tall, East::Low, South::Low, ) => 9185,
                ( false, true, North::Low, West::None, East::Low, South::Low, ) => 9186,
                ( false, true, North::Low, West::Low, East::Low, South::Low, ) => 9187,
                ( false, true, North::Low, West::Tall, East::Low, South::Low, ) => 9188,
                ( true, false, North::Low, West::None, East::Low, South::Low, ) => 9189,
                ( true, false, North::Low, West::Low, East::Low, South::Low, ) => 9190,
                ( true, false, North::Low, West::Tall, East::Low, South::Low, ) => 9191,
                ( false, false, North::Low, West::None, East::Low, South::Low, ) => 9192,
                ( false, false, North::Low, West::Low, East::Low, South::Low, ) => 9193,
                ( false, false, North::Low, West::Tall, East::Low, South::Low, ) => 9194,
                ( true, true, North::Low, West::None, East::Low, South::Tall, ) => 9195,
                ( true, true, North::Low, West::Low, East::Low, South::Tall, ) => 9196,
                ( true, true, North::Low, West::Tall, East::Low, South::Tall, ) => 9197,
                ( false, true, North::Low, West::None, East::Low, South::Tall, ) => 9198,
                ( false, true, North::Low, West::Low, East::Low, South::Tall, ) => 9199,
                ( false, true, North::Low, West::Tall, East::Low, South::Tall, ) => 9200,
                ( true, false, North::Low, West::None, East::Low, South::Tall, ) => 9201,
                ( true, false, North::Low, West::Low, East::Low, South::Tall, ) => 9202,
                ( true, false, North::Low, West::Tall, East::Low, South::Tall, ) => 9203,
                ( false, false, North::Low, West::None, East::Low, South::Tall, ) => 9204,
                ( false, false, North::Low, West::Low, East::Low, South::Tall, ) => 9205,
                ( false, false, North::Low, West::Tall, East::Low, South::Tall, ) => 9206,
                ( true, true, North::Tall, West::None, East::Low, South::None, ) => 9207,
                ( true, true, North::Tall, West::Low, East::Low, South::None, ) => 9208,
                ( true, true, North::Tall, West::Tall, East::Low, South::None, ) => 9209,
                ( false, true, North::Tall, West::None, East::Low, South::None, ) => 9210,
                ( false, true, North::Tall, West::Low, East::Low, South::None, ) => 9211,
                ( false, true, North::Tall, West::Tall, East::Low, South::None, ) => 9212,
                ( true, false, North::Tall, West::None, East::Low, South::None, ) => 9213,
                ( true, false, North::Tall, West::Low, East::Low, South::None, ) => 9214,
                ( true, false, North::Tall, West::Tall, East::Low, South::None, ) => 9215,
                ( false, false, North::Tall, West::None, East::Low, South::None, ) => 9216,
                ( false, false, North::Tall, West::Low, East::Low, South::None, ) => 9217,
                ( false, false, North::Tall, West::Tall, East::Low, South::None, ) => 9218,
                ( true, true, North::Tall, West::None, East::Low, South::Low, ) => 9219,
                ( true, true, North::Tall, West::Low, East::Low, South::Low, ) => 9220,
                ( true, true, North::Tall, West::Tall, East::Low, South::Low, ) => 9221,
                ( false, true, North::Tall, West::None, East::Low, South::Low, ) => 9222,
                ( false, true, North::Tall, West::Low, East::Low, South::Low, ) => 9223,
                ( false, true, North::Tall, West::Tall, East::Low, South::Low, ) => 9224,
                ( true, false, North::Tall, West::None, East::Low, South::Low, ) => 9225,
                ( true, false, North::Tall, West::Low, East::Low, South::Low, ) => 9226,
                ( true, false, North::Tall, West::Tall, East::Low, South::Low, ) => 9227,
                ( false, false, North::Tall, West::None, East::Low, South::Low, ) => 9228,
                ( false, false, North::Tall, West::Low, East::Low, South::Low, ) => 9229,
                ( false, false, North::Tall, West::Tall, East::Low, South::Low, ) => 9230,
                ( true, true, North::Tall, West::None, East::Low, South::Tall, ) => 9231,
                ( true, true, North::Tall, West::Low, East::Low, South::Tall, ) => 9232,
                ( true, true, North::Tall, West::Tall, East::Low, South::Tall, ) => 9233,
                ( false, true, North::Tall, West::None, East::Low, South::Tall, ) => 9234,
                ( false, true, North::Tall, West::Low, East::Low, South::Tall, ) => 9235,
                ( false, true, North::Tall, West::Tall, East::Low, South::Tall, ) => 9236,
                ( true, false, North::Tall, West::None, East::Low, South::Tall, ) => 9237,
                ( true, false, North::Tall, West::Low, East::Low, South::Tall, ) => 9238,
                ( true, false, North::Tall, West::Tall, East::Low, South::Tall, ) => 9239,
                ( false, false, North::Tall, West::None, East::Low, South::Tall, ) => 9240,
                ( false, false, North::Tall, West::Low, East::Low, South::Tall, ) => 9241,
                ( false, false, North::Tall, West::Tall, East::Low, South::Tall, ) => 9242,
                ( true, true, North::None, West::None, East::Tall, South::None, ) => 9243,
                ( true, true, North::None, West::Low, East::Tall, South::None, ) => 9244,
                ( true, true, North::None, West::Tall, East::Tall, South::None, ) => 9245,
                ( false, true, North::None, West::None, East::Tall, South::None, ) => 9246,
                ( false, true, North::None, West::Low, East::Tall, South::None, ) => 9247,
                ( false, true, North::None, West::Tall, East::Tall, South::None, ) => 9248,
                ( true, false, North::None, West::None, East::Tall, South::None, ) => 9249,
                ( true, false, North::None, West::Low, East::Tall, South::None, ) => 9250,
                ( true, false, North::None, West::Tall, East::Tall, South::None, ) => 9251,
                ( false, false, North::None, West::None, East::Tall, South::None, ) => 9252,
                ( false, false, North::None, West::Low, East::Tall, South::None, ) => 9253,
                ( false, false, North::None, West::Tall, East::Tall, South::None, ) => 9254,
                ( true, true, North::None, West::None, East::Tall, South::Low, ) => 9255,
                ( true, true, North::None, West::Low, East::Tall, South::Low, ) => 9256,
                ( true, true, North::None, West::Tall, East::Tall, South::Low, ) => 9257,
                ( false, true, North::None, West::None, East::Tall, South::Low, ) => 9258,
                ( false, true, North::None, West::Low, East::Tall, South::Low, ) => 9259,
                ( false, true, North::None, West::Tall, East::Tall, South::Low, ) => 9260,
                ( true, false, North::None, West::None, East::Tall, South::Low, ) => 9261,
                ( true, false, North::None, West::Low, East::Tall, South::Low, ) => 9262,
                ( true, false, North::None, West::Tall, East::Tall, South::Low, ) => 9263,
                ( false, false, North::None, West::None, East::Tall, South::Low, ) => 9264,
                ( false, false, North::None, West::Low, East::Tall, South::Low, ) => 9265,
                ( false, false, North::None, West::Tall, East::Tall, South::Low, ) => 9266,
                ( true, true, North::None, West::None, East::Tall, South::Tall, ) => 9267,
                ( true, true, North::None, West::Low, East::Tall, South::Tall, ) => 9268,
                ( true, true, North::None, West::Tall, East::Tall, South::Tall, ) => 9269,
                ( false, true, North::None, West::None, East::Tall, South::Tall, ) => 9270,
                ( false, true, North::None, West::Low, East::Tall, South::Tall, ) => 9271,
                ( false, true, North::None, West::Tall, East::Tall, South::Tall, ) => 9272,
                ( true, false, North::None, West::None, East::Tall, South::Tall, ) => 9273,
                ( true, false, North::None, West::Low, East::Tall, South::Tall, ) => 9274,
                ( true, false, North::None, West::Tall, East::Tall, South::Tall, ) => 9275,
                ( false, false, North::None, West::None, East::Tall, South::Tall, ) => 9276,
                ( false, false, North::None, West::Low, East::Tall, South::Tall, ) => 9277,
                ( false, false, North::None, West::Tall, East::Tall, South::Tall, ) => 9278,
                ( true, true, North::Low, West::None, East::Tall, South::None, ) => 9279,
                ( true, true, North::Low, West::Low, East::Tall, South::None, ) => 9280,
                ( true, true, North::Low, West::Tall, East::Tall, South::None, ) => 9281,
                ( false, true, North::Low, West::None, East::Tall, South::None, ) => 9282,
                ( false, true, North::Low, West::Low, East::Tall, South::None, ) => 9283,
                ( false, true, North::Low, West::Tall, East::Tall, South::None, ) => 9284,
                ( true, false, North::Low, West::None, East::Tall, South::None, ) => 9285,
                ( true, false, North::Low, West::Low, East::Tall, South::None, ) => 9286,
                ( true, false, North::Low, West::Tall, East::Tall, South::None, ) => 9287,
                ( false, false, North::Low, West::None, East::Tall, South::None, ) => 9288,
                ( false, false, North::Low, West::Low, East::Tall, South::None, ) => 9289,
                ( false, false, North::Low, West::Tall, East::Tall, South::None, ) => 9290,
                ( true, true, North::Low, West::None, East::Tall, South::Low, ) => 9291,
                ( true, true, North::Low, West::Low, East::Tall, South::Low, ) => 9292,
                ( true, true, North::Low, West::Tall, East::Tall, South::Low, ) => 9293,
                ( false, true, North::Low, West::None, East::Tall, South::Low, ) => 9294,
                ( false, true, North::Low, West::Low, East::Tall, South::Low, ) => 9295,
                ( false, true, North::Low, West::Tall, East::Tall, South::Low, ) => 9296,
                ( true, false, North::Low, West::None, East::Tall, South::Low, ) => 9297,
                ( true, false, North::Low, West::Low, East::Tall, South::Low, ) => 9298,
                ( true, false, North::Low, West::Tall, East::Tall, South::Low, ) => 9299,
                ( false, false, North::Low, West::None, East::Tall, South::Low, ) => 9300,
                ( false, false, North::Low, West::Low, East::Tall, South::Low, ) => 9301,
                ( false, false, North::Low, West::Tall, East::Tall, South::Low, ) => 9302,
                ( true, true, North::Low, West::None, East::Tall, South::Tall, ) => 9303,
                ( true, true, North::Low, West::Low, East::Tall, South::Tall, ) => 9304,
                ( true, true, North::Low, West::Tall, East::Tall, South::Tall, ) => 9305,
                ( false, true, North::Low, West::None, East::Tall, South::Tall, ) => 9306,
                ( false, true, North::Low, West::Low, East::Tall, South::Tall, ) => 9307,
                ( false, true, North::Low, West::Tall, East::Tall, South::Tall, ) => 9308,
                ( true, false, North::Low, West::None, East::Tall, South::Tall, ) => 9309,
                ( true, false, North::Low, West::Low, East::Tall, South::Tall, ) => 9310,
                ( true, false, North::Low, West::Tall, East::Tall, South::Tall, ) => 9311,
                ( false, false, North::Low, West::None, East::Tall, South::Tall, ) => 9312,
                ( false, false, North::Low, West::Low, East::Tall, South::Tall, ) => 9313,
                ( false, false, North::Low, West::Tall, East::Tall, South::Tall, ) => 9314,
                ( true, true, North::Tall, West::None, East::Tall, South::None, ) => 9315,
                ( true, true, North::Tall, West::Low, East::Tall, South::None, ) => 9316,
                ( true, true, North::Tall, West::Tall, East::Tall, South::None, ) => 9317,
                ( false, true, North::Tall, West::None, East::Tall, South::None, ) => 9318,
                ( false, true, North::Tall, West::Low, East::Tall, South::None, ) => 9319,
                ( false, true, North::Tall, West::Tall, East::Tall, South::None, ) => 9320,
                ( true, false, North::Tall, West::None, East::Tall, South::None, ) => 9321,
                ( true, false, North::Tall, West::Low, East::Tall, South::None, ) => 9322,
                ( true, false, North::Tall, West::Tall, East::Tall, South::None, ) => 9323,
                ( false, false, North::Tall, West::None, East::Tall, South::None, ) => 9324,
                ( false, false, North::Tall, West::Low, East::Tall, South::None, ) => 9325,
                ( false, false, North::Tall, West::Tall, East::Tall, South::None, ) => 9326,
                ( true, true, North::Tall, West::None, East::Tall, South::Low, ) => 9327,
                ( true, true, North::Tall, West::Low, East::Tall, South::Low, ) => 9328,
                ( true, true, North::Tall, West::Tall, East::Tall, South::Low, ) => 9329,
                ( false, true, North::Tall, West::None, East::Tall, South::Low, ) => 9330,
                ( false, true, North::Tall, West::Low, East::Tall, South::Low, ) => 9331,
                ( false, true, North::Tall, West::Tall, East::Tall, South::Low, ) => 9332,
                ( true, false, North::Tall, West::None, East::Tall, South::Low, ) => 9333,
                ( true, false, North::Tall, West::Low, East::Tall, South::Low, ) => 9334,
                ( true, false, North::Tall, West::Tall, East::Tall, South::Low, ) => 9335,
                ( false, false, North::Tall, West::None, East::Tall, South::Low, ) => 9336,
                ( false, false, North::Tall, West::Low, East::Tall, South::Low, ) => 9337,
                ( false, false, North::Tall, West::Tall, East::Tall, South::Low, ) => 9338,
                ( true, true, North::Tall, West::None, East::Tall, South::Tall, ) => 9339,
                ( true, true, North::Tall, West::Low, East::Tall, South::Tall, ) => 9340,
                ( true, true, North::Tall, West::Tall, East::Tall, South::Tall, ) => 9341,
                ( false, true, North::Tall, West::None, East::Tall, South::Tall, ) => 9342,
                ( false, true, North::Tall, West::Low, East::Tall, South::Tall, ) => 9343,
                ( false, true, North::Tall, West::Tall, East::Tall, South::Tall, ) => 9344,
                ( true, false, North::Tall, West::None, East::Tall, South::Tall, ) => 9345,
                ( true, false, North::Tall, West::Low, East::Tall, South::Tall, ) => 9346,
                ( true, false, North::Tall, West::Tall, East::Tall, South::Tall, ) => 9347,
                ( false, false, North::Tall, West::None, East::Tall, South::Tall, ) => 9348,
                ( false, false, North::Tall, West::Low, East::Tall, South::Tall, ) => 9349,
                ( false, false, North::Tall, West::Tall, East::Tall, South::Tall, ) => 9350,
            })
        }
    }

    impl From<MossyCobblestoneWall> for BlockState {
        #[inline(always)]
        fn from(value : MossyCobblestoneWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MossyCobblestoneWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MossyCobblestoneWall { }

    impl Block for MossyCobblestoneWall {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            up : true,
            north : North::None,
            west : West::None,
            east : East::None,
            south : South::None,
        };
    }

}

/// `minecraft:light_gray_concrete` block.
pub mod light_gray_concrete {
    use super::*;

    /// `minecraft:light_gray_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayConcrete;

    impl LightGrayConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13759)
        }
    }

    impl From<LightGrayConcrete> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayConcrete { }

    impl Block for LightGrayConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:wither_skeleton_wall_skull` block.
pub mod wither_skeleton_wall_skull {
    use super::*;

    /// `minecraft:wither_skeleton_wall_skull` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WitherSkeletonWallSkull {
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WitherSkeletonWallSkull {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.powered, )) {
                ( Facing::North, true, ) => 9708,
                ( Facing::North, false, ) => 9709,
                ( Facing::South, true, ) => 9710,
                ( Facing::South, false, ) => 9711,
                ( Facing::West, true, ) => 9712,
                ( Facing::West, false, ) => 9713,
                ( Facing::East, true, ) => 9714,
                ( Facing::East, false, ) => 9715,
            })
        }
    }

    impl From<WitherSkeletonWallSkull> for BlockState {
        #[inline(always)]
        fn from(value : WitherSkeletonWallSkull) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WitherSkeletonWallSkull {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WitherSkeletonWallSkull { }

    impl Block for WitherSkeletonWallSkull {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            powered : false,
        };
    }

}

/// `minecraft:bubble_coral` block.
pub mod bubble_coral {
    use super::*;

    /// `minecraft:bubble_coral` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BubbleCoral {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl BubbleCoral {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13882,
                ( false, ) => 13883,
            })
        }
    }

    impl From<BubbleCoral> for BlockState {
        #[inline(always)]
        fn from(value : BubbleCoral) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BubbleCoral {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BubbleCoral { }

    impl Block for BubbleCoral {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:bubble_coral_fan` block.
pub mod bubble_coral_fan {
    use super::*;

    /// `minecraft:bubble_coral_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BubbleCoralFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl BubbleCoralFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13902,
                ( false, ) => 13903,
            })
        }
    }

    impl From<BubbleCoralFan> for BlockState {
        #[inline(always)]
        fn from(value : BubbleCoralFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BubbleCoralFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BubbleCoralFan { }

    impl Block for BubbleCoralFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:daylight_detector` block.
pub mod daylight_detector {
    use super::*;

    /// `minecraft:daylight_detector` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DaylightDetector {
        /// `power` state.
        pub power : Power,
        /// `inverted` state.
        pub inverted : bool,
    }

    /// `power` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Power {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Power { }
    impl BlockProperty for Power { }

    impl DaylightDetector {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.power, self.inverted, )) {
                ( Power::N0, true, ) => 10000,
                ( Power::N1, true, ) => 10001,
                ( Power::N2, true, ) => 10002,
                ( Power::N3, true, ) => 10003,
                ( Power::N4, true, ) => 10004,
                ( Power::N5, true, ) => 10005,
                ( Power::N6, true, ) => 10006,
                ( Power::N7, true, ) => 10007,
                ( Power::N8, true, ) => 10008,
                ( Power::N9, true, ) => 10009,
                ( Power::N10, true, ) => 10010,
                ( Power::N11, true, ) => 10011,
                ( Power::N12, true, ) => 10012,
                ( Power::N13, true, ) => 10013,
                ( Power::N14, true, ) => 10014,
                ( Power::N15, true, ) => 10015,
                ( Power::N0, false, ) => 10016,
                ( Power::N1, false, ) => 10017,
                ( Power::N2, false, ) => 10018,
                ( Power::N3, false, ) => 10019,
                ( Power::N4, false, ) => 10020,
                ( Power::N5, false, ) => 10021,
                ( Power::N6, false, ) => 10022,
                ( Power::N7, false, ) => 10023,
                ( Power::N8, false, ) => 10024,
                ( Power::N9, false, ) => 10025,
                ( Power::N10, false, ) => 10026,
                ( Power::N11, false, ) => 10027,
                ( Power::N12, false, ) => 10028,
                ( Power::N13, false, ) => 10029,
                ( Power::N14, false, ) => 10030,
                ( Power::N15, false, ) => 10031,
            })
        }
    }

    impl From<DaylightDetector> for BlockState {
        #[inline(always)]
        fn from(value : DaylightDetector) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DaylightDetector {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DaylightDetector { }

    impl Block for DaylightDetector {
        const DEFAULT_STATE : Self = Self {
            power : Power::N0,
            inverted : false,
        };
    }

}

/// `minecraft:orange_stained_glass_pane` block.
pub mod orange_stained_glass_pane {
    use super::*;

    /// `minecraft:orange_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeStainedGlassPane {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `south` state.
        pub south : bool,
        /// `west` state.
        pub west : bool,
        /// `east` state.
        pub east : bool,
        /// `north` state.
        pub north : bool,
    }

    impl OrangeStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.south, self.west, self.east, self.north, )) {
                ( true, true, true, true, true, ) => 10213,
                ( true, true, false, true, true, ) => 10214,
                ( false, true, true, true, true, ) => 10215,
                ( false, true, false, true, true, ) => 10216,
                ( true, false, true, true, true, ) => 10217,
                ( true, false, false, true, true, ) => 10218,
                ( false, false, true, true, true, ) => 10219,
                ( false, false, false, true, true, ) => 10220,
                ( true, true, true, true, false, ) => 10221,
                ( true, true, false, true, false, ) => 10222,
                ( false, true, true, true, false, ) => 10223,
                ( false, true, false, true, false, ) => 10224,
                ( true, false, true, true, false, ) => 10225,
                ( true, false, false, true, false, ) => 10226,
                ( false, false, true, true, false, ) => 10227,
                ( false, false, false, true, false, ) => 10228,
                ( true, true, true, false, true, ) => 10229,
                ( true, true, false, false, true, ) => 10230,
                ( false, true, true, false, true, ) => 10231,
                ( false, true, false, false, true, ) => 10232,
                ( true, false, true, false, true, ) => 10233,
                ( true, false, false, false, true, ) => 10234,
                ( false, false, true, false, true, ) => 10235,
                ( false, false, false, false, true, ) => 10236,
                ( true, true, true, false, false, ) => 10237,
                ( true, true, false, false, false, ) => 10238,
                ( false, true, true, false, false, ) => 10239,
                ( false, true, false, false, false, ) => 10240,
                ( true, false, true, false, false, ) => 10241,
                ( true, false, false, false, false, ) => 10242,
                ( false, false, true, false, false, ) => 10243,
                ( false, false, false, false, false, ) => 10244,
            })
        }
    }

    impl From<OrangeStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : OrangeStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeStainedGlassPane { }

    impl Block for OrangeStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            south : false,
            west : false,
            east : false,
            north : false,
        };
    }

}

/// `minecraft:mud_brick_wall` block.
pub mod mud_brick_wall {
    use super::*;

    /// `minecraft:mud_brick_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MudBrickWall {
        /// `up` state.
        pub up : bool,
        /// `south` state.
        pub south : South,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : West,
        /// `east` state.
        pub east : East,
        /// `north` state.
        pub north : North,
    }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    impl MudBrickWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.up, self.south, self.waterlogged, self.west, self.east, self.north, )) {
                ( true, South::None, true, West::None, East::None, North::None, ) => 17159,
                ( true, South::None, true, West::Low, East::None, North::None, ) => 17160,
                ( true, South::None, true, West::Tall, East::None, North::None, ) => 17161,
                ( true, South::None, false, West::None, East::None, North::None, ) => 17162,
                ( true, South::None, false, West::Low, East::None, North::None, ) => 17163,
                ( true, South::None, false, West::Tall, East::None, North::None, ) => 17164,
                ( false, South::None, true, West::None, East::None, North::None, ) => 17165,
                ( false, South::None, true, West::Low, East::None, North::None, ) => 17166,
                ( false, South::None, true, West::Tall, East::None, North::None, ) => 17167,
                ( false, South::None, false, West::None, East::None, North::None, ) => 17168,
                ( false, South::None, false, West::Low, East::None, North::None, ) => 17169,
                ( false, South::None, false, West::Tall, East::None, North::None, ) => 17170,
                ( true, South::Low, true, West::None, East::None, North::None, ) => 17171,
                ( true, South::Low, true, West::Low, East::None, North::None, ) => 17172,
                ( true, South::Low, true, West::Tall, East::None, North::None, ) => 17173,
                ( true, South::Low, false, West::None, East::None, North::None, ) => 17174,
                ( true, South::Low, false, West::Low, East::None, North::None, ) => 17175,
                ( true, South::Low, false, West::Tall, East::None, North::None, ) => 17176,
                ( false, South::Low, true, West::None, East::None, North::None, ) => 17177,
                ( false, South::Low, true, West::Low, East::None, North::None, ) => 17178,
                ( false, South::Low, true, West::Tall, East::None, North::None, ) => 17179,
                ( false, South::Low, false, West::None, East::None, North::None, ) => 17180,
                ( false, South::Low, false, West::Low, East::None, North::None, ) => 17181,
                ( false, South::Low, false, West::Tall, East::None, North::None, ) => 17182,
                ( true, South::Tall, true, West::None, East::None, North::None, ) => 17183,
                ( true, South::Tall, true, West::Low, East::None, North::None, ) => 17184,
                ( true, South::Tall, true, West::Tall, East::None, North::None, ) => 17185,
                ( true, South::Tall, false, West::None, East::None, North::None, ) => 17186,
                ( true, South::Tall, false, West::Low, East::None, North::None, ) => 17187,
                ( true, South::Tall, false, West::Tall, East::None, North::None, ) => 17188,
                ( false, South::Tall, true, West::None, East::None, North::None, ) => 17189,
                ( false, South::Tall, true, West::Low, East::None, North::None, ) => 17190,
                ( false, South::Tall, true, West::Tall, East::None, North::None, ) => 17191,
                ( false, South::Tall, false, West::None, East::None, North::None, ) => 17192,
                ( false, South::Tall, false, West::Low, East::None, North::None, ) => 17193,
                ( false, South::Tall, false, West::Tall, East::None, North::None, ) => 17194,
                ( true, South::None, true, West::None, East::None, North::Low, ) => 17195,
                ( true, South::None, true, West::Low, East::None, North::Low, ) => 17196,
                ( true, South::None, true, West::Tall, East::None, North::Low, ) => 17197,
                ( true, South::None, false, West::None, East::None, North::Low, ) => 17198,
                ( true, South::None, false, West::Low, East::None, North::Low, ) => 17199,
                ( true, South::None, false, West::Tall, East::None, North::Low, ) => 17200,
                ( false, South::None, true, West::None, East::None, North::Low, ) => 17201,
                ( false, South::None, true, West::Low, East::None, North::Low, ) => 17202,
                ( false, South::None, true, West::Tall, East::None, North::Low, ) => 17203,
                ( false, South::None, false, West::None, East::None, North::Low, ) => 17204,
                ( false, South::None, false, West::Low, East::None, North::Low, ) => 17205,
                ( false, South::None, false, West::Tall, East::None, North::Low, ) => 17206,
                ( true, South::Low, true, West::None, East::None, North::Low, ) => 17207,
                ( true, South::Low, true, West::Low, East::None, North::Low, ) => 17208,
                ( true, South::Low, true, West::Tall, East::None, North::Low, ) => 17209,
                ( true, South::Low, false, West::None, East::None, North::Low, ) => 17210,
                ( true, South::Low, false, West::Low, East::None, North::Low, ) => 17211,
                ( true, South::Low, false, West::Tall, East::None, North::Low, ) => 17212,
                ( false, South::Low, true, West::None, East::None, North::Low, ) => 17213,
                ( false, South::Low, true, West::Low, East::None, North::Low, ) => 17214,
                ( false, South::Low, true, West::Tall, East::None, North::Low, ) => 17215,
                ( false, South::Low, false, West::None, East::None, North::Low, ) => 17216,
                ( false, South::Low, false, West::Low, East::None, North::Low, ) => 17217,
                ( false, South::Low, false, West::Tall, East::None, North::Low, ) => 17218,
                ( true, South::Tall, true, West::None, East::None, North::Low, ) => 17219,
                ( true, South::Tall, true, West::Low, East::None, North::Low, ) => 17220,
                ( true, South::Tall, true, West::Tall, East::None, North::Low, ) => 17221,
                ( true, South::Tall, false, West::None, East::None, North::Low, ) => 17222,
                ( true, South::Tall, false, West::Low, East::None, North::Low, ) => 17223,
                ( true, South::Tall, false, West::Tall, East::None, North::Low, ) => 17224,
                ( false, South::Tall, true, West::None, East::None, North::Low, ) => 17225,
                ( false, South::Tall, true, West::Low, East::None, North::Low, ) => 17226,
                ( false, South::Tall, true, West::Tall, East::None, North::Low, ) => 17227,
                ( false, South::Tall, false, West::None, East::None, North::Low, ) => 17228,
                ( false, South::Tall, false, West::Low, East::None, North::Low, ) => 17229,
                ( false, South::Tall, false, West::Tall, East::None, North::Low, ) => 17230,
                ( true, South::None, true, West::None, East::None, North::Tall, ) => 17231,
                ( true, South::None, true, West::Low, East::None, North::Tall, ) => 17232,
                ( true, South::None, true, West::Tall, East::None, North::Tall, ) => 17233,
                ( true, South::None, false, West::None, East::None, North::Tall, ) => 17234,
                ( true, South::None, false, West::Low, East::None, North::Tall, ) => 17235,
                ( true, South::None, false, West::Tall, East::None, North::Tall, ) => 17236,
                ( false, South::None, true, West::None, East::None, North::Tall, ) => 17237,
                ( false, South::None, true, West::Low, East::None, North::Tall, ) => 17238,
                ( false, South::None, true, West::Tall, East::None, North::Tall, ) => 17239,
                ( false, South::None, false, West::None, East::None, North::Tall, ) => 17240,
                ( false, South::None, false, West::Low, East::None, North::Tall, ) => 17241,
                ( false, South::None, false, West::Tall, East::None, North::Tall, ) => 17242,
                ( true, South::Low, true, West::None, East::None, North::Tall, ) => 17243,
                ( true, South::Low, true, West::Low, East::None, North::Tall, ) => 17244,
                ( true, South::Low, true, West::Tall, East::None, North::Tall, ) => 17245,
                ( true, South::Low, false, West::None, East::None, North::Tall, ) => 17246,
                ( true, South::Low, false, West::Low, East::None, North::Tall, ) => 17247,
                ( true, South::Low, false, West::Tall, East::None, North::Tall, ) => 17248,
                ( false, South::Low, true, West::None, East::None, North::Tall, ) => 17249,
                ( false, South::Low, true, West::Low, East::None, North::Tall, ) => 17250,
                ( false, South::Low, true, West::Tall, East::None, North::Tall, ) => 17251,
                ( false, South::Low, false, West::None, East::None, North::Tall, ) => 17252,
                ( false, South::Low, false, West::Low, East::None, North::Tall, ) => 17253,
                ( false, South::Low, false, West::Tall, East::None, North::Tall, ) => 17254,
                ( true, South::Tall, true, West::None, East::None, North::Tall, ) => 17255,
                ( true, South::Tall, true, West::Low, East::None, North::Tall, ) => 17256,
                ( true, South::Tall, true, West::Tall, East::None, North::Tall, ) => 17257,
                ( true, South::Tall, false, West::None, East::None, North::Tall, ) => 17258,
                ( true, South::Tall, false, West::Low, East::None, North::Tall, ) => 17259,
                ( true, South::Tall, false, West::Tall, East::None, North::Tall, ) => 17260,
                ( false, South::Tall, true, West::None, East::None, North::Tall, ) => 17261,
                ( false, South::Tall, true, West::Low, East::None, North::Tall, ) => 17262,
                ( false, South::Tall, true, West::Tall, East::None, North::Tall, ) => 17263,
                ( false, South::Tall, false, West::None, East::None, North::Tall, ) => 17264,
                ( false, South::Tall, false, West::Low, East::None, North::Tall, ) => 17265,
                ( false, South::Tall, false, West::Tall, East::None, North::Tall, ) => 17266,
                ( true, South::None, true, West::None, East::Low, North::None, ) => 17267,
                ( true, South::None, true, West::Low, East::Low, North::None, ) => 17268,
                ( true, South::None, true, West::Tall, East::Low, North::None, ) => 17269,
                ( true, South::None, false, West::None, East::Low, North::None, ) => 17270,
                ( true, South::None, false, West::Low, East::Low, North::None, ) => 17271,
                ( true, South::None, false, West::Tall, East::Low, North::None, ) => 17272,
                ( false, South::None, true, West::None, East::Low, North::None, ) => 17273,
                ( false, South::None, true, West::Low, East::Low, North::None, ) => 17274,
                ( false, South::None, true, West::Tall, East::Low, North::None, ) => 17275,
                ( false, South::None, false, West::None, East::Low, North::None, ) => 17276,
                ( false, South::None, false, West::Low, East::Low, North::None, ) => 17277,
                ( false, South::None, false, West::Tall, East::Low, North::None, ) => 17278,
                ( true, South::Low, true, West::None, East::Low, North::None, ) => 17279,
                ( true, South::Low, true, West::Low, East::Low, North::None, ) => 17280,
                ( true, South::Low, true, West::Tall, East::Low, North::None, ) => 17281,
                ( true, South::Low, false, West::None, East::Low, North::None, ) => 17282,
                ( true, South::Low, false, West::Low, East::Low, North::None, ) => 17283,
                ( true, South::Low, false, West::Tall, East::Low, North::None, ) => 17284,
                ( false, South::Low, true, West::None, East::Low, North::None, ) => 17285,
                ( false, South::Low, true, West::Low, East::Low, North::None, ) => 17286,
                ( false, South::Low, true, West::Tall, East::Low, North::None, ) => 17287,
                ( false, South::Low, false, West::None, East::Low, North::None, ) => 17288,
                ( false, South::Low, false, West::Low, East::Low, North::None, ) => 17289,
                ( false, South::Low, false, West::Tall, East::Low, North::None, ) => 17290,
                ( true, South::Tall, true, West::None, East::Low, North::None, ) => 17291,
                ( true, South::Tall, true, West::Low, East::Low, North::None, ) => 17292,
                ( true, South::Tall, true, West::Tall, East::Low, North::None, ) => 17293,
                ( true, South::Tall, false, West::None, East::Low, North::None, ) => 17294,
                ( true, South::Tall, false, West::Low, East::Low, North::None, ) => 17295,
                ( true, South::Tall, false, West::Tall, East::Low, North::None, ) => 17296,
                ( false, South::Tall, true, West::None, East::Low, North::None, ) => 17297,
                ( false, South::Tall, true, West::Low, East::Low, North::None, ) => 17298,
                ( false, South::Tall, true, West::Tall, East::Low, North::None, ) => 17299,
                ( false, South::Tall, false, West::None, East::Low, North::None, ) => 17300,
                ( false, South::Tall, false, West::Low, East::Low, North::None, ) => 17301,
                ( false, South::Tall, false, West::Tall, East::Low, North::None, ) => 17302,
                ( true, South::None, true, West::None, East::Low, North::Low, ) => 17303,
                ( true, South::None, true, West::Low, East::Low, North::Low, ) => 17304,
                ( true, South::None, true, West::Tall, East::Low, North::Low, ) => 17305,
                ( true, South::None, false, West::None, East::Low, North::Low, ) => 17306,
                ( true, South::None, false, West::Low, East::Low, North::Low, ) => 17307,
                ( true, South::None, false, West::Tall, East::Low, North::Low, ) => 17308,
                ( false, South::None, true, West::None, East::Low, North::Low, ) => 17309,
                ( false, South::None, true, West::Low, East::Low, North::Low, ) => 17310,
                ( false, South::None, true, West::Tall, East::Low, North::Low, ) => 17311,
                ( false, South::None, false, West::None, East::Low, North::Low, ) => 17312,
                ( false, South::None, false, West::Low, East::Low, North::Low, ) => 17313,
                ( false, South::None, false, West::Tall, East::Low, North::Low, ) => 17314,
                ( true, South::Low, true, West::None, East::Low, North::Low, ) => 17315,
                ( true, South::Low, true, West::Low, East::Low, North::Low, ) => 17316,
                ( true, South::Low, true, West::Tall, East::Low, North::Low, ) => 17317,
                ( true, South::Low, false, West::None, East::Low, North::Low, ) => 17318,
                ( true, South::Low, false, West::Low, East::Low, North::Low, ) => 17319,
                ( true, South::Low, false, West::Tall, East::Low, North::Low, ) => 17320,
                ( false, South::Low, true, West::None, East::Low, North::Low, ) => 17321,
                ( false, South::Low, true, West::Low, East::Low, North::Low, ) => 17322,
                ( false, South::Low, true, West::Tall, East::Low, North::Low, ) => 17323,
                ( false, South::Low, false, West::None, East::Low, North::Low, ) => 17324,
                ( false, South::Low, false, West::Low, East::Low, North::Low, ) => 17325,
                ( false, South::Low, false, West::Tall, East::Low, North::Low, ) => 17326,
                ( true, South::Tall, true, West::None, East::Low, North::Low, ) => 17327,
                ( true, South::Tall, true, West::Low, East::Low, North::Low, ) => 17328,
                ( true, South::Tall, true, West::Tall, East::Low, North::Low, ) => 17329,
                ( true, South::Tall, false, West::None, East::Low, North::Low, ) => 17330,
                ( true, South::Tall, false, West::Low, East::Low, North::Low, ) => 17331,
                ( true, South::Tall, false, West::Tall, East::Low, North::Low, ) => 17332,
                ( false, South::Tall, true, West::None, East::Low, North::Low, ) => 17333,
                ( false, South::Tall, true, West::Low, East::Low, North::Low, ) => 17334,
                ( false, South::Tall, true, West::Tall, East::Low, North::Low, ) => 17335,
                ( false, South::Tall, false, West::None, East::Low, North::Low, ) => 17336,
                ( false, South::Tall, false, West::Low, East::Low, North::Low, ) => 17337,
                ( false, South::Tall, false, West::Tall, East::Low, North::Low, ) => 17338,
                ( true, South::None, true, West::None, East::Low, North::Tall, ) => 17339,
                ( true, South::None, true, West::Low, East::Low, North::Tall, ) => 17340,
                ( true, South::None, true, West::Tall, East::Low, North::Tall, ) => 17341,
                ( true, South::None, false, West::None, East::Low, North::Tall, ) => 17342,
                ( true, South::None, false, West::Low, East::Low, North::Tall, ) => 17343,
                ( true, South::None, false, West::Tall, East::Low, North::Tall, ) => 17344,
                ( false, South::None, true, West::None, East::Low, North::Tall, ) => 17345,
                ( false, South::None, true, West::Low, East::Low, North::Tall, ) => 17346,
                ( false, South::None, true, West::Tall, East::Low, North::Tall, ) => 17347,
                ( false, South::None, false, West::None, East::Low, North::Tall, ) => 17348,
                ( false, South::None, false, West::Low, East::Low, North::Tall, ) => 17349,
                ( false, South::None, false, West::Tall, East::Low, North::Tall, ) => 17350,
                ( true, South::Low, true, West::None, East::Low, North::Tall, ) => 17351,
                ( true, South::Low, true, West::Low, East::Low, North::Tall, ) => 17352,
                ( true, South::Low, true, West::Tall, East::Low, North::Tall, ) => 17353,
                ( true, South::Low, false, West::None, East::Low, North::Tall, ) => 17354,
                ( true, South::Low, false, West::Low, East::Low, North::Tall, ) => 17355,
                ( true, South::Low, false, West::Tall, East::Low, North::Tall, ) => 17356,
                ( false, South::Low, true, West::None, East::Low, North::Tall, ) => 17357,
                ( false, South::Low, true, West::Low, East::Low, North::Tall, ) => 17358,
                ( false, South::Low, true, West::Tall, East::Low, North::Tall, ) => 17359,
                ( false, South::Low, false, West::None, East::Low, North::Tall, ) => 17360,
                ( false, South::Low, false, West::Low, East::Low, North::Tall, ) => 17361,
                ( false, South::Low, false, West::Tall, East::Low, North::Tall, ) => 17362,
                ( true, South::Tall, true, West::None, East::Low, North::Tall, ) => 17363,
                ( true, South::Tall, true, West::Low, East::Low, North::Tall, ) => 17364,
                ( true, South::Tall, true, West::Tall, East::Low, North::Tall, ) => 17365,
                ( true, South::Tall, false, West::None, East::Low, North::Tall, ) => 17366,
                ( true, South::Tall, false, West::Low, East::Low, North::Tall, ) => 17367,
                ( true, South::Tall, false, West::Tall, East::Low, North::Tall, ) => 17368,
                ( false, South::Tall, true, West::None, East::Low, North::Tall, ) => 17369,
                ( false, South::Tall, true, West::Low, East::Low, North::Tall, ) => 17370,
                ( false, South::Tall, true, West::Tall, East::Low, North::Tall, ) => 17371,
                ( false, South::Tall, false, West::None, East::Low, North::Tall, ) => 17372,
                ( false, South::Tall, false, West::Low, East::Low, North::Tall, ) => 17373,
                ( false, South::Tall, false, West::Tall, East::Low, North::Tall, ) => 17374,
                ( true, South::None, true, West::None, East::Tall, North::None, ) => 17375,
                ( true, South::None, true, West::Low, East::Tall, North::None, ) => 17376,
                ( true, South::None, true, West::Tall, East::Tall, North::None, ) => 17377,
                ( true, South::None, false, West::None, East::Tall, North::None, ) => 17378,
                ( true, South::None, false, West::Low, East::Tall, North::None, ) => 17379,
                ( true, South::None, false, West::Tall, East::Tall, North::None, ) => 17380,
                ( false, South::None, true, West::None, East::Tall, North::None, ) => 17381,
                ( false, South::None, true, West::Low, East::Tall, North::None, ) => 17382,
                ( false, South::None, true, West::Tall, East::Tall, North::None, ) => 17383,
                ( false, South::None, false, West::None, East::Tall, North::None, ) => 17384,
                ( false, South::None, false, West::Low, East::Tall, North::None, ) => 17385,
                ( false, South::None, false, West::Tall, East::Tall, North::None, ) => 17386,
                ( true, South::Low, true, West::None, East::Tall, North::None, ) => 17387,
                ( true, South::Low, true, West::Low, East::Tall, North::None, ) => 17388,
                ( true, South::Low, true, West::Tall, East::Tall, North::None, ) => 17389,
                ( true, South::Low, false, West::None, East::Tall, North::None, ) => 17390,
                ( true, South::Low, false, West::Low, East::Tall, North::None, ) => 17391,
                ( true, South::Low, false, West::Tall, East::Tall, North::None, ) => 17392,
                ( false, South::Low, true, West::None, East::Tall, North::None, ) => 17393,
                ( false, South::Low, true, West::Low, East::Tall, North::None, ) => 17394,
                ( false, South::Low, true, West::Tall, East::Tall, North::None, ) => 17395,
                ( false, South::Low, false, West::None, East::Tall, North::None, ) => 17396,
                ( false, South::Low, false, West::Low, East::Tall, North::None, ) => 17397,
                ( false, South::Low, false, West::Tall, East::Tall, North::None, ) => 17398,
                ( true, South::Tall, true, West::None, East::Tall, North::None, ) => 17399,
                ( true, South::Tall, true, West::Low, East::Tall, North::None, ) => 17400,
                ( true, South::Tall, true, West::Tall, East::Tall, North::None, ) => 17401,
                ( true, South::Tall, false, West::None, East::Tall, North::None, ) => 17402,
                ( true, South::Tall, false, West::Low, East::Tall, North::None, ) => 17403,
                ( true, South::Tall, false, West::Tall, East::Tall, North::None, ) => 17404,
                ( false, South::Tall, true, West::None, East::Tall, North::None, ) => 17405,
                ( false, South::Tall, true, West::Low, East::Tall, North::None, ) => 17406,
                ( false, South::Tall, true, West::Tall, East::Tall, North::None, ) => 17407,
                ( false, South::Tall, false, West::None, East::Tall, North::None, ) => 17408,
                ( false, South::Tall, false, West::Low, East::Tall, North::None, ) => 17409,
                ( false, South::Tall, false, West::Tall, East::Tall, North::None, ) => 17410,
                ( true, South::None, true, West::None, East::Tall, North::Low, ) => 17411,
                ( true, South::None, true, West::Low, East::Tall, North::Low, ) => 17412,
                ( true, South::None, true, West::Tall, East::Tall, North::Low, ) => 17413,
                ( true, South::None, false, West::None, East::Tall, North::Low, ) => 17414,
                ( true, South::None, false, West::Low, East::Tall, North::Low, ) => 17415,
                ( true, South::None, false, West::Tall, East::Tall, North::Low, ) => 17416,
                ( false, South::None, true, West::None, East::Tall, North::Low, ) => 17417,
                ( false, South::None, true, West::Low, East::Tall, North::Low, ) => 17418,
                ( false, South::None, true, West::Tall, East::Tall, North::Low, ) => 17419,
                ( false, South::None, false, West::None, East::Tall, North::Low, ) => 17420,
                ( false, South::None, false, West::Low, East::Tall, North::Low, ) => 17421,
                ( false, South::None, false, West::Tall, East::Tall, North::Low, ) => 17422,
                ( true, South::Low, true, West::None, East::Tall, North::Low, ) => 17423,
                ( true, South::Low, true, West::Low, East::Tall, North::Low, ) => 17424,
                ( true, South::Low, true, West::Tall, East::Tall, North::Low, ) => 17425,
                ( true, South::Low, false, West::None, East::Tall, North::Low, ) => 17426,
                ( true, South::Low, false, West::Low, East::Tall, North::Low, ) => 17427,
                ( true, South::Low, false, West::Tall, East::Tall, North::Low, ) => 17428,
                ( false, South::Low, true, West::None, East::Tall, North::Low, ) => 17429,
                ( false, South::Low, true, West::Low, East::Tall, North::Low, ) => 17430,
                ( false, South::Low, true, West::Tall, East::Tall, North::Low, ) => 17431,
                ( false, South::Low, false, West::None, East::Tall, North::Low, ) => 17432,
                ( false, South::Low, false, West::Low, East::Tall, North::Low, ) => 17433,
                ( false, South::Low, false, West::Tall, East::Tall, North::Low, ) => 17434,
                ( true, South::Tall, true, West::None, East::Tall, North::Low, ) => 17435,
                ( true, South::Tall, true, West::Low, East::Tall, North::Low, ) => 17436,
                ( true, South::Tall, true, West::Tall, East::Tall, North::Low, ) => 17437,
                ( true, South::Tall, false, West::None, East::Tall, North::Low, ) => 17438,
                ( true, South::Tall, false, West::Low, East::Tall, North::Low, ) => 17439,
                ( true, South::Tall, false, West::Tall, East::Tall, North::Low, ) => 17440,
                ( false, South::Tall, true, West::None, East::Tall, North::Low, ) => 17441,
                ( false, South::Tall, true, West::Low, East::Tall, North::Low, ) => 17442,
                ( false, South::Tall, true, West::Tall, East::Tall, North::Low, ) => 17443,
                ( false, South::Tall, false, West::None, East::Tall, North::Low, ) => 17444,
                ( false, South::Tall, false, West::Low, East::Tall, North::Low, ) => 17445,
                ( false, South::Tall, false, West::Tall, East::Tall, North::Low, ) => 17446,
                ( true, South::None, true, West::None, East::Tall, North::Tall, ) => 17447,
                ( true, South::None, true, West::Low, East::Tall, North::Tall, ) => 17448,
                ( true, South::None, true, West::Tall, East::Tall, North::Tall, ) => 17449,
                ( true, South::None, false, West::None, East::Tall, North::Tall, ) => 17450,
                ( true, South::None, false, West::Low, East::Tall, North::Tall, ) => 17451,
                ( true, South::None, false, West::Tall, East::Tall, North::Tall, ) => 17452,
                ( false, South::None, true, West::None, East::Tall, North::Tall, ) => 17453,
                ( false, South::None, true, West::Low, East::Tall, North::Tall, ) => 17454,
                ( false, South::None, true, West::Tall, East::Tall, North::Tall, ) => 17455,
                ( false, South::None, false, West::None, East::Tall, North::Tall, ) => 17456,
                ( false, South::None, false, West::Low, East::Tall, North::Tall, ) => 17457,
                ( false, South::None, false, West::Tall, East::Tall, North::Tall, ) => 17458,
                ( true, South::Low, true, West::None, East::Tall, North::Tall, ) => 17459,
                ( true, South::Low, true, West::Low, East::Tall, North::Tall, ) => 17460,
                ( true, South::Low, true, West::Tall, East::Tall, North::Tall, ) => 17461,
                ( true, South::Low, false, West::None, East::Tall, North::Tall, ) => 17462,
                ( true, South::Low, false, West::Low, East::Tall, North::Tall, ) => 17463,
                ( true, South::Low, false, West::Tall, East::Tall, North::Tall, ) => 17464,
                ( false, South::Low, true, West::None, East::Tall, North::Tall, ) => 17465,
                ( false, South::Low, true, West::Low, East::Tall, North::Tall, ) => 17466,
                ( false, South::Low, true, West::Tall, East::Tall, North::Tall, ) => 17467,
                ( false, South::Low, false, West::None, East::Tall, North::Tall, ) => 17468,
                ( false, South::Low, false, West::Low, East::Tall, North::Tall, ) => 17469,
                ( false, South::Low, false, West::Tall, East::Tall, North::Tall, ) => 17470,
                ( true, South::Tall, true, West::None, East::Tall, North::Tall, ) => 17471,
                ( true, South::Tall, true, West::Low, East::Tall, North::Tall, ) => 17472,
                ( true, South::Tall, true, West::Tall, East::Tall, North::Tall, ) => 17473,
                ( true, South::Tall, false, West::None, East::Tall, North::Tall, ) => 17474,
                ( true, South::Tall, false, West::Low, East::Tall, North::Tall, ) => 17475,
                ( true, South::Tall, false, West::Tall, East::Tall, North::Tall, ) => 17476,
                ( false, South::Tall, true, West::None, East::Tall, North::Tall, ) => 17477,
                ( false, South::Tall, true, West::Low, East::Tall, North::Tall, ) => 17478,
                ( false, South::Tall, true, West::Tall, East::Tall, North::Tall, ) => 17479,
                ( false, South::Tall, false, West::None, East::Tall, North::Tall, ) => 17480,
                ( false, South::Tall, false, West::Low, East::Tall, North::Tall, ) => 17481,
                ( false, South::Tall, false, West::Tall, East::Tall, North::Tall, ) => 17482,
            })
        }
    }

    impl From<MudBrickWall> for BlockState {
        #[inline(always)]
        fn from(value : MudBrickWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MudBrickWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MudBrickWall { }

    impl Block for MudBrickWall {
        const DEFAULT_STATE : Self = Self {
            up : true,
            south : South::None,
            waterlogged : false,
            west : West::None,
            east : East::None,
            north : North::None,
        };
    }

}

/// `minecraft:polished_deepslate` block.
pub mod polished_deepslate {
    use super::*;

    /// `minecraft:polished_deepslate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedDeepslate;

    impl PolishedDeepslate {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(26410)
        }
    }

    impl From<PolishedDeepslate> for BlockState {
        #[inline(always)]
        fn from(value : PolishedDeepslate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedDeepslate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedDeepslate { }

    impl Block for PolishedDeepslate {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stripped_bamboo_block` block.
pub mod stripped_bamboo_block {
    use super::*;

    /// `minecraft:stripped_bamboo_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedBambooBlock {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedBambooBlock {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 198,
                ( Axis::Y, ) => 199,
                ( Axis::Z, ) => 200,
            })
        }
    }

    impl From<StrippedBambooBlock> for BlockState {
        #[inline(always)]
        fn from(value : StrippedBambooBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedBambooBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedBambooBlock { }

    impl Block for StrippedBambooBlock {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:warped_wart_block` block.
pub mod warped_wart_block {
    use super::*;

    /// `minecraft:warped_wart_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedWartBlock;

    impl WarpedWartBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19648)
        }
    }

    impl From<WarpedWartBlock> for BlockState {
        #[inline(always)]
        fn from(value : WarpedWartBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedWartBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedWartBlock { }

    impl Block for WarpedWartBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_oxidized_cut_copper` block.
pub mod waxed_oxidized_cut_copper {
    use super::*;

    /// `minecraft:waxed_oxidized_cut_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedOxidizedCutCopper;

    impl WaxedOxidizedCutCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24364)
        }
    }

    impl From<WaxedOxidizedCutCopper> for BlockState {
        #[inline(always)]
        fn from(value : WaxedOxidizedCutCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedOxidizedCutCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedOxidizedCutCopper { }

    impl Block for WaxedOxidizedCutCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:chiseled_copper` block.
pub mod chiseled_copper {
    use super::*;

    /// `minecraft:chiseled_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChiseledCopper;

    impl ChiseledCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24011)
        }
    }

    impl From<ChiseledCopper> for BlockState {
        #[inline(always)]
        fn from(value : ChiseledCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChiseledCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChiseledCopper { }

    impl Block for ChiseledCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:lily_of_the_valley` block.
pub mod lily_of_the_valley {
    use super::*;

    /// `minecraft:lily_of_the_valley` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LilyOfTheValley;

    impl LilyOfTheValley {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2134)
        }
    }

    impl From<LilyOfTheValley> for BlockState {
        #[inline(always)]
        fn from(value : LilyOfTheValley) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LilyOfTheValley {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LilyOfTheValley { }

    impl Block for LilyOfTheValley {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_exposed_cut_copper_slab` block.
pub mod waxed_exposed_cut_copper_slab {
    use super::*;

    /// `minecraft:waxed_exposed_cut_copper_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedExposedCutCopperSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl WaxedExposedCutCopperSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 24700,
                ( false, Kind::Top, ) => 24701,
                ( true, Kind::Bottom, ) => 24702,
                ( false, Kind::Bottom, ) => 24703,
                ( true, Kind::Double, ) => 24704,
                ( false, Kind::Double, ) => 24705,
            })
        }
    }

    impl From<WaxedExposedCutCopperSlab> for BlockState {
        #[inline(always)]
        fn from(value : WaxedExposedCutCopperSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedExposedCutCopperSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedExposedCutCopperSlab { }

    impl Block for WaxedExposedCutCopperSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:lime_stained_glass_pane` block.
pub mod lime_stained_glass_pane {
    use super::*;

    /// `minecraft:lime_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeStainedGlassPane {
        /// `north` state.
        pub north : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : bool,
        /// `south` state.
        pub south : bool,
        /// `east` state.
        pub east : bool,
    }

    impl LimeStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.waterlogged, self.west, self.south, self.east, )) {
                ( true, true, true, true, true, ) => 10341,
                ( true, true, false, true, true, ) => 10342,
                ( true, false, true, true, true, ) => 10343,
                ( true, false, false, true, true, ) => 10344,
                ( true, true, true, false, true, ) => 10345,
                ( true, true, false, false, true, ) => 10346,
                ( true, false, true, false, true, ) => 10347,
                ( true, false, false, false, true, ) => 10348,
                ( false, true, true, true, true, ) => 10349,
                ( false, true, false, true, true, ) => 10350,
                ( false, false, true, true, true, ) => 10351,
                ( false, false, false, true, true, ) => 10352,
                ( false, true, true, false, true, ) => 10353,
                ( false, true, false, false, true, ) => 10354,
                ( false, false, true, false, true, ) => 10355,
                ( false, false, false, false, true, ) => 10356,
                ( true, true, true, true, false, ) => 10357,
                ( true, true, false, true, false, ) => 10358,
                ( true, false, true, true, false, ) => 10359,
                ( true, false, false, true, false, ) => 10360,
                ( true, true, true, false, false, ) => 10361,
                ( true, true, false, false, false, ) => 10362,
                ( true, false, true, false, false, ) => 10363,
                ( true, false, false, false, false, ) => 10364,
                ( false, true, true, true, false, ) => 10365,
                ( false, true, false, true, false, ) => 10366,
                ( false, false, true, true, false, ) => 10367,
                ( false, false, false, true, false, ) => 10368,
                ( false, true, true, false, false, ) => 10369,
                ( false, true, false, false, false, ) => 10370,
                ( false, false, true, false, false, ) => 10371,
                ( false, false, false, false, false, ) => 10372,
            })
        }
    }

    impl From<LimeStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : LimeStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeStainedGlassPane { }

    impl Block for LimeStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            north : false,
            waterlogged : false,
            west : false,
            south : false,
            east : false,
        };
    }

}

/// `minecraft:observer` block.
pub mod observer {
    use super::*;

    /// `minecraft:observer` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Observer {
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Observer {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.powered, )) {
                ( Facing::North, true, ) => 13573,
                ( Facing::North, false, ) => 13574,
                ( Facing::East, true, ) => 13575,
                ( Facing::East, false, ) => 13576,
                ( Facing::South, true, ) => 13577,
                ( Facing::South, false, ) => 13578,
                ( Facing::West, true, ) => 13579,
                ( Facing::West, false, ) => 13580,
                ( Facing::Up, true, ) => 13581,
                ( Facing::Up, false, ) => 13582,
                ( Facing::Down, true, ) => 13583,
                ( Facing::Down, false, ) => 13584,
            })
        }
    }

    impl From<Observer> for BlockState {
        #[inline(always)]
        fn from(value : Observer) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Observer {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Observer { }

    impl Block for Observer {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::South,
            powered : false,
        };
    }

}

/// `minecraft:blue_concrete` block.
pub mod blue_concrete {
    use super::*;

    /// `minecraft:blue_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueConcrete;

    impl BlueConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13762)
        }
    }

    impl From<BlueConcrete> for BlockState {
        #[inline(always)]
        fn from(value : BlueConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueConcrete { }

    impl Block for BlueConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cut_copper` block.
pub mod cut_copper {
    use super::*;

    /// `minecraft:cut_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CutCopper;

    impl CutCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24007)
        }
    }

    impl From<CutCopper> for BlockState {
        #[inline(always)]
        fn from(value : CutCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CutCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CutCopper { }

    impl Block for CutCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:andesite_stairs` block.
pub mod andesite_stairs {
    use super::*;

    /// `minecraft:andesite_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AndesiteStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl AndesiteStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.waterlogged, self.facing, self.half, )) {
                ( Shape::Straight, true, Facing::North, Half::Top, ) => 14817,
                ( Shape::Straight, false, Facing::North, Half::Top, ) => 14818,
                ( Shape::InnerLeft, true, Facing::North, Half::Top, ) => 14819,
                ( Shape::InnerLeft, false, Facing::North, Half::Top, ) => 14820,
                ( Shape::InnerRight, true, Facing::North, Half::Top, ) => 14821,
                ( Shape::InnerRight, false, Facing::North, Half::Top, ) => 14822,
                ( Shape::OuterLeft, true, Facing::North, Half::Top, ) => 14823,
                ( Shape::OuterLeft, false, Facing::North, Half::Top, ) => 14824,
                ( Shape::OuterRight, true, Facing::North, Half::Top, ) => 14825,
                ( Shape::OuterRight, false, Facing::North, Half::Top, ) => 14826,
                ( Shape::Straight, true, Facing::North, Half::Bottom, ) => 14827,
                ( Shape::Straight, false, Facing::North, Half::Bottom, ) => 14828,
                ( Shape::InnerLeft, true, Facing::North, Half::Bottom, ) => 14829,
                ( Shape::InnerLeft, false, Facing::North, Half::Bottom, ) => 14830,
                ( Shape::InnerRight, true, Facing::North, Half::Bottom, ) => 14831,
                ( Shape::InnerRight, false, Facing::North, Half::Bottom, ) => 14832,
                ( Shape::OuterLeft, true, Facing::North, Half::Bottom, ) => 14833,
                ( Shape::OuterLeft, false, Facing::North, Half::Bottom, ) => 14834,
                ( Shape::OuterRight, true, Facing::North, Half::Bottom, ) => 14835,
                ( Shape::OuterRight, false, Facing::North, Half::Bottom, ) => 14836,
                ( Shape::Straight, true, Facing::South, Half::Top, ) => 14837,
                ( Shape::Straight, false, Facing::South, Half::Top, ) => 14838,
                ( Shape::InnerLeft, true, Facing::South, Half::Top, ) => 14839,
                ( Shape::InnerLeft, false, Facing::South, Half::Top, ) => 14840,
                ( Shape::InnerRight, true, Facing::South, Half::Top, ) => 14841,
                ( Shape::InnerRight, false, Facing::South, Half::Top, ) => 14842,
                ( Shape::OuterLeft, true, Facing::South, Half::Top, ) => 14843,
                ( Shape::OuterLeft, false, Facing::South, Half::Top, ) => 14844,
                ( Shape::OuterRight, true, Facing::South, Half::Top, ) => 14845,
                ( Shape::OuterRight, false, Facing::South, Half::Top, ) => 14846,
                ( Shape::Straight, true, Facing::South, Half::Bottom, ) => 14847,
                ( Shape::Straight, false, Facing::South, Half::Bottom, ) => 14848,
                ( Shape::InnerLeft, true, Facing::South, Half::Bottom, ) => 14849,
                ( Shape::InnerLeft, false, Facing::South, Half::Bottom, ) => 14850,
                ( Shape::InnerRight, true, Facing::South, Half::Bottom, ) => 14851,
                ( Shape::InnerRight, false, Facing::South, Half::Bottom, ) => 14852,
                ( Shape::OuterLeft, true, Facing::South, Half::Bottom, ) => 14853,
                ( Shape::OuterLeft, false, Facing::South, Half::Bottom, ) => 14854,
                ( Shape::OuterRight, true, Facing::South, Half::Bottom, ) => 14855,
                ( Shape::OuterRight, false, Facing::South, Half::Bottom, ) => 14856,
                ( Shape::Straight, true, Facing::West, Half::Top, ) => 14857,
                ( Shape::Straight, false, Facing::West, Half::Top, ) => 14858,
                ( Shape::InnerLeft, true, Facing::West, Half::Top, ) => 14859,
                ( Shape::InnerLeft, false, Facing::West, Half::Top, ) => 14860,
                ( Shape::InnerRight, true, Facing::West, Half::Top, ) => 14861,
                ( Shape::InnerRight, false, Facing::West, Half::Top, ) => 14862,
                ( Shape::OuterLeft, true, Facing::West, Half::Top, ) => 14863,
                ( Shape::OuterLeft, false, Facing::West, Half::Top, ) => 14864,
                ( Shape::OuterRight, true, Facing::West, Half::Top, ) => 14865,
                ( Shape::OuterRight, false, Facing::West, Half::Top, ) => 14866,
                ( Shape::Straight, true, Facing::West, Half::Bottom, ) => 14867,
                ( Shape::Straight, false, Facing::West, Half::Bottom, ) => 14868,
                ( Shape::InnerLeft, true, Facing::West, Half::Bottom, ) => 14869,
                ( Shape::InnerLeft, false, Facing::West, Half::Bottom, ) => 14870,
                ( Shape::InnerRight, true, Facing::West, Half::Bottom, ) => 14871,
                ( Shape::InnerRight, false, Facing::West, Half::Bottom, ) => 14872,
                ( Shape::OuterLeft, true, Facing::West, Half::Bottom, ) => 14873,
                ( Shape::OuterLeft, false, Facing::West, Half::Bottom, ) => 14874,
                ( Shape::OuterRight, true, Facing::West, Half::Bottom, ) => 14875,
                ( Shape::OuterRight, false, Facing::West, Half::Bottom, ) => 14876,
                ( Shape::Straight, true, Facing::East, Half::Top, ) => 14877,
                ( Shape::Straight, false, Facing::East, Half::Top, ) => 14878,
                ( Shape::InnerLeft, true, Facing::East, Half::Top, ) => 14879,
                ( Shape::InnerLeft, false, Facing::East, Half::Top, ) => 14880,
                ( Shape::InnerRight, true, Facing::East, Half::Top, ) => 14881,
                ( Shape::InnerRight, false, Facing::East, Half::Top, ) => 14882,
                ( Shape::OuterLeft, true, Facing::East, Half::Top, ) => 14883,
                ( Shape::OuterLeft, false, Facing::East, Half::Top, ) => 14884,
                ( Shape::OuterRight, true, Facing::East, Half::Top, ) => 14885,
                ( Shape::OuterRight, false, Facing::East, Half::Top, ) => 14886,
                ( Shape::Straight, true, Facing::East, Half::Bottom, ) => 14887,
                ( Shape::Straight, false, Facing::East, Half::Bottom, ) => 14888,
                ( Shape::InnerLeft, true, Facing::East, Half::Bottom, ) => 14889,
                ( Shape::InnerLeft, false, Facing::East, Half::Bottom, ) => 14890,
                ( Shape::InnerRight, true, Facing::East, Half::Bottom, ) => 14891,
                ( Shape::InnerRight, false, Facing::East, Half::Bottom, ) => 14892,
                ( Shape::OuterLeft, true, Facing::East, Half::Bottom, ) => 14893,
                ( Shape::OuterLeft, false, Facing::East, Half::Bottom, ) => 14894,
                ( Shape::OuterRight, true, Facing::East, Half::Bottom, ) => 14895,
                ( Shape::OuterRight, false, Facing::East, Half::Bottom, ) => 14896,
            })
        }
    }

    impl From<AndesiteStairs> for BlockState {
        #[inline(always)]
        fn from(value : AndesiteStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AndesiteStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AndesiteStairs { }

    impl Block for AndesiteStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            waterlogged : false,
            facing : Facing::North,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:mud_brick_stairs` block.
pub mod mud_brick_stairs {
    use super::*;

    /// `minecraft:mud_brick_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MudBrickStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl MudBrickStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, self.half, self.shape, )) {
                ( Facing::North, true, Half::Top, Shape::Straight, ) => 7560,
                ( Facing::North, false, Half::Top, Shape::Straight, ) => 7561,
                ( Facing::North, true, Half::Top, Shape::InnerLeft, ) => 7562,
                ( Facing::North, false, Half::Top, Shape::InnerLeft, ) => 7563,
                ( Facing::North, true, Half::Top, Shape::InnerRight, ) => 7564,
                ( Facing::North, false, Half::Top, Shape::InnerRight, ) => 7565,
                ( Facing::North, true, Half::Top, Shape::OuterLeft, ) => 7566,
                ( Facing::North, false, Half::Top, Shape::OuterLeft, ) => 7567,
                ( Facing::North, true, Half::Top, Shape::OuterRight, ) => 7568,
                ( Facing::North, false, Half::Top, Shape::OuterRight, ) => 7569,
                ( Facing::North, true, Half::Bottom, Shape::Straight, ) => 7570,
                ( Facing::North, false, Half::Bottom, Shape::Straight, ) => 7571,
                ( Facing::North, true, Half::Bottom, Shape::InnerLeft, ) => 7572,
                ( Facing::North, false, Half::Bottom, Shape::InnerLeft, ) => 7573,
                ( Facing::North, true, Half::Bottom, Shape::InnerRight, ) => 7574,
                ( Facing::North, false, Half::Bottom, Shape::InnerRight, ) => 7575,
                ( Facing::North, true, Half::Bottom, Shape::OuterLeft, ) => 7576,
                ( Facing::North, false, Half::Bottom, Shape::OuterLeft, ) => 7577,
                ( Facing::North, true, Half::Bottom, Shape::OuterRight, ) => 7578,
                ( Facing::North, false, Half::Bottom, Shape::OuterRight, ) => 7579,
                ( Facing::South, true, Half::Top, Shape::Straight, ) => 7580,
                ( Facing::South, false, Half::Top, Shape::Straight, ) => 7581,
                ( Facing::South, true, Half::Top, Shape::InnerLeft, ) => 7582,
                ( Facing::South, false, Half::Top, Shape::InnerLeft, ) => 7583,
                ( Facing::South, true, Half::Top, Shape::InnerRight, ) => 7584,
                ( Facing::South, false, Half::Top, Shape::InnerRight, ) => 7585,
                ( Facing::South, true, Half::Top, Shape::OuterLeft, ) => 7586,
                ( Facing::South, false, Half::Top, Shape::OuterLeft, ) => 7587,
                ( Facing::South, true, Half::Top, Shape::OuterRight, ) => 7588,
                ( Facing::South, false, Half::Top, Shape::OuterRight, ) => 7589,
                ( Facing::South, true, Half::Bottom, Shape::Straight, ) => 7590,
                ( Facing::South, false, Half::Bottom, Shape::Straight, ) => 7591,
                ( Facing::South, true, Half::Bottom, Shape::InnerLeft, ) => 7592,
                ( Facing::South, false, Half::Bottom, Shape::InnerLeft, ) => 7593,
                ( Facing::South, true, Half::Bottom, Shape::InnerRight, ) => 7594,
                ( Facing::South, false, Half::Bottom, Shape::InnerRight, ) => 7595,
                ( Facing::South, true, Half::Bottom, Shape::OuterLeft, ) => 7596,
                ( Facing::South, false, Half::Bottom, Shape::OuterLeft, ) => 7597,
                ( Facing::South, true, Half::Bottom, Shape::OuterRight, ) => 7598,
                ( Facing::South, false, Half::Bottom, Shape::OuterRight, ) => 7599,
                ( Facing::West, true, Half::Top, Shape::Straight, ) => 7600,
                ( Facing::West, false, Half::Top, Shape::Straight, ) => 7601,
                ( Facing::West, true, Half::Top, Shape::InnerLeft, ) => 7602,
                ( Facing::West, false, Half::Top, Shape::InnerLeft, ) => 7603,
                ( Facing::West, true, Half::Top, Shape::InnerRight, ) => 7604,
                ( Facing::West, false, Half::Top, Shape::InnerRight, ) => 7605,
                ( Facing::West, true, Half::Top, Shape::OuterLeft, ) => 7606,
                ( Facing::West, false, Half::Top, Shape::OuterLeft, ) => 7607,
                ( Facing::West, true, Half::Top, Shape::OuterRight, ) => 7608,
                ( Facing::West, false, Half::Top, Shape::OuterRight, ) => 7609,
                ( Facing::West, true, Half::Bottom, Shape::Straight, ) => 7610,
                ( Facing::West, false, Half::Bottom, Shape::Straight, ) => 7611,
                ( Facing::West, true, Half::Bottom, Shape::InnerLeft, ) => 7612,
                ( Facing::West, false, Half::Bottom, Shape::InnerLeft, ) => 7613,
                ( Facing::West, true, Half::Bottom, Shape::InnerRight, ) => 7614,
                ( Facing::West, false, Half::Bottom, Shape::InnerRight, ) => 7615,
                ( Facing::West, true, Half::Bottom, Shape::OuterLeft, ) => 7616,
                ( Facing::West, false, Half::Bottom, Shape::OuterLeft, ) => 7617,
                ( Facing::West, true, Half::Bottom, Shape::OuterRight, ) => 7618,
                ( Facing::West, false, Half::Bottom, Shape::OuterRight, ) => 7619,
                ( Facing::East, true, Half::Top, Shape::Straight, ) => 7620,
                ( Facing::East, false, Half::Top, Shape::Straight, ) => 7621,
                ( Facing::East, true, Half::Top, Shape::InnerLeft, ) => 7622,
                ( Facing::East, false, Half::Top, Shape::InnerLeft, ) => 7623,
                ( Facing::East, true, Half::Top, Shape::InnerRight, ) => 7624,
                ( Facing::East, false, Half::Top, Shape::InnerRight, ) => 7625,
                ( Facing::East, true, Half::Top, Shape::OuterLeft, ) => 7626,
                ( Facing::East, false, Half::Top, Shape::OuterLeft, ) => 7627,
                ( Facing::East, true, Half::Top, Shape::OuterRight, ) => 7628,
                ( Facing::East, false, Half::Top, Shape::OuterRight, ) => 7629,
                ( Facing::East, true, Half::Bottom, Shape::Straight, ) => 7630,
                ( Facing::East, false, Half::Bottom, Shape::Straight, ) => 7631,
                ( Facing::East, true, Half::Bottom, Shape::InnerLeft, ) => 7632,
                ( Facing::East, false, Half::Bottom, Shape::InnerLeft, ) => 7633,
                ( Facing::East, true, Half::Bottom, Shape::InnerRight, ) => 7634,
                ( Facing::East, false, Half::Bottom, Shape::InnerRight, ) => 7635,
                ( Facing::East, true, Half::Bottom, Shape::OuterLeft, ) => 7636,
                ( Facing::East, false, Half::Bottom, Shape::OuterLeft, ) => 7637,
                ( Facing::East, true, Half::Bottom, Shape::OuterRight, ) => 7638,
                ( Facing::East, false, Half::Bottom, Shape::OuterRight, ) => 7639,
            })
        }
    }

    impl From<MudBrickStairs> for BlockState {
        #[inline(always)]
        fn from(value : MudBrickStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MudBrickStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MudBrickStairs { }

    impl Block for MudBrickStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
            half : Half::Bottom,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:brain_coral_fan` block.
pub mod brain_coral_fan {
    use super::*;

    /// `minecraft:brain_coral_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrainCoralFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl BrainCoralFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13900,
                ( false, ) => 13901,
            })
        }
    }

    impl From<BrainCoralFan> for BlockState {
        #[inline(always)]
        fn from(value : BrainCoralFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrainCoralFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrainCoralFan { }

    impl Block for BrainCoralFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:pale_moss_carpet` block.
pub mod pale_moss_carpet {
    use super::*;

    /// `minecraft:pale_moss_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleMossCarpet {
        /// `bottom` state.
        pub bottom : bool,
        /// `east` state.
        pub east : East,
        /// `north` state.
        pub north : North,
        /// `south` state.
        pub south : South,
        /// `west` state.
        pub west : West,
    }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    impl PaleMossCarpet {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.bottom, self.east, self.north, self.south, self.west, )) {
                ( true, East::None, North::None, South::None, West::None, ) => 27777,
                ( true, East::None, North::None, South::None, West::Low, ) => 27778,
                ( true, East::None, North::None, South::None, West::Tall, ) => 27779,
                ( true, East::None, North::None, South::Low, West::None, ) => 27780,
                ( true, East::None, North::None, South::Low, West::Low, ) => 27781,
                ( true, East::None, North::None, South::Low, West::Tall, ) => 27782,
                ( true, East::None, North::None, South::Tall, West::None, ) => 27783,
                ( true, East::None, North::None, South::Tall, West::Low, ) => 27784,
                ( true, East::None, North::None, South::Tall, West::Tall, ) => 27785,
                ( true, East::None, North::Low, South::None, West::None, ) => 27786,
                ( true, East::None, North::Low, South::None, West::Low, ) => 27787,
                ( true, East::None, North::Low, South::None, West::Tall, ) => 27788,
                ( true, East::None, North::Low, South::Low, West::None, ) => 27789,
                ( true, East::None, North::Low, South::Low, West::Low, ) => 27790,
                ( true, East::None, North::Low, South::Low, West::Tall, ) => 27791,
                ( true, East::None, North::Low, South::Tall, West::None, ) => 27792,
                ( true, East::None, North::Low, South::Tall, West::Low, ) => 27793,
                ( true, East::None, North::Low, South::Tall, West::Tall, ) => 27794,
                ( true, East::None, North::Tall, South::None, West::None, ) => 27795,
                ( true, East::None, North::Tall, South::None, West::Low, ) => 27796,
                ( true, East::None, North::Tall, South::None, West::Tall, ) => 27797,
                ( true, East::None, North::Tall, South::Low, West::None, ) => 27798,
                ( true, East::None, North::Tall, South::Low, West::Low, ) => 27799,
                ( true, East::None, North::Tall, South::Low, West::Tall, ) => 27800,
                ( true, East::None, North::Tall, South::Tall, West::None, ) => 27801,
                ( true, East::None, North::Tall, South::Tall, West::Low, ) => 27802,
                ( true, East::None, North::Tall, South::Tall, West::Tall, ) => 27803,
                ( true, East::Low, North::None, South::None, West::None, ) => 27804,
                ( true, East::Low, North::None, South::None, West::Low, ) => 27805,
                ( true, East::Low, North::None, South::None, West::Tall, ) => 27806,
                ( true, East::Low, North::None, South::Low, West::None, ) => 27807,
                ( true, East::Low, North::None, South::Low, West::Low, ) => 27808,
                ( true, East::Low, North::None, South::Low, West::Tall, ) => 27809,
                ( true, East::Low, North::None, South::Tall, West::None, ) => 27810,
                ( true, East::Low, North::None, South::Tall, West::Low, ) => 27811,
                ( true, East::Low, North::None, South::Tall, West::Tall, ) => 27812,
                ( true, East::Low, North::Low, South::None, West::None, ) => 27813,
                ( true, East::Low, North::Low, South::None, West::Low, ) => 27814,
                ( true, East::Low, North::Low, South::None, West::Tall, ) => 27815,
                ( true, East::Low, North::Low, South::Low, West::None, ) => 27816,
                ( true, East::Low, North::Low, South::Low, West::Low, ) => 27817,
                ( true, East::Low, North::Low, South::Low, West::Tall, ) => 27818,
                ( true, East::Low, North::Low, South::Tall, West::None, ) => 27819,
                ( true, East::Low, North::Low, South::Tall, West::Low, ) => 27820,
                ( true, East::Low, North::Low, South::Tall, West::Tall, ) => 27821,
                ( true, East::Low, North::Tall, South::None, West::None, ) => 27822,
                ( true, East::Low, North::Tall, South::None, West::Low, ) => 27823,
                ( true, East::Low, North::Tall, South::None, West::Tall, ) => 27824,
                ( true, East::Low, North::Tall, South::Low, West::None, ) => 27825,
                ( true, East::Low, North::Tall, South::Low, West::Low, ) => 27826,
                ( true, East::Low, North::Tall, South::Low, West::Tall, ) => 27827,
                ( true, East::Low, North::Tall, South::Tall, West::None, ) => 27828,
                ( true, East::Low, North::Tall, South::Tall, West::Low, ) => 27829,
                ( true, East::Low, North::Tall, South::Tall, West::Tall, ) => 27830,
                ( true, East::Tall, North::None, South::None, West::None, ) => 27831,
                ( true, East::Tall, North::None, South::None, West::Low, ) => 27832,
                ( true, East::Tall, North::None, South::None, West::Tall, ) => 27833,
                ( true, East::Tall, North::None, South::Low, West::None, ) => 27834,
                ( true, East::Tall, North::None, South::Low, West::Low, ) => 27835,
                ( true, East::Tall, North::None, South::Low, West::Tall, ) => 27836,
                ( true, East::Tall, North::None, South::Tall, West::None, ) => 27837,
                ( true, East::Tall, North::None, South::Tall, West::Low, ) => 27838,
                ( true, East::Tall, North::None, South::Tall, West::Tall, ) => 27839,
                ( true, East::Tall, North::Low, South::None, West::None, ) => 27840,
                ( true, East::Tall, North::Low, South::None, West::Low, ) => 27841,
                ( true, East::Tall, North::Low, South::None, West::Tall, ) => 27842,
                ( true, East::Tall, North::Low, South::Low, West::None, ) => 27843,
                ( true, East::Tall, North::Low, South::Low, West::Low, ) => 27844,
                ( true, East::Tall, North::Low, South::Low, West::Tall, ) => 27845,
                ( true, East::Tall, North::Low, South::Tall, West::None, ) => 27846,
                ( true, East::Tall, North::Low, South::Tall, West::Low, ) => 27847,
                ( true, East::Tall, North::Low, South::Tall, West::Tall, ) => 27848,
                ( true, East::Tall, North::Tall, South::None, West::None, ) => 27849,
                ( true, East::Tall, North::Tall, South::None, West::Low, ) => 27850,
                ( true, East::Tall, North::Tall, South::None, West::Tall, ) => 27851,
                ( true, East::Tall, North::Tall, South::Low, West::None, ) => 27852,
                ( true, East::Tall, North::Tall, South::Low, West::Low, ) => 27853,
                ( true, East::Tall, North::Tall, South::Low, West::Tall, ) => 27854,
                ( true, East::Tall, North::Tall, South::Tall, West::None, ) => 27855,
                ( true, East::Tall, North::Tall, South::Tall, West::Low, ) => 27856,
                ( true, East::Tall, North::Tall, South::Tall, West::Tall, ) => 27857,
                ( false, East::None, North::None, South::None, West::None, ) => 27858,
                ( false, East::None, North::None, South::None, West::Low, ) => 27859,
                ( false, East::None, North::None, South::None, West::Tall, ) => 27860,
                ( false, East::None, North::None, South::Low, West::None, ) => 27861,
                ( false, East::None, North::None, South::Low, West::Low, ) => 27862,
                ( false, East::None, North::None, South::Low, West::Tall, ) => 27863,
                ( false, East::None, North::None, South::Tall, West::None, ) => 27864,
                ( false, East::None, North::None, South::Tall, West::Low, ) => 27865,
                ( false, East::None, North::None, South::Tall, West::Tall, ) => 27866,
                ( false, East::None, North::Low, South::None, West::None, ) => 27867,
                ( false, East::None, North::Low, South::None, West::Low, ) => 27868,
                ( false, East::None, North::Low, South::None, West::Tall, ) => 27869,
                ( false, East::None, North::Low, South::Low, West::None, ) => 27870,
                ( false, East::None, North::Low, South::Low, West::Low, ) => 27871,
                ( false, East::None, North::Low, South::Low, West::Tall, ) => 27872,
                ( false, East::None, North::Low, South::Tall, West::None, ) => 27873,
                ( false, East::None, North::Low, South::Tall, West::Low, ) => 27874,
                ( false, East::None, North::Low, South::Tall, West::Tall, ) => 27875,
                ( false, East::None, North::Tall, South::None, West::None, ) => 27876,
                ( false, East::None, North::Tall, South::None, West::Low, ) => 27877,
                ( false, East::None, North::Tall, South::None, West::Tall, ) => 27878,
                ( false, East::None, North::Tall, South::Low, West::None, ) => 27879,
                ( false, East::None, North::Tall, South::Low, West::Low, ) => 27880,
                ( false, East::None, North::Tall, South::Low, West::Tall, ) => 27881,
                ( false, East::None, North::Tall, South::Tall, West::None, ) => 27882,
                ( false, East::None, North::Tall, South::Tall, West::Low, ) => 27883,
                ( false, East::None, North::Tall, South::Tall, West::Tall, ) => 27884,
                ( false, East::Low, North::None, South::None, West::None, ) => 27885,
                ( false, East::Low, North::None, South::None, West::Low, ) => 27886,
                ( false, East::Low, North::None, South::None, West::Tall, ) => 27887,
                ( false, East::Low, North::None, South::Low, West::None, ) => 27888,
                ( false, East::Low, North::None, South::Low, West::Low, ) => 27889,
                ( false, East::Low, North::None, South::Low, West::Tall, ) => 27890,
                ( false, East::Low, North::None, South::Tall, West::None, ) => 27891,
                ( false, East::Low, North::None, South::Tall, West::Low, ) => 27892,
                ( false, East::Low, North::None, South::Tall, West::Tall, ) => 27893,
                ( false, East::Low, North::Low, South::None, West::None, ) => 27894,
                ( false, East::Low, North::Low, South::None, West::Low, ) => 27895,
                ( false, East::Low, North::Low, South::None, West::Tall, ) => 27896,
                ( false, East::Low, North::Low, South::Low, West::None, ) => 27897,
                ( false, East::Low, North::Low, South::Low, West::Low, ) => 27898,
                ( false, East::Low, North::Low, South::Low, West::Tall, ) => 27899,
                ( false, East::Low, North::Low, South::Tall, West::None, ) => 27900,
                ( false, East::Low, North::Low, South::Tall, West::Low, ) => 27901,
                ( false, East::Low, North::Low, South::Tall, West::Tall, ) => 27902,
                ( false, East::Low, North::Tall, South::None, West::None, ) => 27903,
                ( false, East::Low, North::Tall, South::None, West::Low, ) => 27904,
                ( false, East::Low, North::Tall, South::None, West::Tall, ) => 27905,
                ( false, East::Low, North::Tall, South::Low, West::None, ) => 27906,
                ( false, East::Low, North::Tall, South::Low, West::Low, ) => 27907,
                ( false, East::Low, North::Tall, South::Low, West::Tall, ) => 27908,
                ( false, East::Low, North::Tall, South::Tall, West::None, ) => 27909,
                ( false, East::Low, North::Tall, South::Tall, West::Low, ) => 27910,
                ( false, East::Low, North::Tall, South::Tall, West::Tall, ) => 27911,
                ( false, East::Tall, North::None, South::None, West::None, ) => 27912,
                ( false, East::Tall, North::None, South::None, West::Low, ) => 27913,
                ( false, East::Tall, North::None, South::None, West::Tall, ) => 27914,
                ( false, East::Tall, North::None, South::Low, West::None, ) => 27915,
                ( false, East::Tall, North::None, South::Low, West::Low, ) => 27916,
                ( false, East::Tall, North::None, South::Low, West::Tall, ) => 27917,
                ( false, East::Tall, North::None, South::Tall, West::None, ) => 27918,
                ( false, East::Tall, North::None, South::Tall, West::Low, ) => 27919,
                ( false, East::Tall, North::None, South::Tall, West::Tall, ) => 27920,
                ( false, East::Tall, North::Low, South::None, West::None, ) => 27921,
                ( false, East::Tall, North::Low, South::None, West::Low, ) => 27922,
                ( false, East::Tall, North::Low, South::None, West::Tall, ) => 27923,
                ( false, East::Tall, North::Low, South::Low, West::None, ) => 27924,
                ( false, East::Tall, North::Low, South::Low, West::Low, ) => 27925,
                ( false, East::Tall, North::Low, South::Low, West::Tall, ) => 27926,
                ( false, East::Tall, North::Low, South::Tall, West::None, ) => 27927,
                ( false, East::Tall, North::Low, South::Tall, West::Low, ) => 27928,
                ( false, East::Tall, North::Low, South::Tall, West::Tall, ) => 27929,
                ( false, East::Tall, North::Tall, South::None, West::None, ) => 27930,
                ( false, East::Tall, North::Tall, South::None, West::Low, ) => 27931,
                ( false, East::Tall, North::Tall, South::None, West::Tall, ) => 27932,
                ( false, East::Tall, North::Tall, South::Low, West::None, ) => 27933,
                ( false, East::Tall, North::Tall, South::Low, West::Low, ) => 27934,
                ( false, East::Tall, North::Tall, South::Low, West::Tall, ) => 27935,
                ( false, East::Tall, North::Tall, South::Tall, West::None, ) => 27936,
                ( false, East::Tall, North::Tall, South::Tall, West::Low, ) => 27937,
                ( false, East::Tall, North::Tall, South::Tall, West::Tall, ) => 27938,
            })
        }
    }

    impl From<PaleMossCarpet> for BlockState {
        #[inline(always)]
        fn from(value : PaleMossCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleMossCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleMossCarpet { }

    impl Block for PaleMossCarpet {
        const DEFAULT_STATE : Self = Self {
            bottom : true,
            east : East::None,
            north : North::None,
            south : South::None,
            west : West::None,
        };
    }

}

/// `minecraft:potted_oak_sapling` block.
pub mod potted_oak_sapling {
    use super::*;

    /// `minecraft:potted_oak_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedOakSapling;

    impl PottedOakSapling {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9353)
        }
    }

    impl From<PottedOakSapling> for BlockState {
        #[inline(always)]
        fn from(value : PottedOakSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedOakSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedOakSapling { }

    impl Block for PottedOakSapling {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:crimson_slab` block.
pub mod crimson_slab {
    use super::*;

    /// `minecraft:crimson_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl CrimsonSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 19723,
                ( false, Kind::Top, ) => 19724,
                ( true, Kind::Bottom, ) => 19725,
                ( false, Kind::Bottom, ) => 19726,
                ( true, Kind::Double, ) => 19727,
                ( false, Kind::Double, ) => 19728,
            })
        }
    }

    impl From<CrimsonSlab> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonSlab { }

    impl Block for CrimsonSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:cyan_concrete` block.
pub mod cyan_concrete {
    use super::*;

    /// `minecraft:cyan_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanConcrete;

    impl CyanConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13760)
        }
    }

    impl From<CyanConcrete> for BlockState {
        #[inline(always)]
        fn from(value : CyanConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanConcrete { }

    impl Block for CyanConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stripped_cherry_log` block.
pub mod stripped_cherry_log {
    use super::*;

    /// `minecraft:stripped_cherry_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedCherryLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedCherryLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 183,
                ( Axis::Y, ) => 184,
                ( Axis::Z, ) => 185,
            })
        }
    }

    impl From<StrippedCherryLog> for BlockState {
        #[inline(always)]
        fn from(value : StrippedCherryLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedCherryLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedCherryLog { }

    impl Block for StrippedCherryLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:red_wool` block.
pub mod red_wool {
    use super::*;

    /// `minecraft:red_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedWool;

    impl RedWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2107)
        }
    }

    impl From<RedWool> for BlockState {
        #[inline(always)]
        fn from(value : RedWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedWool { }

    impl Block for RedWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:attached_pumpkin_stem` block.
pub mod attached_pumpkin_stem {
    use super::*;

    /// `minecraft:attached_pumpkin_stem` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AttachedPumpkinStem {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl AttachedPumpkinStem {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 7056,
                ( Facing::South, ) => 7057,
                ( Facing::West, ) => 7058,
                ( Facing::East, ) => 7059,
            })
        }
    }

    impl From<AttachedPumpkinStem> for BlockState {
        #[inline(always)]
        fn from(value : AttachedPumpkinStem) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AttachedPumpkinStem {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AttachedPumpkinStem { }

    impl Block for AttachedPumpkinStem {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:end_gateway` block.
pub mod end_gateway {
    use super::*;

    /// `minecraft:end_gateway` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct EndGateway;

    impl EndGateway {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13537)
        }
    }

    impl From<EndGateway> for BlockState {
        #[inline(always)]
        fn from(value : EndGateway) -> Self {
            value.to_block_state()
        }
    }

    impl Default for EndGateway {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for EndGateway { }

    impl Block for EndGateway {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:white_carpet` block.
pub mod white_carpet {
    use super::*;

    /// `minecraft:white_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteCarpet;

    impl WhiteCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11617)
        }
    }

    impl From<WhiteCarpet> for BlockState {
        #[inline(always)]
        fn from(value : WhiteCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteCarpet { }

    impl Block for WhiteCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cherry_slab` block.
pub mod cherry_slab {
    use super::*;

    /// `minecraft:cherry_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherrySlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl CherrySlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 12081,
                ( false, Kind::Top, ) => 12082,
                ( true, Kind::Bottom, ) => 12083,
                ( false, Kind::Bottom, ) => 12084,
                ( true, Kind::Double, ) => 12085,
                ( false, Kind::Double, ) => 12086,
            })
        }
    }

    impl From<CherrySlab> for BlockState {
        #[inline(always)]
        fn from(value : CherrySlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherrySlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherrySlab { }

    impl Block for CherrySlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:green_wall_banner` block.
pub mod green_wall_banner {
    use super::*;

    /// `minecraft:green_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl GreenWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11956,
                ( Facing::South, ) => 11957,
                ( Facing::West, ) => 11958,
                ( Facing::East, ) => 11959,
            })
        }
    }

    impl From<GreenWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : GreenWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenWallBanner { }

    impl Block for GreenWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:light_blue_wall_banner` block.
pub mod light_blue_wall_banner {
    use super::*;

    /// `minecraft:light_blue_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl LightBlueWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11916,
                ( Facing::South, ) => 11917,
                ( Facing::West, ) => 11918,
                ( Facing::East, ) => 11919,
            })
        }
    }

    impl From<LightBlueWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueWallBanner { }

    impl Block for LightBlueWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:potted_warped_roots` block.
pub mod potted_warped_roots {
    use super::*;

    /// `minecraft:potted_warped_roots` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedWarpedRoots;

    impl PottedWarpedRoots {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20518)
        }
    }

    impl From<PottedWarpedRoots> for BlockState {
        #[inline(always)]
        fn from(value : PottedWarpedRoots) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedWarpedRoots {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedWarpedRoots { }

    impl Block for PottedWarpedRoots {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:piglin_wall_head` block.
pub mod piglin_wall_head {
    use super::*;

    /// `minecraft:piglin_wall_head` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PiglinWallHead {
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PiglinWallHead {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.facing, )) {
                ( true, Facing::North, ) => 9908,
                ( false, Facing::North, ) => 9909,
                ( true, Facing::South, ) => 9910,
                ( false, Facing::South, ) => 9911,
                ( true, Facing::West, ) => 9912,
                ( false, Facing::West, ) => 9913,
                ( true, Facing::East, ) => 9914,
                ( false, Facing::East, ) => 9915,
            })
        }
    }

    impl From<PiglinWallHead> for BlockState {
        #[inline(always)]
        fn from(value : PiglinWallHead) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PiglinWallHead {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PiglinWallHead { }

    impl Block for PiglinWallHead {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:azalea` block.
pub mod azalea {
    use super::*;

    /// `minecraft:azalea` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Azalea;

    impl Azalea {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(25884)
        }
    }

    impl From<Azalea> for BlockState {
        #[inline(always)]
        fn from(value : Azalea) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Azalea {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Azalea { }

    impl Block for Azalea {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:black_concrete` block.
pub mod black_concrete {
    use super::*;

    /// `minecraft:black_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackConcrete;

    impl BlackConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13766)
        }
    }

    impl From<BlackConcrete> for BlockState {
        #[inline(always)]
        fn from(value : BlackConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackConcrete { }

    impl Block for BlackConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:light_gray_concrete_powder` block.
pub mod light_gray_concrete_powder {
    use super::*;

    /// `minecraft:light_gray_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayConcretePowder;

    impl LightGrayConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13775)
        }
    }

    impl From<LightGrayConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayConcretePowder { }

    impl Block for LightGrayConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:mangrove_fence` block.
pub mod mangrove_fence {
    use super::*;

    /// `minecraft:mangrove_fence` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveFence {
        /// `east` state.
        pub east : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `south` state.
        pub south : bool,
        /// `north` state.
        pub north : bool,
        /// `west` state.
        pub west : bool,
    }

    impl MangroveFence {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.waterlogged, self.south, self.north, self.west, )) {
                ( true, true, true, true, true, ) => 12717,
                ( true, true, true, true, false, ) => 12718,
                ( true, false, true, true, true, ) => 12719,
                ( true, false, true, true, false, ) => 12720,
                ( true, true, false, true, true, ) => 12721,
                ( true, true, false, true, false, ) => 12722,
                ( true, false, false, true, true, ) => 12723,
                ( true, false, false, true, false, ) => 12724,
                ( true, true, true, false, true, ) => 12725,
                ( true, true, true, false, false, ) => 12726,
                ( true, false, true, false, true, ) => 12727,
                ( true, false, true, false, false, ) => 12728,
                ( true, true, false, false, true, ) => 12729,
                ( true, true, false, false, false, ) => 12730,
                ( true, false, false, false, true, ) => 12731,
                ( true, false, false, false, false, ) => 12732,
                ( false, true, true, true, true, ) => 12733,
                ( false, true, true, true, false, ) => 12734,
                ( false, false, true, true, true, ) => 12735,
                ( false, false, true, true, false, ) => 12736,
                ( false, true, false, true, true, ) => 12737,
                ( false, true, false, true, false, ) => 12738,
                ( false, false, false, true, true, ) => 12739,
                ( false, false, false, true, false, ) => 12740,
                ( false, true, true, false, true, ) => 12741,
                ( false, true, true, false, false, ) => 12742,
                ( false, false, true, false, true, ) => 12743,
                ( false, false, true, false, false, ) => 12744,
                ( false, true, false, false, true, ) => 12745,
                ( false, true, false, false, false, ) => 12746,
                ( false, false, false, false, true, ) => 12747,
                ( false, false, false, false, false, ) => 12748,
            })
        }
    }

    impl From<MangroveFence> for BlockState {
        #[inline(always)]
        fn from(value : MangroveFence) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveFence {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveFence { }

    impl Block for MangroveFence {
        const DEFAULT_STATE : Self = Self {
            east : false,
            waterlogged : false,
            south : false,
            north : false,
            west : false,
        };
    }

}

/// `minecraft:bamboo_sign` block.
pub mod bamboo_sign {
    use super::*;

    /// `minecraft:bamboo_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl BambooSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.rotation, )) {
                ( true, Rotation::N0, ) => 4654,
                ( false, Rotation::N0, ) => 4655,
                ( true, Rotation::N1, ) => 4656,
                ( false, Rotation::N1, ) => 4657,
                ( true, Rotation::N2, ) => 4658,
                ( false, Rotation::N2, ) => 4659,
                ( true, Rotation::N3, ) => 4660,
                ( false, Rotation::N3, ) => 4661,
                ( true, Rotation::N4, ) => 4662,
                ( false, Rotation::N4, ) => 4663,
                ( true, Rotation::N5, ) => 4664,
                ( false, Rotation::N5, ) => 4665,
                ( true, Rotation::N6, ) => 4666,
                ( false, Rotation::N6, ) => 4667,
                ( true, Rotation::N7, ) => 4668,
                ( false, Rotation::N7, ) => 4669,
                ( true, Rotation::N8, ) => 4670,
                ( false, Rotation::N8, ) => 4671,
                ( true, Rotation::N9, ) => 4672,
                ( false, Rotation::N9, ) => 4673,
                ( true, Rotation::N10, ) => 4674,
                ( false, Rotation::N10, ) => 4675,
                ( true, Rotation::N11, ) => 4676,
                ( false, Rotation::N11, ) => 4677,
                ( true, Rotation::N12, ) => 4678,
                ( false, Rotation::N12, ) => 4679,
                ( true, Rotation::N13, ) => 4680,
                ( false, Rotation::N13, ) => 4681,
                ( true, Rotation::N14, ) => 4682,
                ( false, Rotation::N14, ) => 4683,
                ( true, Rotation::N15, ) => 4684,
                ( false, Rotation::N15, ) => 4685,
            })
        }
    }

    impl From<BambooSign> for BlockState {
        #[inline(always)]
        fn from(value : BambooSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooSign { }

    impl Block for BambooSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:dried_ghast` block.
pub mod dried_ghast {
    use super::*;

    /// `minecraft:dried_ghast` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DriedGhast {
        /// `hydration` state.
        pub hydration : Hydration,
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `hydration` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hydration {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
    }
    impl crate::Sealed for Hydration { }
    impl BlockProperty for Hydration { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DriedGhast {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.hydration, self.facing, self.waterlogged, )) {
                ( Hydration::N0, Facing::North, true, ) => 13826,
                ( Hydration::N0, Facing::North, false, ) => 13827,
                ( Hydration::N1, Facing::North, true, ) => 13828,
                ( Hydration::N1, Facing::North, false, ) => 13829,
                ( Hydration::N2, Facing::North, true, ) => 13830,
                ( Hydration::N2, Facing::North, false, ) => 13831,
                ( Hydration::N3, Facing::North, true, ) => 13832,
                ( Hydration::N3, Facing::North, false, ) => 13833,
                ( Hydration::N0, Facing::South, true, ) => 13834,
                ( Hydration::N0, Facing::South, false, ) => 13835,
                ( Hydration::N1, Facing::South, true, ) => 13836,
                ( Hydration::N1, Facing::South, false, ) => 13837,
                ( Hydration::N2, Facing::South, true, ) => 13838,
                ( Hydration::N2, Facing::South, false, ) => 13839,
                ( Hydration::N3, Facing::South, true, ) => 13840,
                ( Hydration::N3, Facing::South, false, ) => 13841,
                ( Hydration::N0, Facing::West, true, ) => 13842,
                ( Hydration::N0, Facing::West, false, ) => 13843,
                ( Hydration::N1, Facing::West, true, ) => 13844,
                ( Hydration::N1, Facing::West, false, ) => 13845,
                ( Hydration::N2, Facing::West, true, ) => 13846,
                ( Hydration::N2, Facing::West, false, ) => 13847,
                ( Hydration::N3, Facing::West, true, ) => 13848,
                ( Hydration::N3, Facing::West, false, ) => 13849,
                ( Hydration::N0, Facing::East, true, ) => 13850,
                ( Hydration::N0, Facing::East, false, ) => 13851,
                ( Hydration::N1, Facing::East, true, ) => 13852,
                ( Hydration::N1, Facing::East, false, ) => 13853,
                ( Hydration::N2, Facing::East, true, ) => 13854,
                ( Hydration::N2, Facing::East, false, ) => 13855,
                ( Hydration::N3, Facing::East, true, ) => 13856,
                ( Hydration::N3, Facing::East, false, ) => 13857,
            })
        }
    }

    impl From<DriedGhast> for BlockState {
        #[inline(always)]
        fn from(value : DriedGhast) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DriedGhast {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DriedGhast { }

    impl Block for DriedGhast {
        const DEFAULT_STATE : Self = Self {
            hydration : Hydration::N0,
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:andesite_wall` block.
pub mod andesite_wall {
    use super::*;

    /// `minecraft:andesite_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AndesiteWall {
        /// `south` state.
        pub south : South,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : West,
        /// `north` state.
        pub north : North,
        /// `up` state.
        pub up : bool,
        /// `east` state.
        pub east : East,
    }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    impl AndesiteWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.south, self.waterlogged, self.west, self.north, self.up, self.east, )) {
                ( South::None, true, West::None, North::None, true, East::None, ) => 17807,
                ( South::None, true, West::Low, North::None, true, East::None, ) => 17808,
                ( South::None, true, West::Tall, North::None, true, East::None, ) => 17809,
                ( South::None, false, West::None, North::None, true, East::None, ) => 17810,
                ( South::None, false, West::Low, North::None, true, East::None, ) => 17811,
                ( South::None, false, West::Tall, North::None, true, East::None, ) => 17812,
                ( South::None, true, West::None, North::None, false, East::None, ) => 17813,
                ( South::None, true, West::Low, North::None, false, East::None, ) => 17814,
                ( South::None, true, West::Tall, North::None, false, East::None, ) => 17815,
                ( South::None, false, West::None, North::None, false, East::None, ) => 17816,
                ( South::None, false, West::Low, North::None, false, East::None, ) => 17817,
                ( South::None, false, West::Tall, North::None, false, East::None, ) => 17818,
                ( South::Low, true, West::None, North::None, true, East::None, ) => 17819,
                ( South::Low, true, West::Low, North::None, true, East::None, ) => 17820,
                ( South::Low, true, West::Tall, North::None, true, East::None, ) => 17821,
                ( South::Low, false, West::None, North::None, true, East::None, ) => 17822,
                ( South::Low, false, West::Low, North::None, true, East::None, ) => 17823,
                ( South::Low, false, West::Tall, North::None, true, East::None, ) => 17824,
                ( South::Low, true, West::None, North::None, false, East::None, ) => 17825,
                ( South::Low, true, West::Low, North::None, false, East::None, ) => 17826,
                ( South::Low, true, West::Tall, North::None, false, East::None, ) => 17827,
                ( South::Low, false, West::None, North::None, false, East::None, ) => 17828,
                ( South::Low, false, West::Low, North::None, false, East::None, ) => 17829,
                ( South::Low, false, West::Tall, North::None, false, East::None, ) => 17830,
                ( South::Tall, true, West::None, North::None, true, East::None, ) => 17831,
                ( South::Tall, true, West::Low, North::None, true, East::None, ) => 17832,
                ( South::Tall, true, West::Tall, North::None, true, East::None, ) => 17833,
                ( South::Tall, false, West::None, North::None, true, East::None, ) => 17834,
                ( South::Tall, false, West::Low, North::None, true, East::None, ) => 17835,
                ( South::Tall, false, West::Tall, North::None, true, East::None, ) => 17836,
                ( South::Tall, true, West::None, North::None, false, East::None, ) => 17837,
                ( South::Tall, true, West::Low, North::None, false, East::None, ) => 17838,
                ( South::Tall, true, West::Tall, North::None, false, East::None, ) => 17839,
                ( South::Tall, false, West::None, North::None, false, East::None, ) => 17840,
                ( South::Tall, false, West::Low, North::None, false, East::None, ) => 17841,
                ( South::Tall, false, West::Tall, North::None, false, East::None, ) => 17842,
                ( South::None, true, West::None, North::Low, true, East::None, ) => 17843,
                ( South::None, true, West::Low, North::Low, true, East::None, ) => 17844,
                ( South::None, true, West::Tall, North::Low, true, East::None, ) => 17845,
                ( South::None, false, West::None, North::Low, true, East::None, ) => 17846,
                ( South::None, false, West::Low, North::Low, true, East::None, ) => 17847,
                ( South::None, false, West::Tall, North::Low, true, East::None, ) => 17848,
                ( South::None, true, West::None, North::Low, false, East::None, ) => 17849,
                ( South::None, true, West::Low, North::Low, false, East::None, ) => 17850,
                ( South::None, true, West::Tall, North::Low, false, East::None, ) => 17851,
                ( South::None, false, West::None, North::Low, false, East::None, ) => 17852,
                ( South::None, false, West::Low, North::Low, false, East::None, ) => 17853,
                ( South::None, false, West::Tall, North::Low, false, East::None, ) => 17854,
                ( South::Low, true, West::None, North::Low, true, East::None, ) => 17855,
                ( South::Low, true, West::Low, North::Low, true, East::None, ) => 17856,
                ( South::Low, true, West::Tall, North::Low, true, East::None, ) => 17857,
                ( South::Low, false, West::None, North::Low, true, East::None, ) => 17858,
                ( South::Low, false, West::Low, North::Low, true, East::None, ) => 17859,
                ( South::Low, false, West::Tall, North::Low, true, East::None, ) => 17860,
                ( South::Low, true, West::None, North::Low, false, East::None, ) => 17861,
                ( South::Low, true, West::Low, North::Low, false, East::None, ) => 17862,
                ( South::Low, true, West::Tall, North::Low, false, East::None, ) => 17863,
                ( South::Low, false, West::None, North::Low, false, East::None, ) => 17864,
                ( South::Low, false, West::Low, North::Low, false, East::None, ) => 17865,
                ( South::Low, false, West::Tall, North::Low, false, East::None, ) => 17866,
                ( South::Tall, true, West::None, North::Low, true, East::None, ) => 17867,
                ( South::Tall, true, West::Low, North::Low, true, East::None, ) => 17868,
                ( South::Tall, true, West::Tall, North::Low, true, East::None, ) => 17869,
                ( South::Tall, false, West::None, North::Low, true, East::None, ) => 17870,
                ( South::Tall, false, West::Low, North::Low, true, East::None, ) => 17871,
                ( South::Tall, false, West::Tall, North::Low, true, East::None, ) => 17872,
                ( South::Tall, true, West::None, North::Low, false, East::None, ) => 17873,
                ( South::Tall, true, West::Low, North::Low, false, East::None, ) => 17874,
                ( South::Tall, true, West::Tall, North::Low, false, East::None, ) => 17875,
                ( South::Tall, false, West::None, North::Low, false, East::None, ) => 17876,
                ( South::Tall, false, West::Low, North::Low, false, East::None, ) => 17877,
                ( South::Tall, false, West::Tall, North::Low, false, East::None, ) => 17878,
                ( South::None, true, West::None, North::Tall, true, East::None, ) => 17879,
                ( South::None, true, West::Low, North::Tall, true, East::None, ) => 17880,
                ( South::None, true, West::Tall, North::Tall, true, East::None, ) => 17881,
                ( South::None, false, West::None, North::Tall, true, East::None, ) => 17882,
                ( South::None, false, West::Low, North::Tall, true, East::None, ) => 17883,
                ( South::None, false, West::Tall, North::Tall, true, East::None, ) => 17884,
                ( South::None, true, West::None, North::Tall, false, East::None, ) => 17885,
                ( South::None, true, West::Low, North::Tall, false, East::None, ) => 17886,
                ( South::None, true, West::Tall, North::Tall, false, East::None, ) => 17887,
                ( South::None, false, West::None, North::Tall, false, East::None, ) => 17888,
                ( South::None, false, West::Low, North::Tall, false, East::None, ) => 17889,
                ( South::None, false, West::Tall, North::Tall, false, East::None, ) => 17890,
                ( South::Low, true, West::None, North::Tall, true, East::None, ) => 17891,
                ( South::Low, true, West::Low, North::Tall, true, East::None, ) => 17892,
                ( South::Low, true, West::Tall, North::Tall, true, East::None, ) => 17893,
                ( South::Low, false, West::None, North::Tall, true, East::None, ) => 17894,
                ( South::Low, false, West::Low, North::Tall, true, East::None, ) => 17895,
                ( South::Low, false, West::Tall, North::Tall, true, East::None, ) => 17896,
                ( South::Low, true, West::None, North::Tall, false, East::None, ) => 17897,
                ( South::Low, true, West::Low, North::Tall, false, East::None, ) => 17898,
                ( South::Low, true, West::Tall, North::Tall, false, East::None, ) => 17899,
                ( South::Low, false, West::None, North::Tall, false, East::None, ) => 17900,
                ( South::Low, false, West::Low, North::Tall, false, East::None, ) => 17901,
                ( South::Low, false, West::Tall, North::Tall, false, East::None, ) => 17902,
                ( South::Tall, true, West::None, North::Tall, true, East::None, ) => 17903,
                ( South::Tall, true, West::Low, North::Tall, true, East::None, ) => 17904,
                ( South::Tall, true, West::Tall, North::Tall, true, East::None, ) => 17905,
                ( South::Tall, false, West::None, North::Tall, true, East::None, ) => 17906,
                ( South::Tall, false, West::Low, North::Tall, true, East::None, ) => 17907,
                ( South::Tall, false, West::Tall, North::Tall, true, East::None, ) => 17908,
                ( South::Tall, true, West::None, North::Tall, false, East::None, ) => 17909,
                ( South::Tall, true, West::Low, North::Tall, false, East::None, ) => 17910,
                ( South::Tall, true, West::Tall, North::Tall, false, East::None, ) => 17911,
                ( South::Tall, false, West::None, North::Tall, false, East::None, ) => 17912,
                ( South::Tall, false, West::Low, North::Tall, false, East::None, ) => 17913,
                ( South::Tall, false, West::Tall, North::Tall, false, East::None, ) => 17914,
                ( South::None, true, West::None, North::None, true, East::Low, ) => 17915,
                ( South::None, true, West::Low, North::None, true, East::Low, ) => 17916,
                ( South::None, true, West::Tall, North::None, true, East::Low, ) => 17917,
                ( South::None, false, West::None, North::None, true, East::Low, ) => 17918,
                ( South::None, false, West::Low, North::None, true, East::Low, ) => 17919,
                ( South::None, false, West::Tall, North::None, true, East::Low, ) => 17920,
                ( South::None, true, West::None, North::None, false, East::Low, ) => 17921,
                ( South::None, true, West::Low, North::None, false, East::Low, ) => 17922,
                ( South::None, true, West::Tall, North::None, false, East::Low, ) => 17923,
                ( South::None, false, West::None, North::None, false, East::Low, ) => 17924,
                ( South::None, false, West::Low, North::None, false, East::Low, ) => 17925,
                ( South::None, false, West::Tall, North::None, false, East::Low, ) => 17926,
                ( South::Low, true, West::None, North::None, true, East::Low, ) => 17927,
                ( South::Low, true, West::Low, North::None, true, East::Low, ) => 17928,
                ( South::Low, true, West::Tall, North::None, true, East::Low, ) => 17929,
                ( South::Low, false, West::None, North::None, true, East::Low, ) => 17930,
                ( South::Low, false, West::Low, North::None, true, East::Low, ) => 17931,
                ( South::Low, false, West::Tall, North::None, true, East::Low, ) => 17932,
                ( South::Low, true, West::None, North::None, false, East::Low, ) => 17933,
                ( South::Low, true, West::Low, North::None, false, East::Low, ) => 17934,
                ( South::Low, true, West::Tall, North::None, false, East::Low, ) => 17935,
                ( South::Low, false, West::None, North::None, false, East::Low, ) => 17936,
                ( South::Low, false, West::Low, North::None, false, East::Low, ) => 17937,
                ( South::Low, false, West::Tall, North::None, false, East::Low, ) => 17938,
                ( South::Tall, true, West::None, North::None, true, East::Low, ) => 17939,
                ( South::Tall, true, West::Low, North::None, true, East::Low, ) => 17940,
                ( South::Tall, true, West::Tall, North::None, true, East::Low, ) => 17941,
                ( South::Tall, false, West::None, North::None, true, East::Low, ) => 17942,
                ( South::Tall, false, West::Low, North::None, true, East::Low, ) => 17943,
                ( South::Tall, false, West::Tall, North::None, true, East::Low, ) => 17944,
                ( South::Tall, true, West::None, North::None, false, East::Low, ) => 17945,
                ( South::Tall, true, West::Low, North::None, false, East::Low, ) => 17946,
                ( South::Tall, true, West::Tall, North::None, false, East::Low, ) => 17947,
                ( South::Tall, false, West::None, North::None, false, East::Low, ) => 17948,
                ( South::Tall, false, West::Low, North::None, false, East::Low, ) => 17949,
                ( South::Tall, false, West::Tall, North::None, false, East::Low, ) => 17950,
                ( South::None, true, West::None, North::Low, true, East::Low, ) => 17951,
                ( South::None, true, West::Low, North::Low, true, East::Low, ) => 17952,
                ( South::None, true, West::Tall, North::Low, true, East::Low, ) => 17953,
                ( South::None, false, West::None, North::Low, true, East::Low, ) => 17954,
                ( South::None, false, West::Low, North::Low, true, East::Low, ) => 17955,
                ( South::None, false, West::Tall, North::Low, true, East::Low, ) => 17956,
                ( South::None, true, West::None, North::Low, false, East::Low, ) => 17957,
                ( South::None, true, West::Low, North::Low, false, East::Low, ) => 17958,
                ( South::None, true, West::Tall, North::Low, false, East::Low, ) => 17959,
                ( South::None, false, West::None, North::Low, false, East::Low, ) => 17960,
                ( South::None, false, West::Low, North::Low, false, East::Low, ) => 17961,
                ( South::None, false, West::Tall, North::Low, false, East::Low, ) => 17962,
                ( South::Low, true, West::None, North::Low, true, East::Low, ) => 17963,
                ( South::Low, true, West::Low, North::Low, true, East::Low, ) => 17964,
                ( South::Low, true, West::Tall, North::Low, true, East::Low, ) => 17965,
                ( South::Low, false, West::None, North::Low, true, East::Low, ) => 17966,
                ( South::Low, false, West::Low, North::Low, true, East::Low, ) => 17967,
                ( South::Low, false, West::Tall, North::Low, true, East::Low, ) => 17968,
                ( South::Low, true, West::None, North::Low, false, East::Low, ) => 17969,
                ( South::Low, true, West::Low, North::Low, false, East::Low, ) => 17970,
                ( South::Low, true, West::Tall, North::Low, false, East::Low, ) => 17971,
                ( South::Low, false, West::None, North::Low, false, East::Low, ) => 17972,
                ( South::Low, false, West::Low, North::Low, false, East::Low, ) => 17973,
                ( South::Low, false, West::Tall, North::Low, false, East::Low, ) => 17974,
                ( South::Tall, true, West::None, North::Low, true, East::Low, ) => 17975,
                ( South::Tall, true, West::Low, North::Low, true, East::Low, ) => 17976,
                ( South::Tall, true, West::Tall, North::Low, true, East::Low, ) => 17977,
                ( South::Tall, false, West::None, North::Low, true, East::Low, ) => 17978,
                ( South::Tall, false, West::Low, North::Low, true, East::Low, ) => 17979,
                ( South::Tall, false, West::Tall, North::Low, true, East::Low, ) => 17980,
                ( South::Tall, true, West::None, North::Low, false, East::Low, ) => 17981,
                ( South::Tall, true, West::Low, North::Low, false, East::Low, ) => 17982,
                ( South::Tall, true, West::Tall, North::Low, false, East::Low, ) => 17983,
                ( South::Tall, false, West::None, North::Low, false, East::Low, ) => 17984,
                ( South::Tall, false, West::Low, North::Low, false, East::Low, ) => 17985,
                ( South::Tall, false, West::Tall, North::Low, false, East::Low, ) => 17986,
                ( South::None, true, West::None, North::Tall, true, East::Low, ) => 17987,
                ( South::None, true, West::Low, North::Tall, true, East::Low, ) => 17988,
                ( South::None, true, West::Tall, North::Tall, true, East::Low, ) => 17989,
                ( South::None, false, West::None, North::Tall, true, East::Low, ) => 17990,
                ( South::None, false, West::Low, North::Tall, true, East::Low, ) => 17991,
                ( South::None, false, West::Tall, North::Tall, true, East::Low, ) => 17992,
                ( South::None, true, West::None, North::Tall, false, East::Low, ) => 17993,
                ( South::None, true, West::Low, North::Tall, false, East::Low, ) => 17994,
                ( South::None, true, West::Tall, North::Tall, false, East::Low, ) => 17995,
                ( South::None, false, West::None, North::Tall, false, East::Low, ) => 17996,
                ( South::None, false, West::Low, North::Tall, false, East::Low, ) => 17997,
                ( South::None, false, West::Tall, North::Tall, false, East::Low, ) => 17998,
                ( South::Low, true, West::None, North::Tall, true, East::Low, ) => 17999,
                ( South::Low, true, West::Low, North::Tall, true, East::Low, ) => 18000,
                ( South::Low, true, West::Tall, North::Tall, true, East::Low, ) => 18001,
                ( South::Low, false, West::None, North::Tall, true, East::Low, ) => 18002,
                ( South::Low, false, West::Low, North::Tall, true, East::Low, ) => 18003,
                ( South::Low, false, West::Tall, North::Tall, true, East::Low, ) => 18004,
                ( South::Low, true, West::None, North::Tall, false, East::Low, ) => 18005,
                ( South::Low, true, West::Low, North::Tall, false, East::Low, ) => 18006,
                ( South::Low, true, West::Tall, North::Tall, false, East::Low, ) => 18007,
                ( South::Low, false, West::None, North::Tall, false, East::Low, ) => 18008,
                ( South::Low, false, West::Low, North::Tall, false, East::Low, ) => 18009,
                ( South::Low, false, West::Tall, North::Tall, false, East::Low, ) => 18010,
                ( South::Tall, true, West::None, North::Tall, true, East::Low, ) => 18011,
                ( South::Tall, true, West::Low, North::Tall, true, East::Low, ) => 18012,
                ( South::Tall, true, West::Tall, North::Tall, true, East::Low, ) => 18013,
                ( South::Tall, false, West::None, North::Tall, true, East::Low, ) => 18014,
                ( South::Tall, false, West::Low, North::Tall, true, East::Low, ) => 18015,
                ( South::Tall, false, West::Tall, North::Tall, true, East::Low, ) => 18016,
                ( South::Tall, true, West::None, North::Tall, false, East::Low, ) => 18017,
                ( South::Tall, true, West::Low, North::Tall, false, East::Low, ) => 18018,
                ( South::Tall, true, West::Tall, North::Tall, false, East::Low, ) => 18019,
                ( South::Tall, false, West::None, North::Tall, false, East::Low, ) => 18020,
                ( South::Tall, false, West::Low, North::Tall, false, East::Low, ) => 18021,
                ( South::Tall, false, West::Tall, North::Tall, false, East::Low, ) => 18022,
                ( South::None, true, West::None, North::None, true, East::Tall, ) => 18023,
                ( South::None, true, West::Low, North::None, true, East::Tall, ) => 18024,
                ( South::None, true, West::Tall, North::None, true, East::Tall, ) => 18025,
                ( South::None, false, West::None, North::None, true, East::Tall, ) => 18026,
                ( South::None, false, West::Low, North::None, true, East::Tall, ) => 18027,
                ( South::None, false, West::Tall, North::None, true, East::Tall, ) => 18028,
                ( South::None, true, West::None, North::None, false, East::Tall, ) => 18029,
                ( South::None, true, West::Low, North::None, false, East::Tall, ) => 18030,
                ( South::None, true, West::Tall, North::None, false, East::Tall, ) => 18031,
                ( South::None, false, West::None, North::None, false, East::Tall, ) => 18032,
                ( South::None, false, West::Low, North::None, false, East::Tall, ) => 18033,
                ( South::None, false, West::Tall, North::None, false, East::Tall, ) => 18034,
                ( South::Low, true, West::None, North::None, true, East::Tall, ) => 18035,
                ( South::Low, true, West::Low, North::None, true, East::Tall, ) => 18036,
                ( South::Low, true, West::Tall, North::None, true, East::Tall, ) => 18037,
                ( South::Low, false, West::None, North::None, true, East::Tall, ) => 18038,
                ( South::Low, false, West::Low, North::None, true, East::Tall, ) => 18039,
                ( South::Low, false, West::Tall, North::None, true, East::Tall, ) => 18040,
                ( South::Low, true, West::None, North::None, false, East::Tall, ) => 18041,
                ( South::Low, true, West::Low, North::None, false, East::Tall, ) => 18042,
                ( South::Low, true, West::Tall, North::None, false, East::Tall, ) => 18043,
                ( South::Low, false, West::None, North::None, false, East::Tall, ) => 18044,
                ( South::Low, false, West::Low, North::None, false, East::Tall, ) => 18045,
                ( South::Low, false, West::Tall, North::None, false, East::Tall, ) => 18046,
                ( South::Tall, true, West::None, North::None, true, East::Tall, ) => 18047,
                ( South::Tall, true, West::Low, North::None, true, East::Tall, ) => 18048,
                ( South::Tall, true, West::Tall, North::None, true, East::Tall, ) => 18049,
                ( South::Tall, false, West::None, North::None, true, East::Tall, ) => 18050,
                ( South::Tall, false, West::Low, North::None, true, East::Tall, ) => 18051,
                ( South::Tall, false, West::Tall, North::None, true, East::Tall, ) => 18052,
                ( South::Tall, true, West::None, North::None, false, East::Tall, ) => 18053,
                ( South::Tall, true, West::Low, North::None, false, East::Tall, ) => 18054,
                ( South::Tall, true, West::Tall, North::None, false, East::Tall, ) => 18055,
                ( South::Tall, false, West::None, North::None, false, East::Tall, ) => 18056,
                ( South::Tall, false, West::Low, North::None, false, East::Tall, ) => 18057,
                ( South::Tall, false, West::Tall, North::None, false, East::Tall, ) => 18058,
                ( South::None, true, West::None, North::Low, true, East::Tall, ) => 18059,
                ( South::None, true, West::Low, North::Low, true, East::Tall, ) => 18060,
                ( South::None, true, West::Tall, North::Low, true, East::Tall, ) => 18061,
                ( South::None, false, West::None, North::Low, true, East::Tall, ) => 18062,
                ( South::None, false, West::Low, North::Low, true, East::Tall, ) => 18063,
                ( South::None, false, West::Tall, North::Low, true, East::Tall, ) => 18064,
                ( South::None, true, West::None, North::Low, false, East::Tall, ) => 18065,
                ( South::None, true, West::Low, North::Low, false, East::Tall, ) => 18066,
                ( South::None, true, West::Tall, North::Low, false, East::Tall, ) => 18067,
                ( South::None, false, West::None, North::Low, false, East::Tall, ) => 18068,
                ( South::None, false, West::Low, North::Low, false, East::Tall, ) => 18069,
                ( South::None, false, West::Tall, North::Low, false, East::Tall, ) => 18070,
                ( South::Low, true, West::None, North::Low, true, East::Tall, ) => 18071,
                ( South::Low, true, West::Low, North::Low, true, East::Tall, ) => 18072,
                ( South::Low, true, West::Tall, North::Low, true, East::Tall, ) => 18073,
                ( South::Low, false, West::None, North::Low, true, East::Tall, ) => 18074,
                ( South::Low, false, West::Low, North::Low, true, East::Tall, ) => 18075,
                ( South::Low, false, West::Tall, North::Low, true, East::Tall, ) => 18076,
                ( South::Low, true, West::None, North::Low, false, East::Tall, ) => 18077,
                ( South::Low, true, West::Low, North::Low, false, East::Tall, ) => 18078,
                ( South::Low, true, West::Tall, North::Low, false, East::Tall, ) => 18079,
                ( South::Low, false, West::None, North::Low, false, East::Tall, ) => 18080,
                ( South::Low, false, West::Low, North::Low, false, East::Tall, ) => 18081,
                ( South::Low, false, West::Tall, North::Low, false, East::Tall, ) => 18082,
                ( South::Tall, true, West::None, North::Low, true, East::Tall, ) => 18083,
                ( South::Tall, true, West::Low, North::Low, true, East::Tall, ) => 18084,
                ( South::Tall, true, West::Tall, North::Low, true, East::Tall, ) => 18085,
                ( South::Tall, false, West::None, North::Low, true, East::Tall, ) => 18086,
                ( South::Tall, false, West::Low, North::Low, true, East::Tall, ) => 18087,
                ( South::Tall, false, West::Tall, North::Low, true, East::Tall, ) => 18088,
                ( South::Tall, true, West::None, North::Low, false, East::Tall, ) => 18089,
                ( South::Tall, true, West::Low, North::Low, false, East::Tall, ) => 18090,
                ( South::Tall, true, West::Tall, North::Low, false, East::Tall, ) => 18091,
                ( South::Tall, false, West::None, North::Low, false, East::Tall, ) => 18092,
                ( South::Tall, false, West::Low, North::Low, false, East::Tall, ) => 18093,
                ( South::Tall, false, West::Tall, North::Low, false, East::Tall, ) => 18094,
                ( South::None, true, West::None, North::Tall, true, East::Tall, ) => 18095,
                ( South::None, true, West::Low, North::Tall, true, East::Tall, ) => 18096,
                ( South::None, true, West::Tall, North::Tall, true, East::Tall, ) => 18097,
                ( South::None, false, West::None, North::Tall, true, East::Tall, ) => 18098,
                ( South::None, false, West::Low, North::Tall, true, East::Tall, ) => 18099,
                ( South::None, false, West::Tall, North::Tall, true, East::Tall, ) => 18100,
                ( South::None, true, West::None, North::Tall, false, East::Tall, ) => 18101,
                ( South::None, true, West::Low, North::Tall, false, East::Tall, ) => 18102,
                ( South::None, true, West::Tall, North::Tall, false, East::Tall, ) => 18103,
                ( South::None, false, West::None, North::Tall, false, East::Tall, ) => 18104,
                ( South::None, false, West::Low, North::Tall, false, East::Tall, ) => 18105,
                ( South::None, false, West::Tall, North::Tall, false, East::Tall, ) => 18106,
                ( South::Low, true, West::None, North::Tall, true, East::Tall, ) => 18107,
                ( South::Low, true, West::Low, North::Tall, true, East::Tall, ) => 18108,
                ( South::Low, true, West::Tall, North::Tall, true, East::Tall, ) => 18109,
                ( South::Low, false, West::None, North::Tall, true, East::Tall, ) => 18110,
                ( South::Low, false, West::Low, North::Tall, true, East::Tall, ) => 18111,
                ( South::Low, false, West::Tall, North::Tall, true, East::Tall, ) => 18112,
                ( South::Low, true, West::None, North::Tall, false, East::Tall, ) => 18113,
                ( South::Low, true, West::Low, North::Tall, false, East::Tall, ) => 18114,
                ( South::Low, true, West::Tall, North::Tall, false, East::Tall, ) => 18115,
                ( South::Low, false, West::None, North::Tall, false, East::Tall, ) => 18116,
                ( South::Low, false, West::Low, North::Tall, false, East::Tall, ) => 18117,
                ( South::Low, false, West::Tall, North::Tall, false, East::Tall, ) => 18118,
                ( South::Tall, true, West::None, North::Tall, true, East::Tall, ) => 18119,
                ( South::Tall, true, West::Low, North::Tall, true, East::Tall, ) => 18120,
                ( South::Tall, true, West::Tall, North::Tall, true, East::Tall, ) => 18121,
                ( South::Tall, false, West::None, North::Tall, true, East::Tall, ) => 18122,
                ( South::Tall, false, West::Low, North::Tall, true, East::Tall, ) => 18123,
                ( South::Tall, false, West::Tall, North::Tall, true, East::Tall, ) => 18124,
                ( South::Tall, true, West::None, North::Tall, false, East::Tall, ) => 18125,
                ( South::Tall, true, West::Low, North::Tall, false, East::Tall, ) => 18126,
                ( South::Tall, true, West::Tall, North::Tall, false, East::Tall, ) => 18127,
                ( South::Tall, false, West::None, North::Tall, false, East::Tall, ) => 18128,
                ( South::Tall, false, West::Low, North::Tall, false, East::Tall, ) => 18129,
                ( South::Tall, false, West::Tall, North::Tall, false, East::Tall, ) => 18130,
            })
        }
    }

    impl From<AndesiteWall> for BlockState {
        #[inline(always)]
        fn from(value : AndesiteWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AndesiteWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AndesiteWall { }

    impl Block for AndesiteWall {
        const DEFAULT_STATE : Self = Self {
            south : South::None,
            waterlogged : false,
            west : West::None,
            north : North::None,
            up : true,
            east : East::None,
        };
    }

}

/// `minecraft:jungle_wall_sign` block.
pub mod jungle_wall_sign {
    use super::*;

    /// `minecraft:jungle_wall_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleWallSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl JungleWallSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 4898,
                ( false, Facing::North, ) => 4899,
                ( true, Facing::South, ) => 4900,
                ( false, Facing::South, ) => 4901,
                ( true, Facing::West, ) => 4902,
                ( false, Facing::West, ) => 4903,
                ( true, Facing::East, ) => 4904,
                ( false, Facing::East, ) => 4905,
            })
        }
    }

    impl From<JungleWallSign> for BlockState {
        #[inline(always)]
        fn from(value : JungleWallSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleWallSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleWallSign { }

    impl Block for JungleWallSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:player_wall_head` block.
pub mod player_wall_head {
    use super::*;

    /// `minecraft:player_wall_head` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PlayerWallHead {
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PlayerWallHead {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.facing, )) {
                ( true, Facing::North, ) => 9788,
                ( false, Facing::North, ) => 9789,
                ( true, Facing::South, ) => 9790,
                ( false, Facing::South, ) => 9791,
                ( true, Facing::West, ) => 9792,
                ( false, Facing::West, ) => 9793,
                ( true, Facing::East, ) => 9794,
                ( false, Facing::East, ) => 9795,
            })
        }
    }

    impl From<PlayerWallHead> for BlockState {
        #[inline(always)]
        fn from(value : PlayerWallHead) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PlayerWallHead {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PlayerWallHead { }

    impl Block for PlayerWallHead {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:white_terracotta` block.
pub mod white_terracotta {
    use super::*;

    /// `minecraft:white_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteTerracotta;

    impl WhiteTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10165)
        }
    }

    impl From<WhiteTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : WhiteTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteTerracotta { }

    impl Block for WhiteTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:quartz_pillar` block.
pub mod quartz_pillar {
    use super::*;

    /// `minecraft:quartz_pillar` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct QuartzPillar {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl QuartzPillar {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 10046,
                ( Axis::Y, ) => 10047,
                ( Axis::Z, ) => 10048,
            })
        }
    }

    impl From<QuartzPillar> for BlockState {
        #[inline(always)]
        fn from(value : QuartzPillar) -> Self {
            value.to_block_state()
        }
    }

    impl Default for QuartzPillar {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for QuartzPillar { }

    impl Block for QuartzPillar {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:waxed_copper_bulb` block.
pub mod waxed_copper_bulb {
    use super::*;

    /// `minecraft:waxed_copper_bulb` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedCopperBulb {
        /// `powered` state.
        pub powered : bool,
        /// `lit` state.
        pub lit : bool,
    }

    impl WaxedCopperBulb {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.lit, )) {
                ( true, true, ) => 25768,
                ( false, true, ) => 25769,
                ( true, false, ) => 25770,
                ( false, false, ) => 25771,
            })
        }
    }

    impl From<WaxedCopperBulb> for BlockState {
        #[inline(always)]
        fn from(value : WaxedCopperBulb) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedCopperBulb {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedCopperBulb { }

    impl Block for WaxedCopperBulb {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            lit : false,
        };
    }

}

/// `minecraft:bubble_coral_wall_fan` block.
pub mod bubble_coral_wall_fan {
    use super::*;

    /// `minecraft:bubble_coral_wall_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BubbleCoralWallFan {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BubbleCoralWallFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 13964,
                ( Facing::North, false, ) => 13965,
                ( Facing::South, true, ) => 13966,
                ( Facing::South, false, ) => 13967,
                ( Facing::West, true, ) => 13968,
                ( Facing::West, false, ) => 13969,
                ( Facing::East, true, ) => 13970,
                ( Facing::East, false, ) => 13971,
            })
        }
    }

    impl From<BubbleCoralWallFan> for BlockState {
        #[inline(always)]
        fn from(value : BubbleCoralWallFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BubbleCoralWallFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BubbleCoralWallFan { }

    impl Block for BubbleCoralWallFan {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : true,
        };
    }

}

/// `minecraft:pink_concrete` block.
pub mod pink_concrete {
    use super::*;

    /// `minecraft:pink_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkConcrete;

    impl PinkConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13757)
        }
    }

    impl From<PinkConcrete> for BlockState {
        #[inline(always)]
        fn from(value : PinkConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkConcrete { }

    impl Block for PinkConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:magenta_bed` block.
pub mod magenta_bed {
    use super::*;

    /// `minecraft:magenta_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaBed {
        /// `occupied` state.
        pub occupied : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `part` state.
        pub part : Part,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    impl MagentaBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.occupied, self.facing, self.part, )) {
                ( true, Facing::North, Part::Head, ) => 1763,
                ( true, Facing::North, Part::Foot, ) => 1764,
                ( false, Facing::North, Part::Head, ) => 1765,
                ( false, Facing::North, Part::Foot, ) => 1766,
                ( true, Facing::South, Part::Head, ) => 1767,
                ( true, Facing::South, Part::Foot, ) => 1768,
                ( false, Facing::South, Part::Head, ) => 1769,
                ( false, Facing::South, Part::Foot, ) => 1770,
                ( true, Facing::West, Part::Head, ) => 1771,
                ( true, Facing::West, Part::Foot, ) => 1772,
                ( false, Facing::West, Part::Head, ) => 1773,
                ( false, Facing::West, Part::Foot, ) => 1774,
                ( true, Facing::East, Part::Head, ) => 1775,
                ( true, Facing::East, Part::Foot, ) => 1776,
                ( false, Facing::East, Part::Head, ) => 1777,
                ( false, Facing::East, Part::Foot, ) => 1778,
            })
        }
    }

    impl From<MagentaBed> for BlockState {
        #[inline(always)]
        fn from(value : MagentaBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaBed { }

    impl Block for MagentaBed {
        const DEFAULT_STATE : Self = Self {
            occupied : false,
            facing : Facing::North,
            part : Part::Foot,
        };
    }

}

/// `minecraft:pale_oak_trapdoor` block.
pub mod pale_oak_trapdoor {
    use super::*;

    /// `minecraft:pale_oak_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakTrapdoor {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `open` state.
        pub open : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl PaleOakTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.open, self.facing, self.powered, self.half, )) {
                ( true, true, Facing::North, true, Half::Top, ) => 6588,
                ( false, true, Facing::North, true, Half::Top, ) => 6589,
                ( true, true, Facing::North, false, Half::Top, ) => 6590,
                ( false, true, Facing::North, false, Half::Top, ) => 6591,
                ( true, false, Facing::North, true, Half::Top, ) => 6592,
                ( false, false, Facing::North, true, Half::Top, ) => 6593,
                ( true, false, Facing::North, false, Half::Top, ) => 6594,
                ( false, false, Facing::North, false, Half::Top, ) => 6595,
                ( true, true, Facing::North, true, Half::Bottom, ) => 6596,
                ( false, true, Facing::North, true, Half::Bottom, ) => 6597,
                ( true, true, Facing::North, false, Half::Bottom, ) => 6598,
                ( false, true, Facing::North, false, Half::Bottom, ) => 6599,
                ( true, false, Facing::North, true, Half::Bottom, ) => 6600,
                ( false, false, Facing::North, true, Half::Bottom, ) => 6601,
                ( true, false, Facing::North, false, Half::Bottom, ) => 6602,
                ( false, false, Facing::North, false, Half::Bottom, ) => 6603,
                ( true, true, Facing::South, true, Half::Top, ) => 6604,
                ( false, true, Facing::South, true, Half::Top, ) => 6605,
                ( true, true, Facing::South, false, Half::Top, ) => 6606,
                ( false, true, Facing::South, false, Half::Top, ) => 6607,
                ( true, false, Facing::South, true, Half::Top, ) => 6608,
                ( false, false, Facing::South, true, Half::Top, ) => 6609,
                ( true, false, Facing::South, false, Half::Top, ) => 6610,
                ( false, false, Facing::South, false, Half::Top, ) => 6611,
                ( true, true, Facing::South, true, Half::Bottom, ) => 6612,
                ( false, true, Facing::South, true, Half::Bottom, ) => 6613,
                ( true, true, Facing::South, false, Half::Bottom, ) => 6614,
                ( false, true, Facing::South, false, Half::Bottom, ) => 6615,
                ( true, false, Facing::South, true, Half::Bottom, ) => 6616,
                ( false, false, Facing::South, true, Half::Bottom, ) => 6617,
                ( true, false, Facing::South, false, Half::Bottom, ) => 6618,
                ( false, false, Facing::South, false, Half::Bottom, ) => 6619,
                ( true, true, Facing::West, true, Half::Top, ) => 6620,
                ( false, true, Facing::West, true, Half::Top, ) => 6621,
                ( true, true, Facing::West, false, Half::Top, ) => 6622,
                ( false, true, Facing::West, false, Half::Top, ) => 6623,
                ( true, false, Facing::West, true, Half::Top, ) => 6624,
                ( false, false, Facing::West, true, Half::Top, ) => 6625,
                ( true, false, Facing::West, false, Half::Top, ) => 6626,
                ( false, false, Facing::West, false, Half::Top, ) => 6627,
                ( true, true, Facing::West, true, Half::Bottom, ) => 6628,
                ( false, true, Facing::West, true, Half::Bottom, ) => 6629,
                ( true, true, Facing::West, false, Half::Bottom, ) => 6630,
                ( false, true, Facing::West, false, Half::Bottom, ) => 6631,
                ( true, false, Facing::West, true, Half::Bottom, ) => 6632,
                ( false, false, Facing::West, true, Half::Bottom, ) => 6633,
                ( true, false, Facing::West, false, Half::Bottom, ) => 6634,
                ( false, false, Facing::West, false, Half::Bottom, ) => 6635,
                ( true, true, Facing::East, true, Half::Top, ) => 6636,
                ( false, true, Facing::East, true, Half::Top, ) => 6637,
                ( true, true, Facing::East, false, Half::Top, ) => 6638,
                ( false, true, Facing::East, false, Half::Top, ) => 6639,
                ( true, false, Facing::East, true, Half::Top, ) => 6640,
                ( false, false, Facing::East, true, Half::Top, ) => 6641,
                ( true, false, Facing::East, false, Half::Top, ) => 6642,
                ( false, false, Facing::East, false, Half::Top, ) => 6643,
                ( true, true, Facing::East, true, Half::Bottom, ) => 6644,
                ( false, true, Facing::East, true, Half::Bottom, ) => 6645,
                ( true, true, Facing::East, false, Half::Bottom, ) => 6646,
                ( false, true, Facing::East, false, Half::Bottom, ) => 6647,
                ( true, false, Facing::East, true, Half::Bottom, ) => 6648,
                ( false, false, Facing::East, true, Half::Bottom, ) => 6649,
                ( true, false, Facing::East, false, Half::Bottom, ) => 6650,
                ( false, false, Facing::East, false, Half::Bottom, ) => 6651,
            })
        }
    }

    impl From<PaleOakTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakTrapdoor { }

    impl Block for PaleOakTrapdoor {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            open : false,
            facing : Facing::North,
            powered : false,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:polished_diorite_stairs` block.
pub mod polished_diorite_stairs {
    use super::*;

    /// `minecraft:polished_diorite_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedDioriteStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PolishedDioriteStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.half, self.shape, self.facing, )) {
                ( true, Half::Top, Shape::Straight, Facing::North, ) => 14257,
                ( false, Half::Top, Shape::Straight, Facing::North, ) => 14258,
                ( true, Half::Top, Shape::InnerLeft, Facing::North, ) => 14259,
                ( false, Half::Top, Shape::InnerLeft, Facing::North, ) => 14260,
                ( true, Half::Top, Shape::InnerRight, Facing::North, ) => 14261,
                ( false, Half::Top, Shape::InnerRight, Facing::North, ) => 14262,
                ( true, Half::Top, Shape::OuterLeft, Facing::North, ) => 14263,
                ( false, Half::Top, Shape::OuterLeft, Facing::North, ) => 14264,
                ( true, Half::Top, Shape::OuterRight, Facing::North, ) => 14265,
                ( false, Half::Top, Shape::OuterRight, Facing::North, ) => 14266,
                ( true, Half::Bottom, Shape::Straight, Facing::North, ) => 14267,
                ( false, Half::Bottom, Shape::Straight, Facing::North, ) => 14268,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::North, ) => 14269,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::North, ) => 14270,
                ( true, Half::Bottom, Shape::InnerRight, Facing::North, ) => 14271,
                ( false, Half::Bottom, Shape::InnerRight, Facing::North, ) => 14272,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::North, ) => 14273,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::North, ) => 14274,
                ( true, Half::Bottom, Shape::OuterRight, Facing::North, ) => 14275,
                ( false, Half::Bottom, Shape::OuterRight, Facing::North, ) => 14276,
                ( true, Half::Top, Shape::Straight, Facing::South, ) => 14277,
                ( false, Half::Top, Shape::Straight, Facing::South, ) => 14278,
                ( true, Half::Top, Shape::InnerLeft, Facing::South, ) => 14279,
                ( false, Half::Top, Shape::InnerLeft, Facing::South, ) => 14280,
                ( true, Half::Top, Shape::InnerRight, Facing::South, ) => 14281,
                ( false, Half::Top, Shape::InnerRight, Facing::South, ) => 14282,
                ( true, Half::Top, Shape::OuterLeft, Facing::South, ) => 14283,
                ( false, Half::Top, Shape::OuterLeft, Facing::South, ) => 14284,
                ( true, Half::Top, Shape::OuterRight, Facing::South, ) => 14285,
                ( false, Half::Top, Shape::OuterRight, Facing::South, ) => 14286,
                ( true, Half::Bottom, Shape::Straight, Facing::South, ) => 14287,
                ( false, Half::Bottom, Shape::Straight, Facing::South, ) => 14288,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::South, ) => 14289,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::South, ) => 14290,
                ( true, Half::Bottom, Shape::InnerRight, Facing::South, ) => 14291,
                ( false, Half::Bottom, Shape::InnerRight, Facing::South, ) => 14292,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::South, ) => 14293,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::South, ) => 14294,
                ( true, Half::Bottom, Shape::OuterRight, Facing::South, ) => 14295,
                ( false, Half::Bottom, Shape::OuterRight, Facing::South, ) => 14296,
                ( true, Half::Top, Shape::Straight, Facing::West, ) => 14297,
                ( false, Half::Top, Shape::Straight, Facing::West, ) => 14298,
                ( true, Half::Top, Shape::InnerLeft, Facing::West, ) => 14299,
                ( false, Half::Top, Shape::InnerLeft, Facing::West, ) => 14300,
                ( true, Half::Top, Shape::InnerRight, Facing::West, ) => 14301,
                ( false, Half::Top, Shape::InnerRight, Facing::West, ) => 14302,
                ( true, Half::Top, Shape::OuterLeft, Facing::West, ) => 14303,
                ( false, Half::Top, Shape::OuterLeft, Facing::West, ) => 14304,
                ( true, Half::Top, Shape::OuterRight, Facing::West, ) => 14305,
                ( false, Half::Top, Shape::OuterRight, Facing::West, ) => 14306,
                ( true, Half::Bottom, Shape::Straight, Facing::West, ) => 14307,
                ( false, Half::Bottom, Shape::Straight, Facing::West, ) => 14308,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::West, ) => 14309,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::West, ) => 14310,
                ( true, Half::Bottom, Shape::InnerRight, Facing::West, ) => 14311,
                ( false, Half::Bottom, Shape::InnerRight, Facing::West, ) => 14312,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::West, ) => 14313,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::West, ) => 14314,
                ( true, Half::Bottom, Shape::OuterRight, Facing::West, ) => 14315,
                ( false, Half::Bottom, Shape::OuterRight, Facing::West, ) => 14316,
                ( true, Half::Top, Shape::Straight, Facing::East, ) => 14317,
                ( false, Half::Top, Shape::Straight, Facing::East, ) => 14318,
                ( true, Half::Top, Shape::InnerLeft, Facing::East, ) => 14319,
                ( false, Half::Top, Shape::InnerLeft, Facing::East, ) => 14320,
                ( true, Half::Top, Shape::InnerRight, Facing::East, ) => 14321,
                ( false, Half::Top, Shape::InnerRight, Facing::East, ) => 14322,
                ( true, Half::Top, Shape::OuterLeft, Facing::East, ) => 14323,
                ( false, Half::Top, Shape::OuterLeft, Facing::East, ) => 14324,
                ( true, Half::Top, Shape::OuterRight, Facing::East, ) => 14325,
                ( false, Half::Top, Shape::OuterRight, Facing::East, ) => 14326,
                ( true, Half::Bottom, Shape::Straight, Facing::East, ) => 14327,
                ( false, Half::Bottom, Shape::Straight, Facing::East, ) => 14328,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::East, ) => 14329,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::East, ) => 14330,
                ( true, Half::Bottom, Shape::InnerRight, Facing::East, ) => 14331,
                ( false, Half::Bottom, Shape::InnerRight, Facing::East, ) => 14332,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::East, ) => 14333,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::East, ) => 14334,
                ( true, Half::Bottom, Shape::OuterRight, Facing::East, ) => 14335,
                ( false, Half::Bottom, Shape::OuterRight, Facing::East, ) => 14336,
            })
        }
    }

    impl From<PolishedDioriteStairs> for BlockState {
        #[inline(always)]
        fn from(value : PolishedDioriteStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedDioriteStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedDioriteStairs { }

    impl Block for PolishedDioriteStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            half : Half::Bottom,
            shape : Shape::Straight,
            facing : Facing::North,
        };
    }

}

/// `minecraft:lodestone` block.
pub mod lodestone {
    use super::*;

    /// `minecraft:lodestone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Lodestone;

    impl Lodestone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20519)
        }
    }

    impl From<Lodestone> for BlockState {
        #[inline(always)]
        fn from(value : Lodestone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Lodestone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Lodestone { }

    impl Block for Lodestone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:smooth_sandstone_stairs` block.
pub mod smooth_sandstone_stairs {
    use super::*;

    /// `minecraft:smooth_sandstone_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmoothSandstoneStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl SmoothSandstoneStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.waterlogged, self.facing, self.half, )) {
                ( Shape::Straight, true, Facing::North, Half::Top, ) => 14577,
                ( Shape::Straight, false, Facing::North, Half::Top, ) => 14578,
                ( Shape::InnerLeft, true, Facing::North, Half::Top, ) => 14579,
                ( Shape::InnerLeft, false, Facing::North, Half::Top, ) => 14580,
                ( Shape::InnerRight, true, Facing::North, Half::Top, ) => 14581,
                ( Shape::InnerRight, false, Facing::North, Half::Top, ) => 14582,
                ( Shape::OuterLeft, true, Facing::North, Half::Top, ) => 14583,
                ( Shape::OuterLeft, false, Facing::North, Half::Top, ) => 14584,
                ( Shape::OuterRight, true, Facing::North, Half::Top, ) => 14585,
                ( Shape::OuterRight, false, Facing::North, Half::Top, ) => 14586,
                ( Shape::Straight, true, Facing::North, Half::Bottom, ) => 14587,
                ( Shape::Straight, false, Facing::North, Half::Bottom, ) => 14588,
                ( Shape::InnerLeft, true, Facing::North, Half::Bottom, ) => 14589,
                ( Shape::InnerLeft, false, Facing::North, Half::Bottom, ) => 14590,
                ( Shape::InnerRight, true, Facing::North, Half::Bottom, ) => 14591,
                ( Shape::InnerRight, false, Facing::North, Half::Bottom, ) => 14592,
                ( Shape::OuterLeft, true, Facing::North, Half::Bottom, ) => 14593,
                ( Shape::OuterLeft, false, Facing::North, Half::Bottom, ) => 14594,
                ( Shape::OuterRight, true, Facing::North, Half::Bottom, ) => 14595,
                ( Shape::OuterRight, false, Facing::North, Half::Bottom, ) => 14596,
                ( Shape::Straight, true, Facing::South, Half::Top, ) => 14597,
                ( Shape::Straight, false, Facing::South, Half::Top, ) => 14598,
                ( Shape::InnerLeft, true, Facing::South, Half::Top, ) => 14599,
                ( Shape::InnerLeft, false, Facing::South, Half::Top, ) => 14600,
                ( Shape::InnerRight, true, Facing::South, Half::Top, ) => 14601,
                ( Shape::InnerRight, false, Facing::South, Half::Top, ) => 14602,
                ( Shape::OuterLeft, true, Facing::South, Half::Top, ) => 14603,
                ( Shape::OuterLeft, false, Facing::South, Half::Top, ) => 14604,
                ( Shape::OuterRight, true, Facing::South, Half::Top, ) => 14605,
                ( Shape::OuterRight, false, Facing::South, Half::Top, ) => 14606,
                ( Shape::Straight, true, Facing::South, Half::Bottom, ) => 14607,
                ( Shape::Straight, false, Facing::South, Half::Bottom, ) => 14608,
                ( Shape::InnerLeft, true, Facing::South, Half::Bottom, ) => 14609,
                ( Shape::InnerLeft, false, Facing::South, Half::Bottom, ) => 14610,
                ( Shape::InnerRight, true, Facing::South, Half::Bottom, ) => 14611,
                ( Shape::InnerRight, false, Facing::South, Half::Bottom, ) => 14612,
                ( Shape::OuterLeft, true, Facing::South, Half::Bottom, ) => 14613,
                ( Shape::OuterLeft, false, Facing::South, Half::Bottom, ) => 14614,
                ( Shape::OuterRight, true, Facing::South, Half::Bottom, ) => 14615,
                ( Shape::OuterRight, false, Facing::South, Half::Bottom, ) => 14616,
                ( Shape::Straight, true, Facing::West, Half::Top, ) => 14617,
                ( Shape::Straight, false, Facing::West, Half::Top, ) => 14618,
                ( Shape::InnerLeft, true, Facing::West, Half::Top, ) => 14619,
                ( Shape::InnerLeft, false, Facing::West, Half::Top, ) => 14620,
                ( Shape::InnerRight, true, Facing::West, Half::Top, ) => 14621,
                ( Shape::InnerRight, false, Facing::West, Half::Top, ) => 14622,
                ( Shape::OuterLeft, true, Facing::West, Half::Top, ) => 14623,
                ( Shape::OuterLeft, false, Facing::West, Half::Top, ) => 14624,
                ( Shape::OuterRight, true, Facing::West, Half::Top, ) => 14625,
                ( Shape::OuterRight, false, Facing::West, Half::Top, ) => 14626,
                ( Shape::Straight, true, Facing::West, Half::Bottom, ) => 14627,
                ( Shape::Straight, false, Facing::West, Half::Bottom, ) => 14628,
                ( Shape::InnerLeft, true, Facing::West, Half::Bottom, ) => 14629,
                ( Shape::InnerLeft, false, Facing::West, Half::Bottom, ) => 14630,
                ( Shape::InnerRight, true, Facing::West, Half::Bottom, ) => 14631,
                ( Shape::InnerRight, false, Facing::West, Half::Bottom, ) => 14632,
                ( Shape::OuterLeft, true, Facing::West, Half::Bottom, ) => 14633,
                ( Shape::OuterLeft, false, Facing::West, Half::Bottom, ) => 14634,
                ( Shape::OuterRight, true, Facing::West, Half::Bottom, ) => 14635,
                ( Shape::OuterRight, false, Facing::West, Half::Bottom, ) => 14636,
                ( Shape::Straight, true, Facing::East, Half::Top, ) => 14637,
                ( Shape::Straight, false, Facing::East, Half::Top, ) => 14638,
                ( Shape::InnerLeft, true, Facing::East, Half::Top, ) => 14639,
                ( Shape::InnerLeft, false, Facing::East, Half::Top, ) => 14640,
                ( Shape::InnerRight, true, Facing::East, Half::Top, ) => 14641,
                ( Shape::InnerRight, false, Facing::East, Half::Top, ) => 14642,
                ( Shape::OuterLeft, true, Facing::East, Half::Top, ) => 14643,
                ( Shape::OuterLeft, false, Facing::East, Half::Top, ) => 14644,
                ( Shape::OuterRight, true, Facing::East, Half::Top, ) => 14645,
                ( Shape::OuterRight, false, Facing::East, Half::Top, ) => 14646,
                ( Shape::Straight, true, Facing::East, Half::Bottom, ) => 14647,
                ( Shape::Straight, false, Facing::East, Half::Bottom, ) => 14648,
                ( Shape::InnerLeft, true, Facing::East, Half::Bottom, ) => 14649,
                ( Shape::InnerLeft, false, Facing::East, Half::Bottom, ) => 14650,
                ( Shape::InnerRight, true, Facing::East, Half::Bottom, ) => 14651,
                ( Shape::InnerRight, false, Facing::East, Half::Bottom, ) => 14652,
                ( Shape::OuterLeft, true, Facing::East, Half::Bottom, ) => 14653,
                ( Shape::OuterLeft, false, Facing::East, Half::Bottom, ) => 14654,
                ( Shape::OuterRight, true, Facing::East, Half::Bottom, ) => 14655,
                ( Shape::OuterRight, false, Facing::East, Half::Bottom, ) => 14656,
            })
        }
    }

    impl From<SmoothSandstoneStairs> for BlockState {
        #[inline(always)]
        fn from(value : SmoothSandstoneStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmoothSandstoneStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmoothSandstoneStairs { }

    impl Block for SmoothSandstoneStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            waterlogged : false,
            facing : Facing::North,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:jungle_fence_gate` block.
pub mod jungle_fence_gate {
    use super::*;

    /// `minecraft:jungle_fence_gate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleFenceGate {
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `open` state.
        pub open : bool,
        /// `in_wall` state.
        pub in_wall : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl JungleFenceGate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.facing, self.open, self.in_wall, )) {
                ( true, Facing::North, true, true, ) => 12269,
                ( false, Facing::North, true, true, ) => 12270,
                ( true, Facing::North, false, true, ) => 12271,
                ( false, Facing::North, false, true, ) => 12272,
                ( true, Facing::North, true, false, ) => 12273,
                ( false, Facing::North, true, false, ) => 12274,
                ( true, Facing::North, false, false, ) => 12275,
                ( false, Facing::North, false, false, ) => 12276,
                ( true, Facing::South, true, true, ) => 12277,
                ( false, Facing::South, true, true, ) => 12278,
                ( true, Facing::South, false, true, ) => 12279,
                ( false, Facing::South, false, true, ) => 12280,
                ( true, Facing::South, true, false, ) => 12281,
                ( false, Facing::South, true, false, ) => 12282,
                ( true, Facing::South, false, false, ) => 12283,
                ( false, Facing::South, false, false, ) => 12284,
                ( true, Facing::West, true, true, ) => 12285,
                ( false, Facing::West, true, true, ) => 12286,
                ( true, Facing::West, false, true, ) => 12287,
                ( false, Facing::West, false, true, ) => 12288,
                ( true, Facing::West, true, false, ) => 12289,
                ( false, Facing::West, true, false, ) => 12290,
                ( true, Facing::West, false, false, ) => 12291,
                ( false, Facing::West, false, false, ) => 12292,
                ( true, Facing::East, true, true, ) => 12293,
                ( false, Facing::East, true, true, ) => 12294,
                ( true, Facing::East, false, true, ) => 12295,
                ( false, Facing::East, false, true, ) => 12296,
                ( true, Facing::East, true, false, ) => 12297,
                ( false, Facing::East, true, false, ) => 12298,
                ( true, Facing::East, false, false, ) => 12299,
                ( false, Facing::East, false, false, ) => 12300,
            })
        }
    }

    impl From<JungleFenceGate> for BlockState {
        #[inline(always)]
        fn from(value : JungleFenceGate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleFenceGate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleFenceGate { }

    impl Block for JungleFenceGate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            facing : Facing::North,
            open : false,
            in_wall : false,
        };
    }

}

/// `minecraft:skeleton_wall_skull` block.
pub mod skeleton_wall_skull {
    use super::*;

    /// `minecraft:skeleton_wall_skull` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SkeletonWallSkull {
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl SkeletonWallSkull {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.powered, )) {
                ( Facing::North, true, ) => 9668,
                ( Facing::North, false, ) => 9669,
                ( Facing::South, true, ) => 9670,
                ( Facing::South, false, ) => 9671,
                ( Facing::West, true, ) => 9672,
                ( Facing::West, false, ) => 9673,
                ( Facing::East, true, ) => 9674,
                ( Facing::East, false, ) => 9675,
            })
        }
    }

    impl From<SkeletonWallSkull> for BlockState {
        #[inline(always)]
        fn from(value : SkeletonWallSkull) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SkeletonWallSkull {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SkeletonWallSkull { }

    impl Block for SkeletonWallSkull {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            powered : false,
        };
    }

}

/// `minecraft:cobbled_deepslate_wall` block.
pub mod cobbled_deepslate_wall {
    use super::*;

    /// `minecraft:cobbled_deepslate_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CobbledDeepslateWall {
        /// `south` state.
        pub south : South,
        /// `east` state.
        pub east : East,
        /// `north` state.
        pub north : North,
        /// `west` state.
        pub west : West,
        /// `up` state.
        pub up : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    impl CobbledDeepslateWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.south, self.east, self.north, self.west, self.up, self.waterlogged, )) {
                ( South::None, East::None, North::None, West::None, true, true, ) => 26086,
                ( South::None, East::None, North::None, West::Low, true, true, ) => 26087,
                ( South::None, East::None, North::None, West::Tall, true, true, ) => 26088,
                ( South::None, East::None, North::None, West::None, true, false, ) => 26089,
                ( South::None, East::None, North::None, West::Low, true, false, ) => 26090,
                ( South::None, East::None, North::None, West::Tall, true, false, ) => 26091,
                ( South::None, East::None, North::None, West::None, false, true, ) => 26092,
                ( South::None, East::None, North::None, West::Low, false, true, ) => 26093,
                ( South::None, East::None, North::None, West::Tall, false, true, ) => 26094,
                ( South::None, East::None, North::None, West::None, false, false, ) => 26095,
                ( South::None, East::None, North::None, West::Low, false, false, ) => 26096,
                ( South::None, East::None, North::None, West::Tall, false, false, ) => 26097,
                ( South::Low, East::None, North::None, West::None, true, true, ) => 26098,
                ( South::Low, East::None, North::None, West::Low, true, true, ) => 26099,
                ( South::Low, East::None, North::None, West::Tall, true, true, ) => 26100,
                ( South::Low, East::None, North::None, West::None, true, false, ) => 26101,
                ( South::Low, East::None, North::None, West::Low, true, false, ) => 26102,
                ( South::Low, East::None, North::None, West::Tall, true, false, ) => 26103,
                ( South::Low, East::None, North::None, West::None, false, true, ) => 26104,
                ( South::Low, East::None, North::None, West::Low, false, true, ) => 26105,
                ( South::Low, East::None, North::None, West::Tall, false, true, ) => 26106,
                ( South::Low, East::None, North::None, West::None, false, false, ) => 26107,
                ( South::Low, East::None, North::None, West::Low, false, false, ) => 26108,
                ( South::Low, East::None, North::None, West::Tall, false, false, ) => 26109,
                ( South::Tall, East::None, North::None, West::None, true, true, ) => 26110,
                ( South::Tall, East::None, North::None, West::Low, true, true, ) => 26111,
                ( South::Tall, East::None, North::None, West::Tall, true, true, ) => 26112,
                ( South::Tall, East::None, North::None, West::None, true, false, ) => 26113,
                ( South::Tall, East::None, North::None, West::Low, true, false, ) => 26114,
                ( South::Tall, East::None, North::None, West::Tall, true, false, ) => 26115,
                ( South::Tall, East::None, North::None, West::None, false, true, ) => 26116,
                ( South::Tall, East::None, North::None, West::Low, false, true, ) => 26117,
                ( South::Tall, East::None, North::None, West::Tall, false, true, ) => 26118,
                ( South::Tall, East::None, North::None, West::None, false, false, ) => 26119,
                ( South::Tall, East::None, North::None, West::Low, false, false, ) => 26120,
                ( South::Tall, East::None, North::None, West::Tall, false, false, ) => 26121,
                ( South::None, East::None, North::Low, West::None, true, true, ) => 26122,
                ( South::None, East::None, North::Low, West::Low, true, true, ) => 26123,
                ( South::None, East::None, North::Low, West::Tall, true, true, ) => 26124,
                ( South::None, East::None, North::Low, West::None, true, false, ) => 26125,
                ( South::None, East::None, North::Low, West::Low, true, false, ) => 26126,
                ( South::None, East::None, North::Low, West::Tall, true, false, ) => 26127,
                ( South::None, East::None, North::Low, West::None, false, true, ) => 26128,
                ( South::None, East::None, North::Low, West::Low, false, true, ) => 26129,
                ( South::None, East::None, North::Low, West::Tall, false, true, ) => 26130,
                ( South::None, East::None, North::Low, West::None, false, false, ) => 26131,
                ( South::None, East::None, North::Low, West::Low, false, false, ) => 26132,
                ( South::None, East::None, North::Low, West::Tall, false, false, ) => 26133,
                ( South::Low, East::None, North::Low, West::None, true, true, ) => 26134,
                ( South::Low, East::None, North::Low, West::Low, true, true, ) => 26135,
                ( South::Low, East::None, North::Low, West::Tall, true, true, ) => 26136,
                ( South::Low, East::None, North::Low, West::None, true, false, ) => 26137,
                ( South::Low, East::None, North::Low, West::Low, true, false, ) => 26138,
                ( South::Low, East::None, North::Low, West::Tall, true, false, ) => 26139,
                ( South::Low, East::None, North::Low, West::None, false, true, ) => 26140,
                ( South::Low, East::None, North::Low, West::Low, false, true, ) => 26141,
                ( South::Low, East::None, North::Low, West::Tall, false, true, ) => 26142,
                ( South::Low, East::None, North::Low, West::None, false, false, ) => 26143,
                ( South::Low, East::None, North::Low, West::Low, false, false, ) => 26144,
                ( South::Low, East::None, North::Low, West::Tall, false, false, ) => 26145,
                ( South::Tall, East::None, North::Low, West::None, true, true, ) => 26146,
                ( South::Tall, East::None, North::Low, West::Low, true, true, ) => 26147,
                ( South::Tall, East::None, North::Low, West::Tall, true, true, ) => 26148,
                ( South::Tall, East::None, North::Low, West::None, true, false, ) => 26149,
                ( South::Tall, East::None, North::Low, West::Low, true, false, ) => 26150,
                ( South::Tall, East::None, North::Low, West::Tall, true, false, ) => 26151,
                ( South::Tall, East::None, North::Low, West::None, false, true, ) => 26152,
                ( South::Tall, East::None, North::Low, West::Low, false, true, ) => 26153,
                ( South::Tall, East::None, North::Low, West::Tall, false, true, ) => 26154,
                ( South::Tall, East::None, North::Low, West::None, false, false, ) => 26155,
                ( South::Tall, East::None, North::Low, West::Low, false, false, ) => 26156,
                ( South::Tall, East::None, North::Low, West::Tall, false, false, ) => 26157,
                ( South::None, East::None, North::Tall, West::None, true, true, ) => 26158,
                ( South::None, East::None, North::Tall, West::Low, true, true, ) => 26159,
                ( South::None, East::None, North::Tall, West::Tall, true, true, ) => 26160,
                ( South::None, East::None, North::Tall, West::None, true, false, ) => 26161,
                ( South::None, East::None, North::Tall, West::Low, true, false, ) => 26162,
                ( South::None, East::None, North::Tall, West::Tall, true, false, ) => 26163,
                ( South::None, East::None, North::Tall, West::None, false, true, ) => 26164,
                ( South::None, East::None, North::Tall, West::Low, false, true, ) => 26165,
                ( South::None, East::None, North::Tall, West::Tall, false, true, ) => 26166,
                ( South::None, East::None, North::Tall, West::None, false, false, ) => 26167,
                ( South::None, East::None, North::Tall, West::Low, false, false, ) => 26168,
                ( South::None, East::None, North::Tall, West::Tall, false, false, ) => 26169,
                ( South::Low, East::None, North::Tall, West::None, true, true, ) => 26170,
                ( South::Low, East::None, North::Tall, West::Low, true, true, ) => 26171,
                ( South::Low, East::None, North::Tall, West::Tall, true, true, ) => 26172,
                ( South::Low, East::None, North::Tall, West::None, true, false, ) => 26173,
                ( South::Low, East::None, North::Tall, West::Low, true, false, ) => 26174,
                ( South::Low, East::None, North::Tall, West::Tall, true, false, ) => 26175,
                ( South::Low, East::None, North::Tall, West::None, false, true, ) => 26176,
                ( South::Low, East::None, North::Tall, West::Low, false, true, ) => 26177,
                ( South::Low, East::None, North::Tall, West::Tall, false, true, ) => 26178,
                ( South::Low, East::None, North::Tall, West::None, false, false, ) => 26179,
                ( South::Low, East::None, North::Tall, West::Low, false, false, ) => 26180,
                ( South::Low, East::None, North::Tall, West::Tall, false, false, ) => 26181,
                ( South::Tall, East::None, North::Tall, West::None, true, true, ) => 26182,
                ( South::Tall, East::None, North::Tall, West::Low, true, true, ) => 26183,
                ( South::Tall, East::None, North::Tall, West::Tall, true, true, ) => 26184,
                ( South::Tall, East::None, North::Tall, West::None, true, false, ) => 26185,
                ( South::Tall, East::None, North::Tall, West::Low, true, false, ) => 26186,
                ( South::Tall, East::None, North::Tall, West::Tall, true, false, ) => 26187,
                ( South::Tall, East::None, North::Tall, West::None, false, true, ) => 26188,
                ( South::Tall, East::None, North::Tall, West::Low, false, true, ) => 26189,
                ( South::Tall, East::None, North::Tall, West::Tall, false, true, ) => 26190,
                ( South::Tall, East::None, North::Tall, West::None, false, false, ) => 26191,
                ( South::Tall, East::None, North::Tall, West::Low, false, false, ) => 26192,
                ( South::Tall, East::None, North::Tall, West::Tall, false, false, ) => 26193,
                ( South::None, East::Low, North::None, West::None, true, true, ) => 26194,
                ( South::None, East::Low, North::None, West::Low, true, true, ) => 26195,
                ( South::None, East::Low, North::None, West::Tall, true, true, ) => 26196,
                ( South::None, East::Low, North::None, West::None, true, false, ) => 26197,
                ( South::None, East::Low, North::None, West::Low, true, false, ) => 26198,
                ( South::None, East::Low, North::None, West::Tall, true, false, ) => 26199,
                ( South::None, East::Low, North::None, West::None, false, true, ) => 26200,
                ( South::None, East::Low, North::None, West::Low, false, true, ) => 26201,
                ( South::None, East::Low, North::None, West::Tall, false, true, ) => 26202,
                ( South::None, East::Low, North::None, West::None, false, false, ) => 26203,
                ( South::None, East::Low, North::None, West::Low, false, false, ) => 26204,
                ( South::None, East::Low, North::None, West::Tall, false, false, ) => 26205,
                ( South::Low, East::Low, North::None, West::None, true, true, ) => 26206,
                ( South::Low, East::Low, North::None, West::Low, true, true, ) => 26207,
                ( South::Low, East::Low, North::None, West::Tall, true, true, ) => 26208,
                ( South::Low, East::Low, North::None, West::None, true, false, ) => 26209,
                ( South::Low, East::Low, North::None, West::Low, true, false, ) => 26210,
                ( South::Low, East::Low, North::None, West::Tall, true, false, ) => 26211,
                ( South::Low, East::Low, North::None, West::None, false, true, ) => 26212,
                ( South::Low, East::Low, North::None, West::Low, false, true, ) => 26213,
                ( South::Low, East::Low, North::None, West::Tall, false, true, ) => 26214,
                ( South::Low, East::Low, North::None, West::None, false, false, ) => 26215,
                ( South::Low, East::Low, North::None, West::Low, false, false, ) => 26216,
                ( South::Low, East::Low, North::None, West::Tall, false, false, ) => 26217,
                ( South::Tall, East::Low, North::None, West::None, true, true, ) => 26218,
                ( South::Tall, East::Low, North::None, West::Low, true, true, ) => 26219,
                ( South::Tall, East::Low, North::None, West::Tall, true, true, ) => 26220,
                ( South::Tall, East::Low, North::None, West::None, true, false, ) => 26221,
                ( South::Tall, East::Low, North::None, West::Low, true, false, ) => 26222,
                ( South::Tall, East::Low, North::None, West::Tall, true, false, ) => 26223,
                ( South::Tall, East::Low, North::None, West::None, false, true, ) => 26224,
                ( South::Tall, East::Low, North::None, West::Low, false, true, ) => 26225,
                ( South::Tall, East::Low, North::None, West::Tall, false, true, ) => 26226,
                ( South::Tall, East::Low, North::None, West::None, false, false, ) => 26227,
                ( South::Tall, East::Low, North::None, West::Low, false, false, ) => 26228,
                ( South::Tall, East::Low, North::None, West::Tall, false, false, ) => 26229,
                ( South::None, East::Low, North::Low, West::None, true, true, ) => 26230,
                ( South::None, East::Low, North::Low, West::Low, true, true, ) => 26231,
                ( South::None, East::Low, North::Low, West::Tall, true, true, ) => 26232,
                ( South::None, East::Low, North::Low, West::None, true, false, ) => 26233,
                ( South::None, East::Low, North::Low, West::Low, true, false, ) => 26234,
                ( South::None, East::Low, North::Low, West::Tall, true, false, ) => 26235,
                ( South::None, East::Low, North::Low, West::None, false, true, ) => 26236,
                ( South::None, East::Low, North::Low, West::Low, false, true, ) => 26237,
                ( South::None, East::Low, North::Low, West::Tall, false, true, ) => 26238,
                ( South::None, East::Low, North::Low, West::None, false, false, ) => 26239,
                ( South::None, East::Low, North::Low, West::Low, false, false, ) => 26240,
                ( South::None, East::Low, North::Low, West::Tall, false, false, ) => 26241,
                ( South::Low, East::Low, North::Low, West::None, true, true, ) => 26242,
                ( South::Low, East::Low, North::Low, West::Low, true, true, ) => 26243,
                ( South::Low, East::Low, North::Low, West::Tall, true, true, ) => 26244,
                ( South::Low, East::Low, North::Low, West::None, true, false, ) => 26245,
                ( South::Low, East::Low, North::Low, West::Low, true, false, ) => 26246,
                ( South::Low, East::Low, North::Low, West::Tall, true, false, ) => 26247,
                ( South::Low, East::Low, North::Low, West::None, false, true, ) => 26248,
                ( South::Low, East::Low, North::Low, West::Low, false, true, ) => 26249,
                ( South::Low, East::Low, North::Low, West::Tall, false, true, ) => 26250,
                ( South::Low, East::Low, North::Low, West::None, false, false, ) => 26251,
                ( South::Low, East::Low, North::Low, West::Low, false, false, ) => 26252,
                ( South::Low, East::Low, North::Low, West::Tall, false, false, ) => 26253,
                ( South::Tall, East::Low, North::Low, West::None, true, true, ) => 26254,
                ( South::Tall, East::Low, North::Low, West::Low, true, true, ) => 26255,
                ( South::Tall, East::Low, North::Low, West::Tall, true, true, ) => 26256,
                ( South::Tall, East::Low, North::Low, West::None, true, false, ) => 26257,
                ( South::Tall, East::Low, North::Low, West::Low, true, false, ) => 26258,
                ( South::Tall, East::Low, North::Low, West::Tall, true, false, ) => 26259,
                ( South::Tall, East::Low, North::Low, West::None, false, true, ) => 26260,
                ( South::Tall, East::Low, North::Low, West::Low, false, true, ) => 26261,
                ( South::Tall, East::Low, North::Low, West::Tall, false, true, ) => 26262,
                ( South::Tall, East::Low, North::Low, West::None, false, false, ) => 26263,
                ( South::Tall, East::Low, North::Low, West::Low, false, false, ) => 26264,
                ( South::Tall, East::Low, North::Low, West::Tall, false, false, ) => 26265,
                ( South::None, East::Low, North::Tall, West::None, true, true, ) => 26266,
                ( South::None, East::Low, North::Tall, West::Low, true, true, ) => 26267,
                ( South::None, East::Low, North::Tall, West::Tall, true, true, ) => 26268,
                ( South::None, East::Low, North::Tall, West::None, true, false, ) => 26269,
                ( South::None, East::Low, North::Tall, West::Low, true, false, ) => 26270,
                ( South::None, East::Low, North::Tall, West::Tall, true, false, ) => 26271,
                ( South::None, East::Low, North::Tall, West::None, false, true, ) => 26272,
                ( South::None, East::Low, North::Tall, West::Low, false, true, ) => 26273,
                ( South::None, East::Low, North::Tall, West::Tall, false, true, ) => 26274,
                ( South::None, East::Low, North::Tall, West::None, false, false, ) => 26275,
                ( South::None, East::Low, North::Tall, West::Low, false, false, ) => 26276,
                ( South::None, East::Low, North::Tall, West::Tall, false, false, ) => 26277,
                ( South::Low, East::Low, North::Tall, West::None, true, true, ) => 26278,
                ( South::Low, East::Low, North::Tall, West::Low, true, true, ) => 26279,
                ( South::Low, East::Low, North::Tall, West::Tall, true, true, ) => 26280,
                ( South::Low, East::Low, North::Tall, West::None, true, false, ) => 26281,
                ( South::Low, East::Low, North::Tall, West::Low, true, false, ) => 26282,
                ( South::Low, East::Low, North::Tall, West::Tall, true, false, ) => 26283,
                ( South::Low, East::Low, North::Tall, West::None, false, true, ) => 26284,
                ( South::Low, East::Low, North::Tall, West::Low, false, true, ) => 26285,
                ( South::Low, East::Low, North::Tall, West::Tall, false, true, ) => 26286,
                ( South::Low, East::Low, North::Tall, West::None, false, false, ) => 26287,
                ( South::Low, East::Low, North::Tall, West::Low, false, false, ) => 26288,
                ( South::Low, East::Low, North::Tall, West::Tall, false, false, ) => 26289,
                ( South::Tall, East::Low, North::Tall, West::None, true, true, ) => 26290,
                ( South::Tall, East::Low, North::Tall, West::Low, true, true, ) => 26291,
                ( South::Tall, East::Low, North::Tall, West::Tall, true, true, ) => 26292,
                ( South::Tall, East::Low, North::Tall, West::None, true, false, ) => 26293,
                ( South::Tall, East::Low, North::Tall, West::Low, true, false, ) => 26294,
                ( South::Tall, East::Low, North::Tall, West::Tall, true, false, ) => 26295,
                ( South::Tall, East::Low, North::Tall, West::None, false, true, ) => 26296,
                ( South::Tall, East::Low, North::Tall, West::Low, false, true, ) => 26297,
                ( South::Tall, East::Low, North::Tall, West::Tall, false, true, ) => 26298,
                ( South::Tall, East::Low, North::Tall, West::None, false, false, ) => 26299,
                ( South::Tall, East::Low, North::Tall, West::Low, false, false, ) => 26300,
                ( South::Tall, East::Low, North::Tall, West::Tall, false, false, ) => 26301,
                ( South::None, East::Tall, North::None, West::None, true, true, ) => 26302,
                ( South::None, East::Tall, North::None, West::Low, true, true, ) => 26303,
                ( South::None, East::Tall, North::None, West::Tall, true, true, ) => 26304,
                ( South::None, East::Tall, North::None, West::None, true, false, ) => 26305,
                ( South::None, East::Tall, North::None, West::Low, true, false, ) => 26306,
                ( South::None, East::Tall, North::None, West::Tall, true, false, ) => 26307,
                ( South::None, East::Tall, North::None, West::None, false, true, ) => 26308,
                ( South::None, East::Tall, North::None, West::Low, false, true, ) => 26309,
                ( South::None, East::Tall, North::None, West::Tall, false, true, ) => 26310,
                ( South::None, East::Tall, North::None, West::None, false, false, ) => 26311,
                ( South::None, East::Tall, North::None, West::Low, false, false, ) => 26312,
                ( South::None, East::Tall, North::None, West::Tall, false, false, ) => 26313,
                ( South::Low, East::Tall, North::None, West::None, true, true, ) => 26314,
                ( South::Low, East::Tall, North::None, West::Low, true, true, ) => 26315,
                ( South::Low, East::Tall, North::None, West::Tall, true, true, ) => 26316,
                ( South::Low, East::Tall, North::None, West::None, true, false, ) => 26317,
                ( South::Low, East::Tall, North::None, West::Low, true, false, ) => 26318,
                ( South::Low, East::Tall, North::None, West::Tall, true, false, ) => 26319,
                ( South::Low, East::Tall, North::None, West::None, false, true, ) => 26320,
                ( South::Low, East::Tall, North::None, West::Low, false, true, ) => 26321,
                ( South::Low, East::Tall, North::None, West::Tall, false, true, ) => 26322,
                ( South::Low, East::Tall, North::None, West::None, false, false, ) => 26323,
                ( South::Low, East::Tall, North::None, West::Low, false, false, ) => 26324,
                ( South::Low, East::Tall, North::None, West::Tall, false, false, ) => 26325,
                ( South::Tall, East::Tall, North::None, West::None, true, true, ) => 26326,
                ( South::Tall, East::Tall, North::None, West::Low, true, true, ) => 26327,
                ( South::Tall, East::Tall, North::None, West::Tall, true, true, ) => 26328,
                ( South::Tall, East::Tall, North::None, West::None, true, false, ) => 26329,
                ( South::Tall, East::Tall, North::None, West::Low, true, false, ) => 26330,
                ( South::Tall, East::Tall, North::None, West::Tall, true, false, ) => 26331,
                ( South::Tall, East::Tall, North::None, West::None, false, true, ) => 26332,
                ( South::Tall, East::Tall, North::None, West::Low, false, true, ) => 26333,
                ( South::Tall, East::Tall, North::None, West::Tall, false, true, ) => 26334,
                ( South::Tall, East::Tall, North::None, West::None, false, false, ) => 26335,
                ( South::Tall, East::Tall, North::None, West::Low, false, false, ) => 26336,
                ( South::Tall, East::Tall, North::None, West::Tall, false, false, ) => 26337,
                ( South::None, East::Tall, North::Low, West::None, true, true, ) => 26338,
                ( South::None, East::Tall, North::Low, West::Low, true, true, ) => 26339,
                ( South::None, East::Tall, North::Low, West::Tall, true, true, ) => 26340,
                ( South::None, East::Tall, North::Low, West::None, true, false, ) => 26341,
                ( South::None, East::Tall, North::Low, West::Low, true, false, ) => 26342,
                ( South::None, East::Tall, North::Low, West::Tall, true, false, ) => 26343,
                ( South::None, East::Tall, North::Low, West::None, false, true, ) => 26344,
                ( South::None, East::Tall, North::Low, West::Low, false, true, ) => 26345,
                ( South::None, East::Tall, North::Low, West::Tall, false, true, ) => 26346,
                ( South::None, East::Tall, North::Low, West::None, false, false, ) => 26347,
                ( South::None, East::Tall, North::Low, West::Low, false, false, ) => 26348,
                ( South::None, East::Tall, North::Low, West::Tall, false, false, ) => 26349,
                ( South::Low, East::Tall, North::Low, West::None, true, true, ) => 26350,
                ( South::Low, East::Tall, North::Low, West::Low, true, true, ) => 26351,
                ( South::Low, East::Tall, North::Low, West::Tall, true, true, ) => 26352,
                ( South::Low, East::Tall, North::Low, West::None, true, false, ) => 26353,
                ( South::Low, East::Tall, North::Low, West::Low, true, false, ) => 26354,
                ( South::Low, East::Tall, North::Low, West::Tall, true, false, ) => 26355,
                ( South::Low, East::Tall, North::Low, West::None, false, true, ) => 26356,
                ( South::Low, East::Tall, North::Low, West::Low, false, true, ) => 26357,
                ( South::Low, East::Tall, North::Low, West::Tall, false, true, ) => 26358,
                ( South::Low, East::Tall, North::Low, West::None, false, false, ) => 26359,
                ( South::Low, East::Tall, North::Low, West::Low, false, false, ) => 26360,
                ( South::Low, East::Tall, North::Low, West::Tall, false, false, ) => 26361,
                ( South::Tall, East::Tall, North::Low, West::None, true, true, ) => 26362,
                ( South::Tall, East::Tall, North::Low, West::Low, true, true, ) => 26363,
                ( South::Tall, East::Tall, North::Low, West::Tall, true, true, ) => 26364,
                ( South::Tall, East::Tall, North::Low, West::None, true, false, ) => 26365,
                ( South::Tall, East::Tall, North::Low, West::Low, true, false, ) => 26366,
                ( South::Tall, East::Tall, North::Low, West::Tall, true, false, ) => 26367,
                ( South::Tall, East::Tall, North::Low, West::None, false, true, ) => 26368,
                ( South::Tall, East::Tall, North::Low, West::Low, false, true, ) => 26369,
                ( South::Tall, East::Tall, North::Low, West::Tall, false, true, ) => 26370,
                ( South::Tall, East::Tall, North::Low, West::None, false, false, ) => 26371,
                ( South::Tall, East::Tall, North::Low, West::Low, false, false, ) => 26372,
                ( South::Tall, East::Tall, North::Low, West::Tall, false, false, ) => 26373,
                ( South::None, East::Tall, North::Tall, West::None, true, true, ) => 26374,
                ( South::None, East::Tall, North::Tall, West::Low, true, true, ) => 26375,
                ( South::None, East::Tall, North::Tall, West::Tall, true, true, ) => 26376,
                ( South::None, East::Tall, North::Tall, West::None, true, false, ) => 26377,
                ( South::None, East::Tall, North::Tall, West::Low, true, false, ) => 26378,
                ( South::None, East::Tall, North::Tall, West::Tall, true, false, ) => 26379,
                ( South::None, East::Tall, North::Tall, West::None, false, true, ) => 26380,
                ( South::None, East::Tall, North::Tall, West::Low, false, true, ) => 26381,
                ( South::None, East::Tall, North::Tall, West::Tall, false, true, ) => 26382,
                ( South::None, East::Tall, North::Tall, West::None, false, false, ) => 26383,
                ( South::None, East::Tall, North::Tall, West::Low, false, false, ) => 26384,
                ( South::None, East::Tall, North::Tall, West::Tall, false, false, ) => 26385,
                ( South::Low, East::Tall, North::Tall, West::None, true, true, ) => 26386,
                ( South::Low, East::Tall, North::Tall, West::Low, true, true, ) => 26387,
                ( South::Low, East::Tall, North::Tall, West::Tall, true, true, ) => 26388,
                ( South::Low, East::Tall, North::Tall, West::None, true, false, ) => 26389,
                ( South::Low, East::Tall, North::Tall, West::Low, true, false, ) => 26390,
                ( South::Low, East::Tall, North::Tall, West::Tall, true, false, ) => 26391,
                ( South::Low, East::Tall, North::Tall, West::None, false, true, ) => 26392,
                ( South::Low, East::Tall, North::Tall, West::Low, false, true, ) => 26393,
                ( South::Low, East::Tall, North::Tall, West::Tall, false, true, ) => 26394,
                ( South::Low, East::Tall, North::Tall, West::None, false, false, ) => 26395,
                ( South::Low, East::Tall, North::Tall, West::Low, false, false, ) => 26396,
                ( South::Low, East::Tall, North::Tall, West::Tall, false, false, ) => 26397,
                ( South::Tall, East::Tall, North::Tall, West::None, true, true, ) => 26398,
                ( South::Tall, East::Tall, North::Tall, West::Low, true, true, ) => 26399,
                ( South::Tall, East::Tall, North::Tall, West::Tall, true, true, ) => 26400,
                ( South::Tall, East::Tall, North::Tall, West::None, true, false, ) => 26401,
                ( South::Tall, East::Tall, North::Tall, West::Low, true, false, ) => 26402,
                ( South::Tall, East::Tall, North::Tall, West::Tall, true, false, ) => 26403,
                ( South::Tall, East::Tall, North::Tall, West::None, false, true, ) => 26404,
                ( South::Tall, East::Tall, North::Tall, West::Low, false, true, ) => 26405,
                ( South::Tall, East::Tall, North::Tall, West::Tall, false, true, ) => 26406,
                ( South::Tall, East::Tall, North::Tall, West::None, false, false, ) => 26407,
                ( South::Tall, East::Tall, North::Tall, West::Low, false, false, ) => 26408,
                ( South::Tall, East::Tall, North::Tall, West::Tall, false, false, ) => 26409,
            })
        }
    }

    impl From<CobbledDeepslateWall> for BlockState {
        #[inline(always)]
        fn from(value : CobbledDeepslateWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CobbledDeepslateWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CobbledDeepslateWall { }

    impl Block for CobbledDeepslateWall {
        const DEFAULT_STATE : Self = Self {
            south : South::None,
            east : East::None,
            north : North::None,
            west : West::None,
            up : true,
            waterlogged : false,
        };
    }

}

/// `minecraft:mangrove_pressure_plate` block.
pub mod mangrove_pressure_plate {
    use super::*;

    /// `minecraft:mangrove_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangrovePressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl MangrovePressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 5908,
                ( false, ) => 5909,
            })
        }
    }

    impl From<MangrovePressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : MangrovePressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangrovePressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangrovePressurePlate { }

    impl Block for MangrovePressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:potted_blue_orchid` block.
pub mod potted_blue_orchid {
    use super::*;

    /// `minecraft:potted_blue_orchid` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedBlueOrchid;

    impl PottedBlueOrchid {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9365)
        }
    }

    impl From<PottedBlueOrchid> for BlockState {
        #[inline(always)]
        fn from(value : PottedBlueOrchid) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedBlueOrchid {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedBlueOrchid { }

    impl Block for PottedBlueOrchid {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:light_gray_stained_glass_pane` block.
pub mod light_gray_stained_glass_pane {
    use super::*;

    /// `minecraft:light_gray_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayStainedGlassPane {
        /// `west` state.
        pub west : bool,
        /// `south` state.
        pub south : bool,
        /// `east` state.
        pub east : bool,
        /// `north` state.
        pub north : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl LightGrayStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.west, self.south, self.east, self.north, self.waterlogged, )) {
                ( true, true, true, true, true, ) => 10437,
                ( false, true, true, true, true, ) => 10438,
                ( true, true, true, true, false, ) => 10439,
                ( false, true, true, true, false, ) => 10440,
                ( true, false, true, true, true, ) => 10441,
                ( false, false, true, true, true, ) => 10442,
                ( true, false, true, true, false, ) => 10443,
                ( false, false, true, true, false, ) => 10444,
                ( true, true, true, false, true, ) => 10445,
                ( false, true, true, false, true, ) => 10446,
                ( true, true, true, false, false, ) => 10447,
                ( false, true, true, false, false, ) => 10448,
                ( true, false, true, false, true, ) => 10449,
                ( false, false, true, false, true, ) => 10450,
                ( true, false, true, false, false, ) => 10451,
                ( false, false, true, false, false, ) => 10452,
                ( true, true, false, true, true, ) => 10453,
                ( false, true, false, true, true, ) => 10454,
                ( true, true, false, true, false, ) => 10455,
                ( false, true, false, true, false, ) => 10456,
                ( true, false, false, true, true, ) => 10457,
                ( false, false, false, true, true, ) => 10458,
                ( true, false, false, true, false, ) => 10459,
                ( false, false, false, true, false, ) => 10460,
                ( true, true, false, false, true, ) => 10461,
                ( false, true, false, false, true, ) => 10462,
                ( true, true, false, false, false, ) => 10463,
                ( false, true, false, false, false, ) => 10464,
                ( true, false, false, false, true, ) => 10465,
                ( false, false, false, false, true, ) => 10466,
                ( true, false, false, false, false, ) => 10467,
                ( false, false, false, false, false, ) => 10468,
            })
        }
    }

    impl From<LightGrayStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayStainedGlassPane { }

    impl Block for LightGrayStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            west : false,
            south : false,
            east : false,
            north : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:birch_sign` block.
pub mod birch_sign {
    use super::*;

    /// `minecraft:birch_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchSign {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl BirchSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.waterlogged, )) {
                ( Rotation::N0, true, ) => 4430,
                ( Rotation::N0, false, ) => 4431,
                ( Rotation::N1, true, ) => 4432,
                ( Rotation::N1, false, ) => 4433,
                ( Rotation::N2, true, ) => 4434,
                ( Rotation::N2, false, ) => 4435,
                ( Rotation::N3, true, ) => 4436,
                ( Rotation::N3, false, ) => 4437,
                ( Rotation::N4, true, ) => 4438,
                ( Rotation::N4, false, ) => 4439,
                ( Rotation::N5, true, ) => 4440,
                ( Rotation::N5, false, ) => 4441,
                ( Rotation::N6, true, ) => 4442,
                ( Rotation::N6, false, ) => 4443,
                ( Rotation::N7, true, ) => 4444,
                ( Rotation::N7, false, ) => 4445,
                ( Rotation::N8, true, ) => 4446,
                ( Rotation::N8, false, ) => 4447,
                ( Rotation::N9, true, ) => 4448,
                ( Rotation::N9, false, ) => 4449,
                ( Rotation::N10, true, ) => 4450,
                ( Rotation::N10, false, ) => 4451,
                ( Rotation::N11, true, ) => 4452,
                ( Rotation::N11, false, ) => 4453,
                ( Rotation::N12, true, ) => 4454,
                ( Rotation::N12, false, ) => 4455,
                ( Rotation::N13, true, ) => 4456,
                ( Rotation::N13, false, ) => 4457,
                ( Rotation::N14, true, ) => 4458,
                ( Rotation::N14, false, ) => 4459,
                ( Rotation::N15, true, ) => 4460,
                ( Rotation::N15, false, ) => 4461,
            })
        }
    }

    impl From<BirchSign> for BlockState {
        #[inline(always)]
        fn from(value : BirchSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchSign { }

    impl Block for BirchSign {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            waterlogged : false,
        };
    }

}

/// `minecraft:red_sandstone_stairs` block.
pub mod red_sandstone_stairs {
    use super::*;

    /// `minecraft:red_sandstone_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedSandstoneStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl RedSandstoneStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, self.half, self.shape, )) {
                ( Facing::North, true, Half::Top, Shape::Straight, ) => 11971,
                ( Facing::North, false, Half::Top, Shape::Straight, ) => 11972,
                ( Facing::North, true, Half::Top, Shape::InnerLeft, ) => 11973,
                ( Facing::North, false, Half::Top, Shape::InnerLeft, ) => 11974,
                ( Facing::North, true, Half::Top, Shape::InnerRight, ) => 11975,
                ( Facing::North, false, Half::Top, Shape::InnerRight, ) => 11976,
                ( Facing::North, true, Half::Top, Shape::OuterLeft, ) => 11977,
                ( Facing::North, false, Half::Top, Shape::OuterLeft, ) => 11978,
                ( Facing::North, true, Half::Top, Shape::OuterRight, ) => 11979,
                ( Facing::North, false, Half::Top, Shape::OuterRight, ) => 11980,
                ( Facing::North, true, Half::Bottom, Shape::Straight, ) => 11981,
                ( Facing::North, false, Half::Bottom, Shape::Straight, ) => 11982,
                ( Facing::North, true, Half::Bottom, Shape::InnerLeft, ) => 11983,
                ( Facing::North, false, Half::Bottom, Shape::InnerLeft, ) => 11984,
                ( Facing::North, true, Half::Bottom, Shape::InnerRight, ) => 11985,
                ( Facing::North, false, Half::Bottom, Shape::InnerRight, ) => 11986,
                ( Facing::North, true, Half::Bottom, Shape::OuterLeft, ) => 11987,
                ( Facing::North, false, Half::Bottom, Shape::OuterLeft, ) => 11988,
                ( Facing::North, true, Half::Bottom, Shape::OuterRight, ) => 11989,
                ( Facing::North, false, Half::Bottom, Shape::OuterRight, ) => 11990,
                ( Facing::South, true, Half::Top, Shape::Straight, ) => 11991,
                ( Facing::South, false, Half::Top, Shape::Straight, ) => 11992,
                ( Facing::South, true, Half::Top, Shape::InnerLeft, ) => 11993,
                ( Facing::South, false, Half::Top, Shape::InnerLeft, ) => 11994,
                ( Facing::South, true, Half::Top, Shape::InnerRight, ) => 11995,
                ( Facing::South, false, Half::Top, Shape::InnerRight, ) => 11996,
                ( Facing::South, true, Half::Top, Shape::OuterLeft, ) => 11997,
                ( Facing::South, false, Half::Top, Shape::OuterLeft, ) => 11998,
                ( Facing::South, true, Half::Top, Shape::OuterRight, ) => 11999,
                ( Facing::South, false, Half::Top, Shape::OuterRight, ) => 12000,
                ( Facing::South, true, Half::Bottom, Shape::Straight, ) => 12001,
                ( Facing::South, false, Half::Bottom, Shape::Straight, ) => 12002,
                ( Facing::South, true, Half::Bottom, Shape::InnerLeft, ) => 12003,
                ( Facing::South, false, Half::Bottom, Shape::InnerLeft, ) => 12004,
                ( Facing::South, true, Half::Bottom, Shape::InnerRight, ) => 12005,
                ( Facing::South, false, Half::Bottom, Shape::InnerRight, ) => 12006,
                ( Facing::South, true, Half::Bottom, Shape::OuterLeft, ) => 12007,
                ( Facing::South, false, Half::Bottom, Shape::OuterLeft, ) => 12008,
                ( Facing::South, true, Half::Bottom, Shape::OuterRight, ) => 12009,
                ( Facing::South, false, Half::Bottom, Shape::OuterRight, ) => 12010,
                ( Facing::West, true, Half::Top, Shape::Straight, ) => 12011,
                ( Facing::West, false, Half::Top, Shape::Straight, ) => 12012,
                ( Facing::West, true, Half::Top, Shape::InnerLeft, ) => 12013,
                ( Facing::West, false, Half::Top, Shape::InnerLeft, ) => 12014,
                ( Facing::West, true, Half::Top, Shape::InnerRight, ) => 12015,
                ( Facing::West, false, Half::Top, Shape::InnerRight, ) => 12016,
                ( Facing::West, true, Half::Top, Shape::OuterLeft, ) => 12017,
                ( Facing::West, false, Half::Top, Shape::OuterLeft, ) => 12018,
                ( Facing::West, true, Half::Top, Shape::OuterRight, ) => 12019,
                ( Facing::West, false, Half::Top, Shape::OuterRight, ) => 12020,
                ( Facing::West, true, Half::Bottom, Shape::Straight, ) => 12021,
                ( Facing::West, false, Half::Bottom, Shape::Straight, ) => 12022,
                ( Facing::West, true, Half::Bottom, Shape::InnerLeft, ) => 12023,
                ( Facing::West, false, Half::Bottom, Shape::InnerLeft, ) => 12024,
                ( Facing::West, true, Half::Bottom, Shape::InnerRight, ) => 12025,
                ( Facing::West, false, Half::Bottom, Shape::InnerRight, ) => 12026,
                ( Facing::West, true, Half::Bottom, Shape::OuterLeft, ) => 12027,
                ( Facing::West, false, Half::Bottom, Shape::OuterLeft, ) => 12028,
                ( Facing::West, true, Half::Bottom, Shape::OuterRight, ) => 12029,
                ( Facing::West, false, Half::Bottom, Shape::OuterRight, ) => 12030,
                ( Facing::East, true, Half::Top, Shape::Straight, ) => 12031,
                ( Facing::East, false, Half::Top, Shape::Straight, ) => 12032,
                ( Facing::East, true, Half::Top, Shape::InnerLeft, ) => 12033,
                ( Facing::East, false, Half::Top, Shape::InnerLeft, ) => 12034,
                ( Facing::East, true, Half::Top, Shape::InnerRight, ) => 12035,
                ( Facing::East, false, Half::Top, Shape::InnerRight, ) => 12036,
                ( Facing::East, true, Half::Top, Shape::OuterLeft, ) => 12037,
                ( Facing::East, false, Half::Top, Shape::OuterLeft, ) => 12038,
                ( Facing::East, true, Half::Top, Shape::OuterRight, ) => 12039,
                ( Facing::East, false, Half::Top, Shape::OuterRight, ) => 12040,
                ( Facing::East, true, Half::Bottom, Shape::Straight, ) => 12041,
                ( Facing::East, false, Half::Bottom, Shape::Straight, ) => 12042,
                ( Facing::East, true, Half::Bottom, Shape::InnerLeft, ) => 12043,
                ( Facing::East, false, Half::Bottom, Shape::InnerLeft, ) => 12044,
                ( Facing::East, true, Half::Bottom, Shape::InnerRight, ) => 12045,
                ( Facing::East, false, Half::Bottom, Shape::InnerRight, ) => 12046,
                ( Facing::East, true, Half::Bottom, Shape::OuterLeft, ) => 12047,
                ( Facing::East, false, Half::Bottom, Shape::OuterLeft, ) => 12048,
                ( Facing::East, true, Half::Bottom, Shape::OuterRight, ) => 12049,
                ( Facing::East, false, Half::Bottom, Shape::OuterRight, ) => 12050,
            })
        }
    }

    impl From<RedSandstoneStairs> for BlockState {
        #[inline(always)]
        fn from(value : RedSandstoneStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedSandstoneStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedSandstoneStairs { }

    impl Block for RedSandstoneStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
            half : Half::Bottom,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:lime_glazed_terracotta` block.
pub mod lime_glazed_terracotta {
    use super::*;

    /// `minecraft:lime_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl LimeGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13707,
                ( Facing::South, ) => 13708,
                ( Facing::West, ) => 13709,
                ( Facing::East, ) => 13710,
            })
        }
    }

    impl From<LimeGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : LimeGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeGlazedTerracotta { }

    impl Block for LimeGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:green_shulker_box` block.
pub mod green_shulker_box {
    use super::*;

    /// `minecraft:green_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl GreenShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13669,
                ( Facing::East, ) => 13670,
                ( Facing::South, ) => 13671,
                ( Facing::West, ) => 13672,
                ( Facing::Up, ) => 13673,
                ( Facing::Down, ) => 13674,
            })
        }
    }

    impl From<GreenShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : GreenShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenShulkerBox { }

    impl Block for GreenShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:pearlescent_froglight` block.
pub mod pearlescent_froglight {
    use super::*;

    /// `minecraft:pearlescent_froglight` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PearlescentFroglight {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl PearlescentFroglight {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 27661,
                ( Axis::Y, ) => 27662,
                ( Axis::Z, ) => 27663,
            })
        }
    }

    impl From<PearlescentFroglight> for BlockState {
        #[inline(always)]
        fn from(value : PearlescentFroglight) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PearlescentFroglight {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PearlescentFroglight { }

    impl Block for PearlescentFroglight {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:basalt` block.
pub mod basalt {
    use super::*;

    /// `minecraft:basalt` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Basalt {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl Basalt {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 6031,
                ( Axis::Y, ) => 6032,
                ( Axis::Z, ) => 6033,
            })
        }
    }

    impl From<Basalt> for BlockState {
        #[inline(always)]
        fn from(value : Basalt) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Basalt {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Basalt { }

    impl Block for Basalt {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:acacia_log` block.
pub mod acacia_log {
    use super::*;

    /// `minecraft:acacia_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl AcaciaLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 148,
                ( Axis::Y, ) => 149,
                ( Axis::Z, ) => 150,
            })
        }
    }

    impl From<AcaciaLog> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaLog { }

    impl Block for AcaciaLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:stripped_mangrove_log` block.
pub mod stripped_mangrove_log {
    use super::*;

    /// `minecraft:stripped_mangrove_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedMangroveLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedMangroveLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 195,
                ( Axis::Y, ) => 196,
                ( Axis::Z, ) => 197,
            })
        }
    }

    impl From<StrippedMangroveLog> for BlockState {
        #[inline(always)]
        fn from(value : StrippedMangroveLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedMangroveLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedMangroveLog { }

    impl Block for StrippedMangroveLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:dark_prismarine_slab` block.
pub mod dark_prismarine_slab {
    use super::*;

    /// `minecraft:dark_prismarine_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkPrismarineSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl DarkPrismarineSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 11607,
                ( false, Kind::Top, ) => 11608,
                ( true, Kind::Bottom, ) => 11609,
                ( false, Kind::Bottom, ) => 11610,
                ( true, Kind::Double, ) => 11611,
                ( false, Kind::Double, ) => 11612,
            })
        }
    }

    impl From<DarkPrismarineSlab> for BlockState {
        #[inline(always)]
        fn from(value : DarkPrismarineSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkPrismarineSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkPrismarineSlab { }

    impl Block for DarkPrismarineSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:skeleton_skull` block.
pub mod skeleton_skull {
    use super::*;

    /// `minecraft:skeleton_skull` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SkeletonSkull {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `powered` state.
        pub powered : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl SkeletonSkull {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.powered, )) {
                ( Rotation::N0, true, ) => 9636,
                ( Rotation::N1, true, ) => 9637,
                ( Rotation::N2, true, ) => 9638,
                ( Rotation::N3, true, ) => 9639,
                ( Rotation::N4, true, ) => 9640,
                ( Rotation::N5, true, ) => 9641,
                ( Rotation::N6, true, ) => 9642,
                ( Rotation::N7, true, ) => 9643,
                ( Rotation::N8, true, ) => 9644,
                ( Rotation::N9, true, ) => 9645,
                ( Rotation::N10, true, ) => 9646,
                ( Rotation::N11, true, ) => 9647,
                ( Rotation::N12, true, ) => 9648,
                ( Rotation::N13, true, ) => 9649,
                ( Rotation::N14, true, ) => 9650,
                ( Rotation::N15, true, ) => 9651,
                ( Rotation::N0, false, ) => 9652,
                ( Rotation::N1, false, ) => 9653,
                ( Rotation::N2, false, ) => 9654,
                ( Rotation::N3, false, ) => 9655,
                ( Rotation::N4, false, ) => 9656,
                ( Rotation::N5, false, ) => 9657,
                ( Rotation::N6, false, ) => 9658,
                ( Rotation::N7, false, ) => 9659,
                ( Rotation::N8, false, ) => 9660,
                ( Rotation::N9, false, ) => 9661,
                ( Rotation::N10, false, ) => 9662,
                ( Rotation::N11, false, ) => 9663,
                ( Rotation::N12, false, ) => 9664,
                ( Rotation::N13, false, ) => 9665,
                ( Rotation::N14, false, ) => 9666,
                ( Rotation::N15, false, ) => 9667,
            })
        }
    }

    impl From<SkeletonSkull> for BlockState {
        #[inline(always)]
        fn from(value : SkeletonSkull) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SkeletonSkull {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SkeletonSkull { }

    impl Block for SkeletonSkull {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            powered : false,
        };
    }

}

/// `minecraft:exposed_copper_trapdoor` block.
pub mod exposed_copper_trapdoor {
    use super::*;

    /// `minecraft:exposed_copper_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ExposedCopperTrapdoor {
        /// `open` state.
        pub open : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `powered` state.
        pub powered : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl ExposedCopperTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.open, self.facing, self.half, self.powered, self.waterlogged, )) {
                ( true, Facing::North, Half::Top, true, true, ) => 25288,
                ( true, Facing::North, Half::Top, true, false, ) => 25289,
                ( true, Facing::North, Half::Top, false, true, ) => 25290,
                ( true, Facing::North, Half::Top, false, false, ) => 25291,
                ( false, Facing::North, Half::Top, true, true, ) => 25292,
                ( false, Facing::North, Half::Top, true, false, ) => 25293,
                ( false, Facing::North, Half::Top, false, true, ) => 25294,
                ( false, Facing::North, Half::Top, false, false, ) => 25295,
                ( true, Facing::North, Half::Bottom, true, true, ) => 25296,
                ( true, Facing::North, Half::Bottom, true, false, ) => 25297,
                ( true, Facing::North, Half::Bottom, false, true, ) => 25298,
                ( true, Facing::North, Half::Bottom, false, false, ) => 25299,
                ( false, Facing::North, Half::Bottom, true, true, ) => 25300,
                ( false, Facing::North, Half::Bottom, true, false, ) => 25301,
                ( false, Facing::North, Half::Bottom, false, true, ) => 25302,
                ( false, Facing::North, Half::Bottom, false, false, ) => 25303,
                ( true, Facing::South, Half::Top, true, true, ) => 25304,
                ( true, Facing::South, Half::Top, true, false, ) => 25305,
                ( true, Facing::South, Half::Top, false, true, ) => 25306,
                ( true, Facing::South, Half::Top, false, false, ) => 25307,
                ( false, Facing::South, Half::Top, true, true, ) => 25308,
                ( false, Facing::South, Half::Top, true, false, ) => 25309,
                ( false, Facing::South, Half::Top, false, true, ) => 25310,
                ( false, Facing::South, Half::Top, false, false, ) => 25311,
                ( true, Facing::South, Half::Bottom, true, true, ) => 25312,
                ( true, Facing::South, Half::Bottom, true, false, ) => 25313,
                ( true, Facing::South, Half::Bottom, false, true, ) => 25314,
                ( true, Facing::South, Half::Bottom, false, false, ) => 25315,
                ( false, Facing::South, Half::Bottom, true, true, ) => 25316,
                ( false, Facing::South, Half::Bottom, true, false, ) => 25317,
                ( false, Facing::South, Half::Bottom, false, true, ) => 25318,
                ( false, Facing::South, Half::Bottom, false, false, ) => 25319,
                ( true, Facing::West, Half::Top, true, true, ) => 25320,
                ( true, Facing::West, Half::Top, true, false, ) => 25321,
                ( true, Facing::West, Half::Top, false, true, ) => 25322,
                ( true, Facing::West, Half::Top, false, false, ) => 25323,
                ( false, Facing::West, Half::Top, true, true, ) => 25324,
                ( false, Facing::West, Half::Top, true, false, ) => 25325,
                ( false, Facing::West, Half::Top, false, true, ) => 25326,
                ( false, Facing::West, Half::Top, false, false, ) => 25327,
                ( true, Facing::West, Half::Bottom, true, true, ) => 25328,
                ( true, Facing::West, Half::Bottom, true, false, ) => 25329,
                ( true, Facing::West, Half::Bottom, false, true, ) => 25330,
                ( true, Facing::West, Half::Bottom, false, false, ) => 25331,
                ( false, Facing::West, Half::Bottom, true, true, ) => 25332,
                ( false, Facing::West, Half::Bottom, true, false, ) => 25333,
                ( false, Facing::West, Half::Bottom, false, true, ) => 25334,
                ( false, Facing::West, Half::Bottom, false, false, ) => 25335,
                ( true, Facing::East, Half::Top, true, true, ) => 25336,
                ( true, Facing::East, Half::Top, true, false, ) => 25337,
                ( true, Facing::East, Half::Top, false, true, ) => 25338,
                ( true, Facing::East, Half::Top, false, false, ) => 25339,
                ( false, Facing::East, Half::Top, true, true, ) => 25340,
                ( false, Facing::East, Half::Top, true, false, ) => 25341,
                ( false, Facing::East, Half::Top, false, true, ) => 25342,
                ( false, Facing::East, Half::Top, false, false, ) => 25343,
                ( true, Facing::East, Half::Bottom, true, true, ) => 25344,
                ( true, Facing::East, Half::Bottom, true, false, ) => 25345,
                ( true, Facing::East, Half::Bottom, false, true, ) => 25346,
                ( true, Facing::East, Half::Bottom, false, false, ) => 25347,
                ( false, Facing::East, Half::Bottom, true, true, ) => 25348,
                ( false, Facing::East, Half::Bottom, true, false, ) => 25349,
                ( false, Facing::East, Half::Bottom, false, true, ) => 25350,
                ( false, Facing::East, Half::Bottom, false, false, ) => 25351,
            })
        }
    }

    impl From<ExposedCopperTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : ExposedCopperTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ExposedCopperTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ExposedCopperTrapdoor { }

    impl Block for ExposedCopperTrapdoor {
        const DEFAULT_STATE : Self = Self {
            open : false,
            facing : Facing::North,
            half : Half::Bottom,
            powered : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:crimson_door` block.
pub mod crimson_door {
    use super::*;

    /// `minecraft:crimson_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonDoor {
        /// `hinge` state.
        pub hinge : Hinge,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
    }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CrimsonDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.hinge, self.half, self.facing, self.open, self.powered, )) {
                ( Hinge::Left, Half::Upper, Facing::North, true, true, ) => 20203,
                ( Hinge::Left, Half::Upper, Facing::North, true, false, ) => 20204,
                ( Hinge::Left, Half::Upper, Facing::North, false, true, ) => 20205,
                ( Hinge::Left, Half::Upper, Facing::North, false, false, ) => 20206,
                ( Hinge::Right, Half::Upper, Facing::North, true, true, ) => 20207,
                ( Hinge::Right, Half::Upper, Facing::North, true, false, ) => 20208,
                ( Hinge::Right, Half::Upper, Facing::North, false, true, ) => 20209,
                ( Hinge::Right, Half::Upper, Facing::North, false, false, ) => 20210,
                ( Hinge::Left, Half::Lower, Facing::North, true, true, ) => 20211,
                ( Hinge::Left, Half::Lower, Facing::North, true, false, ) => 20212,
                ( Hinge::Left, Half::Lower, Facing::North, false, true, ) => 20213,
                ( Hinge::Left, Half::Lower, Facing::North, false, false, ) => 20214,
                ( Hinge::Right, Half::Lower, Facing::North, true, true, ) => 20215,
                ( Hinge::Right, Half::Lower, Facing::North, true, false, ) => 20216,
                ( Hinge::Right, Half::Lower, Facing::North, false, true, ) => 20217,
                ( Hinge::Right, Half::Lower, Facing::North, false, false, ) => 20218,
                ( Hinge::Left, Half::Upper, Facing::South, true, true, ) => 20219,
                ( Hinge::Left, Half::Upper, Facing::South, true, false, ) => 20220,
                ( Hinge::Left, Half::Upper, Facing::South, false, true, ) => 20221,
                ( Hinge::Left, Half::Upper, Facing::South, false, false, ) => 20222,
                ( Hinge::Right, Half::Upper, Facing::South, true, true, ) => 20223,
                ( Hinge::Right, Half::Upper, Facing::South, true, false, ) => 20224,
                ( Hinge::Right, Half::Upper, Facing::South, false, true, ) => 20225,
                ( Hinge::Right, Half::Upper, Facing::South, false, false, ) => 20226,
                ( Hinge::Left, Half::Lower, Facing::South, true, true, ) => 20227,
                ( Hinge::Left, Half::Lower, Facing::South, true, false, ) => 20228,
                ( Hinge::Left, Half::Lower, Facing::South, false, true, ) => 20229,
                ( Hinge::Left, Half::Lower, Facing::South, false, false, ) => 20230,
                ( Hinge::Right, Half::Lower, Facing::South, true, true, ) => 20231,
                ( Hinge::Right, Half::Lower, Facing::South, true, false, ) => 20232,
                ( Hinge::Right, Half::Lower, Facing::South, false, true, ) => 20233,
                ( Hinge::Right, Half::Lower, Facing::South, false, false, ) => 20234,
                ( Hinge::Left, Half::Upper, Facing::West, true, true, ) => 20235,
                ( Hinge::Left, Half::Upper, Facing::West, true, false, ) => 20236,
                ( Hinge::Left, Half::Upper, Facing::West, false, true, ) => 20237,
                ( Hinge::Left, Half::Upper, Facing::West, false, false, ) => 20238,
                ( Hinge::Right, Half::Upper, Facing::West, true, true, ) => 20239,
                ( Hinge::Right, Half::Upper, Facing::West, true, false, ) => 20240,
                ( Hinge::Right, Half::Upper, Facing::West, false, true, ) => 20241,
                ( Hinge::Right, Half::Upper, Facing::West, false, false, ) => 20242,
                ( Hinge::Left, Half::Lower, Facing::West, true, true, ) => 20243,
                ( Hinge::Left, Half::Lower, Facing::West, true, false, ) => 20244,
                ( Hinge::Left, Half::Lower, Facing::West, false, true, ) => 20245,
                ( Hinge::Left, Half::Lower, Facing::West, false, false, ) => 20246,
                ( Hinge::Right, Half::Lower, Facing::West, true, true, ) => 20247,
                ( Hinge::Right, Half::Lower, Facing::West, true, false, ) => 20248,
                ( Hinge::Right, Half::Lower, Facing::West, false, true, ) => 20249,
                ( Hinge::Right, Half::Lower, Facing::West, false, false, ) => 20250,
                ( Hinge::Left, Half::Upper, Facing::East, true, true, ) => 20251,
                ( Hinge::Left, Half::Upper, Facing::East, true, false, ) => 20252,
                ( Hinge::Left, Half::Upper, Facing::East, false, true, ) => 20253,
                ( Hinge::Left, Half::Upper, Facing::East, false, false, ) => 20254,
                ( Hinge::Right, Half::Upper, Facing::East, true, true, ) => 20255,
                ( Hinge::Right, Half::Upper, Facing::East, true, false, ) => 20256,
                ( Hinge::Right, Half::Upper, Facing::East, false, true, ) => 20257,
                ( Hinge::Right, Half::Upper, Facing::East, false, false, ) => 20258,
                ( Hinge::Left, Half::Lower, Facing::East, true, true, ) => 20259,
                ( Hinge::Left, Half::Lower, Facing::East, true, false, ) => 20260,
                ( Hinge::Left, Half::Lower, Facing::East, false, true, ) => 20261,
                ( Hinge::Left, Half::Lower, Facing::East, false, false, ) => 20262,
                ( Hinge::Right, Half::Lower, Facing::East, true, true, ) => 20263,
                ( Hinge::Right, Half::Lower, Facing::East, true, false, ) => 20264,
                ( Hinge::Right, Half::Lower, Facing::East, false, true, ) => 20265,
                ( Hinge::Right, Half::Lower, Facing::East, false, false, ) => 20266,
            })
        }
    }

    impl From<CrimsonDoor> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonDoor { }

    impl Block for CrimsonDoor {
        const DEFAULT_STATE : Self = Self {
            hinge : Hinge::Left,
            half : Half::Lower,
            facing : Facing::North,
            open : false,
            powered : false,
        };
    }

}

/// `minecraft:black_wall_banner` block.
pub mod black_wall_banner {
    use super::*;

    /// `minecraft:black_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BlackWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11964,
                ( Facing::South, ) => 11965,
                ( Facing::West, ) => 11966,
                ( Facing::East, ) => 11967,
            })
        }
    }

    impl From<BlackWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : BlackWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackWallBanner { }

    impl Block for BlackWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:red_sandstone` block.
pub mod red_sandstone {
    use super::*;

    /// `minecraft:red_sandstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedSandstone;

    impl RedSandstone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11968)
        }
    }

    impl From<RedSandstone> for BlockState {
        #[inline(always)]
        fn from(value : RedSandstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedSandstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedSandstone { }

    impl Block for RedSandstone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:quartz_slab` block.
pub mod quartz_slab {
    use super::*;

    /// `minecraft:quartz_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct QuartzSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl QuartzSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 12177,
                ( Kind::Top, false, ) => 12178,
                ( Kind::Bottom, true, ) => 12179,
                ( Kind::Bottom, false, ) => 12180,
                ( Kind::Double, true, ) => 12181,
                ( Kind::Double, false, ) => 12182,
            })
        }
    }

    impl From<QuartzSlab> for BlockState {
        #[inline(always)]
        fn from(value : QuartzSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for QuartzSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for QuartzSlab { }

    impl Block for QuartzSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:repeating_command_block` block.
pub mod repeating_command_block {
    use super::*;

    /// `minecraft:repeating_command_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RepeatingCommandBlock {
        /// `facing` state.
        pub facing : Facing,
        /// `conditional` state.
        pub conditional : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl RepeatingCommandBlock {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.conditional, )) {
                ( Facing::North, true, ) => 13538,
                ( Facing::East, true, ) => 13539,
                ( Facing::South, true, ) => 13540,
                ( Facing::West, true, ) => 13541,
                ( Facing::Up, true, ) => 13542,
                ( Facing::Down, true, ) => 13543,
                ( Facing::North, false, ) => 13544,
                ( Facing::East, false, ) => 13545,
                ( Facing::South, false, ) => 13546,
                ( Facing::West, false, ) => 13547,
                ( Facing::Up, false, ) => 13548,
                ( Facing::Down, false, ) => 13549,
            })
        }
    }

    impl From<RepeatingCommandBlock> for BlockState {
        #[inline(always)]
        fn from(value : RepeatingCommandBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RepeatingCommandBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RepeatingCommandBlock { }

    impl Block for RepeatingCommandBlock {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            conditional : false,
        };
    }

}

/// `minecraft:black_glazed_terracotta` block.
pub mod black_glazed_terracotta {
    use super::*;

    /// `minecraft:black_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BlackGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13747,
                ( Facing::South, ) => 13748,
                ( Facing::West, ) => 13749,
                ( Facing::East, ) => 13750,
            })
        }
    }

    impl From<BlackGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : BlackGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackGlazedTerracotta { }

    impl Block for BlackGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:andesite_slab` block.
pub mod andesite_slab {
    use super::*;

    /// `minecraft:andesite_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AndesiteSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl AndesiteSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 15191,
                ( false, Kind::Top, ) => 15192,
                ( true, Kind::Bottom, ) => 15193,
                ( false, Kind::Bottom, ) => 15194,
                ( true, Kind::Double, ) => 15195,
                ( false, Kind::Double, ) => 15196,
            })
        }
    }

    impl From<AndesiteSlab> for BlockState {
        #[inline(always)]
        fn from(value : AndesiteSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AndesiteSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AndesiteSlab { }

    impl Block for AndesiteSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:gray_concrete_powder` block.
pub mod gray_concrete_powder {
    use super::*;

    /// `minecraft:gray_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayConcretePowder;

    impl GrayConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13774)
        }
    }

    impl From<GrayConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : GrayConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayConcretePowder { }

    impl Block for GrayConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:oak_trapdoor` block.
pub mod oak_trapdoor {
    use super::*;

    /// `minecraft:oak_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakTrapdoor {
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl OakTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.half, self.open, self.powered, self.waterlogged, )) {
                ( Facing::North, Half::Top, true, true, true, ) => 6140,
                ( Facing::North, Half::Top, true, true, false, ) => 6141,
                ( Facing::North, Half::Top, true, false, true, ) => 6142,
                ( Facing::North, Half::Top, true, false, false, ) => 6143,
                ( Facing::North, Half::Top, false, true, true, ) => 6144,
                ( Facing::North, Half::Top, false, true, false, ) => 6145,
                ( Facing::North, Half::Top, false, false, true, ) => 6146,
                ( Facing::North, Half::Top, false, false, false, ) => 6147,
                ( Facing::North, Half::Bottom, true, true, true, ) => 6148,
                ( Facing::North, Half::Bottom, true, true, false, ) => 6149,
                ( Facing::North, Half::Bottom, true, false, true, ) => 6150,
                ( Facing::North, Half::Bottom, true, false, false, ) => 6151,
                ( Facing::North, Half::Bottom, false, true, true, ) => 6152,
                ( Facing::North, Half::Bottom, false, true, false, ) => 6153,
                ( Facing::North, Half::Bottom, false, false, true, ) => 6154,
                ( Facing::North, Half::Bottom, false, false, false, ) => 6155,
                ( Facing::South, Half::Top, true, true, true, ) => 6156,
                ( Facing::South, Half::Top, true, true, false, ) => 6157,
                ( Facing::South, Half::Top, true, false, true, ) => 6158,
                ( Facing::South, Half::Top, true, false, false, ) => 6159,
                ( Facing::South, Half::Top, false, true, true, ) => 6160,
                ( Facing::South, Half::Top, false, true, false, ) => 6161,
                ( Facing::South, Half::Top, false, false, true, ) => 6162,
                ( Facing::South, Half::Top, false, false, false, ) => 6163,
                ( Facing::South, Half::Bottom, true, true, true, ) => 6164,
                ( Facing::South, Half::Bottom, true, true, false, ) => 6165,
                ( Facing::South, Half::Bottom, true, false, true, ) => 6166,
                ( Facing::South, Half::Bottom, true, false, false, ) => 6167,
                ( Facing::South, Half::Bottom, false, true, true, ) => 6168,
                ( Facing::South, Half::Bottom, false, true, false, ) => 6169,
                ( Facing::South, Half::Bottom, false, false, true, ) => 6170,
                ( Facing::South, Half::Bottom, false, false, false, ) => 6171,
                ( Facing::West, Half::Top, true, true, true, ) => 6172,
                ( Facing::West, Half::Top, true, true, false, ) => 6173,
                ( Facing::West, Half::Top, true, false, true, ) => 6174,
                ( Facing::West, Half::Top, true, false, false, ) => 6175,
                ( Facing::West, Half::Top, false, true, true, ) => 6176,
                ( Facing::West, Half::Top, false, true, false, ) => 6177,
                ( Facing::West, Half::Top, false, false, true, ) => 6178,
                ( Facing::West, Half::Top, false, false, false, ) => 6179,
                ( Facing::West, Half::Bottom, true, true, true, ) => 6180,
                ( Facing::West, Half::Bottom, true, true, false, ) => 6181,
                ( Facing::West, Half::Bottom, true, false, true, ) => 6182,
                ( Facing::West, Half::Bottom, true, false, false, ) => 6183,
                ( Facing::West, Half::Bottom, false, true, true, ) => 6184,
                ( Facing::West, Half::Bottom, false, true, false, ) => 6185,
                ( Facing::West, Half::Bottom, false, false, true, ) => 6186,
                ( Facing::West, Half::Bottom, false, false, false, ) => 6187,
                ( Facing::East, Half::Top, true, true, true, ) => 6188,
                ( Facing::East, Half::Top, true, true, false, ) => 6189,
                ( Facing::East, Half::Top, true, false, true, ) => 6190,
                ( Facing::East, Half::Top, true, false, false, ) => 6191,
                ( Facing::East, Half::Top, false, true, true, ) => 6192,
                ( Facing::East, Half::Top, false, true, false, ) => 6193,
                ( Facing::East, Half::Top, false, false, true, ) => 6194,
                ( Facing::East, Half::Top, false, false, false, ) => 6195,
                ( Facing::East, Half::Bottom, true, true, true, ) => 6196,
                ( Facing::East, Half::Bottom, true, true, false, ) => 6197,
                ( Facing::East, Half::Bottom, true, false, true, ) => 6198,
                ( Facing::East, Half::Bottom, true, false, false, ) => 6199,
                ( Facing::East, Half::Bottom, false, true, true, ) => 6200,
                ( Facing::East, Half::Bottom, false, true, false, ) => 6201,
                ( Facing::East, Half::Bottom, false, false, true, ) => 6202,
                ( Facing::East, Half::Bottom, false, false, false, ) => 6203,
            })
        }
    }

    impl From<OakTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : OakTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakTrapdoor { }

    impl Block for OakTrapdoor {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            half : Half::Bottom,
            open : false,
            powered : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:pale_oak_log` block.
pub mod pale_oak_log {
    use super::*;

    /// `minecraft:pale_oak_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl PaleOakLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 157,
                ( Axis::Y, ) => 158,
                ( Axis::Z, ) => 159,
            })
        }
    }

    impl From<PaleOakLog> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakLog { }

    impl Block for PaleOakLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:sculk_shrieker` block.
pub mod sculk_shrieker {
    use super::*;

    /// `minecraft:sculk_shrieker` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SculkShrieker {
        /// `can_summon` state.
        pub can_summon : bool,
        /// `shrieking` state.
        pub shrieking : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl SculkShrieker {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.can_summon, self.shrieking, self.waterlogged, )) {
                ( true, true, true, ) => 23990,
                ( true, true, false, ) => 23991,
                ( true, false, true, ) => 23992,
                ( true, false, false, ) => 23993,
                ( false, true, true, ) => 23994,
                ( false, true, false, ) => 23995,
                ( false, false, true, ) => 23996,
                ( false, false, false, ) => 23997,
            })
        }
    }

    impl From<SculkShrieker> for BlockState {
        #[inline(always)]
        fn from(value : SculkShrieker) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SculkShrieker {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SculkShrieker { }

    impl Block for SculkShrieker {
        const DEFAULT_STATE : Self = Self {
            can_summon : false,
            shrieking : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:spruce_pressure_plate` block.
pub mod spruce_pressure_plate {
    use super::*;

    /// `minecraft:spruce_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SprucePressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl SprucePressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 5894,
                ( false, ) => 5895,
            })
        }
    }

    impl From<SprucePressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : SprucePressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SprucePressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SprucePressurePlate { }

    impl Block for SprucePressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:stripped_oak_wood` block.
pub mod stripped_oak_wood {
    use super::*;

    /// `minecraft:stripped_oak_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedOakWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedOakWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 225,
                ( Axis::Y, ) => 226,
                ( Axis::Z, ) => 227,
            })
        }
    }

    impl From<StrippedOakWood> for BlockState {
        #[inline(always)]
        fn from(value : StrippedOakWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedOakWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedOakWood { }

    impl Block for StrippedOakWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:bamboo` block.
pub mod bamboo {
    use super::*;

    /// `minecraft:bamboo` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Bamboo {
        /// `leaves` state.
        pub leaves : Leaves,
        /// `age` state.
        pub age : Age,
        /// `stage` state.
        pub stage : Stage,
    }

    /// `leaves` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Leaves {
        /// `none` variant.
        None,
        /// `small` variant.
        Small,
        /// `large` variant.
        Large,
    }
    impl crate::Sealed for Leaves { }
    impl BlockProperty for Leaves { }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    /// `stage` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Stage {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
    }
    impl crate::Sealed for Stage { }
    impl BlockProperty for Stage { }

    impl Bamboo {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.leaves, self.age, self.stage, )) {
                ( Leaves::None, Age::N0, Stage::N0, ) => 14000,
                ( Leaves::None, Age::N0, Stage::N1, ) => 14001,
                ( Leaves::Small, Age::N0, Stage::N0, ) => 14002,
                ( Leaves::Small, Age::N0, Stage::N1, ) => 14003,
                ( Leaves::Large, Age::N0, Stage::N0, ) => 14004,
                ( Leaves::Large, Age::N0, Stage::N1, ) => 14005,
                ( Leaves::None, Age::N1, Stage::N0, ) => 14006,
                ( Leaves::None, Age::N1, Stage::N1, ) => 14007,
                ( Leaves::Small, Age::N1, Stage::N0, ) => 14008,
                ( Leaves::Small, Age::N1, Stage::N1, ) => 14009,
                ( Leaves::Large, Age::N1, Stage::N0, ) => 14010,
                ( Leaves::Large, Age::N1, Stage::N1, ) => 14011,
            })
        }
    }

    impl From<Bamboo> for BlockState {
        #[inline(always)]
        fn from(value : Bamboo) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Bamboo {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Bamboo { }

    impl Block for Bamboo {
        const DEFAULT_STATE : Self = Self {
            leaves : Leaves::None,
            age : Age::N0,
            stage : Stage::N0,
        };
    }

}

/// `minecraft:cut_sandstone` block.
pub mod cut_sandstone {
    use super::*;

    /// `minecraft:cut_sandstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CutSandstone;

    impl CutSandstone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(580)
        }
    }

    impl From<CutSandstone> for BlockState {
        #[inline(always)]
        fn from(value : CutSandstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CutSandstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CutSandstone { }

    impl Block for CutSandstone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dead_bubble_coral` block.
pub mod dead_bubble_coral {
    use super::*;

    /// `minecraft:dead_bubble_coral` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadBubbleCoral {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl DeadBubbleCoral {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13872,
                ( false, ) => 13873,
            })
        }
    }

    impl From<DeadBubbleCoral> for BlockState {
        #[inline(always)]
        fn from(value : DeadBubbleCoral) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadBubbleCoral {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadBubbleCoral { }

    impl Block for DeadBubbleCoral {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:dead_bubble_coral_block` block.
pub mod dead_bubble_coral_block {
    use super::*;

    /// `minecraft:dead_bubble_coral_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadBubbleCoralBlock;

    impl DeadBubbleCoralBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13860)
        }
    }

    impl From<DeadBubbleCoralBlock> for BlockState {
        #[inline(always)]
        fn from(value : DeadBubbleCoralBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadBubbleCoralBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadBubbleCoralBlock { }

    impl Block for DeadBubbleCoralBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:nether_brick_stairs` block.
pub mod nether_brick_stairs {
    use super::*;

    /// `minecraft:nether_brick_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct NetherBrickStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl NetherBrickStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.half, self.waterlogged, self.shape, )) {
                ( Facing::North, Half::Top, true, Shape::Straight, ) => 8089,
                ( Facing::North, Half::Top, false, Shape::Straight, ) => 8090,
                ( Facing::North, Half::Top, true, Shape::InnerLeft, ) => 8091,
                ( Facing::North, Half::Top, false, Shape::InnerLeft, ) => 8092,
                ( Facing::North, Half::Top, true, Shape::InnerRight, ) => 8093,
                ( Facing::North, Half::Top, false, Shape::InnerRight, ) => 8094,
                ( Facing::North, Half::Top, true, Shape::OuterLeft, ) => 8095,
                ( Facing::North, Half::Top, false, Shape::OuterLeft, ) => 8096,
                ( Facing::North, Half::Top, true, Shape::OuterRight, ) => 8097,
                ( Facing::North, Half::Top, false, Shape::OuterRight, ) => 8098,
                ( Facing::North, Half::Bottom, true, Shape::Straight, ) => 8099,
                ( Facing::North, Half::Bottom, false, Shape::Straight, ) => 8100,
                ( Facing::North, Half::Bottom, true, Shape::InnerLeft, ) => 8101,
                ( Facing::North, Half::Bottom, false, Shape::InnerLeft, ) => 8102,
                ( Facing::North, Half::Bottom, true, Shape::InnerRight, ) => 8103,
                ( Facing::North, Half::Bottom, false, Shape::InnerRight, ) => 8104,
                ( Facing::North, Half::Bottom, true, Shape::OuterLeft, ) => 8105,
                ( Facing::North, Half::Bottom, false, Shape::OuterLeft, ) => 8106,
                ( Facing::North, Half::Bottom, true, Shape::OuterRight, ) => 8107,
                ( Facing::North, Half::Bottom, false, Shape::OuterRight, ) => 8108,
                ( Facing::South, Half::Top, true, Shape::Straight, ) => 8109,
                ( Facing::South, Half::Top, false, Shape::Straight, ) => 8110,
                ( Facing::South, Half::Top, true, Shape::InnerLeft, ) => 8111,
                ( Facing::South, Half::Top, false, Shape::InnerLeft, ) => 8112,
                ( Facing::South, Half::Top, true, Shape::InnerRight, ) => 8113,
                ( Facing::South, Half::Top, false, Shape::InnerRight, ) => 8114,
                ( Facing::South, Half::Top, true, Shape::OuterLeft, ) => 8115,
                ( Facing::South, Half::Top, false, Shape::OuterLeft, ) => 8116,
                ( Facing::South, Half::Top, true, Shape::OuterRight, ) => 8117,
                ( Facing::South, Half::Top, false, Shape::OuterRight, ) => 8118,
                ( Facing::South, Half::Bottom, true, Shape::Straight, ) => 8119,
                ( Facing::South, Half::Bottom, false, Shape::Straight, ) => 8120,
                ( Facing::South, Half::Bottom, true, Shape::InnerLeft, ) => 8121,
                ( Facing::South, Half::Bottom, false, Shape::InnerLeft, ) => 8122,
                ( Facing::South, Half::Bottom, true, Shape::InnerRight, ) => 8123,
                ( Facing::South, Half::Bottom, false, Shape::InnerRight, ) => 8124,
                ( Facing::South, Half::Bottom, true, Shape::OuterLeft, ) => 8125,
                ( Facing::South, Half::Bottom, false, Shape::OuterLeft, ) => 8126,
                ( Facing::South, Half::Bottom, true, Shape::OuterRight, ) => 8127,
                ( Facing::South, Half::Bottom, false, Shape::OuterRight, ) => 8128,
                ( Facing::West, Half::Top, true, Shape::Straight, ) => 8129,
                ( Facing::West, Half::Top, false, Shape::Straight, ) => 8130,
                ( Facing::West, Half::Top, true, Shape::InnerLeft, ) => 8131,
                ( Facing::West, Half::Top, false, Shape::InnerLeft, ) => 8132,
                ( Facing::West, Half::Top, true, Shape::InnerRight, ) => 8133,
                ( Facing::West, Half::Top, false, Shape::InnerRight, ) => 8134,
                ( Facing::West, Half::Top, true, Shape::OuterLeft, ) => 8135,
                ( Facing::West, Half::Top, false, Shape::OuterLeft, ) => 8136,
                ( Facing::West, Half::Top, true, Shape::OuterRight, ) => 8137,
                ( Facing::West, Half::Top, false, Shape::OuterRight, ) => 8138,
                ( Facing::West, Half::Bottom, true, Shape::Straight, ) => 8139,
                ( Facing::West, Half::Bottom, false, Shape::Straight, ) => 8140,
                ( Facing::West, Half::Bottom, true, Shape::InnerLeft, ) => 8141,
                ( Facing::West, Half::Bottom, false, Shape::InnerLeft, ) => 8142,
                ( Facing::West, Half::Bottom, true, Shape::InnerRight, ) => 8143,
                ( Facing::West, Half::Bottom, false, Shape::InnerRight, ) => 8144,
                ( Facing::West, Half::Bottom, true, Shape::OuterLeft, ) => 8145,
                ( Facing::West, Half::Bottom, false, Shape::OuterLeft, ) => 8146,
                ( Facing::West, Half::Bottom, true, Shape::OuterRight, ) => 8147,
                ( Facing::West, Half::Bottom, false, Shape::OuterRight, ) => 8148,
                ( Facing::East, Half::Top, true, Shape::Straight, ) => 8149,
                ( Facing::East, Half::Top, false, Shape::Straight, ) => 8150,
                ( Facing::East, Half::Top, true, Shape::InnerLeft, ) => 8151,
                ( Facing::East, Half::Top, false, Shape::InnerLeft, ) => 8152,
                ( Facing::East, Half::Top, true, Shape::InnerRight, ) => 8153,
                ( Facing::East, Half::Top, false, Shape::InnerRight, ) => 8154,
                ( Facing::East, Half::Top, true, Shape::OuterLeft, ) => 8155,
                ( Facing::East, Half::Top, false, Shape::OuterLeft, ) => 8156,
                ( Facing::East, Half::Top, true, Shape::OuterRight, ) => 8157,
                ( Facing::East, Half::Top, false, Shape::OuterRight, ) => 8158,
                ( Facing::East, Half::Bottom, true, Shape::Straight, ) => 8159,
                ( Facing::East, Half::Bottom, false, Shape::Straight, ) => 8160,
                ( Facing::East, Half::Bottom, true, Shape::InnerLeft, ) => 8161,
                ( Facing::East, Half::Bottom, false, Shape::InnerLeft, ) => 8162,
                ( Facing::East, Half::Bottom, true, Shape::InnerRight, ) => 8163,
                ( Facing::East, Half::Bottom, false, Shape::InnerRight, ) => 8164,
                ( Facing::East, Half::Bottom, true, Shape::OuterLeft, ) => 8165,
                ( Facing::East, Half::Bottom, false, Shape::OuterLeft, ) => 8166,
                ( Facing::East, Half::Bottom, true, Shape::OuterRight, ) => 8167,
                ( Facing::East, Half::Bottom, false, Shape::OuterRight, ) => 8168,
            })
        }
    }

    impl From<NetherBrickStairs> for BlockState {
        #[inline(always)]
        fn from(value : NetherBrickStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for NetherBrickStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for NetherBrickStairs { }

    impl Block for NetherBrickStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            half : Half::Bottom,
            waterlogged : false,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:cut_red_sandstone` block.
pub mod cut_red_sandstone {
    use super::*;

    /// `minecraft:cut_red_sandstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CutRedSandstone;

    impl CutRedSandstone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11970)
        }
    }

    impl From<CutRedSandstone> for BlockState {
        #[inline(always)]
        fn from(value : CutRedSandstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CutRedSandstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CutRedSandstone { }

    impl Block for CutRedSandstone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:flowering_azalea_leaves` block.
pub mod flowering_azalea_leaves {
    use super::*;

    /// `minecraft:flowering_azalea_leaves` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct FloweringAzaleaLeaves {
        /// `distance` state.
        pub distance : Distance,
        /// `persistent` state.
        pub persistent : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `distance` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Distance {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Distance { }
    impl BlockProperty for Distance { }

    impl FloweringAzaleaLeaves {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.distance, self.persistent, self.waterlogged, )) {
                ( Distance::N1, true, true, ) => 532,
                ( Distance::N1, true, false, ) => 533,
                ( Distance::N1, false, true, ) => 534,
                ( Distance::N1, false, false, ) => 535,
                ( Distance::N2, true, true, ) => 536,
                ( Distance::N2, true, false, ) => 537,
                ( Distance::N2, false, true, ) => 538,
                ( Distance::N2, false, false, ) => 539,
                ( Distance::N3, true, true, ) => 540,
                ( Distance::N3, true, false, ) => 541,
                ( Distance::N3, false, true, ) => 542,
                ( Distance::N3, false, false, ) => 543,
                ( Distance::N4, true, true, ) => 544,
                ( Distance::N4, true, false, ) => 545,
                ( Distance::N4, false, true, ) => 546,
                ( Distance::N4, false, false, ) => 547,
                ( Distance::N5, true, true, ) => 548,
                ( Distance::N5, true, false, ) => 549,
                ( Distance::N5, false, true, ) => 550,
                ( Distance::N5, false, false, ) => 551,
                ( Distance::N6, true, true, ) => 552,
                ( Distance::N6, true, false, ) => 553,
                ( Distance::N6, false, true, ) => 554,
                ( Distance::N6, false, false, ) => 555,
                ( Distance::N7, true, true, ) => 556,
                ( Distance::N7, true, false, ) => 557,
                ( Distance::N7, false, true, ) => 558,
                ( Distance::N7, false, false, ) => 559,
            })
        }
    }

    impl From<FloweringAzaleaLeaves> for BlockState {
        #[inline(always)]
        fn from(value : FloweringAzaleaLeaves) -> Self {
            value.to_block_state()
        }
    }

    impl Default for FloweringAzaleaLeaves {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for FloweringAzaleaLeaves { }

    impl Block for FloweringAzaleaLeaves {
        const DEFAULT_STATE : Self = Self {
            distance : Distance::N7,
            persistent : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:brown_concrete_powder` block.
pub mod brown_concrete_powder {
    use super::*;

    /// `minecraft:brown_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownConcretePowder;

    impl BrownConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13779)
        }
    }

    impl From<BrownConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : BrownConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownConcretePowder { }

    impl Block for BrownConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cave_vines` block.
pub mod cave_vines {
    use super::*;

    /// `minecraft:cave_vines` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CaveVines {
        /// `berries` state.
        pub berries : bool,
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
        /// `16` variant.
        N16,
        /// `17` variant.
        N17,
        /// `18` variant.
        N18,
        /// `19` variant.
        N19,
        /// `20` variant.
        N20,
        /// `21` variant.
        N21,
        /// `22` variant.
        N22,
        /// `23` variant.
        N23,
        /// `24` variant.
        N24,
        /// `25` variant.
        N25,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl CaveVines {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.berries, self.age, )) {
                ( true, Age::N0, ) => 25829,
                ( false, Age::N0, ) => 25830,
                ( true, Age::N1, ) => 25831,
                ( false, Age::N1, ) => 25832,
                ( true, Age::N2, ) => 25833,
                ( false, Age::N2, ) => 25834,
                ( true, Age::N3, ) => 25835,
                ( false, Age::N3, ) => 25836,
                ( true, Age::N4, ) => 25837,
                ( false, Age::N4, ) => 25838,
                ( true, Age::N5, ) => 25839,
                ( false, Age::N5, ) => 25840,
                ( true, Age::N6, ) => 25841,
                ( false, Age::N6, ) => 25842,
                ( true, Age::N7, ) => 25843,
                ( false, Age::N7, ) => 25844,
                ( true, Age::N8, ) => 25845,
                ( false, Age::N8, ) => 25846,
                ( true, Age::N9, ) => 25847,
                ( false, Age::N9, ) => 25848,
                ( true, Age::N10, ) => 25849,
                ( false, Age::N10, ) => 25850,
                ( true, Age::N11, ) => 25851,
                ( false, Age::N11, ) => 25852,
                ( true, Age::N12, ) => 25853,
                ( false, Age::N12, ) => 25854,
                ( true, Age::N13, ) => 25855,
                ( false, Age::N13, ) => 25856,
                ( true, Age::N14, ) => 25857,
                ( false, Age::N14, ) => 25858,
                ( true, Age::N15, ) => 25859,
                ( false, Age::N15, ) => 25860,
                ( true, Age::N16, ) => 25861,
                ( false, Age::N16, ) => 25862,
                ( true, Age::N17, ) => 25863,
                ( false, Age::N17, ) => 25864,
                ( true, Age::N18, ) => 25865,
                ( false, Age::N18, ) => 25866,
                ( true, Age::N19, ) => 25867,
                ( false, Age::N19, ) => 25868,
                ( true, Age::N20, ) => 25869,
                ( false, Age::N20, ) => 25870,
                ( true, Age::N21, ) => 25871,
                ( false, Age::N21, ) => 25872,
                ( true, Age::N22, ) => 25873,
                ( false, Age::N22, ) => 25874,
                ( true, Age::N23, ) => 25875,
                ( false, Age::N23, ) => 25876,
                ( true, Age::N24, ) => 25877,
                ( false, Age::N24, ) => 25878,
                ( true, Age::N25, ) => 25879,
                ( false, Age::N25, ) => 25880,
            })
        }
    }

    impl From<CaveVines> for BlockState {
        #[inline(always)]
        fn from(value : CaveVines) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CaveVines {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CaveVines { }

    impl Block for CaveVines {
        const DEFAULT_STATE : Self = Self {
            berries : false,
            age : Age::N0,
        };
    }

}

/// `minecraft:infested_deepslate` block.
pub mod infested_deepslate {
    use super::*;

    /// `minecraft:infested_deepslate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct InfestedDeepslate {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl InfestedDeepslate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 27646,
                ( Axis::Y, ) => 27647,
                ( Axis::Z, ) => 27648,
            })
        }
    }

    impl From<InfestedDeepslate> for BlockState {
        #[inline(always)]
        fn from(value : InfestedDeepslate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for InfestedDeepslate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for InfestedDeepslate { }

    impl Block for InfestedDeepslate {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:birch_door` block.
pub mod birch_door {
    use super::*;

    /// `minecraft:birch_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchDoor {
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `powered` state.
        pub powered : bool,
        /// `hinge` state.
        pub hinge : Hinge,
        /// `open` state.
        pub open : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    impl BirchDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.half, self.powered, self.hinge, self.open, )) {
                ( Facing::North, Half::Upper, true, Hinge::Left, true, ) => 12845,
                ( Facing::North, Half::Upper, false, Hinge::Left, true, ) => 12846,
                ( Facing::North, Half::Upper, true, Hinge::Left, false, ) => 12847,
                ( Facing::North, Half::Upper, false, Hinge::Left, false, ) => 12848,
                ( Facing::North, Half::Upper, true, Hinge::Right, true, ) => 12849,
                ( Facing::North, Half::Upper, false, Hinge::Right, true, ) => 12850,
                ( Facing::North, Half::Upper, true, Hinge::Right, false, ) => 12851,
                ( Facing::North, Half::Upper, false, Hinge::Right, false, ) => 12852,
                ( Facing::North, Half::Lower, true, Hinge::Left, true, ) => 12853,
                ( Facing::North, Half::Lower, false, Hinge::Left, true, ) => 12854,
                ( Facing::North, Half::Lower, true, Hinge::Left, false, ) => 12855,
                ( Facing::North, Half::Lower, false, Hinge::Left, false, ) => 12856,
                ( Facing::North, Half::Lower, true, Hinge::Right, true, ) => 12857,
                ( Facing::North, Half::Lower, false, Hinge::Right, true, ) => 12858,
                ( Facing::North, Half::Lower, true, Hinge::Right, false, ) => 12859,
                ( Facing::North, Half::Lower, false, Hinge::Right, false, ) => 12860,
                ( Facing::South, Half::Upper, true, Hinge::Left, true, ) => 12861,
                ( Facing::South, Half::Upper, false, Hinge::Left, true, ) => 12862,
                ( Facing::South, Half::Upper, true, Hinge::Left, false, ) => 12863,
                ( Facing::South, Half::Upper, false, Hinge::Left, false, ) => 12864,
                ( Facing::South, Half::Upper, true, Hinge::Right, true, ) => 12865,
                ( Facing::South, Half::Upper, false, Hinge::Right, true, ) => 12866,
                ( Facing::South, Half::Upper, true, Hinge::Right, false, ) => 12867,
                ( Facing::South, Half::Upper, false, Hinge::Right, false, ) => 12868,
                ( Facing::South, Half::Lower, true, Hinge::Left, true, ) => 12869,
                ( Facing::South, Half::Lower, false, Hinge::Left, true, ) => 12870,
                ( Facing::South, Half::Lower, true, Hinge::Left, false, ) => 12871,
                ( Facing::South, Half::Lower, false, Hinge::Left, false, ) => 12872,
                ( Facing::South, Half::Lower, true, Hinge::Right, true, ) => 12873,
                ( Facing::South, Half::Lower, false, Hinge::Right, true, ) => 12874,
                ( Facing::South, Half::Lower, true, Hinge::Right, false, ) => 12875,
                ( Facing::South, Half::Lower, false, Hinge::Right, false, ) => 12876,
                ( Facing::West, Half::Upper, true, Hinge::Left, true, ) => 12877,
                ( Facing::West, Half::Upper, false, Hinge::Left, true, ) => 12878,
                ( Facing::West, Half::Upper, true, Hinge::Left, false, ) => 12879,
                ( Facing::West, Half::Upper, false, Hinge::Left, false, ) => 12880,
                ( Facing::West, Half::Upper, true, Hinge::Right, true, ) => 12881,
                ( Facing::West, Half::Upper, false, Hinge::Right, true, ) => 12882,
                ( Facing::West, Half::Upper, true, Hinge::Right, false, ) => 12883,
                ( Facing::West, Half::Upper, false, Hinge::Right, false, ) => 12884,
                ( Facing::West, Half::Lower, true, Hinge::Left, true, ) => 12885,
                ( Facing::West, Half::Lower, false, Hinge::Left, true, ) => 12886,
                ( Facing::West, Half::Lower, true, Hinge::Left, false, ) => 12887,
                ( Facing::West, Half::Lower, false, Hinge::Left, false, ) => 12888,
                ( Facing::West, Half::Lower, true, Hinge::Right, true, ) => 12889,
                ( Facing::West, Half::Lower, false, Hinge::Right, true, ) => 12890,
                ( Facing::West, Half::Lower, true, Hinge::Right, false, ) => 12891,
                ( Facing::West, Half::Lower, false, Hinge::Right, false, ) => 12892,
                ( Facing::East, Half::Upper, true, Hinge::Left, true, ) => 12893,
                ( Facing::East, Half::Upper, false, Hinge::Left, true, ) => 12894,
                ( Facing::East, Half::Upper, true, Hinge::Left, false, ) => 12895,
                ( Facing::East, Half::Upper, false, Hinge::Left, false, ) => 12896,
                ( Facing::East, Half::Upper, true, Hinge::Right, true, ) => 12897,
                ( Facing::East, Half::Upper, false, Hinge::Right, true, ) => 12898,
                ( Facing::East, Half::Upper, true, Hinge::Right, false, ) => 12899,
                ( Facing::East, Half::Upper, false, Hinge::Right, false, ) => 12900,
                ( Facing::East, Half::Lower, true, Hinge::Left, true, ) => 12901,
                ( Facing::East, Half::Lower, false, Hinge::Left, true, ) => 12902,
                ( Facing::East, Half::Lower, true, Hinge::Left, false, ) => 12903,
                ( Facing::East, Half::Lower, false, Hinge::Left, false, ) => 12904,
                ( Facing::East, Half::Lower, true, Hinge::Right, true, ) => 12905,
                ( Facing::East, Half::Lower, false, Hinge::Right, true, ) => 12906,
                ( Facing::East, Half::Lower, true, Hinge::Right, false, ) => 12907,
                ( Facing::East, Half::Lower, false, Hinge::Right, false, ) => 12908,
            })
        }
    }

    impl From<BirchDoor> for BlockState {
        #[inline(always)]
        fn from(value : BirchDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchDoor { }

    impl Block for BirchDoor {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            half : Half::Lower,
            powered : false,
            hinge : Hinge::Left,
            open : false,
        };
    }

}

/// `minecraft:stripped_dark_oak_wood` block.
pub mod stripped_dark_oak_wood {
    use super::*;

    /// `minecraft:stripped_dark_oak_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedDarkOakWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedDarkOakWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 243,
                ( Axis::Y, ) => 244,
                ( Axis::Z, ) => 245,
            })
        }
    }

    impl From<StrippedDarkOakWood> for BlockState {
        #[inline(always)]
        fn from(value : StrippedDarkOakWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedDarkOakWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedDarkOakWood { }

    impl Block for StrippedDarkOakWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:stripped_pale_oak_log` block.
pub mod stripped_pale_oak_log {
    use super::*;

    /// `minecraft:stripped_pale_oak_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedPaleOakLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedPaleOakLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 189,
                ( Axis::Y, ) => 190,
                ( Axis::Z, ) => 191,
            })
        }
    }

    impl From<StrippedPaleOakLog> for BlockState {
        #[inline(always)]
        fn from(value : StrippedPaleOakLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedPaleOakLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedPaleOakLog { }

    impl Block for StrippedPaleOakLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:oak_door` block.
pub mod oak_door {
    use super::*;

    /// `minecraft:oak_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakDoor {
        /// `facing` state.
        pub facing : Facing,
        /// `open` state.
        pub open : bool,
        /// `hinge` state.
        pub hinge : Hinge,
        /// `half` state.
        pub half : Half,
        /// `powered` state.
        pub powered : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl OakDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.open, self.hinge, self.half, self.powered, )) {
                ( Facing::North, true, Hinge::Left, Half::Upper, true, ) => 4686,
                ( Facing::North, true, Hinge::Left, Half::Upper, false, ) => 4687,
                ( Facing::North, false, Hinge::Left, Half::Upper, true, ) => 4688,
                ( Facing::North, false, Hinge::Left, Half::Upper, false, ) => 4689,
                ( Facing::North, true, Hinge::Right, Half::Upper, true, ) => 4690,
                ( Facing::North, true, Hinge::Right, Half::Upper, false, ) => 4691,
                ( Facing::North, false, Hinge::Right, Half::Upper, true, ) => 4692,
                ( Facing::North, false, Hinge::Right, Half::Upper, false, ) => 4693,
                ( Facing::North, true, Hinge::Left, Half::Lower, true, ) => 4694,
                ( Facing::North, true, Hinge::Left, Half::Lower, false, ) => 4695,
                ( Facing::North, false, Hinge::Left, Half::Lower, true, ) => 4696,
                ( Facing::North, false, Hinge::Left, Half::Lower, false, ) => 4697,
                ( Facing::North, true, Hinge::Right, Half::Lower, true, ) => 4698,
                ( Facing::North, true, Hinge::Right, Half::Lower, false, ) => 4699,
                ( Facing::North, false, Hinge::Right, Half::Lower, true, ) => 4700,
                ( Facing::North, false, Hinge::Right, Half::Lower, false, ) => 4701,
                ( Facing::South, true, Hinge::Left, Half::Upper, true, ) => 4702,
                ( Facing::South, true, Hinge::Left, Half::Upper, false, ) => 4703,
                ( Facing::South, false, Hinge::Left, Half::Upper, true, ) => 4704,
                ( Facing::South, false, Hinge::Left, Half::Upper, false, ) => 4705,
                ( Facing::South, true, Hinge::Right, Half::Upper, true, ) => 4706,
                ( Facing::South, true, Hinge::Right, Half::Upper, false, ) => 4707,
                ( Facing::South, false, Hinge::Right, Half::Upper, true, ) => 4708,
                ( Facing::South, false, Hinge::Right, Half::Upper, false, ) => 4709,
                ( Facing::South, true, Hinge::Left, Half::Lower, true, ) => 4710,
                ( Facing::South, true, Hinge::Left, Half::Lower, false, ) => 4711,
                ( Facing::South, false, Hinge::Left, Half::Lower, true, ) => 4712,
                ( Facing::South, false, Hinge::Left, Half::Lower, false, ) => 4713,
                ( Facing::South, true, Hinge::Right, Half::Lower, true, ) => 4714,
                ( Facing::South, true, Hinge::Right, Half::Lower, false, ) => 4715,
                ( Facing::South, false, Hinge::Right, Half::Lower, true, ) => 4716,
                ( Facing::South, false, Hinge::Right, Half::Lower, false, ) => 4717,
                ( Facing::West, true, Hinge::Left, Half::Upper, true, ) => 4718,
                ( Facing::West, true, Hinge::Left, Half::Upper, false, ) => 4719,
                ( Facing::West, false, Hinge::Left, Half::Upper, true, ) => 4720,
                ( Facing::West, false, Hinge::Left, Half::Upper, false, ) => 4721,
                ( Facing::West, true, Hinge::Right, Half::Upper, true, ) => 4722,
                ( Facing::West, true, Hinge::Right, Half::Upper, false, ) => 4723,
                ( Facing::West, false, Hinge::Right, Half::Upper, true, ) => 4724,
                ( Facing::West, false, Hinge::Right, Half::Upper, false, ) => 4725,
                ( Facing::West, true, Hinge::Left, Half::Lower, true, ) => 4726,
                ( Facing::West, true, Hinge::Left, Half::Lower, false, ) => 4727,
                ( Facing::West, false, Hinge::Left, Half::Lower, true, ) => 4728,
                ( Facing::West, false, Hinge::Left, Half::Lower, false, ) => 4729,
                ( Facing::West, true, Hinge::Right, Half::Lower, true, ) => 4730,
                ( Facing::West, true, Hinge::Right, Half::Lower, false, ) => 4731,
                ( Facing::West, false, Hinge::Right, Half::Lower, true, ) => 4732,
                ( Facing::West, false, Hinge::Right, Half::Lower, false, ) => 4733,
                ( Facing::East, true, Hinge::Left, Half::Upper, true, ) => 4734,
                ( Facing::East, true, Hinge::Left, Half::Upper, false, ) => 4735,
                ( Facing::East, false, Hinge::Left, Half::Upper, true, ) => 4736,
                ( Facing::East, false, Hinge::Left, Half::Upper, false, ) => 4737,
                ( Facing::East, true, Hinge::Right, Half::Upper, true, ) => 4738,
                ( Facing::East, true, Hinge::Right, Half::Upper, false, ) => 4739,
                ( Facing::East, false, Hinge::Right, Half::Upper, true, ) => 4740,
                ( Facing::East, false, Hinge::Right, Half::Upper, false, ) => 4741,
                ( Facing::East, true, Hinge::Left, Half::Lower, true, ) => 4742,
                ( Facing::East, true, Hinge::Left, Half::Lower, false, ) => 4743,
                ( Facing::East, false, Hinge::Left, Half::Lower, true, ) => 4744,
                ( Facing::East, false, Hinge::Left, Half::Lower, false, ) => 4745,
                ( Facing::East, true, Hinge::Right, Half::Lower, true, ) => 4746,
                ( Facing::East, true, Hinge::Right, Half::Lower, false, ) => 4747,
                ( Facing::East, false, Hinge::Right, Half::Lower, true, ) => 4748,
                ( Facing::East, false, Hinge::Right, Half::Lower, false, ) => 4749,
            })
        }
    }

    impl From<OakDoor> for BlockState {
        #[inline(always)]
        fn from(value : OakDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakDoor { }

    impl Block for OakDoor {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            open : false,
            hinge : Hinge::Left,
            half : Half::Lower,
            powered : false,
        };
    }

}

/// `minecraft:light_blue_candle_cake` block.
pub mod light_blue_candle_cake {
    use super::*;

    /// `minecraft:light_blue_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl LightBlueCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22065,
                ( false, ) => 22066,
            })
        }
    }

    impl From<LightBlueCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueCandleCake { }

    impl Block for LightBlueCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:red_mushroom` block.
pub mod red_mushroom {
    use super::*;

    /// `minecraft:red_mushroom` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedMushroom;

    impl RedMushroom {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2136)
        }
    }

    impl From<RedMushroom> for BlockState {
        #[inline(always)]
        fn from(value : RedMushroom) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedMushroom {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedMushroom { }

    impl Block for RedMushroom {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:terracotta` block.
pub mod terracotta {
    use super::*;

    /// `minecraft:terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Terracotta;

    impl Terracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11633)
        }
    }

    impl From<Terracotta> for BlockState {
        #[inline(always)]
        fn from(value : Terracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Terracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Terracotta { }

    impl Block for Terracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_cut_copper` block.
pub mod waxed_cut_copper {
    use super::*;

    /// `minecraft:waxed_cut_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedCutCopper;

    impl WaxedCutCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24367)
        }
    }

    impl From<WaxedCutCopper> for BlockState {
        #[inline(always)]
        fn from(value : WaxedCutCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedCutCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedCutCopper { }

    impl Block for WaxedCutCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:potted_fern` block.
pub mod potted_fern {
    use super::*;

    /// `minecraft:potted_fern` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedFern;

    impl PottedFern {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9362)
        }
    }

    impl From<PottedFern> for BlockState {
        #[inline(always)]
        fn from(value : PottedFern) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedFern {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedFern { }

    impl Block for PottedFern {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:spruce_wood` block.
pub mod spruce_wood {
    use super::*;

    /// `minecraft:spruce_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl SpruceWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 204,
                ( Axis::Y, ) => 205,
                ( Axis::Z, ) => 206,
            })
        }
    }

    impl From<SpruceWood> for BlockState {
        #[inline(always)]
        fn from(value : SpruceWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceWood { }

    impl Block for SpruceWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:gold_ore` block.
pub mod gold_ore {
    use super::*;

    /// `minecraft:gold_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GoldOre;

    impl GoldOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(129)
        }
    }

    impl From<GoldOre> for BlockState {
        #[inline(always)]
        fn from(value : GoldOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GoldOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GoldOre { }

    impl Block for GoldOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:infested_chiseled_stone_bricks` block.
pub mod infested_chiseled_stone_bricks {
    use super::*;

    /// `minecraft:infested_chiseled_stone_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct InfestedChiseledStoneBricks;

    impl InfestedChiseledStoneBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6791)
        }
    }

    impl From<InfestedChiseledStoneBricks> for BlockState {
        #[inline(always)]
        fn from(value : InfestedChiseledStoneBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for InfestedChiseledStoneBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for InfestedChiseledStoneBricks { }

    impl Block for InfestedChiseledStoneBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:magenta_carpet` block.
pub mod magenta_carpet {
    use super::*;

    /// `minecraft:magenta_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaCarpet;

    impl MagentaCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11619)
        }
    }

    impl From<MagentaCarpet> for BlockState {
        #[inline(always)]
        fn from(value : MagentaCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaCarpet { }

    impl Block for MagentaCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:nether_brick_slab` block.
pub mod nether_brick_slab {
    use super::*;

    /// `minecraft:nether_brick_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct NetherBrickSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl NetherBrickSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 12171,
                ( Kind::Top, false, ) => 12172,
                ( Kind::Bottom, true, ) => 12173,
                ( Kind::Bottom, false, ) => 12174,
                ( Kind::Double, true, ) => 12175,
                ( Kind::Double, false, ) => 12176,
            })
        }
    }

    impl From<NetherBrickSlab> for BlockState {
        #[inline(always)]
        fn from(value : NetherBrickSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for NetherBrickSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for NetherBrickSlab { }

    impl Block for NetherBrickSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:bamboo_fence` block.
pub mod bamboo_fence {
    use super::*;

    /// `minecraft:bamboo_fence` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooFence {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : bool,
        /// `north` state.
        pub north : bool,
        /// `south` state.
        pub south : bool,
        /// `east` state.
        pub east : bool,
    }

    impl BambooFence {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.west, self.north, self.south, self.east, )) {
                ( true, true, true, true, true, ) => 12749,
                ( true, false, true, true, true, ) => 12750,
                ( false, true, true, true, true, ) => 12751,
                ( false, false, true, true, true, ) => 12752,
                ( true, true, true, false, true, ) => 12753,
                ( true, false, true, false, true, ) => 12754,
                ( false, true, true, false, true, ) => 12755,
                ( false, false, true, false, true, ) => 12756,
                ( true, true, false, true, true, ) => 12757,
                ( true, false, false, true, true, ) => 12758,
                ( false, true, false, true, true, ) => 12759,
                ( false, false, false, true, true, ) => 12760,
                ( true, true, false, false, true, ) => 12761,
                ( true, false, false, false, true, ) => 12762,
                ( false, true, false, false, true, ) => 12763,
                ( false, false, false, false, true, ) => 12764,
                ( true, true, true, true, false, ) => 12765,
                ( true, false, true, true, false, ) => 12766,
                ( false, true, true, true, false, ) => 12767,
                ( false, false, true, true, false, ) => 12768,
                ( true, true, true, false, false, ) => 12769,
                ( true, false, true, false, false, ) => 12770,
                ( false, true, true, false, false, ) => 12771,
                ( false, false, true, false, false, ) => 12772,
                ( true, true, false, true, false, ) => 12773,
                ( true, false, false, true, false, ) => 12774,
                ( false, true, false, true, false, ) => 12775,
                ( false, false, false, true, false, ) => 12776,
                ( true, true, false, false, false, ) => 12777,
                ( true, false, false, false, false, ) => 12778,
                ( false, true, false, false, false, ) => 12779,
                ( false, false, false, false, false, ) => 12780,
            })
        }
    }

    impl From<BambooFence> for BlockState {
        #[inline(always)]
        fn from(value : BambooFence) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooFence {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooFence { }

    impl Block for BambooFence {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            west : false,
            north : false,
            south : false,
            east : false,
        };
    }

}

/// `minecraft:brown_wall_banner` block.
pub mod brown_wall_banner {
    use super::*;

    /// `minecraft:brown_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BrownWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11952,
                ( Facing::South, ) => 11953,
                ( Facing::West, ) => 11954,
                ( Facing::East, ) => 11955,
            })
        }
    }

    impl From<BrownWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : BrownWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownWallBanner { }

    impl Block for BrownWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:dead_bush` block.
pub mod dead_bush {
    use super::*;

    /// `minecraft:dead_bush` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadBush;

    impl DeadBush {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2050)
        }
    }

    impl From<DeadBush> for BlockState {
        #[inline(always)]
        fn from(value : DeadBush) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadBush {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadBush { }

    impl Block for DeadBush {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dragon_head` block.
pub mod dragon_head {
    use super::*;

    /// `minecraft:dragon_head` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DragonHead {
        /// `powered` state.
        pub powered : bool,
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl DragonHead {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.rotation, )) {
                ( true, Rotation::N0, ) => 9836,
                ( true, Rotation::N1, ) => 9837,
                ( true, Rotation::N2, ) => 9838,
                ( true, Rotation::N3, ) => 9839,
                ( true, Rotation::N4, ) => 9840,
                ( true, Rotation::N5, ) => 9841,
                ( true, Rotation::N6, ) => 9842,
                ( true, Rotation::N7, ) => 9843,
                ( true, Rotation::N8, ) => 9844,
                ( true, Rotation::N9, ) => 9845,
                ( true, Rotation::N10, ) => 9846,
                ( true, Rotation::N11, ) => 9847,
                ( true, Rotation::N12, ) => 9848,
                ( true, Rotation::N13, ) => 9849,
                ( true, Rotation::N14, ) => 9850,
                ( true, Rotation::N15, ) => 9851,
                ( false, Rotation::N0, ) => 9852,
                ( false, Rotation::N1, ) => 9853,
                ( false, Rotation::N2, ) => 9854,
                ( false, Rotation::N3, ) => 9855,
                ( false, Rotation::N4, ) => 9856,
                ( false, Rotation::N5, ) => 9857,
                ( false, Rotation::N6, ) => 9858,
                ( false, Rotation::N7, ) => 9859,
                ( false, Rotation::N8, ) => 9860,
                ( false, Rotation::N9, ) => 9861,
                ( false, Rotation::N10, ) => 9862,
                ( false, Rotation::N11, ) => 9863,
                ( false, Rotation::N12, ) => 9864,
                ( false, Rotation::N13, ) => 9865,
                ( false, Rotation::N14, ) => 9866,
                ( false, Rotation::N15, ) => 9867,
            })
        }
    }

    impl From<DragonHead> for BlockState {
        #[inline(always)]
        fn from(value : DragonHead) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DragonHead {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DragonHead { }

    impl Block for DragonHead {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:stripped_oak_log` block.
pub mod stripped_oak_log {
    use super::*;

    /// `minecraft:stripped_oak_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedOakLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedOakLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 192,
                ( Axis::Y, ) => 193,
                ( Axis::Z, ) => 194,
            })
        }
    }

    impl From<StrippedOakLog> for BlockState {
        #[inline(always)]
        fn from(value : StrippedOakLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedOakLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedOakLog { }

    impl Block for StrippedOakLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:test_block` block.
pub mod test_block {
    use super::*;

    /// `minecraft:test_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TestBlock {
        /// `mode` state.
        pub mode : Mode,
    }

    /// `mode` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Mode {
        /// `start` variant.
        Start,
        /// `log` variant.
        Log,
        /// `fail` variant.
        Fail,
        /// `accept` variant.
        Accept,
    }
    impl crate::Sealed for Mode { }
    impl BlockProperty for Mode { }

    impl TestBlock {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.mode, )) {
                ( Mode::Start, ) => 20427,
                ( Mode::Log, ) => 20428,
                ( Mode::Fail, ) => 20429,
                ( Mode::Accept, ) => 20430,
            })
        }
    }

    impl From<TestBlock> for BlockState {
        #[inline(always)]
        fn from(value : TestBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TestBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TestBlock { }

    impl Block for TestBlock {
        const DEFAULT_STATE : Self = Self {
            mode : Mode::Start,
        };
    }

}

/// `minecraft:tinted_glass` block.
pub mod tinted_glass {
    use super::*;

    /// `minecraft:tinted_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TintedGlass;

    impl TintedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(23377)
        }
    }

    impl From<TintedGlass> for BlockState {
        #[inline(always)]
        fn from(value : TintedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TintedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TintedGlass { }

    impl Block for TintedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:brick_stairs` block.
pub mod brick_stairs {
    use super::*;

    /// `minecraft:brick_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrickStairs {
        /// `half` state.
        pub half : Half,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl BrickStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.waterlogged, self.facing, self.shape, )) {
                ( Half::Top, true, Facing::North, Shape::Straight, ) => 7400,
                ( Half::Top, false, Facing::North, Shape::Straight, ) => 7401,
                ( Half::Top, true, Facing::North, Shape::InnerLeft, ) => 7402,
                ( Half::Top, false, Facing::North, Shape::InnerLeft, ) => 7403,
                ( Half::Top, true, Facing::North, Shape::InnerRight, ) => 7404,
                ( Half::Top, false, Facing::North, Shape::InnerRight, ) => 7405,
                ( Half::Top, true, Facing::North, Shape::OuterLeft, ) => 7406,
                ( Half::Top, false, Facing::North, Shape::OuterLeft, ) => 7407,
                ( Half::Top, true, Facing::North, Shape::OuterRight, ) => 7408,
                ( Half::Top, false, Facing::North, Shape::OuterRight, ) => 7409,
                ( Half::Bottom, true, Facing::North, Shape::Straight, ) => 7410,
                ( Half::Bottom, false, Facing::North, Shape::Straight, ) => 7411,
                ( Half::Bottom, true, Facing::North, Shape::InnerLeft, ) => 7412,
                ( Half::Bottom, false, Facing::North, Shape::InnerLeft, ) => 7413,
                ( Half::Bottom, true, Facing::North, Shape::InnerRight, ) => 7414,
                ( Half::Bottom, false, Facing::North, Shape::InnerRight, ) => 7415,
                ( Half::Bottom, true, Facing::North, Shape::OuterLeft, ) => 7416,
                ( Half::Bottom, false, Facing::North, Shape::OuterLeft, ) => 7417,
                ( Half::Bottom, true, Facing::North, Shape::OuterRight, ) => 7418,
                ( Half::Bottom, false, Facing::North, Shape::OuterRight, ) => 7419,
                ( Half::Top, true, Facing::South, Shape::Straight, ) => 7420,
                ( Half::Top, false, Facing::South, Shape::Straight, ) => 7421,
                ( Half::Top, true, Facing::South, Shape::InnerLeft, ) => 7422,
                ( Half::Top, false, Facing::South, Shape::InnerLeft, ) => 7423,
                ( Half::Top, true, Facing::South, Shape::InnerRight, ) => 7424,
                ( Half::Top, false, Facing::South, Shape::InnerRight, ) => 7425,
                ( Half::Top, true, Facing::South, Shape::OuterLeft, ) => 7426,
                ( Half::Top, false, Facing::South, Shape::OuterLeft, ) => 7427,
                ( Half::Top, true, Facing::South, Shape::OuterRight, ) => 7428,
                ( Half::Top, false, Facing::South, Shape::OuterRight, ) => 7429,
                ( Half::Bottom, true, Facing::South, Shape::Straight, ) => 7430,
                ( Half::Bottom, false, Facing::South, Shape::Straight, ) => 7431,
                ( Half::Bottom, true, Facing::South, Shape::InnerLeft, ) => 7432,
                ( Half::Bottom, false, Facing::South, Shape::InnerLeft, ) => 7433,
                ( Half::Bottom, true, Facing::South, Shape::InnerRight, ) => 7434,
                ( Half::Bottom, false, Facing::South, Shape::InnerRight, ) => 7435,
                ( Half::Bottom, true, Facing::South, Shape::OuterLeft, ) => 7436,
                ( Half::Bottom, false, Facing::South, Shape::OuterLeft, ) => 7437,
                ( Half::Bottom, true, Facing::South, Shape::OuterRight, ) => 7438,
                ( Half::Bottom, false, Facing::South, Shape::OuterRight, ) => 7439,
                ( Half::Top, true, Facing::West, Shape::Straight, ) => 7440,
                ( Half::Top, false, Facing::West, Shape::Straight, ) => 7441,
                ( Half::Top, true, Facing::West, Shape::InnerLeft, ) => 7442,
                ( Half::Top, false, Facing::West, Shape::InnerLeft, ) => 7443,
                ( Half::Top, true, Facing::West, Shape::InnerRight, ) => 7444,
                ( Half::Top, false, Facing::West, Shape::InnerRight, ) => 7445,
                ( Half::Top, true, Facing::West, Shape::OuterLeft, ) => 7446,
                ( Half::Top, false, Facing::West, Shape::OuterLeft, ) => 7447,
                ( Half::Top, true, Facing::West, Shape::OuterRight, ) => 7448,
                ( Half::Top, false, Facing::West, Shape::OuterRight, ) => 7449,
                ( Half::Bottom, true, Facing::West, Shape::Straight, ) => 7450,
                ( Half::Bottom, false, Facing::West, Shape::Straight, ) => 7451,
                ( Half::Bottom, true, Facing::West, Shape::InnerLeft, ) => 7452,
                ( Half::Bottom, false, Facing::West, Shape::InnerLeft, ) => 7453,
                ( Half::Bottom, true, Facing::West, Shape::InnerRight, ) => 7454,
                ( Half::Bottom, false, Facing::West, Shape::InnerRight, ) => 7455,
                ( Half::Bottom, true, Facing::West, Shape::OuterLeft, ) => 7456,
                ( Half::Bottom, false, Facing::West, Shape::OuterLeft, ) => 7457,
                ( Half::Bottom, true, Facing::West, Shape::OuterRight, ) => 7458,
                ( Half::Bottom, false, Facing::West, Shape::OuterRight, ) => 7459,
                ( Half::Top, true, Facing::East, Shape::Straight, ) => 7460,
                ( Half::Top, false, Facing::East, Shape::Straight, ) => 7461,
                ( Half::Top, true, Facing::East, Shape::InnerLeft, ) => 7462,
                ( Half::Top, false, Facing::East, Shape::InnerLeft, ) => 7463,
                ( Half::Top, true, Facing::East, Shape::InnerRight, ) => 7464,
                ( Half::Top, false, Facing::East, Shape::InnerRight, ) => 7465,
                ( Half::Top, true, Facing::East, Shape::OuterLeft, ) => 7466,
                ( Half::Top, false, Facing::East, Shape::OuterLeft, ) => 7467,
                ( Half::Top, true, Facing::East, Shape::OuterRight, ) => 7468,
                ( Half::Top, false, Facing::East, Shape::OuterRight, ) => 7469,
                ( Half::Bottom, true, Facing::East, Shape::Straight, ) => 7470,
                ( Half::Bottom, false, Facing::East, Shape::Straight, ) => 7471,
                ( Half::Bottom, true, Facing::East, Shape::InnerLeft, ) => 7472,
                ( Half::Bottom, false, Facing::East, Shape::InnerLeft, ) => 7473,
                ( Half::Bottom, true, Facing::East, Shape::InnerRight, ) => 7474,
                ( Half::Bottom, false, Facing::East, Shape::InnerRight, ) => 7475,
                ( Half::Bottom, true, Facing::East, Shape::OuterLeft, ) => 7476,
                ( Half::Bottom, false, Facing::East, Shape::OuterLeft, ) => 7477,
                ( Half::Bottom, true, Facing::East, Shape::OuterRight, ) => 7478,
                ( Half::Bottom, false, Facing::East, Shape::OuterRight, ) => 7479,
            })
        }
    }

    impl From<BrickStairs> for BlockState {
        #[inline(always)]
        fn from(value : BrickStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrickStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrickStairs { }

    impl Block for BrickStairs {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            waterlogged : false,
            facing : Facing::North,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:dead_tube_coral_fan` block.
pub mod dead_tube_coral_fan {
    use super::*;

    /// `minecraft:dead_tube_coral_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadTubeCoralFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl DeadTubeCoralFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13888,
                ( false, ) => 13889,
            })
        }
    }

    impl From<DeadTubeCoralFan> for BlockState {
        #[inline(always)]
        fn from(value : DeadTubeCoralFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadTubeCoralFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadTubeCoralFan { }

    impl Block for DeadTubeCoralFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:jungle_door` block.
pub mod jungle_door {
    use super::*;

    /// `minecraft:jungle_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleDoor {
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `hinge` state.
        pub hinge : Hinge,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    impl JungleDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.facing, self.hinge, self.open, self.powered, )) {
                ( Half::Upper, Facing::North, Hinge::Left, true, true, ) => 12909,
                ( Half::Upper, Facing::North, Hinge::Left, true, false, ) => 12910,
                ( Half::Upper, Facing::North, Hinge::Left, false, true, ) => 12911,
                ( Half::Upper, Facing::North, Hinge::Left, false, false, ) => 12912,
                ( Half::Upper, Facing::North, Hinge::Right, true, true, ) => 12913,
                ( Half::Upper, Facing::North, Hinge::Right, true, false, ) => 12914,
                ( Half::Upper, Facing::North, Hinge::Right, false, true, ) => 12915,
                ( Half::Upper, Facing::North, Hinge::Right, false, false, ) => 12916,
                ( Half::Lower, Facing::North, Hinge::Left, true, true, ) => 12917,
                ( Half::Lower, Facing::North, Hinge::Left, true, false, ) => 12918,
                ( Half::Lower, Facing::North, Hinge::Left, false, true, ) => 12919,
                ( Half::Lower, Facing::North, Hinge::Left, false, false, ) => 12920,
                ( Half::Lower, Facing::North, Hinge::Right, true, true, ) => 12921,
                ( Half::Lower, Facing::North, Hinge::Right, true, false, ) => 12922,
                ( Half::Lower, Facing::North, Hinge::Right, false, true, ) => 12923,
                ( Half::Lower, Facing::North, Hinge::Right, false, false, ) => 12924,
                ( Half::Upper, Facing::South, Hinge::Left, true, true, ) => 12925,
                ( Half::Upper, Facing::South, Hinge::Left, true, false, ) => 12926,
                ( Half::Upper, Facing::South, Hinge::Left, false, true, ) => 12927,
                ( Half::Upper, Facing::South, Hinge::Left, false, false, ) => 12928,
                ( Half::Upper, Facing::South, Hinge::Right, true, true, ) => 12929,
                ( Half::Upper, Facing::South, Hinge::Right, true, false, ) => 12930,
                ( Half::Upper, Facing::South, Hinge::Right, false, true, ) => 12931,
                ( Half::Upper, Facing::South, Hinge::Right, false, false, ) => 12932,
                ( Half::Lower, Facing::South, Hinge::Left, true, true, ) => 12933,
                ( Half::Lower, Facing::South, Hinge::Left, true, false, ) => 12934,
                ( Half::Lower, Facing::South, Hinge::Left, false, true, ) => 12935,
                ( Half::Lower, Facing::South, Hinge::Left, false, false, ) => 12936,
                ( Half::Lower, Facing::South, Hinge::Right, true, true, ) => 12937,
                ( Half::Lower, Facing::South, Hinge::Right, true, false, ) => 12938,
                ( Half::Lower, Facing::South, Hinge::Right, false, true, ) => 12939,
                ( Half::Lower, Facing::South, Hinge::Right, false, false, ) => 12940,
                ( Half::Upper, Facing::West, Hinge::Left, true, true, ) => 12941,
                ( Half::Upper, Facing::West, Hinge::Left, true, false, ) => 12942,
                ( Half::Upper, Facing::West, Hinge::Left, false, true, ) => 12943,
                ( Half::Upper, Facing::West, Hinge::Left, false, false, ) => 12944,
                ( Half::Upper, Facing::West, Hinge::Right, true, true, ) => 12945,
                ( Half::Upper, Facing::West, Hinge::Right, true, false, ) => 12946,
                ( Half::Upper, Facing::West, Hinge::Right, false, true, ) => 12947,
                ( Half::Upper, Facing::West, Hinge::Right, false, false, ) => 12948,
                ( Half::Lower, Facing::West, Hinge::Left, true, true, ) => 12949,
                ( Half::Lower, Facing::West, Hinge::Left, true, false, ) => 12950,
                ( Half::Lower, Facing::West, Hinge::Left, false, true, ) => 12951,
                ( Half::Lower, Facing::West, Hinge::Left, false, false, ) => 12952,
                ( Half::Lower, Facing::West, Hinge::Right, true, true, ) => 12953,
                ( Half::Lower, Facing::West, Hinge::Right, true, false, ) => 12954,
                ( Half::Lower, Facing::West, Hinge::Right, false, true, ) => 12955,
                ( Half::Lower, Facing::West, Hinge::Right, false, false, ) => 12956,
                ( Half::Upper, Facing::East, Hinge::Left, true, true, ) => 12957,
                ( Half::Upper, Facing::East, Hinge::Left, true, false, ) => 12958,
                ( Half::Upper, Facing::East, Hinge::Left, false, true, ) => 12959,
                ( Half::Upper, Facing::East, Hinge::Left, false, false, ) => 12960,
                ( Half::Upper, Facing::East, Hinge::Right, true, true, ) => 12961,
                ( Half::Upper, Facing::East, Hinge::Right, true, false, ) => 12962,
                ( Half::Upper, Facing::East, Hinge::Right, false, true, ) => 12963,
                ( Half::Upper, Facing::East, Hinge::Right, false, false, ) => 12964,
                ( Half::Lower, Facing::East, Hinge::Left, true, true, ) => 12965,
                ( Half::Lower, Facing::East, Hinge::Left, true, false, ) => 12966,
                ( Half::Lower, Facing::East, Hinge::Left, false, true, ) => 12967,
                ( Half::Lower, Facing::East, Hinge::Left, false, false, ) => 12968,
                ( Half::Lower, Facing::East, Hinge::Right, true, true, ) => 12969,
                ( Half::Lower, Facing::East, Hinge::Right, true, false, ) => 12970,
                ( Half::Lower, Facing::East, Hinge::Right, false, true, ) => 12971,
                ( Half::Lower, Facing::East, Hinge::Right, false, false, ) => 12972,
            })
        }
    }

    impl From<JungleDoor> for BlockState {
        #[inline(always)]
        fn from(value : JungleDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleDoor { }

    impl Block for JungleDoor {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
            facing : Facing::North,
            hinge : Hinge::Left,
            open : false,
            powered : false,
        };
    }

}

/// `minecraft:light` block.
pub mod light {
    use super::*;

    /// `minecraft:light` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Light {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `level` state.
        pub level : Level,
    }

    /// `level` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Level {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Level { }
    impl BlockProperty for Level { }

    impl Light {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.level, )) {
                ( true, Level::N0, ) => 11256,
                ( false, Level::N0, ) => 11257,
                ( true, Level::N1, ) => 11258,
                ( false, Level::N1, ) => 11259,
                ( true, Level::N2, ) => 11260,
                ( false, Level::N2, ) => 11261,
                ( true, Level::N3, ) => 11262,
                ( false, Level::N3, ) => 11263,
                ( true, Level::N4, ) => 11264,
                ( false, Level::N4, ) => 11265,
                ( true, Level::N5, ) => 11266,
                ( false, Level::N5, ) => 11267,
                ( true, Level::N6, ) => 11268,
                ( false, Level::N6, ) => 11269,
                ( true, Level::N7, ) => 11270,
                ( false, Level::N7, ) => 11271,
                ( true, Level::N8, ) => 11272,
                ( false, Level::N8, ) => 11273,
                ( true, Level::N9, ) => 11274,
                ( false, Level::N9, ) => 11275,
                ( true, Level::N10, ) => 11276,
                ( false, Level::N10, ) => 11277,
                ( true, Level::N11, ) => 11278,
                ( false, Level::N11, ) => 11279,
                ( true, Level::N12, ) => 11280,
                ( false, Level::N12, ) => 11281,
                ( true, Level::N13, ) => 11282,
                ( false, Level::N13, ) => 11283,
                ( true, Level::N14, ) => 11284,
                ( false, Level::N14, ) => 11285,
                ( true, Level::N15, ) => 11286,
                ( false, Level::N15, ) => 11287,
            })
        }
    }

    impl From<Light> for BlockState {
        #[inline(always)]
        fn from(value : Light) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Light {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Light { }

    impl Block for Light {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            level : Level::N15,
        };
    }

}

/// `minecraft:nether_quartz_ore` block.
pub mod nether_quartz_ore {
    use super::*;

    /// `minecraft:nether_quartz_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct NetherQuartzOre;

    impl NetherQuartzOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10033)
        }
    }

    impl From<NetherQuartzOre> for BlockState {
        #[inline(always)]
        fn from(value : NetherQuartzOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for NetherQuartzOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for NetherQuartzOre { }

    impl Block for NetherQuartzOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:pale_hanging_moss` block.
pub mod pale_hanging_moss {
    use super::*;

    /// `minecraft:pale_hanging_moss` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleHangingMoss {
        /// `tip` state.
        pub tip : bool,
    }

    impl PaleHangingMoss {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.tip, )) {
                ( true, ) => 27939,
                ( false, ) => 27940,
            })
        }
    }

    impl From<PaleHangingMoss> for BlockState {
        #[inline(always)]
        fn from(value : PaleHangingMoss) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleHangingMoss {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleHangingMoss { }

    impl Block for PaleHangingMoss {
        const DEFAULT_STATE : Self = Self {
            tip : true,
        };
    }

}

/// `minecraft:diamond_block` block.
pub mod diamond_block {
    use super::*;

    /// `minecraft:diamond_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DiamondBlock;

    impl DiamondBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(4340)
        }
    }

    impl From<DiamondBlock> for BlockState {
        #[inline(always)]
        fn from(value : DiamondBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DiamondBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DiamondBlock { }

    impl Block for DiamondBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:tuff_brick_slab` block.
pub mod tuff_brick_slab {
    use super::*;

    /// `minecraft:tuff_brick_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TuffBrickSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl TuffBrickSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 22965,
                ( false, Kind::Top, ) => 22966,
                ( true, Kind::Bottom, ) => 22967,
                ( false, Kind::Bottom, ) => 22968,
                ( true, Kind::Double, ) => 22969,
                ( false, Kind::Double, ) => 22970,
            })
        }
    }

    impl From<TuffBrickSlab> for BlockState {
        #[inline(always)]
        fn from(value : TuffBrickSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TuffBrickSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TuffBrickSlab { }

    impl Block for TuffBrickSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:weathered_copper_grate` block.
pub mod weathered_copper_grate {
    use super::*;

    /// `minecraft:weathered_copper_grate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WeatheredCopperGrate {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl WeatheredCopperGrate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 25740,
                ( false, ) => 25741,
            })
        }
    }

    impl From<WeatheredCopperGrate> for BlockState {
        #[inline(always)]
        fn from(value : WeatheredCopperGrate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WeatheredCopperGrate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WeatheredCopperGrate { }

    impl Block for WeatheredCopperGrate {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
        };
    }

}

/// `minecraft:crimson_planks` block.
pub mod crimson_planks {
    use super::*;

    /// `minecraft:crimson_planks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonPlanks;

    impl CrimsonPlanks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19721)
        }
    }

    impl From<CrimsonPlanks> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonPlanks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonPlanks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonPlanks { }

    impl Block for CrimsonPlanks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:jungle_trapdoor` block.
pub mod jungle_trapdoor {
    use super::*;

    /// `minecraft:jungle_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleTrapdoor {
        /// `open` state.
        pub open : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl JungleTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.open, self.half, self.facing, self.powered, self.waterlogged, )) {
                ( true, Half::Top, Facing::North, true, true, ) => 6332,
                ( true, Half::Top, Facing::North, true, false, ) => 6333,
                ( true, Half::Top, Facing::North, false, true, ) => 6334,
                ( true, Half::Top, Facing::North, false, false, ) => 6335,
                ( false, Half::Top, Facing::North, true, true, ) => 6336,
                ( false, Half::Top, Facing::North, true, false, ) => 6337,
                ( false, Half::Top, Facing::North, false, true, ) => 6338,
                ( false, Half::Top, Facing::North, false, false, ) => 6339,
                ( true, Half::Bottom, Facing::North, true, true, ) => 6340,
                ( true, Half::Bottom, Facing::North, true, false, ) => 6341,
                ( true, Half::Bottom, Facing::North, false, true, ) => 6342,
                ( true, Half::Bottom, Facing::North, false, false, ) => 6343,
                ( false, Half::Bottom, Facing::North, true, true, ) => 6344,
                ( false, Half::Bottom, Facing::North, true, false, ) => 6345,
                ( false, Half::Bottom, Facing::North, false, true, ) => 6346,
                ( false, Half::Bottom, Facing::North, false, false, ) => 6347,
                ( true, Half::Top, Facing::South, true, true, ) => 6348,
                ( true, Half::Top, Facing::South, true, false, ) => 6349,
                ( true, Half::Top, Facing::South, false, true, ) => 6350,
                ( true, Half::Top, Facing::South, false, false, ) => 6351,
                ( false, Half::Top, Facing::South, true, true, ) => 6352,
                ( false, Half::Top, Facing::South, true, false, ) => 6353,
                ( false, Half::Top, Facing::South, false, true, ) => 6354,
                ( false, Half::Top, Facing::South, false, false, ) => 6355,
                ( true, Half::Bottom, Facing::South, true, true, ) => 6356,
                ( true, Half::Bottom, Facing::South, true, false, ) => 6357,
                ( true, Half::Bottom, Facing::South, false, true, ) => 6358,
                ( true, Half::Bottom, Facing::South, false, false, ) => 6359,
                ( false, Half::Bottom, Facing::South, true, true, ) => 6360,
                ( false, Half::Bottom, Facing::South, true, false, ) => 6361,
                ( false, Half::Bottom, Facing::South, false, true, ) => 6362,
                ( false, Half::Bottom, Facing::South, false, false, ) => 6363,
                ( true, Half::Top, Facing::West, true, true, ) => 6364,
                ( true, Half::Top, Facing::West, true, false, ) => 6365,
                ( true, Half::Top, Facing::West, false, true, ) => 6366,
                ( true, Half::Top, Facing::West, false, false, ) => 6367,
                ( false, Half::Top, Facing::West, true, true, ) => 6368,
                ( false, Half::Top, Facing::West, true, false, ) => 6369,
                ( false, Half::Top, Facing::West, false, true, ) => 6370,
                ( false, Half::Top, Facing::West, false, false, ) => 6371,
                ( true, Half::Bottom, Facing::West, true, true, ) => 6372,
                ( true, Half::Bottom, Facing::West, true, false, ) => 6373,
                ( true, Half::Bottom, Facing::West, false, true, ) => 6374,
                ( true, Half::Bottom, Facing::West, false, false, ) => 6375,
                ( false, Half::Bottom, Facing::West, true, true, ) => 6376,
                ( false, Half::Bottom, Facing::West, true, false, ) => 6377,
                ( false, Half::Bottom, Facing::West, false, true, ) => 6378,
                ( false, Half::Bottom, Facing::West, false, false, ) => 6379,
                ( true, Half::Top, Facing::East, true, true, ) => 6380,
                ( true, Half::Top, Facing::East, true, false, ) => 6381,
                ( true, Half::Top, Facing::East, false, true, ) => 6382,
                ( true, Half::Top, Facing::East, false, false, ) => 6383,
                ( false, Half::Top, Facing::East, true, true, ) => 6384,
                ( false, Half::Top, Facing::East, true, false, ) => 6385,
                ( false, Half::Top, Facing::East, false, true, ) => 6386,
                ( false, Half::Top, Facing::East, false, false, ) => 6387,
                ( true, Half::Bottom, Facing::East, true, true, ) => 6388,
                ( true, Half::Bottom, Facing::East, true, false, ) => 6389,
                ( true, Half::Bottom, Facing::East, false, true, ) => 6390,
                ( true, Half::Bottom, Facing::East, false, false, ) => 6391,
                ( false, Half::Bottom, Facing::East, true, true, ) => 6392,
                ( false, Half::Bottom, Facing::East, true, false, ) => 6393,
                ( false, Half::Bottom, Facing::East, false, true, ) => 6394,
                ( false, Half::Bottom, Facing::East, false, false, ) => 6395,
            })
        }
    }

    impl From<JungleTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : JungleTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleTrapdoor { }

    impl Block for JungleTrapdoor {
        const DEFAULT_STATE : Self = Self {
            open : false,
            half : Half::Bottom,
            facing : Facing::North,
            powered : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:blue_terracotta` block.
pub mod blue_terracotta {
    use super::*;

    /// `minecraft:blue_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueTerracotta;

    impl BlueTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10176)
        }
    }

    impl From<BlueTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : BlueTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueTerracotta { }

    impl Block for BlueTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:pale_oak_wood` block.
pub mod pale_oak_wood {
    use super::*;

    /// `minecraft:pale_oak_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl PaleOakWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 22,
                ( Axis::Y, ) => 23,
                ( Axis::Z, ) => 24,
            })
        }
    }

    impl From<PaleOakWood> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakWood { }

    impl Block for PaleOakWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:dead_tube_coral` block.
pub mod dead_tube_coral {
    use super::*;

    /// `minecraft:dead_tube_coral` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadTubeCoral {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl DeadTubeCoral {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13868,
                ( false, ) => 13869,
            })
        }
    }

    impl From<DeadTubeCoral> for BlockState {
        #[inline(always)]
        fn from(value : DeadTubeCoral) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadTubeCoral {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadTubeCoral { }

    impl Block for DeadTubeCoral {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:command_block` block.
pub mod command_block {
    use super::*;

    /// `minecraft:command_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CommandBlock {
        /// `facing` state.
        pub facing : Facing,
        /// `conditional` state.
        pub conditional : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CommandBlock {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.conditional, )) {
                ( Facing::North, true, ) => 8690,
                ( Facing::East, true, ) => 8691,
                ( Facing::South, true, ) => 8692,
                ( Facing::West, true, ) => 8693,
                ( Facing::Up, true, ) => 8694,
                ( Facing::Down, true, ) => 8695,
                ( Facing::North, false, ) => 8696,
                ( Facing::East, false, ) => 8697,
                ( Facing::South, false, ) => 8698,
                ( Facing::West, false, ) => 8699,
                ( Facing::Up, false, ) => 8700,
                ( Facing::Down, false, ) => 8701,
            })
        }
    }

    impl From<CommandBlock> for BlockState {
        #[inline(always)]
        fn from(value : CommandBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CommandBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CommandBlock { }

    impl Block for CommandBlock {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            conditional : false,
        };
    }

}

/// `minecraft:nether_sprouts` block.
pub mod nether_sprouts {
    use super::*;

    /// `minecraft:nether_sprouts` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct NetherSprouts;

    impl NetherSprouts {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19650)
        }
    }

    impl From<NetherSprouts> for BlockState {
        #[inline(always)]
        fn from(value : NetherSprouts) -> Self {
            value.to_block_state()
        }
    }

    impl Default for NetherSprouts {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for NetherSprouts { }

    impl Block for NetherSprouts {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:red_stained_glass` block.
pub mod red_stained_glass {
    use super::*;

    /// `minecraft:red_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedStainedGlass;

    impl RedStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6138)
        }
    }

    impl From<RedStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : RedStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedStainedGlass { }

    impl Block for RedStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:pale_oak_button` block.
pub mod pale_oak_button {
    use super::*;

    /// `minecraft:pale_oak_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakButton {
        /// `powered` state.
        pub powered : bool,
        /// `face` state.
        pub face : Face,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PaleOakButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.face, self.facing, )) {
                ( true, Face::Floor, Facing::North, ) => 9564,
                ( false, Face::Floor, Facing::North, ) => 9565,
                ( true, Face::Floor, Facing::South, ) => 9566,
                ( false, Face::Floor, Facing::South, ) => 9567,
                ( true, Face::Floor, Facing::West, ) => 9568,
                ( false, Face::Floor, Facing::West, ) => 9569,
                ( true, Face::Floor, Facing::East, ) => 9570,
                ( false, Face::Floor, Facing::East, ) => 9571,
                ( true, Face::Wall, Facing::North, ) => 9572,
                ( false, Face::Wall, Facing::North, ) => 9573,
                ( true, Face::Wall, Facing::South, ) => 9574,
                ( false, Face::Wall, Facing::South, ) => 9575,
                ( true, Face::Wall, Facing::West, ) => 9576,
                ( false, Face::Wall, Facing::West, ) => 9577,
                ( true, Face::Wall, Facing::East, ) => 9578,
                ( false, Face::Wall, Facing::East, ) => 9579,
                ( true, Face::Ceiling, Facing::North, ) => 9580,
                ( false, Face::Ceiling, Facing::North, ) => 9581,
                ( true, Face::Ceiling, Facing::South, ) => 9582,
                ( false, Face::Ceiling, Facing::South, ) => 9583,
                ( true, Face::Ceiling, Facing::West, ) => 9584,
                ( false, Face::Ceiling, Facing::West, ) => 9585,
                ( true, Face::Ceiling, Facing::East, ) => 9586,
                ( false, Face::Ceiling, Facing::East, ) => 9587,
            })
        }
    }

    impl From<PaleOakButton> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakButton { }

    impl Block for PaleOakButton {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            face : Face::Wall,
            facing : Facing::North,
        };
    }

}

/// `minecraft:white_banner` block.
pub mod white_banner {
    use super::*;

    /// `minecraft:white_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl WhiteBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11648,
                ( Rotation::N1, ) => 11649,
                ( Rotation::N2, ) => 11650,
                ( Rotation::N3, ) => 11651,
                ( Rotation::N4, ) => 11652,
                ( Rotation::N5, ) => 11653,
                ( Rotation::N6, ) => 11654,
                ( Rotation::N7, ) => 11655,
                ( Rotation::N8, ) => 11656,
                ( Rotation::N9, ) => 11657,
                ( Rotation::N10, ) => 11658,
                ( Rotation::N11, ) => 11659,
                ( Rotation::N12, ) => 11660,
                ( Rotation::N13, ) => 11661,
                ( Rotation::N14, ) => 11662,
                ( Rotation::N15, ) => 11663,
            })
        }
    }

    impl From<WhiteBanner> for BlockState {
        #[inline(always)]
        fn from(value : WhiteBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteBanner { }

    impl Block for WhiteBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:closed_eyeblossom` block.
pub mod closed_eyeblossom {
    use super::*;

    /// `minecraft:closed_eyeblossom` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ClosedEyeblossom;

    impl ClosedEyeblossom {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27942)
        }
    }

    impl From<ClosedEyeblossom> for BlockState {
        #[inline(always)]
        fn from(value : ClosedEyeblossom) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ClosedEyeblossom {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ClosedEyeblossom { }

    impl Block for ClosedEyeblossom {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:purple_wall_banner` block.
pub mod purple_wall_banner {
    use super::*;

    /// `minecraft:purple_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PurpleWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11944,
                ( Facing::South, ) => 11945,
                ( Facing::West, ) => 11946,
                ( Facing::East, ) => 11947,
            })
        }
    }

    impl From<PurpleWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : PurpleWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleWallBanner { }

    impl Block for PurpleWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:green_concrete_powder` block.
pub mod green_concrete_powder {
    use super::*;

    /// `minecraft:green_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenConcretePowder;

    impl GreenConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13780)
        }
    }

    impl From<GreenConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : GreenConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenConcretePowder { }

    impl Block for GreenConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:lever` block.
pub mod lever {
    use super::*;

    /// `minecraft:lever` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Lever {
        /// `powered` state.
        pub powered : bool,
        /// `face` state.
        pub face : Face,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Lever {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.face, self.facing, )) {
                ( true, Face::Floor, Facing::North, ) => 5802,
                ( false, Face::Floor, Facing::North, ) => 5803,
                ( true, Face::Floor, Facing::South, ) => 5804,
                ( false, Face::Floor, Facing::South, ) => 5805,
                ( true, Face::Floor, Facing::West, ) => 5806,
                ( false, Face::Floor, Facing::West, ) => 5807,
                ( true, Face::Floor, Facing::East, ) => 5808,
                ( false, Face::Floor, Facing::East, ) => 5809,
                ( true, Face::Wall, Facing::North, ) => 5810,
                ( false, Face::Wall, Facing::North, ) => 5811,
                ( true, Face::Wall, Facing::South, ) => 5812,
                ( false, Face::Wall, Facing::South, ) => 5813,
                ( true, Face::Wall, Facing::West, ) => 5814,
                ( false, Face::Wall, Facing::West, ) => 5815,
                ( true, Face::Wall, Facing::East, ) => 5816,
                ( false, Face::Wall, Facing::East, ) => 5817,
                ( true, Face::Ceiling, Facing::North, ) => 5818,
                ( false, Face::Ceiling, Facing::North, ) => 5819,
                ( true, Face::Ceiling, Facing::South, ) => 5820,
                ( false, Face::Ceiling, Facing::South, ) => 5821,
                ( true, Face::Ceiling, Facing::West, ) => 5822,
                ( false, Face::Ceiling, Facing::West, ) => 5823,
                ( true, Face::Ceiling, Facing::East, ) => 5824,
                ( false, Face::Ceiling, Facing::East, ) => 5825,
            })
        }
    }

    impl From<Lever> for BlockState {
        #[inline(always)]
        fn from(value : Lever) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Lever {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Lever { }

    impl Block for Lever {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            face : Face::Wall,
            facing : Facing::North,
        };
    }

}

/// `minecraft:stripped_birch_wood` block.
pub mod stripped_birch_wood {
    use super::*;

    /// `minecraft:stripped_birch_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedBirchWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedBirchWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 231,
                ( Axis::Y, ) => 232,
                ( Axis::Z, ) => 233,
            })
        }
    }

    impl From<StrippedBirchWood> for BlockState {
        #[inline(always)]
        fn from(value : StrippedBirchWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedBirchWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedBirchWood { }

    impl Block for StrippedBirchWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:pale_oak_leaves` block.
pub mod pale_oak_leaves {
    use super::*;

    /// `minecraft:pale_oak_leaves` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakLeaves {
        /// `persistent` state.
        pub persistent : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `distance` state.
        pub distance : Distance,
    }

    /// `distance` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Distance {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Distance { }
    impl BlockProperty for Distance { }

    impl PaleOakLeaves {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.persistent, self.waterlogged, self.distance, )) {
                ( true, true, Distance::N1, ) => 448,
                ( true, false, Distance::N1, ) => 449,
                ( false, true, Distance::N1, ) => 450,
                ( false, false, Distance::N1, ) => 451,
                ( true, true, Distance::N2, ) => 452,
                ( true, false, Distance::N2, ) => 453,
                ( false, true, Distance::N2, ) => 454,
                ( false, false, Distance::N2, ) => 455,
                ( true, true, Distance::N3, ) => 456,
                ( true, false, Distance::N3, ) => 457,
                ( false, true, Distance::N3, ) => 458,
                ( false, false, Distance::N3, ) => 459,
                ( true, true, Distance::N4, ) => 460,
                ( true, false, Distance::N4, ) => 461,
                ( false, true, Distance::N4, ) => 462,
                ( false, false, Distance::N4, ) => 463,
                ( true, true, Distance::N5, ) => 464,
                ( true, false, Distance::N5, ) => 465,
                ( false, true, Distance::N5, ) => 466,
                ( false, false, Distance::N5, ) => 467,
                ( true, true, Distance::N6, ) => 468,
                ( true, false, Distance::N6, ) => 469,
                ( false, true, Distance::N6, ) => 470,
                ( false, false, Distance::N6, ) => 471,
                ( true, true, Distance::N7, ) => 472,
                ( true, false, Distance::N7, ) => 473,
                ( false, true, Distance::N7, ) => 474,
                ( false, false, Distance::N7, ) => 475,
            })
        }
    }

    impl From<PaleOakLeaves> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakLeaves) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakLeaves {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakLeaves { }

    impl Block for PaleOakLeaves {
        const DEFAULT_STATE : Self = Self {
            persistent : false,
            waterlogged : false,
            distance : Distance::N7,
        };
    }

}

/// `minecraft:pink_carpet` block.
pub mod pink_carpet {
    use super::*;

    /// `minecraft:pink_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkCarpet;

    impl PinkCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11623)
        }
    }

    impl From<PinkCarpet> for BlockState {
        #[inline(always)]
        fn from(value : PinkCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkCarpet { }

    impl Block for PinkCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:powder_snow` block.
pub mod powder_snow {
    use super::*;

    /// `minecraft:powder_snow` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PowderSnow;

    impl PowderSnow {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(23378)
        }
    }

    impl From<PowderSnow> for BlockState {
        #[inline(always)]
        fn from(value : PowderSnow) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PowderSnow {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PowderSnow { }

    impl Block for PowderSnow {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:spruce_door` block.
pub mod spruce_door {
    use super::*;

    /// `minecraft:spruce_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceDoor {
        /// `powered` state.
        pub powered : bool,
        /// `hinge` state.
        pub hinge : Hinge,
        /// `open` state.
        pub open : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl SpruceDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.hinge, self.open, self.half, self.facing, )) {
                ( true, Hinge::Left, true, Half::Upper, Facing::North, ) => 12781,
                ( false, Hinge::Left, true, Half::Upper, Facing::North, ) => 12782,
                ( true, Hinge::Left, false, Half::Upper, Facing::North, ) => 12783,
                ( false, Hinge::Left, false, Half::Upper, Facing::North, ) => 12784,
                ( true, Hinge::Right, true, Half::Upper, Facing::North, ) => 12785,
                ( false, Hinge::Right, true, Half::Upper, Facing::North, ) => 12786,
                ( true, Hinge::Right, false, Half::Upper, Facing::North, ) => 12787,
                ( false, Hinge::Right, false, Half::Upper, Facing::North, ) => 12788,
                ( true, Hinge::Left, true, Half::Lower, Facing::North, ) => 12789,
                ( false, Hinge::Left, true, Half::Lower, Facing::North, ) => 12790,
                ( true, Hinge::Left, false, Half::Lower, Facing::North, ) => 12791,
                ( false, Hinge::Left, false, Half::Lower, Facing::North, ) => 12792,
                ( true, Hinge::Right, true, Half::Lower, Facing::North, ) => 12793,
                ( false, Hinge::Right, true, Half::Lower, Facing::North, ) => 12794,
                ( true, Hinge::Right, false, Half::Lower, Facing::North, ) => 12795,
                ( false, Hinge::Right, false, Half::Lower, Facing::North, ) => 12796,
                ( true, Hinge::Left, true, Half::Upper, Facing::South, ) => 12797,
                ( false, Hinge::Left, true, Half::Upper, Facing::South, ) => 12798,
                ( true, Hinge::Left, false, Half::Upper, Facing::South, ) => 12799,
                ( false, Hinge::Left, false, Half::Upper, Facing::South, ) => 12800,
                ( true, Hinge::Right, true, Half::Upper, Facing::South, ) => 12801,
                ( false, Hinge::Right, true, Half::Upper, Facing::South, ) => 12802,
                ( true, Hinge::Right, false, Half::Upper, Facing::South, ) => 12803,
                ( false, Hinge::Right, false, Half::Upper, Facing::South, ) => 12804,
                ( true, Hinge::Left, true, Half::Lower, Facing::South, ) => 12805,
                ( false, Hinge::Left, true, Half::Lower, Facing::South, ) => 12806,
                ( true, Hinge::Left, false, Half::Lower, Facing::South, ) => 12807,
                ( false, Hinge::Left, false, Half::Lower, Facing::South, ) => 12808,
                ( true, Hinge::Right, true, Half::Lower, Facing::South, ) => 12809,
                ( false, Hinge::Right, true, Half::Lower, Facing::South, ) => 12810,
                ( true, Hinge::Right, false, Half::Lower, Facing::South, ) => 12811,
                ( false, Hinge::Right, false, Half::Lower, Facing::South, ) => 12812,
                ( true, Hinge::Left, true, Half::Upper, Facing::West, ) => 12813,
                ( false, Hinge::Left, true, Half::Upper, Facing::West, ) => 12814,
                ( true, Hinge::Left, false, Half::Upper, Facing::West, ) => 12815,
                ( false, Hinge::Left, false, Half::Upper, Facing::West, ) => 12816,
                ( true, Hinge::Right, true, Half::Upper, Facing::West, ) => 12817,
                ( false, Hinge::Right, true, Half::Upper, Facing::West, ) => 12818,
                ( true, Hinge::Right, false, Half::Upper, Facing::West, ) => 12819,
                ( false, Hinge::Right, false, Half::Upper, Facing::West, ) => 12820,
                ( true, Hinge::Left, true, Half::Lower, Facing::West, ) => 12821,
                ( false, Hinge::Left, true, Half::Lower, Facing::West, ) => 12822,
                ( true, Hinge::Left, false, Half::Lower, Facing::West, ) => 12823,
                ( false, Hinge::Left, false, Half::Lower, Facing::West, ) => 12824,
                ( true, Hinge::Right, true, Half::Lower, Facing::West, ) => 12825,
                ( false, Hinge::Right, true, Half::Lower, Facing::West, ) => 12826,
                ( true, Hinge::Right, false, Half::Lower, Facing::West, ) => 12827,
                ( false, Hinge::Right, false, Half::Lower, Facing::West, ) => 12828,
                ( true, Hinge::Left, true, Half::Upper, Facing::East, ) => 12829,
                ( false, Hinge::Left, true, Half::Upper, Facing::East, ) => 12830,
                ( true, Hinge::Left, false, Half::Upper, Facing::East, ) => 12831,
                ( false, Hinge::Left, false, Half::Upper, Facing::East, ) => 12832,
                ( true, Hinge::Right, true, Half::Upper, Facing::East, ) => 12833,
                ( false, Hinge::Right, true, Half::Upper, Facing::East, ) => 12834,
                ( true, Hinge::Right, false, Half::Upper, Facing::East, ) => 12835,
                ( false, Hinge::Right, false, Half::Upper, Facing::East, ) => 12836,
                ( true, Hinge::Left, true, Half::Lower, Facing::East, ) => 12837,
                ( false, Hinge::Left, true, Half::Lower, Facing::East, ) => 12838,
                ( true, Hinge::Left, false, Half::Lower, Facing::East, ) => 12839,
                ( false, Hinge::Left, false, Half::Lower, Facing::East, ) => 12840,
                ( true, Hinge::Right, true, Half::Lower, Facing::East, ) => 12841,
                ( false, Hinge::Right, true, Half::Lower, Facing::East, ) => 12842,
                ( true, Hinge::Right, false, Half::Lower, Facing::East, ) => 12843,
                ( false, Hinge::Right, false, Half::Lower, Facing::East, ) => 12844,
            })
        }
    }

    impl From<SpruceDoor> for BlockState {
        #[inline(always)]
        fn from(value : SpruceDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceDoor { }

    impl Block for SpruceDoor {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            hinge : Hinge::Left,
            open : false,
            half : Half::Lower,
            facing : Facing::North,
        };
    }

}

/// `minecraft:pink_glazed_terracotta` block.
pub mod pink_glazed_terracotta {
    use super::*;

    /// `minecraft:pink_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PinkGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13711,
                ( Facing::South, ) => 13712,
                ( Facing::West, ) => 13713,
                ( Facing::East, ) => 13714,
            })
        }
    }

    impl From<PinkGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : PinkGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkGlazedTerracotta { }

    impl Block for PinkGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:potted_cherry_sapling` block.
pub mod potted_cherry_sapling {
    use super::*;

    /// `minecraft:potted_cherry_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedCherrySapling;

    impl PottedCherrySapling {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9358)
        }
    }

    impl From<PottedCherrySapling> for BlockState {
        #[inline(always)]
        fn from(value : PottedCherrySapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedCherrySapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedCherrySapling { }

    impl Block for PottedCherrySapling {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cauldron` block.
pub mod cauldron {
    use super::*;

    /// `minecraft:cauldron` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Cauldron;

    impl Cauldron {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(8182)
        }
    }

    impl From<Cauldron> for BlockState {
        #[inline(always)]
        fn from(value : Cauldron) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Cauldron {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Cauldron { }

    impl Block for Cauldron {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:deepslate_bricks` block.
pub mod deepslate_bricks {
    use super::*;

    /// `minecraft:deepslate_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateBricks;

    impl DeepslateBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27232)
        }
    }

    impl From<DeepslateBricks> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateBricks { }

    impl Block for DeepslateBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:horn_coral_wall_fan` block.
pub mod horn_coral_wall_fan {
    use super::*;

    /// `minecraft:horn_coral_wall_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct HornCoralWallFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl HornCoralWallFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 13980,
                ( false, Facing::North, ) => 13981,
                ( true, Facing::South, ) => 13982,
                ( false, Facing::South, ) => 13983,
                ( true, Facing::West, ) => 13984,
                ( false, Facing::West, ) => 13985,
                ( true, Facing::East, ) => 13986,
                ( false, Facing::East, ) => 13987,
            })
        }
    }

    impl From<HornCoralWallFan> for BlockState {
        #[inline(always)]
        fn from(value : HornCoralWallFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for HornCoralWallFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for HornCoralWallFan { }

    impl Block for HornCoralWallFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
            facing : Facing::North,
        };
    }

}

/// `minecraft:potted_crimson_roots` block.
pub mod potted_crimson_roots {
    use super::*;

    /// `minecraft:potted_crimson_roots` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedCrimsonRoots;

    impl PottedCrimsonRoots {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20517)
        }
    }

    impl From<PottedCrimsonRoots> for BlockState {
        #[inline(always)]
        fn from(value : PottedCrimsonRoots) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedCrimsonRoots {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedCrimsonRoots { }

    impl Block for PottedCrimsonRoots {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:wither_rose` block.
pub mod wither_rose {
    use super::*;

    /// `minecraft:wither_rose` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WitherRose;

    impl WitherRose {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2133)
        }
    }

    impl From<WitherRose> for BlockState {
        #[inline(always)]
        fn from(value : WitherRose) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WitherRose {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WitherRose { }

    impl Block for WitherRose {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:yellow_concrete` block.
pub mod yellow_concrete {
    use super::*;

    /// `minecraft:yellow_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowConcrete;

    impl YellowConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13755)
        }
    }

    impl From<YellowConcrete> for BlockState {
        #[inline(always)]
        fn from(value : YellowConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowConcrete { }

    impl Block for YellowConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:orange_wool` block.
pub mod orange_wool {
    use super::*;

    /// `minecraft:orange_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeWool;

    impl OrangeWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2094)
        }
    }

    impl From<OrangeWool> for BlockState {
        #[inline(always)]
        fn from(value : OrangeWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeWool { }

    impl Block for OrangeWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:pink_banner` block.
pub mod pink_banner {
    use super::*;

    /// `minecraft:pink_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl PinkBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11744,
                ( Rotation::N1, ) => 11745,
                ( Rotation::N2, ) => 11746,
                ( Rotation::N3, ) => 11747,
                ( Rotation::N4, ) => 11748,
                ( Rotation::N5, ) => 11749,
                ( Rotation::N6, ) => 11750,
                ( Rotation::N7, ) => 11751,
                ( Rotation::N8, ) => 11752,
                ( Rotation::N9, ) => 11753,
                ( Rotation::N10, ) => 11754,
                ( Rotation::N11, ) => 11755,
                ( Rotation::N12, ) => 11756,
                ( Rotation::N13, ) => 11757,
                ( Rotation::N14, ) => 11758,
                ( Rotation::N15, ) => 11759,
            })
        }
    }

    impl From<PinkBanner> for BlockState {
        #[inline(always)]
        fn from(value : PinkBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkBanner { }

    impl Block for PinkBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:magenta_terracotta` block.
pub mod magenta_terracotta {
    use super::*;

    /// `minecraft:magenta_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaTerracotta;

    impl MagentaTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10167)
        }
    }

    impl From<MagentaTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : MagentaTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaTerracotta { }

    impl Block for MagentaTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:end_stone` block.
pub mod end_stone {
    use super::*;

    /// `minecraft:end_stone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct EndStone;

    impl EndStone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(8199)
        }
    }

    impl From<EndStone> for BlockState {
        #[inline(always)]
        fn from(value : EndStone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for EndStone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for EndStone { }

    impl Block for EndStone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:deepslate` block.
pub mod deepslate {
    use super::*;

    /// `minecraft:deepslate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Deepslate {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl Deepslate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 25996,
                ( Axis::Y, ) => 25997,
                ( Axis::Z, ) => 25998,
            })
        }
    }

    impl From<Deepslate> for BlockState {
        #[inline(always)]
        fn from(value : Deepslate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Deepslate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Deepslate { }

    impl Block for Deepslate {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:waxed_exposed_cut_copper_stairs` block.
pub mod waxed_exposed_cut_copper_stairs {
    use super::*;

    /// `minecraft:waxed_exposed_cut_copper_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedExposedCutCopperStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl WaxedExposedCutCopperStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.facing, self.waterlogged, self.half, )) {
                ( Shape::Straight, Facing::North, true, Half::Top, ) => 24528,
                ( Shape::Straight, Facing::North, false, Half::Top, ) => 24529,
                ( Shape::InnerLeft, Facing::North, true, Half::Top, ) => 24530,
                ( Shape::InnerLeft, Facing::North, false, Half::Top, ) => 24531,
                ( Shape::InnerRight, Facing::North, true, Half::Top, ) => 24532,
                ( Shape::InnerRight, Facing::North, false, Half::Top, ) => 24533,
                ( Shape::OuterLeft, Facing::North, true, Half::Top, ) => 24534,
                ( Shape::OuterLeft, Facing::North, false, Half::Top, ) => 24535,
                ( Shape::OuterRight, Facing::North, true, Half::Top, ) => 24536,
                ( Shape::OuterRight, Facing::North, false, Half::Top, ) => 24537,
                ( Shape::Straight, Facing::North, true, Half::Bottom, ) => 24538,
                ( Shape::Straight, Facing::North, false, Half::Bottom, ) => 24539,
                ( Shape::InnerLeft, Facing::North, true, Half::Bottom, ) => 24540,
                ( Shape::InnerLeft, Facing::North, false, Half::Bottom, ) => 24541,
                ( Shape::InnerRight, Facing::North, true, Half::Bottom, ) => 24542,
                ( Shape::InnerRight, Facing::North, false, Half::Bottom, ) => 24543,
                ( Shape::OuterLeft, Facing::North, true, Half::Bottom, ) => 24544,
                ( Shape::OuterLeft, Facing::North, false, Half::Bottom, ) => 24545,
                ( Shape::OuterRight, Facing::North, true, Half::Bottom, ) => 24546,
                ( Shape::OuterRight, Facing::North, false, Half::Bottom, ) => 24547,
                ( Shape::Straight, Facing::South, true, Half::Top, ) => 24548,
                ( Shape::Straight, Facing::South, false, Half::Top, ) => 24549,
                ( Shape::InnerLeft, Facing::South, true, Half::Top, ) => 24550,
                ( Shape::InnerLeft, Facing::South, false, Half::Top, ) => 24551,
                ( Shape::InnerRight, Facing::South, true, Half::Top, ) => 24552,
                ( Shape::InnerRight, Facing::South, false, Half::Top, ) => 24553,
                ( Shape::OuterLeft, Facing::South, true, Half::Top, ) => 24554,
                ( Shape::OuterLeft, Facing::South, false, Half::Top, ) => 24555,
                ( Shape::OuterRight, Facing::South, true, Half::Top, ) => 24556,
                ( Shape::OuterRight, Facing::South, false, Half::Top, ) => 24557,
                ( Shape::Straight, Facing::South, true, Half::Bottom, ) => 24558,
                ( Shape::Straight, Facing::South, false, Half::Bottom, ) => 24559,
                ( Shape::InnerLeft, Facing::South, true, Half::Bottom, ) => 24560,
                ( Shape::InnerLeft, Facing::South, false, Half::Bottom, ) => 24561,
                ( Shape::InnerRight, Facing::South, true, Half::Bottom, ) => 24562,
                ( Shape::InnerRight, Facing::South, false, Half::Bottom, ) => 24563,
                ( Shape::OuterLeft, Facing::South, true, Half::Bottom, ) => 24564,
                ( Shape::OuterLeft, Facing::South, false, Half::Bottom, ) => 24565,
                ( Shape::OuterRight, Facing::South, true, Half::Bottom, ) => 24566,
                ( Shape::OuterRight, Facing::South, false, Half::Bottom, ) => 24567,
                ( Shape::Straight, Facing::West, true, Half::Top, ) => 24568,
                ( Shape::Straight, Facing::West, false, Half::Top, ) => 24569,
                ( Shape::InnerLeft, Facing::West, true, Half::Top, ) => 24570,
                ( Shape::InnerLeft, Facing::West, false, Half::Top, ) => 24571,
                ( Shape::InnerRight, Facing::West, true, Half::Top, ) => 24572,
                ( Shape::InnerRight, Facing::West, false, Half::Top, ) => 24573,
                ( Shape::OuterLeft, Facing::West, true, Half::Top, ) => 24574,
                ( Shape::OuterLeft, Facing::West, false, Half::Top, ) => 24575,
                ( Shape::OuterRight, Facing::West, true, Half::Top, ) => 24576,
                ( Shape::OuterRight, Facing::West, false, Half::Top, ) => 24577,
                ( Shape::Straight, Facing::West, true, Half::Bottom, ) => 24578,
                ( Shape::Straight, Facing::West, false, Half::Bottom, ) => 24579,
                ( Shape::InnerLeft, Facing::West, true, Half::Bottom, ) => 24580,
                ( Shape::InnerLeft, Facing::West, false, Half::Bottom, ) => 24581,
                ( Shape::InnerRight, Facing::West, true, Half::Bottom, ) => 24582,
                ( Shape::InnerRight, Facing::West, false, Half::Bottom, ) => 24583,
                ( Shape::OuterLeft, Facing::West, true, Half::Bottom, ) => 24584,
                ( Shape::OuterLeft, Facing::West, false, Half::Bottom, ) => 24585,
                ( Shape::OuterRight, Facing::West, true, Half::Bottom, ) => 24586,
                ( Shape::OuterRight, Facing::West, false, Half::Bottom, ) => 24587,
                ( Shape::Straight, Facing::East, true, Half::Top, ) => 24588,
                ( Shape::Straight, Facing::East, false, Half::Top, ) => 24589,
                ( Shape::InnerLeft, Facing::East, true, Half::Top, ) => 24590,
                ( Shape::InnerLeft, Facing::East, false, Half::Top, ) => 24591,
                ( Shape::InnerRight, Facing::East, true, Half::Top, ) => 24592,
                ( Shape::InnerRight, Facing::East, false, Half::Top, ) => 24593,
                ( Shape::OuterLeft, Facing::East, true, Half::Top, ) => 24594,
                ( Shape::OuterLeft, Facing::East, false, Half::Top, ) => 24595,
                ( Shape::OuterRight, Facing::East, true, Half::Top, ) => 24596,
                ( Shape::OuterRight, Facing::East, false, Half::Top, ) => 24597,
                ( Shape::Straight, Facing::East, true, Half::Bottom, ) => 24598,
                ( Shape::Straight, Facing::East, false, Half::Bottom, ) => 24599,
                ( Shape::InnerLeft, Facing::East, true, Half::Bottom, ) => 24600,
                ( Shape::InnerLeft, Facing::East, false, Half::Bottom, ) => 24601,
                ( Shape::InnerRight, Facing::East, true, Half::Bottom, ) => 24602,
                ( Shape::InnerRight, Facing::East, false, Half::Bottom, ) => 24603,
                ( Shape::OuterLeft, Facing::East, true, Half::Bottom, ) => 24604,
                ( Shape::OuterLeft, Facing::East, false, Half::Bottom, ) => 24605,
                ( Shape::OuterRight, Facing::East, true, Half::Bottom, ) => 24606,
                ( Shape::OuterRight, Facing::East, false, Half::Bottom, ) => 24607,
            })
        }
    }

    impl From<WaxedExposedCutCopperStairs> for BlockState {
        #[inline(always)]
        fn from(value : WaxedExposedCutCopperStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedExposedCutCopperStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedExposedCutCopperStairs { }

    impl Block for WaxedExposedCutCopperStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            facing : Facing::North,
            waterlogged : false,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:twisting_vines` block.
pub mod twisting_vines {
    use super::*;

    /// `minecraft:twisting_vines` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TwistingVines {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
        /// `16` variant.
        N16,
        /// `17` variant.
        N17,
        /// `18` variant.
        N18,
        /// `19` variant.
        N19,
        /// `20` variant.
        N20,
        /// `21` variant.
        N21,
        /// `22` variant.
        N22,
        /// `23` variant.
        N23,
        /// `24` variant.
        N24,
        /// `25` variant.
        N25,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl TwistingVines {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 19693,
                ( Age::N1, ) => 19694,
                ( Age::N2, ) => 19695,
                ( Age::N3, ) => 19696,
                ( Age::N4, ) => 19697,
                ( Age::N5, ) => 19698,
                ( Age::N6, ) => 19699,
                ( Age::N7, ) => 19700,
                ( Age::N8, ) => 19701,
                ( Age::N9, ) => 19702,
                ( Age::N10, ) => 19703,
                ( Age::N11, ) => 19704,
                ( Age::N12, ) => 19705,
                ( Age::N13, ) => 19706,
                ( Age::N14, ) => 19707,
                ( Age::N15, ) => 19708,
                ( Age::N16, ) => 19709,
                ( Age::N17, ) => 19710,
                ( Age::N18, ) => 19711,
                ( Age::N19, ) => 19712,
                ( Age::N20, ) => 19713,
                ( Age::N21, ) => 19714,
                ( Age::N22, ) => 19715,
                ( Age::N23, ) => 19716,
                ( Age::N24, ) => 19717,
                ( Age::N25, ) => 19718,
            })
        }
    }

    impl From<TwistingVines> for BlockState {
        #[inline(always)]
        fn from(value : TwistingVines) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TwistingVines {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TwistingVines { }

    impl Block for TwistingVines {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:andesite` block.
pub mod andesite {
    use super::*;

    /// `minecraft:andesite` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Andesite;

    impl Andesite {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6)
        }
    }

    impl From<Andesite> for BlockState {
        #[inline(always)]
        fn from(value : Andesite) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Andesite {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Andesite { }

    impl Block for Andesite {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:polished_blackstone_bricks` block.
pub mod polished_blackstone_bricks {
    use super::*;

    /// `minecraft:polished_blackstone_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedBlackstoneBricks;

    impl PolishedBlackstoneBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20932)
        }
    }

    impl From<PolishedBlackstoneBricks> for BlockState {
        #[inline(always)]
        fn from(value : PolishedBlackstoneBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedBlackstoneBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedBlackstoneBricks { }

    impl Block for PolishedBlackstoneBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cherry_fence` block.
pub mod cherry_fence {
    use super::*;

    /// `minecraft:cherry_fence` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryFence {
        /// `north` state.
        pub north : bool,
        /// `east` state.
        pub east : bool,
        /// `south` state.
        pub south : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : bool,
    }

    impl CherryFence {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.east, self.south, self.waterlogged, self.west, )) {
                ( true, true, true, true, true, ) => 12621,
                ( true, true, true, true, false, ) => 12622,
                ( true, true, true, false, true, ) => 12623,
                ( true, true, true, false, false, ) => 12624,
                ( true, true, false, true, true, ) => 12625,
                ( true, true, false, true, false, ) => 12626,
                ( true, true, false, false, true, ) => 12627,
                ( true, true, false, false, false, ) => 12628,
                ( false, true, true, true, true, ) => 12629,
                ( false, true, true, true, false, ) => 12630,
                ( false, true, true, false, true, ) => 12631,
                ( false, true, true, false, false, ) => 12632,
                ( false, true, false, true, true, ) => 12633,
                ( false, true, false, true, false, ) => 12634,
                ( false, true, false, false, true, ) => 12635,
                ( false, true, false, false, false, ) => 12636,
                ( true, false, true, true, true, ) => 12637,
                ( true, false, true, true, false, ) => 12638,
                ( true, false, true, false, true, ) => 12639,
                ( true, false, true, false, false, ) => 12640,
                ( true, false, false, true, true, ) => 12641,
                ( true, false, false, true, false, ) => 12642,
                ( true, false, false, false, true, ) => 12643,
                ( true, false, false, false, false, ) => 12644,
                ( false, false, true, true, true, ) => 12645,
                ( false, false, true, true, false, ) => 12646,
                ( false, false, true, false, true, ) => 12647,
                ( false, false, true, false, false, ) => 12648,
                ( false, false, false, true, true, ) => 12649,
                ( false, false, false, true, false, ) => 12650,
                ( false, false, false, false, true, ) => 12651,
                ( false, false, false, false, false, ) => 12652,
            })
        }
    }

    impl From<CherryFence> for BlockState {
        #[inline(always)]
        fn from(value : CherryFence) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryFence {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryFence { }

    impl Block for CherryFence {
        const DEFAULT_STATE : Self = Self {
            north : false,
            east : false,
            south : false,
            waterlogged : false,
            west : false,
        };
    }

}

/// `minecraft:green_candle_cake` block.
pub mod green_candle_cake {
    use super::*;

    /// `minecraft:green_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl GreenCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22085,
                ( false, ) => 22086,
            })
        }
    }

    impl From<GreenCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : GreenCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenCandleCake { }

    impl Block for GreenCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:horn_coral_fan` block.
pub mod horn_coral_fan {
    use super::*;

    /// `minecraft:horn_coral_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct HornCoralFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl HornCoralFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13906,
                ( false, ) => 13907,
            })
        }
    }

    impl From<HornCoralFan> for BlockState {
        #[inline(always)]
        fn from(value : HornCoralFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for HornCoralFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for HornCoralFan { }

    impl Block for HornCoralFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:potted_poppy` block.
pub mod potted_poppy {
    use super::*;

    /// `minecraft:potted_poppy` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedPoppy;

    impl PottedPoppy {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9364)
        }
    }

    impl From<PottedPoppy> for BlockState {
        #[inline(always)]
        fn from(value : PottedPoppy) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedPoppy {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedPoppy { }

    impl Block for PottedPoppy {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:white_wall_banner` block.
pub mod white_wall_banner {
    use super::*;

    /// `minecraft:white_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WhiteWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11904,
                ( Facing::South, ) => 11905,
                ( Facing::West, ) => 11906,
                ( Facing::East, ) => 11907,
            })
        }
    }

    impl From<WhiteWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : WhiteWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteWallBanner { }

    impl Block for WhiteWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:spruce_sign` block.
pub mod spruce_sign {
    use super::*;

    /// `minecraft:spruce_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceSign {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl SpruceSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.waterlogged, )) {
                ( Rotation::N0, true, ) => 4398,
                ( Rotation::N0, false, ) => 4399,
                ( Rotation::N1, true, ) => 4400,
                ( Rotation::N1, false, ) => 4401,
                ( Rotation::N2, true, ) => 4402,
                ( Rotation::N2, false, ) => 4403,
                ( Rotation::N3, true, ) => 4404,
                ( Rotation::N3, false, ) => 4405,
                ( Rotation::N4, true, ) => 4406,
                ( Rotation::N4, false, ) => 4407,
                ( Rotation::N5, true, ) => 4408,
                ( Rotation::N5, false, ) => 4409,
                ( Rotation::N6, true, ) => 4410,
                ( Rotation::N6, false, ) => 4411,
                ( Rotation::N7, true, ) => 4412,
                ( Rotation::N7, false, ) => 4413,
                ( Rotation::N8, true, ) => 4414,
                ( Rotation::N8, false, ) => 4415,
                ( Rotation::N9, true, ) => 4416,
                ( Rotation::N9, false, ) => 4417,
                ( Rotation::N10, true, ) => 4418,
                ( Rotation::N10, false, ) => 4419,
                ( Rotation::N11, true, ) => 4420,
                ( Rotation::N11, false, ) => 4421,
                ( Rotation::N12, true, ) => 4422,
                ( Rotation::N12, false, ) => 4423,
                ( Rotation::N13, true, ) => 4424,
                ( Rotation::N13, false, ) => 4425,
                ( Rotation::N14, true, ) => 4426,
                ( Rotation::N14, false, ) => 4427,
                ( Rotation::N15, true, ) => 4428,
                ( Rotation::N15, false, ) => 4429,
            })
        }
    }

    impl From<SpruceSign> for BlockState {
        #[inline(always)]
        fn from(value : SpruceSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceSign { }

    impl Block for SpruceSign {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            waterlogged : false,
        };
    }

}

/// `minecraft:obsidian` block.
pub mod obsidian {
    use super::*;

    /// `minecraft:obsidian` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Obsidian;

    impl Obsidian {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2400)
        }
    }

    impl From<Obsidian> for BlockState {
        #[inline(always)]
        fn from(value : Obsidian) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Obsidian {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Obsidian { }

    impl Block for Obsidian {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:mud_brick_slab` block.
pub mod mud_brick_slab {
    use super::*;

    /// `minecraft:mud_brick_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MudBrickSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl MudBrickSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 12165,
                ( Kind::Top, false, ) => 12166,
                ( Kind::Bottom, true, ) => 12167,
                ( Kind::Bottom, false, ) => 12168,
                ( Kind::Double, true, ) => 12169,
                ( Kind::Double, false, ) => 12170,
            })
        }
    }

    impl From<MudBrickSlab> for BlockState {
        #[inline(always)]
        fn from(value : MudBrickSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MudBrickSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MudBrickSlab { }

    impl Block for MudBrickSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:deepslate_copper_ore` block.
pub mod deepslate_copper_ore {
    use super::*;

    /// `minecraft:deepslate_copper_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateCopperOre;

    impl DeepslateCopperOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24003)
        }
    }

    impl From<DeepslateCopperOre> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateCopperOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateCopperOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateCopperOre { }

    impl Block for DeepslateCopperOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:warped_door` block.
pub mod warped_door {
    use super::*;

    /// `minecraft:warped_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedDoor {
        /// `half` state.
        pub half : Half,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
        /// `hinge` state.
        pub hinge : Hinge,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WarpedDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.open, self.powered, self.hinge, self.facing, )) {
                ( Half::Upper, true, true, Hinge::Left, Facing::North, ) => 20267,
                ( Half::Upper, true, false, Hinge::Left, Facing::North, ) => 20268,
                ( Half::Upper, false, true, Hinge::Left, Facing::North, ) => 20269,
                ( Half::Upper, false, false, Hinge::Left, Facing::North, ) => 20270,
                ( Half::Upper, true, true, Hinge::Right, Facing::North, ) => 20271,
                ( Half::Upper, true, false, Hinge::Right, Facing::North, ) => 20272,
                ( Half::Upper, false, true, Hinge::Right, Facing::North, ) => 20273,
                ( Half::Upper, false, false, Hinge::Right, Facing::North, ) => 20274,
                ( Half::Lower, true, true, Hinge::Left, Facing::North, ) => 20275,
                ( Half::Lower, true, false, Hinge::Left, Facing::North, ) => 20276,
                ( Half::Lower, false, true, Hinge::Left, Facing::North, ) => 20277,
                ( Half::Lower, false, false, Hinge::Left, Facing::North, ) => 20278,
                ( Half::Lower, true, true, Hinge::Right, Facing::North, ) => 20279,
                ( Half::Lower, true, false, Hinge::Right, Facing::North, ) => 20280,
                ( Half::Lower, false, true, Hinge::Right, Facing::North, ) => 20281,
                ( Half::Lower, false, false, Hinge::Right, Facing::North, ) => 20282,
                ( Half::Upper, true, true, Hinge::Left, Facing::South, ) => 20283,
                ( Half::Upper, true, false, Hinge::Left, Facing::South, ) => 20284,
                ( Half::Upper, false, true, Hinge::Left, Facing::South, ) => 20285,
                ( Half::Upper, false, false, Hinge::Left, Facing::South, ) => 20286,
                ( Half::Upper, true, true, Hinge::Right, Facing::South, ) => 20287,
                ( Half::Upper, true, false, Hinge::Right, Facing::South, ) => 20288,
                ( Half::Upper, false, true, Hinge::Right, Facing::South, ) => 20289,
                ( Half::Upper, false, false, Hinge::Right, Facing::South, ) => 20290,
                ( Half::Lower, true, true, Hinge::Left, Facing::South, ) => 20291,
                ( Half::Lower, true, false, Hinge::Left, Facing::South, ) => 20292,
                ( Half::Lower, false, true, Hinge::Left, Facing::South, ) => 20293,
                ( Half::Lower, false, false, Hinge::Left, Facing::South, ) => 20294,
                ( Half::Lower, true, true, Hinge::Right, Facing::South, ) => 20295,
                ( Half::Lower, true, false, Hinge::Right, Facing::South, ) => 20296,
                ( Half::Lower, false, true, Hinge::Right, Facing::South, ) => 20297,
                ( Half::Lower, false, false, Hinge::Right, Facing::South, ) => 20298,
                ( Half::Upper, true, true, Hinge::Left, Facing::West, ) => 20299,
                ( Half::Upper, true, false, Hinge::Left, Facing::West, ) => 20300,
                ( Half::Upper, false, true, Hinge::Left, Facing::West, ) => 20301,
                ( Half::Upper, false, false, Hinge::Left, Facing::West, ) => 20302,
                ( Half::Upper, true, true, Hinge::Right, Facing::West, ) => 20303,
                ( Half::Upper, true, false, Hinge::Right, Facing::West, ) => 20304,
                ( Half::Upper, false, true, Hinge::Right, Facing::West, ) => 20305,
                ( Half::Upper, false, false, Hinge::Right, Facing::West, ) => 20306,
                ( Half::Lower, true, true, Hinge::Left, Facing::West, ) => 20307,
                ( Half::Lower, true, false, Hinge::Left, Facing::West, ) => 20308,
                ( Half::Lower, false, true, Hinge::Left, Facing::West, ) => 20309,
                ( Half::Lower, false, false, Hinge::Left, Facing::West, ) => 20310,
                ( Half::Lower, true, true, Hinge::Right, Facing::West, ) => 20311,
                ( Half::Lower, true, false, Hinge::Right, Facing::West, ) => 20312,
                ( Half::Lower, false, true, Hinge::Right, Facing::West, ) => 20313,
                ( Half::Lower, false, false, Hinge::Right, Facing::West, ) => 20314,
                ( Half::Upper, true, true, Hinge::Left, Facing::East, ) => 20315,
                ( Half::Upper, true, false, Hinge::Left, Facing::East, ) => 20316,
                ( Half::Upper, false, true, Hinge::Left, Facing::East, ) => 20317,
                ( Half::Upper, false, false, Hinge::Left, Facing::East, ) => 20318,
                ( Half::Upper, true, true, Hinge::Right, Facing::East, ) => 20319,
                ( Half::Upper, true, false, Hinge::Right, Facing::East, ) => 20320,
                ( Half::Upper, false, true, Hinge::Right, Facing::East, ) => 20321,
                ( Half::Upper, false, false, Hinge::Right, Facing::East, ) => 20322,
                ( Half::Lower, true, true, Hinge::Left, Facing::East, ) => 20323,
                ( Half::Lower, true, false, Hinge::Left, Facing::East, ) => 20324,
                ( Half::Lower, false, true, Hinge::Left, Facing::East, ) => 20325,
                ( Half::Lower, false, false, Hinge::Left, Facing::East, ) => 20326,
                ( Half::Lower, true, true, Hinge::Right, Facing::East, ) => 20327,
                ( Half::Lower, true, false, Hinge::Right, Facing::East, ) => 20328,
                ( Half::Lower, false, true, Hinge::Right, Facing::East, ) => 20329,
                ( Half::Lower, false, false, Hinge::Right, Facing::East, ) => 20330,
            })
        }
    }

    impl From<WarpedDoor> for BlockState {
        #[inline(always)]
        fn from(value : WarpedDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedDoor { }

    impl Block for WarpedDoor {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
            open : false,
            powered : false,
            hinge : Hinge::Left,
            facing : Facing::North,
        };
    }

}

/// `minecraft:honey_block` block.
pub mod honey_block {
    use super::*;

    /// `minecraft:honey_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct HoneyBlock;

    impl HoneyBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20505)
        }
    }

    impl From<HoneyBlock> for BlockState {
        #[inline(always)]
        fn from(value : HoneyBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for HoneyBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for HoneyBlock { }

    impl Block for HoneyBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:structure_block` block.
pub mod structure_block {
    use super::*;

    /// `minecraft:structure_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StructureBlock {
        /// `mode` state.
        pub mode : Mode,
    }

    /// `mode` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Mode {
        /// `save` variant.
        Save,
        /// `load` variant.
        Load,
        /// `corner` variant.
        Corner,
        /// `data` variant.
        Data,
    }
    impl crate::Sealed for Mode { }
    impl BlockProperty for Mode { }

    impl StructureBlock {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.mode, )) {
                ( Mode::Save, ) => 20411,
                ( Mode::Load, ) => 20412,
                ( Mode::Corner, ) => 20413,
                ( Mode::Data, ) => 20414,
            })
        }
    }

    impl From<StructureBlock> for BlockState {
        #[inline(always)]
        fn from(value : StructureBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StructureBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StructureBlock { }

    impl Block for StructureBlock {
        const DEFAULT_STATE : Self = Self {
            mode : Mode::Load,
        };
    }

}

/// `minecraft:warped_nylium` block.
pub mod warped_nylium {
    use super::*;

    /// `minecraft:warped_nylium` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedNylium;

    impl WarpedNylium {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19646)
        }
    }

    impl From<WarpedNylium> for BlockState {
        #[inline(always)]
        fn from(value : WarpedNylium) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedNylium {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedNylium { }

    impl Block for WarpedNylium {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:coarse_dirt` block.
pub mod coarse_dirt {
    use super::*;

    /// `minecraft:coarse_dirt` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CoarseDirt;

    impl CoarseDirt {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11)
        }
    }

    impl From<CoarseDirt> for BlockState {
        #[inline(always)]
        fn from(value : CoarseDirt) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CoarseDirt {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CoarseDirt { }

    impl Block for CoarseDirt {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:bush` block.
pub mod bush {
    use super::*;

    /// `minecraft:bush` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Bush;

    impl Bush {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2051)
        }
    }

    impl From<Bush> for BlockState {
        #[inline(always)]
        fn from(value : Bush) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Bush {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Bush { }

    impl Block for Bush {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_weathered_cut_copper_slab` block.
pub mod waxed_weathered_cut_copper_slab {
    use super::*;

    /// `minecraft:waxed_weathered_cut_copper_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedWeatheredCutCopperSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl WaxedWeatheredCutCopperSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 24694,
                ( false, Kind::Top, ) => 24695,
                ( true, Kind::Bottom, ) => 24696,
                ( false, Kind::Bottom, ) => 24697,
                ( true, Kind::Double, ) => 24698,
                ( false, Kind::Double, ) => 24699,
            })
        }
    }

    impl From<WaxedWeatheredCutCopperSlab> for BlockState {
        #[inline(always)]
        fn from(value : WaxedWeatheredCutCopperSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedWeatheredCutCopperSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedWeatheredCutCopperSlab { }

    impl Block for WaxedWeatheredCutCopperSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:cyan_shulker_box` block.
pub mod cyan_shulker_box {
    use super::*;

    /// `minecraft:cyan_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CyanShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13645,
                ( Facing::East, ) => 13646,
                ( Facing::South, ) => 13647,
                ( Facing::West, ) => 13648,
                ( Facing::Up, ) => 13649,
                ( Facing::Down, ) => 13650,
            })
        }
    }

    impl From<CyanShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : CyanShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanShulkerBox { }

    impl Block for CyanShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:potted_crimson_fungus` block.
pub mod potted_crimson_fungus {
    use super::*;

    /// `minecraft:potted_crimson_fungus` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedCrimsonFungus;

    impl PottedCrimsonFungus {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20515)
        }
    }

    impl From<PottedCrimsonFungus> for BlockState {
        #[inline(always)]
        fn from(value : PottedCrimsonFungus) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedCrimsonFungus {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedCrimsonFungus { }

    impl Block for PottedCrimsonFungus {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:honeycomb_block` block.
pub mod honeycomb_block {
    use super::*;

    /// `minecraft:honeycomb_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct HoneycombBlock;

    impl HoneycombBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20506)
        }
    }

    impl From<HoneycombBlock> for BlockState {
        #[inline(always)]
        fn from(value : HoneycombBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for HoneycombBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for HoneycombBlock { }

    impl Block for HoneycombBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:chipped_anvil` block.
pub mod chipped_anvil {
    use super::*;

    /// `minecraft:chipped_anvil` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChippedAnvil {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl ChippedAnvil {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 9920,
                ( Facing::South, ) => 9921,
                ( Facing::West, ) => 9922,
                ( Facing::East, ) => 9923,
            })
        }
    }

    impl From<ChippedAnvil> for BlockState {
        #[inline(always)]
        fn from(value : ChippedAnvil) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChippedAnvil {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChippedAnvil { }

    impl Block for ChippedAnvil {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:brick_slab` block.
pub mod brick_slab {
    use super::*;

    /// `minecraft:brick_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrickSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl BrickSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 12153,
                ( false, Kind::Top, ) => 12154,
                ( true, Kind::Bottom, ) => 12155,
                ( false, Kind::Bottom, ) => 12156,
                ( true, Kind::Double, ) => 12157,
                ( false, Kind::Double, ) => 12158,
            })
        }
    }

    impl From<BrickSlab> for BlockState {
        #[inline(always)]
        fn from(value : BrickSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrickSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrickSlab { }

    impl Block for BrickSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:lava` block.
pub mod lava {
    use super::*;

    /// `minecraft:lava` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Lava {
        /// `level` state.
        pub level : Level,
    }

    /// `level` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Level {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Level { }
    impl BlockProperty for Level { }

    impl Lava {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.level, )) {
                ( Level::N0, ) => 102,
                ( Level::N1, ) => 103,
                ( Level::N2, ) => 104,
                ( Level::N3, ) => 105,
                ( Level::N4, ) => 106,
                ( Level::N5, ) => 107,
                ( Level::N6, ) => 108,
                ( Level::N7, ) => 109,
                ( Level::N8, ) => 110,
                ( Level::N9, ) => 111,
                ( Level::N10, ) => 112,
                ( Level::N11, ) => 113,
                ( Level::N12, ) => 114,
                ( Level::N13, ) => 115,
                ( Level::N14, ) => 116,
                ( Level::N15, ) => 117,
            })
        }
    }

    impl From<Lava> for BlockState {
        #[inline(always)]
        fn from(value : Lava) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Lava {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Lava { }

    impl Block for Lava {
        const DEFAULT_STATE : Self = Self {
            level : Level::N0,
        };
    }

}

/// `minecraft:orange_candle` block.
pub mod orange_candle {
    use super::*;

    /// `minecraft:orange_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeCandle {
        /// `candles` state.
        pub candles : Candles,
        /// `lit` state.
        pub lit : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl OrangeCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.candles, self.lit, self.waterlogged, )) {
                ( Candles::N1, true, true, ) => 21817,
                ( Candles::N1, true, false, ) => 21818,
                ( Candles::N1, false, true, ) => 21819,
                ( Candles::N1, false, false, ) => 21820,
                ( Candles::N2, true, true, ) => 21821,
                ( Candles::N2, true, false, ) => 21822,
                ( Candles::N2, false, true, ) => 21823,
                ( Candles::N2, false, false, ) => 21824,
                ( Candles::N3, true, true, ) => 21825,
                ( Candles::N3, true, false, ) => 21826,
                ( Candles::N3, false, true, ) => 21827,
                ( Candles::N3, false, false, ) => 21828,
                ( Candles::N4, true, true, ) => 21829,
                ( Candles::N4, true, false, ) => 21830,
                ( Candles::N4, false, true, ) => 21831,
                ( Candles::N4, false, false, ) => 21832,
            })
        }
    }

    impl From<OrangeCandle> for BlockState {
        #[inline(always)]
        fn from(value : OrangeCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeCandle { }

    impl Block for OrangeCandle {
        const DEFAULT_STATE : Self = Self {
            candles : Candles::N1,
            lit : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:crimson_sign` block.
pub mod crimson_sign {
    use super::*;

    /// `minecraft:crimson_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonSign {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl CrimsonSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.waterlogged, )) {
                ( Rotation::N0, true, ) => 20331,
                ( Rotation::N0, false, ) => 20332,
                ( Rotation::N1, true, ) => 20333,
                ( Rotation::N1, false, ) => 20334,
                ( Rotation::N2, true, ) => 20335,
                ( Rotation::N2, false, ) => 20336,
                ( Rotation::N3, true, ) => 20337,
                ( Rotation::N3, false, ) => 20338,
                ( Rotation::N4, true, ) => 20339,
                ( Rotation::N4, false, ) => 20340,
                ( Rotation::N5, true, ) => 20341,
                ( Rotation::N5, false, ) => 20342,
                ( Rotation::N6, true, ) => 20343,
                ( Rotation::N6, false, ) => 20344,
                ( Rotation::N7, true, ) => 20345,
                ( Rotation::N7, false, ) => 20346,
                ( Rotation::N8, true, ) => 20347,
                ( Rotation::N8, false, ) => 20348,
                ( Rotation::N9, true, ) => 20349,
                ( Rotation::N9, false, ) => 20350,
                ( Rotation::N10, true, ) => 20351,
                ( Rotation::N10, false, ) => 20352,
                ( Rotation::N11, true, ) => 20353,
                ( Rotation::N11, false, ) => 20354,
                ( Rotation::N12, true, ) => 20355,
                ( Rotation::N12, false, ) => 20356,
                ( Rotation::N13, true, ) => 20357,
                ( Rotation::N13, false, ) => 20358,
                ( Rotation::N14, true, ) => 20359,
                ( Rotation::N14, false, ) => 20360,
                ( Rotation::N15, true, ) => 20361,
                ( Rotation::N15, false, ) => 20362,
            })
        }
    }

    impl From<CrimsonSign> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonSign { }

    impl Block for CrimsonSign {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            waterlogged : false,
        };
    }

}

/// `minecraft:blue_candle_cake` block.
pub mod blue_candle_cake {
    use super::*;

    /// `minecraft:blue_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl BlueCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22081,
                ( false, ) => 22082,
            })
        }
    }

    impl From<BlueCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : BlueCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueCandleCake { }

    impl Block for BlueCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:purple_stained_glass_pane` block.
pub mod purple_stained_glass_pane {
    use super::*;

    /// `minecraft:purple_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleStainedGlassPane {
        /// `east` state.
        pub east : bool,
        /// `north` state.
        pub north : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : bool,
        /// `south` state.
        pub south : bool,
    }

    impl PurpleStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.north, self.waterlogged, self.west, self.south, )) {
                ( true, true, true, true, true, ) => 10501,
                ( true, true, true, false, true, ) => 10502,
                ( true, true, false, true, true, ) => 10503,
                ( true, true, false, false, true, ) => 10504,
                ( true, true, true, true, false, ) => 10505,
                ( true, true, true, false, false, ) => 10506,
                ( true, true, false, true, false, ) => 10507,
                ( true, true, false, false, false, ) => 10508,
                ( true, false, true, true, true, ) => 10509,
                ( true, false, true, false, true, ) => 10510,
                ( true, false, false, true, true, ) => 10511,
                ( true, false, false, false, true, ) => 10512,
                ( true, false, true, true, false, ) => 10513,
                ( true, false, true, false, false, ) => 10514,
                ( true, false, false, true, false, ) => 10515,
                ( true, false, false, false, false, ) => 10516,
                ( false, true, true, true, true, ) => 10517,
                ( false, true, true, false, true, ) => 10518,
                ( false, true, false, true, true, ) => 10519,
                ( false, true, false, false, true, ) => 10520,
                ( false, true, true, true, false, ) => 10521,
                ( false, true, true, false, false, ) => 10522,
                ( false, true, false, true, false, ) => 10523,
                ( false, true, false, false, false, ) => 10524,
                ( false, false, true, true, true, ) => 10525,
                ( false, false, true, false, true, ) => 10526,
                ( false, false, false, true, true, ) => 10527,
                ( false, false, false, false, true, ) => 10528,
                ( false, false, true, true, false, ) => 10529,
                ( false, false, true, false, false, ) => 10530,
                ( false, false, false, true, false, ) => 10531,
                ( false, false, false, false, false, ) => 10532,
            })
        }
    }

    impl From<PurpleStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : PurpleStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleStainedGlassPane { }

    impl Block for PurpleStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            east : false,
            north : false,
            waterlogged : false,
            west : false,
            south : false,
        };
    }

}

/// `minecraft:tube_coral_wall_fan` block.
pub mod tube_coral_wall_fan {
    use super::*;

    /// `minecraft:tube_coral_wall_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TubeCoralWallFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl TubeCoralWallFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 13948,
                ( false, Facing::North, ) => 13949,
                ( true, Facing::South, ) => 13950,
                ( false, Facing::South, ) => 13951,
                ( true, Facing::West, ) => 13952,
                ( false, Facing::West, ) => 13953,
                ( true, Facing::East, ) => 13954,
                ( false, Facing::East, ) => 13955,
            })
        }
    }

    impl From<TubeCoralWallFan> for BlockState {
        #[inline(always)]
        fn from(value : TubeCoralWallFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TubeCoralWallFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TubeCoralWallFan { }

    impl Block for TubeCoralWallFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
            facing : Facing::North,
        };
    }

}

/// `minecraft:iron_door` block.
pub mod iron_door {
    use super::*;

    /// `minecraft:iron_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct IronDoor {
        /// `facing` state.
        pub facing : Facing,
        /// `hinge` state.
        pub hinge : Hinge,
        /// `open` state.
        pub open : bool,
        /// `half` state.
        pub half : Half,
        /// `powered` state.
        pub powered : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl IronDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.hinge, self.open, self.half, self.powered, )) {
                ( Facing::North, Hinge::Left, true, Half::Upper, true, ) => 5828,
                ( Facing::North, Hinge::Left, true, Half::Upper, false, ) => 5829,
                ( Facing::North, Hinge::Left, false, Half::Upper, true, ) => 5830,
                ( Facing::North, Hinge::Left, false, Half::Upper, false, ) => 5831,
                ( Facing::North, Hinge::Right, true, Half::Upper, true, ) => 5832,
                ( Facing::North, Hinge::Right, true, Half::Upper, false, ) => 5833,
                ( Facing::North, Hinge::Right, false, Half::Upper, true, ) => 5834,
                ( Facing::North, Hinge::Right, false, Half::Upper, false, ) => 5835,
                ( Facing::North, Hinge::Left, true, Half::Lower, true, ) => 5836,
                ( Facing::North, Hinge::Left, true, Half::Lower, false, ) => 5837,
                ( Facing::North, Hinge::Left, false, Half::Lower, true, ) => 5838,
                ( Facing::North, Hinge::Left, false, Half::Lower, false, ) => 5839,
                ( Facing::North, Hinge::Right, true, Half::Lower, true, ) => 5840,
                ( Facing::North, Hinge::Right, true, Half::Lower, false, ) => 5841,
                ( Facing::North, Hinge::Right, false, Half::Lower, true, ) => 5842,
                ( Facing::North, Hinge::Right, false, Half::Lower, false, ) => 5843,
                ( Facing::South, Hinge::Left, true, Half::Upper, true, ) => 5844,
                ( Facing::South, Hinge::Left, true, Half::Upper, false, ) => 5845,
                ( Facing::South, Hinge::Left, false, Half::Upper, true, ) => 5846,
                ( Facing::South, Hinge::Left, false, Half::Upper, false, ) => 5847,
                ( Facing::South, Hinge::Right, true, Half::Upper, true, ) => 5848,
                ( Facing::South, Hinge::Right, true, Half::Upper, false, ) => 5849,
                ( Facing::South, Hinge::Right, false, Half::Upper, true, ) => 5850,
                ( Facing::South, Hinge::Right, false, Half::Upper, false, ) => 5851,
                ( Facing::South, Hinge::Left, true, Half::Lower, true, ) => 5852,
                ( Facing::South, Hinge::Left, true, Half::Lower, false, ) => 5853,
                ( Facing::South, Hinge::Left, false, Half::Lower, true, ) => 5854,
                ( Facing::South, Hinge::Left, false, Half::Lower, false, ) => 5855,
                ( Facing::South, Hinge::Right, true, Half::Lower, true, ) => 5856,
                ( Facing::South, Hinge::Right, true, Half::Lower, false, ) => 5857,
                ( Facing::South, Hinge::Right, false, Half::Lower, true, ) => 5858,
                ( Facing::South, Hinge::Right, false, Half::Lower, false, ) => 5859,
                ( Facing::West, Hinge::Left, true, Half::Upper, true, ) => 5860,
                ( Facing::West, Hinge::Left, true, Half::Upper, false, ) => 5861,
                ( Facing::West, Hinge::Left, false, Half::Upper, true, ) => 5862,
                ( Facing::West, Hinge::Left, false, Half::Upper, false, ) => 5863,
                ( Facing::West, Hinge::Right, true, Half::Upper, true, ) => 5864,
                ( Facing::West, Hinge::Right, true, Half::Upper, false, ) => 5865,
                ( Facing::West, Hinge::Right, false, Half::Upper, true, ) => 5866,
                ( Facing::West, Hinge::Right, false, Half::Upper, false, ) => 5867,
                ( Facing::West, Hinge::Left, true, Half::Lower, true, ) => 5868,
                ( Facing::West, Hinge::Left, true, Half::Lower, false, ) => 5869,
                ( Facing::West, Hinge::Left, false, Half::Lower, true, ) => 5870,
                ( Facing::West, Hinge::Left, false, Half::Lower, false, ) => 5871,
                ( Facing::West, Hinge::Right, true, Half::Lower, true, ) => 5872,
                ( Facing::West, Hinge::Right, true, Half::Lower, false, ) => 5873,
                ( Facing::West, Hinge::Right, false, Half::Lower, true, ) => 5874,
                ( Facing::West, Hinge::Right, false, Half::Lower, false, ) => 5875,
                ( Facing::East, Hinge::Left, true, Half::Upper, true, ) => 5876,
                ( Facing::East, Hinge::Left, true, Half::Upper, false, ) => 5877,
                ( Facing::East, Hinge::Left, false, Half::Upper, true, ) => 5878,
                ( Facing::East, Hinge::Left, false, Half::Upper, false, ) => 5879,
                ( Facing::East, Hinge::Right, true, Half::Upper, true, ) => 5880,
                ( Facing::East, Hinge::Right, true, Half::Upper, false, ) => 5881,
                ( Facing::East, Hinge::Right, false, Half::Upper, true, ) => 5882,
                ( Facing::East, Hinge::Right, false, Half::Upper, false, ) => 5883,
                ( Facing::East, Hinge::Left, true, Half::Lower, true, ) => 5884,
                ( Facing::East, Hinge::Left, true, Half::Lower, false, ) => 5885,
                ( Facing::East, Hinge::Left, false, Half::Lower, true, ) => 5886,
                ( Facing::East, Hinge::Left, false, Half::Lower, false, ) => 5887,
                ( Facing::East, Hinge::Right, true, Half::Lower, true, ) => 5888,
                ( Facing::East, Hinge::Right, true, Half::Lower, false, ) => 5889,
                ( Facing::East, Hinge::Right, false, Half::Lower, true, ) => 5890,
                ( Facing::East, Hinge::Right, false, Half::Lower, false, ) => 5891,
            })
        }
    }

    impl From<IronDoor> for BlockState {
        #[inline(always)]
        fn from(value : IronDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for IronDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for IronDoor { }

    impl Block for IronDoor {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            hinge : Hinge::Left,
            open : false,
            half : Half::Lower,
            powered : false,
        };
    }

}

/// `minecraft:magenta_candle_cake` block.
pub mod magenta_candle_cake {
    use super::*;

    /// `minecraft:magenta_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl MagentaCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22063,
                ( false, ) => 22064,
            })
        }
    }

    impl From<MagentaCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : MagentaCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaCandleCake { }

    impl Block for MagentaCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:air` block.
pub mod air {
    use super::*;

    /// `minecraft:air` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Air;

    impl Air {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(0)
        }
    }

    impl From<Air> for BlockState {
        #[inline(always)]
        fn from(value : Air) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Air {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Air { }

    impl Block for Air {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:pale_oak_planks` block.
pub mod pale_oak_planks {
    use super::*;

    /// `minecraft:pale_oak_planks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakPlanks;

    impl PaleOakPlanks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(25)
        }
    }

    impl From<PaleOakPlanks> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakPlanks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakPlanks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakPlanks { }

    impl Block for PaleOakPlanks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:netherite_block` block.
pub mod netherite_block {
    use super::*;

    /// `minecraft:netherite_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct NetheriteBlock;

    impl NetheriteBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20507)
        }
    }

    impl From<NetheriteBlock> for BlockState {
        #[inline(always)]
        fn from(value : NetheriteBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for NetheriteBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for NetheriteBlock { }

    impl Block for NetheriteBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:smithing_table` block.
pub mod smithing_table {
    use super::*;

    /// `minecraft:smithing_table` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmithingTable;

    impl SmithingTable {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19521)
        }
    }

    impl From<SmithingTable> for BlockState {
        #[inline(always)]
        fn from(value : SmithingTable) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmithingTable {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmithingTable { }

    impl Block for SmithingTable {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:acacia_wall_sign` block.
pub mod acacia_wall_sign {
    use super::*;

    /// `minecraft:acacia_wall_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaWallSign {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl AcaciaWallSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 4882,
                ( Facing::North, false, ) => 4883,
                ( Facing::South, true, ) => 4884,
                ( Facing::South, false, ) => 4885,
                ( Facing::West, true, ) => 4886,
                ( Facing::West, false, ) => 4887,
                ( Facing::East, true, ) => 4888,
                ( Facing::East, false, ) => 4889,
            })
        }
    }

    impl From<AcaciaWallSign> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaWallSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaWallSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaWallSign { }

    impl Block for AcaciaWallSign {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:cobblestone_slab` block.
pub mod cobblestone_slab {
    use super::*;

    /// `minecraft:cobblestone_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CobblestoneSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl CobblestoneSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 12147,
                ( Kind::Top, false, ) => 12148,
                ( Kind::Bottom, true, ) => 12149,
                ( Kind::Bottom, false, ) => 12150,
                ( Kind::Double, true, ) => 12151,
                ( Kind::Double, false, ) => 12152,
            })
        }
    }

    impl From<CobblestoneSlab> for BlockState {
        #[inline(always)]
        fn from(value : CobblestoneSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CobblestoneSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CobblestoneSlab { }

    impl Block for CobblestoneSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:acacia_trapdoor` block.
pub mod acacia_trapdoor {
    use super::*;

    /// `minecraft:acacia_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaTrapdoor {
        /// `powered` state.
        pub powered : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `open` state.
        pub open : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl AcaciaTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.waterlogged, self.half, self.facing, self.open, )) {
                ( true, true, Half::Top, Facing::North, true, ) => 6396,
                ( true, false, Half::Top, Facing::North, true, ) => 6397,
                ( false, true, Half::Top, Facing::North, true, ) => 6398,
                ( false, false, Half::Top, Facing::North, true, ) => 6399,
                ( true, true, Half::Top, Facing::North, false, ) => 6400,
                ( true, false, Half::Top, Facing::North, false, ) => 6401,
                ( false, true, Half::Top, Facing::North, false, ) => 6402,
                ( false, false, Half::Top, Facing::North, false, ) => 6403,
                ( true, true, Half::Bottom, Facing::North, true, ) => 6404,
                ( true, false, Half::Bottom, Facing::North, true, ) => 6405,
                ( false, true, Half::Bottom, Facing::North, true, ) => 6406,
                ( false, false, Half::Bottom, Facing::North, true, ) => 6407,
                ( true, true, Half::Bottom, Facing::North, false, ) => 6408,
                ( true, false, Half::Bottom, Facing::North, false, ) => 6409,
                ( false, true, Half::Bottom, Facing::North, false, ) => 6410,
                ( false, false, Half::Bottom, Facing::North, false, ) => 6411,
                ( true, true, Half::Top, Facing::South, true, ) => 6412,
                ( true, false, Half::Top, Facing::South, true, ) => 6413,
                ( false, true, Half::Top, Facing::South, true, ) => 6414,
                ( false, false, Half::Top, Facing::South, true, ) => 6415,
                ( true, true, Half::Top, Facing::South, false, ) => 6416,
                ( true, false, Half::Top, Facing::South, false, ) => 6417,
                ( false, true, Half::Top, Facing::South, false, ) => 6418,
                ( false, false, Half::Top, Facing::South, false, ) => 6419,
                ( true, true, Half::Bottom, Facing::South, true, ) => 6420,
                ( true, false, Half::Bottom, Facing::South, true, ) => 6421,
                ( false, true, Half::Bottom, Facing::South, true, ) => 6422,
                ( false, false, Half::Bottom, Facing::South, true, ) => 6423,
                ( true, true, Half::Bottom, Facing::South, false, ) => 6424,
                ( true, false, Half::Bottom, Facing::South, false, ) => 6425,
                ( false, true, Half::Bottom, Facing::South, false, ) => 6426,
                ( false, false, Half::Bottom, Facing::South, false, ) => 6427,
                ( true, true, Half::Top, Facing::West, true, ) => 6428,
                ( true, false, Half::Top, Facing::West, true, ) => 6429,
                ( false, true, Half::Top, Facing::West, true, ) => 6430,
                ( false, false, Half::Top, Facing::West, true, ) => 6431,
                ( true, true, Half::Top, Facing::West, false, ) => 6432,
                ( true, false, Half::Top, Facing::West, false, ) => 6433,
                ( false, true, Half::Top, Facing::West, false, ) => 6434,
                ( false, false, Half::Top, Facing::West, false, ) => 6435,
                ( true, true, Half::Bottom, Facing::West, true, ) => 6436,
                ( true, false, Half::Bottom, Facing::West, true, ) => 6437,
                ( false, true, Half::Bottom, Facing::West, true, ) => 6438,
                ( false, false, Half::Bottom, Facing::West, true, ) => 6439,
                ( true, true, Half::Bottom, Facing::West, false, ) => 6440,
                ( true, false, Half::Bottom, Facing::West, false, ) => 6441,
                ( false, true, Half::Bottom, Facing::West, false, ) => 6442,
                ( false, false, Half::Bottom, Facing::West, false, ) => 6443,
                ( true, true, Half::Top, Facing::East, true, ) => 6444,
                ( true, false, Half::Top, Facing::East, true, ) => 6445,
                ( false, true, Half::Top, Facing::East, true, ) => 6446,
                ( false, false, Half::Top, Facing::East, true, ) => 6447,
                ( true, true, Half::Top, Facing::East, false, ) => 6448,
                ( true, false, Half::Top, Facing::East, false, ) => 6449,
                ( false, true, Half::Top, Facing::East, false, ) => 6450,
                ( false, false, Half::Top, Facing::East, false, ) => 6451,
                ( true, true, Half::Bottom, Facing::East, true, ) => 6452,
                ( true, false, Half::Bottom, Facing::East, true, ) => 6453,
                ( false, true, Half::Bottom, Facing::East, true, ) => 6454,
                ( false, false, Half::Bottom, Facing::East, true, ) => 6455,
                ( true, true, Half::Bottom, Facing::East, false, ) => 6456,
                ( true, false, Half::Bottom, Facing::East, false, ) => 6457,
                ( false, true, Half::Bottom, Facing::East, false, ) => 6458,
                ( false, false, Half::Bottom, Facing::East, false, ) => 6459,
            })
        }
    }

    impl From<AcaciaTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaTrapdoor { }

    impl Block for AcaciaTrapdoor {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            waterlogged : false,
            half : Half::Bottom,
            facing : Facing::North,
            open : false,
        };
    }

}

/// `minecraft:cracked_deepslate_bricks` block.
pub mod cracked_deepslate_bricks {
    use super::*;

    /// `minecraft:cracked_deepslate_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrackedDeepslateBricks;

    impl CrackedDeepslateBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27644)
        }
    }

    impl From<CrackedDeepslateBricks> for BlockState {
        #[inline(always)]
        fn from(value : CrackedDeepslateBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrackedDeepslateBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrackedDeepslateBricks { }

    impl Block for CrackedDeepslateBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stripped_jungle_log` block.
pub mod stripped_jungle_log {
    use super::*;

    /// `minecraft:stripped_jungle_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedJungleLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedJungleLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 177,
                ( Axis::Y, ) => 178,
                ( Axis::Z, ) => 179,
            })
        }
    }

    impl From<StrippedJungleLog> for BlockState {
        #[inline(always)]
        fn from(value : StrippedJungleLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedJungleLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedJungleLog { }

    impl Block for StrippedJungleLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:potted_azalea_bush` block.
pub mod potted_azalea_bush {
    use super::*;

    /// `minecraft:potted_azalea_bush` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedAzaleaBush;

    impl PottedAzaleaBush {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27653)
        }
    }

    impl From<PottedAzaleaBush> for BlockState {
        #[inline(always)]
        fn from(value : PottedAzaleaBush) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedAzaleaBush {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedAzaleaBush { }

    impl Block for PottedAzaleaBush {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:yellow_concrete_powder` block.
pub mod yellow_concrete_powder {
    use super::*;

    /// `minecraft:yellow_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowConcretePowder;

    impl YellowConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13771)
        }
    }

    impl From<YellowConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : YellowConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowConcretePowder { }

    impl Block for YellowConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:jungle_fence` block.
pub mod jungle_fence {
    use super::*;

    /// `minecraft:jungle_fence` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleFence {
        /// `south` state.
        pub south : bool,
        /// `west` state.
        pub west : bool,
        /// `east` state.
        pub east : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `north` state.
        pub north : bool,
    }

    impl JungleFence {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.south, self.west, self.east, self.waterlogged, self.north, )) {
                ( true, true, true, true, true, ) => 12557,
                ( true, false, true, true, true, ) => 12558,
                ( true, true, true, false, true, ) => 12559,
                ( true, false, true, false, true, ) => 12560,
                ( false, true, true, true, true, ) => 12561,
                ( false, false, true, true, true, ) => 12562,
                ( false, true, true, false, true, ) => 12563,
                ( false, false, true, false, true, ) => 12564,
                ( true, true, true, true, false, ) => 12565,
                ( true, false, true, true, false, ) => 12566,
                ( true, true, true, false, false, ) => 12567,
                ( true, false, true, false, false, ) => 12568,
                ( false, true, true, true, false, ) => 12569,
                ( false, false, true, true, false, ) => 12570,
                ( false, true, true, false, false, ) => 12571,
                ( false, false, true, false, false, ) => 12572,
                ( true, true, false, true, true, ) => 12573,
                ( true, false, false, true, true, ) => 12574,
                ( true, true, false, false, true, ) => 12575,
                ( true, false, false, false, true, ) => 12576,
                ( false, true, false, true, true, ) => 12577,
                ( false, false, false, true, true, ) => 12578,
                ( false, true, false, false, true, ) => 12579,
                ( false, false, false, false, true, ) => 12580,
                ( true, true, false, true, false, ) => 12581,
                ( true, false, false, true, false, ) => 12582,
                ( true, true, false, false, false, ) => 12583,
                ( true, false, false, false, false, ) => 12584,
                ( false, true, false, true, false, ) => 12585,
                ( false, false, false, true, false, ) => 12586,
                ( false, true, false, false, false, ) => 12587,
                ( false, false, false, false, false, ) => 12588,
            })
        }
    }

    impl From<JungleFence> for BlockState {
        #[inline(always)]
        fn from(value : JungleFence) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleFence {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleFence { }

    impl Block for JungleFence {
        const DEFAULT_STATE : Self = Self {
            south : false,
            west : false,
            east : false,
            waterlogged : false,
            north : false,
        };
    }

}

/// `minecraft:potted_open_eyeblossom` block.
pub mod potted_open_eyeblossom {
    use super::*;

    /// `minecraft:potted_open_eyeblossom` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedOpenEyeblossom;

    impl PottedOpenEyeblossom {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27943)
        }
    }

    impl From<PottedOpenEyeblossom> for BlockState {
        #[inline(always)]
        fn from(value : PottedOpenEyeblossom) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedOpenEyeblossom {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedOpenEyeblossom { }

    impl Block for PottedOpenEyeblossom {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:end_stone_bricks` block.
pub mod end_stone_bricks {
    use super::*;

    /// `minecraft:end_stone_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct EndStoneBricks;

    impl EndStoneBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13517)
        }
    }

    impl From<EndStoneBricks> for BlockState {
        #[inline(always)]
        fn from(value : EndStoneBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for EndStoneBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for EndStoneBricks { }

    impl Block for EndStoneBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:red_concrete_powder` block.
pub mod red_concrete_powder {
    use super::*;

    /// `minecraft:red_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedConcretePowder;

    impl RedConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13781)
        }
    }

    impl From<RedConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : RedConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedConcretePowder { }

    impl Block for RedConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:copper_grate` block.
pub mod copper_grate {
    use super::*;

    /// `minecraft:copper_grate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CopperGrate {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl CopperGrate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 25736,
                ( false, ) => 25737,
            })
        }
    }

    impl From<CopperGrate> for BlockState {
        #[inline(always)]
        fn from(value : CopperGrate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CopperGrate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CopperGrate { }

    impl Block for CopperGrate {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
        };
    }

}

/// `minecraft:stone_brick_stairs` block.
pub mod stone_brick_stairs {
    use super::*;

    /// `minecraft:stone_brick_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StoneBrickStairs {
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl StoneBrickStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.facing, self.waterlogged, self.shape, )) {
                ( Half::Top, Facing::North, true, Shape::Straight, ) => 7480,
                ( Half::Top, Facing::North, false, Shape::Straight, ) => 7481,
                ( Half::Top, Facing::North, true, Shape::InnerLeft, ) => 7482,
                ( Half::Top, Facing::North, false, Shape::InnerLeft, ) => 7483,
                ( Half::Top, Facing::North, true, Shape::InnerRight, ) => 7484,
                ( Half::Top, Facing::North, false, Shape::InnerRight, ) => 7485,
                ( Half::Top, Facing::North, true, Shape::OuterLeft, ) => 7486,
                ( Half::Top, Facing::North, false, Shape::OuterLeft, ) => 7487,
                ( Half::Top, Facing::North, true, Shape::OuterRight, ) => 7488,
                ( Half::Top, Facing::North, false, Shape::OuterRight, ) => 7489,
                ( Half::Bottom, Facing::North, true, Shape::Straight, ) => 7490,
                ( Half::Bottom, Facing::North, false, Shape::Straight, ) => 7491,
                ( Half::Bottom, Facing::North, true, Shape::InnerLeft, ) => 7492,
                ( Half::Bottom, Facing::North, false, Shape::InnerLeft, ) => 7493,
                ( Half::Bottom, Facing::North, true, Shape::InnerRight, ) => 7494,
                ( Half::Bottom, Facing::North, false, Shape::InnerRight, ) => 7495,
                ( Half::Bottom, Facing::North, true, Shape::OuterLeft, ) => 7496,
                ( Half::Bottom, Facing::North, false, Shape::OuterLeft, ) => 7497,
                ( Half::Bottom, Facing::North, true, Shape::OuterRight, ) => 7498,
                ( Half::Bottom, Facing::North, false, Shape::OuterRight, ) => 7499,
                ( Half::Top, Facing::South, true, Shape::Straight, ) => 7500,
                ( Half::Top, Facing::South, false, Shape::Straight, ) => 7501,
                ( Half::Top, Facing::South, true, Shape::InnerLeft, ) => 7502,
                ( Half::Top, Facing::South, false, Shape::InnerLeft, ) => 7503,
                ( Half::Top, Facing::South, true, Shape::InnerRight, ) => 7504,
                ( Half::Top, Facing::South, false, Shape::InnerRight, ) => 7505,
                ( Half::Top, Facing::South, true, Shape::OuterLeft, ) => 7506,
                ( Half::Top, Facing::South, false, Shape::OuterLeft, ) => 7507,
                ( Half::Top, Facing::South, true, Shape::OuterRight, ) => 7508,
                ( Half::Top, Facing::South, false, Shape::OuterRight, ) => 7509,
                ( Half::Bottom, Facing::South, true, Shape::Straight, ) => 7510,
                ( Half::Bottom, Facing::South, false, Shape::Straight, ) => 7511,
                ( Half::Bottom, Facing::South, true, Shape::InnerLeft, ) => 7512,
                ( Half::Bottom, Facing::South, false, Shape::InnerLeft, ) => 7513,
                ( Half::Bottom, Facing::South, true, Shape::InnerRight, ) => 7514,
                ( Half::Bottom, Facing::South, false, Shape::InnerRight, ) => 7515,
                ( Half::Bottom, Facing::South, true, Shape::OuterLeft, ) => 7516,
                ( Half::Bottom, Facing::South, false, Shape::OuterLeft, ) => 7517,
                ( Half::Bottom, Facing::South, true, Shape::OuterRight, ) => 7518,
                ( Half::Bottom, Facing::South, false, Shape::OuterRight, ) => 7519,
                ( Half::Top, Facing::West, true, Shape::Straight, ) => 7520,
                ( Half::Top, Facing::West, false, Shape::Straight, ) => 7521,
                ( Half::Top, Facing::West, true, Shape::InnerLeft, ) => 7522,
                ( Half::Top, Facing::West, false, Shape::InnerLeft, ) => 7523,
                ( Half::Top, Facing::West, true, Shape::InnerRight, ) => 7524,
                ( Half::Top, Facing::West, false, Shape::InnerRight, ) => 7525,
                ( Half::Top, Facing::West, true, Shape::OuterLeft, ) => 7526,
                ( Half::Top, Facing::West, false, Shape::OuterLeft, ) => 7527,
                ( Half::Top, Facing::West, true, Shape::OuterRight, ) => 7528,
                ( Half::Top, Facing::West, false, Shape::OuterRight, ) => 7529,
                ( Half::Bottom, Facing::West, true, Shape::Straight, ) => 7530,
                ( Half::Bottom, Facing::West, false, Shape::Straight, ) => 7531,
                ( Half::Bottom, Facing::West, true, Shape::InnerLeft, ) => 7532,
                ( Half::Bottom, Facing::West, false, Shape::InnerLeft, ) => 7533,
                ( Half::Bottom, Facing::West, true, Shape::InnerRight, ) => 7534,
                ( Half::Bottom, Facing::West, false, Shape::InnerRight, ) => 7535,
                ( Half::Bottom, Facing::West, true, Shape::OuterLeft, ) => 7536,
                ( Half::Bottom, Facing::West, false, Shape::OuterLeft, ) => 7537,
                ( Half::Bottom, Facing::West, true, Shape::OuterRight, ) => 7538,
                ( Half::Bottom, Facing::West, false, Shape::OuterRight, ) => 7539,
                ( Half::Top, Facing::East, true, Shape::Straight, ) => 7540,
                ( Half::Top, Facing::East, false, Shape::Straight, ) => 7541,
                ( Half::Top, Facing::East, true, Shape::InnerLeft, ) => 7542,
                ( Half::Top, Facing::East, false, Shape::InnerLeft, ) => 7543,
                ( Half::Top, Facing::East, true, Shape::InnerRight, ) => 7544,
                ( Half::Top, Facing::East, false, Shape::InnerRight, ) => 7545,
                ( Half::Top, Facing::East, true, Shape::OuterLeft, ) => 7546,
                ( Half::Top, Facing::East, false, Shape::OuterLeft, ) => 7547,
                ( Half::Top, Facing::East, true, Shape::OuterRight, ) => 7548,
                ( Half::Top, Facing::East, false, Shape::OuterRight, ) => 7549,
                ( Half::Bottom, Facing::East, true, Shape::Straight, ) => 7550,
                ( Half::Bottom, Facing::East, false, Shape::Straight, ) => 7551,
                ( Half::Bottom, Facing::East, true, Shape::InnerLeft, ) => 7552,
                ( Half::Bottom, Facing::East, false, Shape::InnerLeft, ) => 7553,
                ( Half::Bottom, Facing::East, true, Shape::InnerRight, ) => 7554,
                ( Half::Bottom, Facing::East, false, Shape::InnerRight, ) => 7555,
                ( Half::Bottom, Facing::East, true, Shape::OuterLeft, ) => 7556,
                ( Half::Bottom, Facing::East, false, Shape::OuterLeft, ) => 7557,
                ( Half::Bottom, Facing::East, true, Shape::OuterRight, ) => 7558,
                ( Half::Bottom, Facing::East, false, Shape::OuterRight, ) => 7559,
            })
        }
    }

    impl From<StoneBrickStairs> for BlockState {
        #[inline(always)]
        fn from(value : StoneBrickStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StoneBrickStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StoneBrickStairs { }

    impl Block for StoneBrickStairs {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            facing : Facing::North,
            waterlogged : false,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:cornflower` block.
pub mod cornflower {
    use super::*;

    /// `minecraft:cornflower` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Cornflower;

    impl Cornflower {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2132)
        }
    }

    impl From<Cornflower> for BlockState {
        #[inline(always)]
        fn from(value : Cornflower) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Cornflower {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Cornflower { }

    impl Block for Cornflower {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:oxidized_cut_copper` block.
pub mod oxidized_cut_copper {
    use super::*;

    /// `minecraft:oxidized_cut_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OxidizedCutCopper;

    impl OxidizedCutCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24004)
        }
    }

    impl From<OxidizedCutCopper> for BlockState {
        #[inline(always)]
        fn from(value : OxidizedCutCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OxidizedCutCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OxidizedCutCopper { }

    impl Block for OxidizedCutCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:potted_brown_mushroom` block.
pub mod potted_brown_mushroom {
    use super::*;

    /// `minecraft:potted_brown_mushroom` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedBrownMushroom;

    impl PottedBrownMushroom {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9377)
        }
    }

    impl From<PottedBrownMushroom> for BlockState {
        #[inline(always)]
        fn from(value : PottedBrownMushroom) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedBrownMushroom {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedBrownMushroom { }

    impl Block for PottedBrownMushroom {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:magenta_banner` block.
pub mod magenta_banner {
    use super::*;

    /// `minecraft:magenta_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl MagentaBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11680,
                ( Rotation::N1, ) => 11681,
                ( Rotation::N2, ) => 11682,
                ( Rotation::N3, ) => 11683,
                ( Rotation::N4, ) => 11684,
                ( Rotation::N5, ) => 11685,
                ( Rotation::N6, ) => 11686,
                ( Rotation::N7, ) => 11687,
                ( Rotation::N8, ) => 11688,
                ( Rotation::N9, ) => 11689,
                ( Rotation::N10, ) => 11690,
                ( Rotation::N11, ) => 11691,
                ( Rotation::N12, ) => 11692,
                ( Rotation::N13, ) => 11693,
                ( Rotation::N14, ) => 11694,
                ( Rotation::N15, ) => 11695,
            })
        }
    }

    impl From<MagentaBanner> for BlockState {
        #[inline(always)]
        fn from(value : MagentaBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaBanner { }

    impl Block for MagentaBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:smooth_quartz` block.
pub mod smooth_quartz {
    use super::*;

    /// `minecraft:smooth_quartz` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmoothQuartz;

    impl SmoothQuartz {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(12203)
        }
    }

    impl From<SmoothQuartz> for BlockState {
        #[inline(always)]
        fn from(value : SmoothQuartz) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmoothQuartz {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmoothQuartz { }

    impl Block for SmoothQuartz {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:brown_shulker_box` block.
pub mod brown_shulker_box {
    use super::*;

    /// `minecraft:brown_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BrownShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13663,
                ( Facing::East, ) => 13664,
                ( Facing::South, ) => 13665,
                ( Facing::West, ) => 13666,
                ( Facing::Up, ) => 13667,
                ( Facing::Down, ) => 13668,
            })
        }
    }

    impl From<BrownShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : BrownShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownShulkerBox { }

    impl Block for BrownShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:test_instance_block` block.
pub mod test_instance_block {
    use super::*;

    /// `minecraft:test_instance_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TestInstanceBlock;

    impl TestInstanceBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20431)
        }
    }

    impl From<TestInstanceBlock> for BlockState {
        #[inline(always)]
        fn from(value : TestInstanceBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TestInstanceBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TestInstanceBlock { }

    impl Block for TestInstanceBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:lapis_ore` block.
pub mod lapis_ore {
    use super::*;

    /// `minecraft:lapis_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LapisOre;

    impl LapisOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(563)
        }
    }

    impl From<LapisOre> for BlockState {
        #[inline(always)]
        fn from(value : LapisOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LapisOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LapisOre { }

    impl Block for LapisOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:birch_button` block.
pub mod birch_button {
    use super::*;

    /// `minecraft:birch_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchButton {
        /// `powered` state.
        pub powered : bool,
        /// `face` state.
        pub face : Face,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BirchButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.face, self.facing, )) {
                ( true, Face::Floor, Facing::North, ) => 9444,
                ( false, Face::Floor, Facing::North, ) => 9445,
                ( true, Face::Floor, Facing::South, ) => 9446,
                ( false, Face::Floor, Facing::South, ) => 9447,
                ( true, Face::Floor, Facing::West, ) => 9448,
                ( false, Face::Floor, Facing::West, ) => 9449,
                ( true, Face::Floor, Facing::East, ) => 9450,
                ( false, Face::Floor, Facing::East, ) => 9451,
                ( true, Face::Wall, Facing::North, ) => 9452,
                ( false, Face::Wall, Facing::North, ) => 9453,
                ( true, Face::Wall, Facing::South, ) => 9454,
                ( false, Face::Wall, Facing::South, ) => 9455,
                ( true, Face::Wall, Facing::West, ) => 9456,
                ( false, Face::Wall, Facing::West, ) => 9457,
                ( true, Face::Wall, Facing::East, ) => 9458,
                ( false, Face::Wall, Facing::East, ) => 9459,
                ( true, Face::Ceiling, Facing::North, ) => 9460,
                ( false, Face::Ceiling, Facing::North, ) => 9461,
                ( true, Face::Ceiling, Facing::South, ) => 9462,
                ( false, Face::Ceiling, Facing::South, ) => 9463,
                ( true, Face::Ceiling, Facing::West, ) => 9464,
                ( false, Face::Ceiling, Facing::West, ) => 9465,
                ( true, Face::Ceiling, Facing::East, ) => 9466,
                ( false, Face::Ceiling, Facing::East, ) => 9467,
            })
        }
    }

    impl From<BirchButton> for BlockState {
        #[inline(always)]
        fn from(value : BirchButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchButton { }

    impl Block for BirchButton {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            face : Face::Wall,
            facing : Facing::North,
        };
    }

}

/// `minecraft:heavy_core` block.
pub mod heavy_core {
    use super::*;

    /// `minecraft:heavy_core` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct HeavyCore {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl HeavyCore {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 27774,
                ( false, ) => 27775,
            })
        }
    }

    impl From<HeavyCore> for BlockState {
        #[inline(always)]
        fn from(value : HeavyCore) -> Self {
            value.to_block_state()
        }
    }

    impl Default for HeavyCore {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for HeavyCore { }

    impl Block for HeavyCore {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
        };
    }

}

/// `minecraft:light_gray_glazed_terracotta` block.
pub mod light_gray_glazed_terracotta {
    use super::*;

    /// `minecraft:light_gray_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl LightGrayGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13719,
                ( Facing::South, ) => 13720,
                ( Facing::West, ) => 13721,
                ( Facing::East, ) => 13722,
            })
        }
    }

    impl From<LightGrayGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayGlazedTerracotta { }

    impl Block for LightGrayGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:spruce_slab` block.
pub mod spruce_slab {
    use super::*;

    /// `minecraft:spruce_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl SpruceSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 12057,
                ( Kind::Top, false, ) => 12058,
                ( Kind::Bottom, true, ) => 12059,
                ( Kind::Bottom, false, ) => 12060,
                ( Kind::Double, true, ) => 12061,
                ( Kind::Double, false, ) => 12062,
            })
        }
    }

    impl From<SpruceSlab> for BlockState {
        #[inline(always)]
        fn from(value : SpruceSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceSlab { }

    impl Block for SpruceSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:chiseled_nether_bricks` block.
pub mod chiseled_nether_bricks {
    use super::*;

    /// `minecraft:chiseled_nether_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChiseledNetherBricks;

    impl ChiseledNetherBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(21782)
        }
    }

    impl From<ChiseledNetherBricks> for BlockState {
        #[inline(always)]
        fn from(value : ChiseledNetherBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChiseledNetherBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChiseledNetherBricks { }

    impl Block for ChiseledNetherBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:deepslate_tile_slab` block.
pub mod deepslate_tile_slab {
    use super::*;

    /// `minecraft:deepslate_tile_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateTileSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl DeepslateTileSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 26902,
                ( false, Kind::Top, ) => 26903,
                ( true, Kind::Bottom, ) => 26904,
                ( false, Kind::Bottom, ) => 26905,
                ( true, Kind::Double, ) => 26906,
                ( false, Kind::Double, ) => 26907,
            })
        }
    }

    impl From<DeepslateTileSlab> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateTileSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateTileSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateTileSlab { }

    impl Block for DeepslateTileSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:dark_oak_leaves` block.
pub mod dark_oak_leaves {
    use super::*;

    /// `minecraft:dark_oak_leaves` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakLeaves {
        /// `distance` state.
        pub distance : Distance,
        /// `persistent` state.
        pub persistent : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `distance` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Distance {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Distance { }
    impl BlockProperty for Distance { }

    impl DarkOakLeaves {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.distance, self.persistent, self.waterlogged, )) {
                ( Distance::N1, true, true, ) => 420,
                ( Distance::N1, true, false, ) => 421,
                ( Distance::N1, false, true, ) => 422,
                ( Distance::N1, false, false, ) => 423,
                ( Distance::N2, true, true, ) => 424,
                ( Distance::N2, true, false, ) => 425,
                ( Distance::N2, false, true, ) => 426,
                ( Distance::N2, false, false, ) => 427,
                ( Distance::N3, true, true, ) => 428,
                ( Distance::N3, true, false, ) => 429,
                ( Distance::N3, false, true, ) => 430,
                ( Distance::N3, false, false, ) => 431,
                ( Distance::N4, true, true, ) => 432,
                ( Distance::N4, true, false, ) => 433,
                ( Distance::N4, false, true, ) => 434,
                ( Distance::N4, false, false, ) => 435,
                ( Distance::N5, true, true, ) => 436,
                ( Distance::N5, true, false, ) => 437,
                ( Distance::N5, false, true, ) => 438,
                ( Distance::N5, false, false, ) => 439,
                ( Distance::N6, true, true, ) => 440,
                ( Distance::N6, true, false, ) => 441,
                ( Distance::N6, false, true, ) => 442,
                ( Distance::N6, false, false, ) => 443,
                ( Distance::N7, true, true, ) => 444,
                ( Distance::N7, true, false, ) => 445,
                ( Distance::N7, false, true, ) => 446,
                ( Distance::N7, false, false, ) => 447,
            })
        }
    }

    impl From<DarkOakLeaves> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakLeaves) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakLeaves {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakLeaves { }

    impl Block for DarkOakLeaves {
        const DEFAULT_STATE : Self = Self {
            distance : Distance::N7,
            persistent : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:chiseled_bookshelf` block.
pub mod chiseled_bookshelf {
    use super::*;

    /// `minecraft:chiseled_bookshelf` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChiseledBookshelf {
        /// `slot_1_occupied` state.
        pub slot_1_occupied : bool,
        /// `slot_3_occupied` state.
        pub slot_3_occupied : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `slot_2_occupied` state.
        pub slot_2_occupied : bool,
        /// `slot_4_occupied` state.
        pub slot_4_occupied : bool,
        /// `slot_0_occupied` state.
        pub slot_0_occupied : bool,
        /// `slot_5_occupied` state.
        pub slot_5_occupied : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl ChiseledBookshelf {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.slot_1_occupied, self.slot_3_occupied, self.facing, self.slot_2_occupied, self.slot_4_occupied, self.slot_0_occupied, self.slot_5_occupied, )) {
                ( true, true, Facing::North, true, true, true, true, ) => 2143,
                ( true, true, Facing::North, true, true, true, false, ) => 2144,
                ( true, true, Facing::North, true, false, true, true, ) => 2145,
                ( true, true, Facing::North, true, false, true, false, ) => 2146,
                ( true, false, Facing::North, true, true, true, true, ) => 2147,
                ( true, false, Facing::North, true, true, true, false, ) => 2148,
                ( true, false, Facing::North, true, false, true, true, ) => 2149,
                ( true, false, Facing::North, true, false, true, false, ) => 2150,
                ( true, true, Facing::North, false, true, true, true, ) => 2151,
                ( true, true, Facing::North, false, true, true, false, ) => 2152,
                ( true, true, Facing::North, false, false, true, true, ) => 2153,
                ( true, true, Facing::North, false, false, true, false, ) => 2154,
                ( true, false, Facing::North, false, true, true, true, ) => 2155,
                ( true, false, Facing::North, false, true, true, false, ) => 2156,
                ( true, false, Facing::North, false, false, true, true, ) => 2157,
                ( true, false, Facing::North, false, false, true, false, ) => 2158,
                ( false, true, Facing::North, true, true, true, true, ) => 2159,
                ( false, true, Facing::North, true, true, true, false, ) => 2160,
                ( false, true, Facing::North, true, false, true, true, ) => 2161,
                ( false, true, Facing::North, true, false, true, false, ) => 2162,
                ( false, false, Facing::North, true, true, true, true, ) => 2163,
                ( false, false, Facing::North, true, true, true, false, ) => 2164,
                ( false, false, Facing::North, true, false, true, true, ) => 2165,
                ( false, false, Facing::North, true, false, true, false, ) => 2166,
                ( false, true, Facing::North, false, true, true, true, ) => 2167,
                ( false, true, Facing::North, false, true, true, false, ) => 2168,
                ( false, true, Facing::North, false, false, true, true, ) => 2169,
                ( false, true, Facing::North, false, false, true, false, ) => 2170,
                ( false, false, Facing::North, false, true, true, true, ) => 2171,
                ( false, false, Facing::North, false, true, true, false, ) => 2172,
                ( false, false, Facing::North, false, false, true, true, ) => 2173,
                ( false, false, Facing::North, false, false, true, false, ) => 2174,
                ( true, true, Facing::North, true, true, false, true, ) => 2175,
                ( true, true, Facing::North, true, true, false, false, ) => 2176,
                ( true, true, Facing::North, true, false, false, true, ) => 2177,
                ( true, true, Facing::North, true, false, false, false, ) => 2178,
                ( true, false, Facing::North, true, true, false, true, ) => 2179,
                ( true, false, Facing::North, true, true, false, false, ) => 2180,
                ( true, false, Facing::North, true, false, false, true, ) => 2181,
                ( true, false, Facing::North, true, false, false, false, ) => 2182,
                ( true, true, Facing::North, false, true, false, true, ) => 2183,
                ( true, true, Facing::North, false, true, false, false, ) => 2184,
                ( true, true, Facing::North, false, false, false, true, ) => 2185,
                ( true, true, Facing::North, false, false, false, false, ) => 2186,
                ( true, false, Facing::North, false, true, false, true, ) => 2187,
                ( true, false, Facing::North, false, true, false, false, ) => 2188,
                ( true, false, Facing::North, false, false, false, true, ) => 2189,
                ( true, false, Facing::North, false, false, false, false, ) => 2190,
                ( false, true, Facing::North, true, true, false, true, ) => 2191,
                ( false, true, Facing::North, true, true, false, false, ) => 2192,
                ( false, true, Facing::North, true, false, false, true, ) => 2193,
                ( false, true, Facing::North, true, false, false, false, ) => 2194,
                ( false, false, Facing::North, true, true, false, true, ) => 2195,
                ( false, false, Facing::North, true, true, false, false, ) => 2196,
                ( false, false, Facing::North, true, false, false, true, ) => 2197,
                ( false, false, Facing::North, true, false, false, false, ) => 2198,
                ( false, true, Facing::North, false, true, false, true, ) => 2199,
                ( false, true, Facing::North, false, true, false, false, ) => 2200,
                ( false, true, Facing::North, false, false, false, true, ) => 2201,
                ( false, true, Facing::North, false, false, false, false, ) => 2202,
                ( false, false, Facing::North, false, true, false, true, ) => 2203,
                ( false, false, Facing::North, false, true, false, false, ) => 2204,
                ( false, false, Facing::North, false, false, false, true, ) => 2205,
                ( false, false, Facing::North, false, false, false, false, ) => 2206,
                ( true, true, Facing::South, true, true, true, true, ) => 2207,
                ( true, true, Facing::South, true, true, true, false, ) => 2208,
                ( true, true, Facing::South, true, false, true, true, ) => 2209,
                ( true, true, Facing::South, true, false, true, false, ) => 2210,
                ( true, false, Facing::South, true, true, true, true, ) => 2211,
                ( true, false, Facing::South, true, true, true, false, ) => 2212,
                ( true, false, Facing::South, true, false, true, true, ) => 2213,
                ( true, false, Facing::South, true, false, true, false, ) => 2214,
                ( true, true, Facing::South, false, true, true, true, ) => 2215,
                ( true, true, Facing::South, false, true, true, false, ) => 2216,
                ( true, true, Facing::South, false, false, true, true, ) => 2217,
                ( true, true, Facing::South, false, false, true, false, ) => 2218,
                ( true, false, Facing::South, false, true, true, true, ) => 2219,
                ( true, false, Facing::South, false, true, true, false, ) => 2220,
                ( true, false, Facing::South, false, false, true, true, ) => 2221,
                ( true, false, Facing::South, false, false, true, false, ) => 2222,
                ( false, true, Facing::South, true, true, true, true, ) => 2223,
                ( false, true, Facing::South, true, true, true, false, ) => 2224,
                ( false, true, Facing::South, true, false, true, true, ) => 2225,
                ( false, true, Facing::South, true, false, true, false, ) => 2226,
                ( false, false, Facing::South, true, true, true, true, ) => 2227,
                ( false, false, Facing::South, true, true, true, false, ) => 2228,
                ( false, false, Facing::South, true, false, true, true, ) => 2229,
                ( false, false, Facing::South, true, false, true, false, ) => 2230,
                ( false, true, Facing::South, false, true, true, true, ) => 2231,
                ( false, true, Facing::South, false, true, true, false, ) => 2232,
                ( false, true, Facing::South, false, false, true, true, ) => 2233,
                ( false, true, Facing::South, false, false, true, false, ) => 2234,
                ( false, false, Facing::South, false, true, true, true, ) => 2235,
                ( false, false, Facing::South, false, true, true, false, ) => 2236,
                ( false, false, Facing::South, false, false, true, true, ) => 2237,
                ( false, false, Facing::South, false, false, true, false, ) => 2238,
                ( true, true, Facing::South, true, true, false, true, ) => 2239,
                ( true, true, Facing::South, true, true, false, false, ) => 2240,
                ( true, true, Facing::South, true, false, false, true, ) => 2241,
                ( true, true, Facing::South, true, false, false, false, ) => 2242,
                ( true, false, Facing::South, true, true, false, true, ) => 2243,
                ( true, false, Facing::South, true, true, false, false, ) => 2244,
                ( true, false, Facing::South, true, false, false, true, ) => 2245,
                ( true, false, Facing::South, true, false, false, false, ) => 2246,
                ( true, true, Facing::South, false, true, false, true, ) => 2247,
                ( true, true, Facing::South, false, true, false, false, ) => 2248,
                ( true, true, Facing::South, false, false, false, true, ) => 2249,
                ( true, true, Facing::South, false, false, false, false, ) => 2250,
                ( true, false, Facing::South, false, true, false, true, ) => 2251,
                ( true, false, Facing::South, false, true, false, false, ) => 2252,
                ( true, false, Facing::South, false, false, false, true, ) => 2253,
                ( true, false, Facing::South, false, false, false, false, ) => 2254,
                ( false, true, Facing::South, true, true, false, true, ) => 2255,
                ( false, true, Facing::South, true, true, false, false, ) => 2256,
                ( false, true, Facing::South, true, false, false, true, ) => 2257,
                ( false, true, Facing::South, true, false, false, false, ) => 2258,
                ( false, false, Facing::South, true, true, false, true, ) => 2259,
                ( false, false, Facing::South, true, true, false, false, ) => 2260,
                ( false, false, Facing::South, true, false, false, true, ) => 2261,
                ( false, false, Facing::South, true, false, false, false, ) => 2262,
                ( false, true, Facing::South, false, true, false, true, ) => 2263,
                ( false, true, Facing::South, false, true, false, false, ) => 2264,
                ( false, true, Facing::South, false, false, false, true, ) => 2265,
                ( false, true, Facing::South, false, false, false, false, ) => 2266,
                ( false, false, Facing::South, false, true, false, true, ) => 2267,
                ( false, false, Facing::South, false, true, false, false, ) => 2268,
                ( false, false, Facing::South, false, false, false, true, ) => 2269,
                ( false, false, Facing::South, false, false, false, false, ) => 2270,
                ( true, true, Facing::West, true, true, true, true, ) => 2271,
                ( true, true, Facing::West, true, true, true, false, ) => 2272,
                ( true, true, Facing::West, true, false, true, true, ) => 2273,
                ( true, true, Facing::West, true, false, true, false, ) => 2274,
                ( true, false, Facing::West, true, true, true, true, ) => 2275,
                ( true, false, Facing::West, true, true, true, false, ) => 2276,
                ( true, false, Facing::West, true, false, true, true, ) => 2277,
                ( true, false, Facing::West, true, false, true, false, ) => 2278,
                ( true, true, Facing::West, false, true, true, true, ) => 2279,
                ( true, true, Facing::West, false, true, true, false, ) => 2280,
                ( true, true, Facing::West, false, false, true, true, ) => 2281,
                ( true, true, Facing::West, false, false, true, false, ) => 2282,
                ( true, false, Facing::West, false, true, true, true, ) => 2283,
                ( true, false, Facing::West, false, true, true, false, ) => 2284,
                ( true, false, Facing::West, false, false, true, true, ) => 2285,
                ( true, false, Facing::West, false, false, true, false, ) => 2286,
                ( false, true, Facing::West, true, true, true, true, ) => 2287,
                ( false, true, Facing::West, true, true, true, false, ) => 2288,
                ( false, true, Facing::West, true, false, true, true, ) => 2289,
                ( false, true, Facing::West, true, false, true, false, ) => 2290,
                ( false, false, Facing::West, true, true, true, true, ) => 2291,
                ( false, false, Facing::West, true, true, true, false, ) => 2292,
                ( false, false, Facing::West, true, false, true, true, ) => 2293,
                ( false, false, Facing::West, true, false, true, false, ) => 2294,
                ( false, true, Facing::West, false, true, true, true, ) => 2295,
                ( false, true, Facing::West, false, true, true, false, ) => 2296,
                ( false, true, Facing::West, false, false, true, true, ) => 2297,
                ( false, true, Facing::West, false, false, true, false, ) => 2298,
                ( false, false, Facing::West, false, true, true, true, ) => 2299,
                ( false, false, Facing::West, false, true, true, false, ) => 2300,
                ( false, false, Facing::West, false, false, true, true, ) => 2301,
                ( false, false, Facing::West, false, false, true, false, ) => 2302,
                ( true, true, Facing::West, true, true, false, true, ) => 2303,
                ( true, true, Facing::West, true, true, false, false, ) => 2304,
                ( true, true, Facing::West, true, false, false, true, ) => 2305,
                ( true, true, Facing::West, true, false, false, false, ) => 2306,
                ( true, false, Facing::West, true, true, false, true, ) => 2307,
                ( true, false, Facing::West, true, true, false, false, ) => 2308,
                ( true, false, Facing::West, true, false, false, true, ) => 2309,
                ( true, false, Facing::West, true, false, false, false, ) => 2310,
                ( true, true, Facing::West, false, true, false, true, ) => 2311,
                ( true, true, Facing::West, false, true, false, false, ) => 2312,
                ( true, true, Facing::West, false, false, false, true, ) => 2313,
                ( true, true, Facing::West, false, false, false, false, ) => 2314,
                ( true, false, Facing::West, false, true, false, true, ) => 2315,
                ( true, false, Facing::West, false, true, false, false, ) => 2316,
                ( true, false, Facing::West, false, false, false, true, ) => 2317,
                ( true, false, Facing::West, false, false, false, false, ) => 2318,
                ( false, true, Facing::West, true, true, false, true, ) => 2319,
                ( false, true, Facing::West, true, true, false, false, ) => 2320,
                ( false, true, Facing::West, true, false, false, true, ) => 2321,
                ( false, true, Facing::West, true, false, false, false, ) => 2322,
                ( false, false, Facing::West, true, true, false, true, ) => 2323,
                ( false, false, Facing::West, true, true, false, false, ) => 2324,
                ( false, false, Facing::West, true, false, false, true, ) => 2325,
                ( false, false, Facing::West, true, false, false, false, ) => 2326,
                ( false, true, Facing::West, false, true, false, true, ) => 2327,
                ( false, true, Facing::West, false, true, false, false, ) => 2328,
                ( false, true, Facing::West, false, false, false, true, ) => 2329,
                ( false, true, Facing::West, false, false, false, false, ) => 2330,
                ( false, false, Facing::West, false, true, false, true, ) => 2331,
                ( false, false, Facing::West, false, true, false, false, ) => 2332,
                ( false, false, Facing::West, false, false, false, true, ) => 2333,
                ( false, false, Facing::West, false, false, false, false, ) => 2334,
                ( true, true, Facing::East, true, true, true, true, ) => 2335,
                ( true, true, Facing::East, true, true, true, false, ) => 2336,
                ( true, true, Facing::East, true, false, true, true, ) => 2337,
                ( true, true, Facing::East, true, false, true, false, ) => 2338,
                ( true, false, Facing::East, true, true, true, true, ) => 2339,
                ( true, false, Facing::East, true, true, true, false, ) => 2340,
                ( true, false, Facing::East, true, false, true, true, ) => 2341,
                ( true, false, Facing::East, true, false, true, false, ) => 2342,
                ( true, true, Facing::East, false, true, true, true, ) => 2343,
                ( true, true, Facing::East, false, true, true, false, ) => 2344,
                ( true, true, Facing::East, false, false, true, true, ) => 2345,
                ( true, true, Facing::East, false, false, true, false, ) => 2346,
                ( true, false, Facing::East, false, true, true, true, ) => 2347,
                ( true, false, Facing::East, false, true, true, false, ) => 2348,
                ( true, false, Facing::East, false, false, true, true, ) => 2349,
                ( true, false, Facing::East, false, false, true, false, ) => 2350,
                ( false, true, Facing::East, true, true, true, true, ) => 2351,
                ( false, true, Facing::East, true, true, true, false, ) => 2352,
                ( false, true, Facing::East, true, false, true, true, ) => 2353,
                ( false, true, Facing::East, true, false, true, false, ) => 2354,
                ( false, false, Facing::East, true, true, true, true, ) => 2355,
                ( false, false, Facing::East, true, true, true, false, ) => 2356,
                ( false, false, Facing::East, true, false, true, true, ) => 2357,
                ( false, false, Facing::East, true, false, true, false, ) => 2358,
                ( false, true, Facing::East, false, true, true, true, ) => 2359,
                ( false, true, Facing::East, false, true, true, false, ) => 2360,
                ( false, true, Facing::East, false, false, true, true, ) => 2361,
                ( false, true, Facing::East, false, false, true, false, ) => 2362,
                ( false, false, Facing::East, false, true, true, true, ) => 2363,
                ( false, false, Facing::East, false, true, true, false, ) => 2364,
                ( false, false, Facing::East, false, false, true, true, ) => 2365,
                ( false, false, Facing::East, false, false, true, false, ) => 2366,
                ( true, true, Facing::East, true, true, false, true, ) => 2367,
                ( true, true, Facing::East, true, true, false, false, ) => 2368,
                ( true, true, Facing::East, true, false, false, true, ) => 2369,
                ( true, true, Facing::East, true, false, false, false, ) => 2370,
                ( true, false, Facing::East, true, true, false, true, ) => 2371,
                ( true, false, Facing::East, true, true, false, false, ) => 2372,
                ( true, false, Facing::East, true, false, false, true, ) => 2373,
                ( true, false, Facing::East, true, false, false, false, ) => 2374,
                ( true, true, Facing::East, false, true, false, true, ) => 2375,
                ( true, true, Facing::East, false, true, false, false, ) => 2376,
                ( true, true, Facing::East, false, false, false, true, ) => 2377,
                ( true, true, Facing::East, false, false, false, false, ) => 2378,
                ( true, false, Facing::East, false, true, false, true, ) => 2379,
                ( true, false, Facing::East, false, true, false, false, ) => 2380,
                ( true, false, Facing::East, false, false, false, true, ) => 2381,
                ( true, false, Facing::East, false, false, false, false, ) => 2382,
                ( false, true, Facing::East, true, true, false, true, ) => 2383,
                ( false, true, Facing::East, true, true, false, false, ) => 2384,
                ( false, true, Facing::East, true, false, false, true, ) => 2385,
                ( false, true, Facing::East, true, false, false, false, ) => 2386,
                ( false, false, Facing::East, true, true, false, true, ) => 2387,
                ( false, false, Facing::East, true, true, false, false, ) => 2388,
                ( false, false, Facing::East, true, false, false, true, ) => 2389,
                ( false, false, Facing::East, true, false, false, false, ) => 2390,
                ( false, true, Facing::East, false, true, false, true, ) => 2391,
                ( false, true, Facing::East, false, true, false, false, ) => 2392,
                ( false, true, Facing::East, false, false, false, true, ) => 2393,
                ( false, true, Facing::East, false, false, false, false, ) => 2394,
                ( false, false, Facing::East, false, true, false, true, ) => 2395,
                ( false, false, Facing::East, false, true, false, false, ) => 2396,
                ( false, false, Facing::East, false, false, false, true, ) => 2397,
                ( false, false, Facing::East, false, false, false, false, ) => 2398,
            })
        }
    }

    impl From<ChiseledBookshelf> for BlockState {
        #[inline(always)]
        fn from(value : ChiseledBookshelf) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChiseledBookshelf {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChiseledBookshelf { }

    impl Block for ChiseledBookshelf {
        const DEFAULT_STATE : Self = Self {
            slot_1_occupied : false,
            slot_3_occupied : false,
            facing : Facing::North,
            slot_2_occupied : false,
            slot_4_occupied : false,
            slot_0_occupied : false,
            slot_5_occupied : false,
        };
    }

}

/// `minecraft:lectern` block.
pub mod lectern {
    use super::*;

    /// `minecraft:lectern` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Lectern {
        /// `facing` state.
        pub facing : Facing,
        /// `has_book` state.
        pub has_book : bool,
        /// `powered` state.
        pub powered : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Lectern {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.has_book, self.powered, )) {
                ( Facing::North, true, true, ) => 19505,
                ( Facing::North, true, false, ) => 19506,
                ( Facing::North, false, true, ) => 19507,
                ( Facing::North, false, false, ) => 19508,
                ( Facing::South, true, true, ) => 19509,
                ( Facing::South, true, false, ) => 19510,
                ( Facing::South, false, true, ) => 19511,
                ( Facing::South, false, false, ) => 19512,
                ( Facing::West, true, true, ) => 19513,
                ( Facing::West, true, false, ) => 19514,
                ( Facing::West, false, true, ) => 19515,
                ( Facing::West, false, false, ) => 19516,
                ( Facing::East, true, true, ) => 19517,
                ( Facing::East, true, false, ) => 19518,
                ( Facing::East, false, true, ) => 19519,
                ( Facing::East, false, false, ) => 19520,
            })
        }
    }

    impl From<Lectern> for BlockState {
        #[inline(always)]
        fn from(value : Lectern) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Lectern {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Lectern { }

    impl Block for Lectern {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            has_book : false,
            powered : false,
        };
    }

}

/// `minecraft:dead_fire_coral` block.
pub mod dead_fire_coral {
    use super::*;

    /// `minecraft:dead_fire_coral` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadFireCoral {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl DeadFireCoral {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13874,
                ( false, ) => 13875,
            })
        }
    }

    impl From<DeadFireCoral> for BlockState {
        #[inline(always)]
        fn from(value : DeadFireCoral) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadFireCoral {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadFireCoral { }

    impl Block for DeadFireCoral {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:deepslate_coal_ore` block.
pub mod deepslate_coal_ore {
    use super::*;

    /// `minecraft:deepslate_coal_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateCoalOre;

    impl DeepslateCoalOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(134)
        }
    }

    impl From<DeepslateCoalOre> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateCoalOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateCoalOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateCoalOre { }

    impl Block for DeepslateCoalOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:sculk` block.
pub mod sculk {
    use super::*;

    /// `minecraft:sculk` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Sculk;

    impl Sculk {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(23859)
        }
    }

    impl From<Sculk> for BlockState {
        #[inline(always)]
        fn from(value : Sculk) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Sculk {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Sculk { }

    impl Block for Sculk {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:spruce_leaves` block.
pub mod spruce_leaves {
    use super::*;

    /// `minecraft:spruce_leaves` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceLeaves {
        /// `distance` state.
        pub distance : Distance,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `persistent` state.
        pub persistent : bool,
    }

    /// `distance` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Distance {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Distance { }
    impl BlockProperty for Distance { }

    impl SpruceLeaves {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.distance, self.waterlogged, self.persistent, )) {
                ( Distance::N1, true, true, ) => 280,
                ( Distance::N1, false, true, ) => 281,
                ( Distance::N1, true, false, ) => 282,
                ( Distance::N1, false, false, ) => 283,
                ( Distance::N2, true, true, ) => 284,
                ( Distance::N2, false, true, ) => 285,
                ( Distance::N2, true, false, ) => 286,
                ( Distance::N2, false, false, ) => 287,
                ( Distance::N3, true, true, ) => 288,
                ( Distance::N3, false, true, ) => 289,
                ( Distance::N3, true, false, ) => 290,
                ( Distance::N3, false, false, ) => 291,
                ( Distance::N4, true, true, ) => 292,
                ( Distance::N4, false, true, ) => 293,
                ( Distance::N4, true, false, ) => 294,
                ( Distance::N4, false, false, ) => 295,
                ( Distance::N5, true, true, ) => 296,
                ( Distance::N5, false, true, ) => 297,
                ( Distance::N5, true, false, ) => 298,
                ( Distance::N5, false, false, ) => 299,
                ( Distance::N6, true, true, ) => 300,
                ( Distance::N6, false, true, ) => 301,
                ( Distance::N6, true, false, ) => 302,
                ( Distance::N6, false, false, ) => 303,
                ( Distance::N7, true, true, ) => 304,
                ( Distance::N7, false, true, ) => 305,
                ( Distance::N7, true, false, ) => 306,
                ( Distance::N7, false, false, ) => 307,
            })
        }
    }

    impl From<SpruceLeaves> for BlockState {
        #[inline(always)]
        fn from(value : SpruceLeaves) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceLeaves {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceLeaves { }

    impl Block for SpruceLeaves {
        const DEFAULT_STATE : Self = Self {
            distance : Distance::N7,
            waterlogged : false,
            persistent : false,
        };
    }

}

/// `minecraft:brown_candle_cake` block.
pub mod brown_candle_cake {
    use super::*;

    /// `minecraft:brown_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl BrownCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22083,
                ( false, ) => 22084,
            })
        }
    }

    impl From<BrownCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : BrownCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownCandleCake { }

    impl Block for BrownCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:end_rod` block.
pub mod end_rod {
    use super::*;

    /// `minecraft:end_rod` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct EndRod {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl EndRod {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13357,
                ( Facing::East, ) => 13358,
                ( Facing::South, ) => 13359,
                ( Facing::West, ) => 13360,
                ( Facing::Up, ) => 13361,
                ( Facing::Down, ) => 13362,
            })
        }
    }

    impl From<EndRod> for BlockState {
        #[inline(always)]
        fn from(value : EndRod) -> Self {
            value.to_block_state()
        }
    }

    impl Default for EndRod {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for EndRod { }

    impl Block for EndRod {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:lime_shulker_box` block.
pub mod lime_shulker_box {
    use super::*;

    /// `minecraft:lime_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl LimeShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13621,
                ( Facing::East, ) => 13622,
                ( Facing::South, ) => 13623,
                ( Facing::West, ) => 13624,
                ( Facing::Up, ) => 13625,
                ( Facing::Down, ) => 13626,
            })
        }
    }

    impl From<LimeShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : LimeShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeShulkerBox { }

    impl Block for LimeShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:creeper_wall_head` block.
pub mod creeper_wall_head {
    use super::*;

    /// `minecraft:creeper_wall_head` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CreeperWallHead {
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CreeperWallHead {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.powered, )) {
                ( Facing::North, true, ) => 9828,
                ( Facing::North, false, ) => 9829,
                ( Facing::South, true, ) => 9830,
                ( Facing::South, false, ) => 9831,
                ( Facing::West, true, ) => 9832,
                ( Facing::West, false, ) => 9833,
                ( Facing::East, true, ) => 9834,
                ( Facing::East, false, ) => 9835,
            })
        }
    }

    impl From<CreeperWallHead> for BlockState {
        #[inline(always)]
        fn from(value : CreeperWallHead) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CreeperWallHead {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CreeperWallHead { }

    impl Block for CreeperWallHead {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            powered : false,
        };
    }

}

/// `minecraft:blue_stained_glass_pane` block.
pub mod blue_stained_glass_pane {
    use super::*;

    /// `minecraft:blue_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueStainedGlassPane {
        /// `south` state.
        pub south : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `north` state.
        pub north : bool,
        /// `west` state.
        pub west : bool,
        /// `east` state.
        pub east : bool,
    }

    impl BlueStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.south, self.waterlogged, self.north, self.west, self.east, )) {
                ( true, true, true, true, true, ) => 10533,
                ( true, true, true, false, true, ) => 10534,
                ( true, false, true, true, true, ) => 10535,
                ( true, false, true, false, true, ) => 10536,
                ( false, true, true, true, true, ) => 10537,
                ( false, true, true, false, true, ) => 10538,
                ( false, false, true, true, true, ) => 10539,
                ( false, false, true, false, true, ) => 10540,
                ( true, true, false, true, true, ) => 10541,
                ( true, true, false, false, true, ) => 10542,
                ( true, false, false, true, true, ) => 10543,
                ( true, false, false, false, true, ) => 10544,
                ( false, true, false, true, true, ) => 10545,
                ( false, true, false, false, true, ) => 10546,
                ( false, false, false, true, true, ) => 10547,
                ( false, false, false, false, true, ) => 10548,
                ( true, true, true, true, false, ) => 10549,
                ( true, true, true, false, false, ) => 10550,
                ( true, false, true, true, false, ) => 10551,
                ( true, false, true, false, false, ) => 10552,
                ( false, true, true, true, false, ) => 10553,
                ( false, true, true, false, false, ) => 10554,
                ( false, false, true, true, false, ) => 10555,
                ( false, false, true, false, false, ) => 10556,
                ( true, true, false, true, false, ) => 10557,
                ( true, true, false, false, false, ) => 10558,
                ( true, false, false, true, false, ) => 10559,
                ( true, false, false, false, false, ) => 10560,
                ( false, true, false, true, false, ) => 10561,
                ( false, true, false, false, false, ) => 10562,
                ( false, false, false, true, false, ) => 10563,
                ( false, false, false, false, false, ) => 10564,
            })
        }
    }

    impl From<BlueStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : BlueStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueStainedGlassPane { }

    impl Block for BlueStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            south : false,
            waterlogged : false,
            north : false,
            west : false,
            east : false,
        };
    }

}

/// `minecraft:ender_chest` block.
pub mod ender_chest {
    use super::*;

    /// `minecraft:ender_chest` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct EnderChest {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl EnderChest {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 8297,
                ( Facing::North, false, ) => 8298,
                ( Facing::South, true, ) => 8299,
                ( Facing::South, false, ) => 8300,
                ( Facing::West, true, ) => 8301,
                ( Facing::West, false, ) => 8302,
                ( Facing::East, true, ) => 8303,
                ( Facing::East, false, ) => 8304,
            })
        }
    }

    impl From<EnderChest> for BlockState {
        #[inline(always)]
        fn from(value : EnderChest) -> Self {
            value.to_block_state()
        }
    }

    impl Default for EnderChest {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for EnderChest { }

    impl Block for EnderChest {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:purpur_slab` block.
pub mod purpur_slab {
    use super::*;

    /// `minecraft:purpur_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpurSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl PurpurSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 12195,
                ( false, Kind::Top, ) => 12196,
                ( true, Kind::Bottom, ) => 12197,
                ( false, Kind::Bottom, ) => 12198,
                ( true, Kind::Double, ) => 12199,
                ( false, Kind::Double, ) => 12200,
            })
        }
    }

    impl From<PurpurSlab> for BlockState {
        #[inline(always)]
        fn from(value : PurpurSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpurSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpurSlab { }

    impl Block for PurpurSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:raw_iron_block` block.
pub mod raw_iron_block {
    use super::*;

    /// `minecraft:raw_iron_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RawIronBlock;

    impl RawIronBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27650)
        }
    }

    impl From<RawIronBlock> for BlockState {
        #[inline(always)]
        fn from(value : RawIronBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RawIronBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RawIronBlock { }

    impl Block for RawIronBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:redstone_wire` block.
pub mod redstone_wire {
    use super::*;

    /// `minecraft:redstone_wire` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedstoneWire {
        /// `power` state.
        pub power : Power,
        /// `east` state.
        pub east : East,
        /// `south` state.
        pub south : South,
        /// `north` state.
        pub north : North,
        /// `west` state.
        pub west : West,
    }

    /// `power` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Power {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Power { }
    impl BlockProperty for Power { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `up` variant.
        Up,
        /// `side` variant.
        Side,
        /// `none` variant.
        None,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `up` variant.
        Up,
        /// `side` variant.
        Side,
        /// `none` variant.
        None,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `up` variant.
        Up,
        /// `side` variant.
        Side,
        /// `none` variant.
        None,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `up` variant.
        Up,
        /// `side` variant.
        Side,
        /// `none` variant.
        None,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    impl RedstoneWire {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.power, self.east, self.south, self.north, self.west, )) {
                ( Power::N0, East::Up, South::Up, North::Up, West::Up, ) => 3042,
                ( Power::N0, East::Up, South::Up, North::Up, West::Side, ) => 3043,
                ( Power::N0, East::Up, South::Up, North::Up, West::None, ) => 3044,
                ( Power::N0, East::Up, South::Side, North::Up, West::Up, ) => 3045,
                ( Power::N0, East::Up, South::Side, North::Up, West::Side, ) => 3046,
                ( Power::N0, East::Up, South::Side, North::Up, West::None, ) => 3047,
                ( Power::N0, East::Up, South::None, North::Up, West::Up, ) => 3048,
                ( Power::N0, East::Up, South::None, North::Up, West::Side, ) => 3049,
                ( Power::N0, East::Up, South::None, North::Up, West::None, ) => 3050,
                ( Power::N1, East::Up, South::Up, North::Up, West::Up, ) => 3051,
                ( Power::N1, East::Up, South::Up, North::Up, West::Side, ) => 3052,
                ( Power::N1, East::Up, South::Up, North::Up, West::None, ) => 3053,
                ( Power::N1, East::Up, South::Side, North::Up, West::Up, ) => 3054,
                ( Power::N1, East::Up, South::Side, North::Up, West::Side, ) => 3055,
                ( Power::N1, East::Up, South::Side, North::Up, West::None, ) => 3056,
                ( Power::N1, East::Up, South::None, North::Up, West::Up, ) => 3057,
                ( Power::N1, East::Up, South::None, North::Up, West::Side, ) => 3058,
                ( Power::N1, East::Up, South::None, North::Up, West::None, ) => 3059,
                ( Power::N2, East::Up, South::Up, North::Up, West::Up, ) => 3060,
                ( Power::N2, East::Up, South::Up, North::Up, West::Side, ) => 3061,
                ( Power::N2, East::Up, South::Up, North::Up, West::None, ) => 3062,
                ( Power::N2, East::Up, South::Side, North::Up, West::Up, ) => 3063,
                ( Power::N2, East::Up, South::Side, North::Up, West::Side, ) => 3064,
                ( Power::N2, East::Up, South::Side, North::Up, West::None, ) => 3065,
                ( Power::N2, East::Up, South::None, North::Up, West::Up, ) => 3066,
                ( Power::N2, East::Up, South::None, North::Up, West::Side, ) => 3067,
                ( Power::N2, East::Up, South::None, North::Up, West::None, ) => 3068,
                ( Power::N3, East::Up, South::Up, North::Up, West::Up, ) => 3069,
                ( Power::N3, East::Up, South::Up, North::Up, West::Side, ) => 3070,
                ( Power::N3, East::Up, South::Up, North::Up, West::None, ) => 3071,
                ( Power::N3, East::Up, South::Side, North::Up, West::Up, ) => 3072,
                ( Power::N3, East::Up, South::Side, North::Up, West::Side, ) => 3073,
                ( Power::N3, East::Up, South::Side, North::Up, West::None, ) => 3074,
                ( Power::N3, East::Up, South::None, North::Up, West::Up, ) => 3075,
                ( Power::N3, East::Up, South::None, North::Up, West::Side, ) => 3076,
                ( Power::N3, East::Up, South::None, North::Up, West::None, ) => 3077,
                ( Power::N4, East::Up, South::Up, North::Up, West::Up, ) => 3078,
                ( Power::N4, East::Up, South::Up, North::Up, West::Side, ) => 3079,
                ( Power::N4, East::Up, South::Up, North::Up, West::None, ) => 3080,
                ( Power::N4, East::Up, South::Side, North::Up, West::Up, ) => 3081,
                ( Power::N4, East::Up, South::Side, North::Up, West::Side, ) => 3082,
                ( Power::N4, East::Up, South::Side, North::Up, West::None, ) => 3083,
                ( Power::N4, East::Up, South::None, North::Up, West::Up, ) => 3084,
                ( Power::N4, East::Up, South::None, North::Up, West::Side, ) => 3085,
                ( Power::N4, East::Up, South::None, North::Up, West::None, ) => 3086,
                ( Power::N5, East::Up, South::Up, North::Up, West::Up, ) => 3087,
                ( Power::N5, East::Up, South::Up, North::Up, West::Side, ) => 3088,
                ( Power::N5, East::Up, South::Up, North::Up, West::None, ) => 3089,
                ( Power::N5, East::Up, South::Side, North::Up, West::Up, ) => 3090,
                ( Power::N5, East::Up, South::Side, North::Up, West::Side, ) => 3091,
                ( Power::N5, East::Up, South::Side, North::Up, West::None, ) => 3092,
                ( Power::N5, East::Up, South::None, North::Up, West::Up, ) => 3093,
                ( Power::N5, East::Up, South::None, North::Up, West::Side, ) => 3094,
                ( Power::N5, East::Up, South::None, North::Up, West::None, ) => 3095,
                ( Power::N6, East::Up, South::Up, North::Up, West::Up, ) => 3096,
                ( Power::N6, East::Up, South::Up, North::Up, West::Side, ) => 3097,
                ( Power::N6, East::Up, South::Up, North::Up, West::None, ) => 3098,
                ( Power::N6, East::Up, South::Side, North::Up, West::Up, ) => 3099,
                ( Power::N6, East::Up, South::Side, North::Up, West::Side, ) => 3100,
                ( Power::N6, East::Up, South::Side, North::Up, West::None, ) => 3101,
                ( Power::N6, East::Up, South::None, North::Up, West::Up, ) => 3102,
                ( Power::N6, East::Up, South::None, North::Up, West::Side, ) => 3103,
                ( Power::N6, East::Up, South::None, North::Up, West::None, ) => 3104,
                ( Power::N7, East::Up, South::Up, North::Up, West::Up, ) => 3105,
                ( Power::N7, East::Up, South::Up, North::Up, West::Side, ) => 3106,
                ( Power::N7, East::Up, South::Up, North::Up, West::None, ) => 3107,
                ( Power::N7, East::Up, South::Side, North::Up, West::Up, ) => 3108,
                ( Power::N7, East::Up, South::Side, North::Up, West::Side, ) => 3109,
                ( Power::N7, East::Up, South::Side, North::Up, West::None, ) => 3110,
                ( Power::N7, East::Up, South::None, North::Up, West::Up, ) => 3111,
                ( Power::N7, East::Up, South::None, North::Up, West::Side, ) => 3112,
                ( Power::N7, East::Up, South::None, North::Up, West::None, ) => 3113,
                ( Power::N8, East::Up, South::Up, North::Up, West::Up, ) => 3114,
                ( Power::N8, East::Up, South::Up, North::Up, West::Side, ) => 3115,
                ( Power::N8, East::Up, South::Up, North::Up, West::None, ) => 3116,
                ( Power::N8, East::Up, South::Side, North::Up, West::Up, ) => 3117,
                ( Power::N8, East::Up, South::Side, North::Up, West::Side, ) => 3118,
                ( Power::N8, East::Up, South::Side, North::Up, West::None, ) => 3119,
                ( Power::N8, East::Up, South::None, North::Up, West::Up, ) => 3120,
                ( Power::N8, East::Up, South::None, North::Up, West::Side, ) => 3121,
                ( Power::N8, East::Up, South::None, North::Up, West::None, ) => 3122,
                ( Power::N9, East::Up, South::Up, North::Up, West::Up, ) => 3123,
                ( Power::N9, East::Up, South::Up, North::Up, West::Side, ) => 3124,
                ( Power::N9, East::Up, South::Up, North::Up, West::None, ) => 3125,
                ( Power::N9, East::Up, South::Side, North::Up, West::Up, ) => 3126,
                ( Power::N9, East::Up, South::Side, North::Up, West::Side, ) => 3127,
                ( Power::N9, East::Up, South::Side, North::Up, West::None, ) => 3128,
                ( Power::N9, East::Up, South::None, North::Up, West::Up, ) => 3129,
                ( Power::N9, East::Up, South::None, North::Up, West::Side, ) => 3130,
                ( Power::N9, East::Up, South::None, North::Up, West::None, ) => 3131,
                ( Power::N10, East::Up, South::Up, North::Up, West::Up, ) => 3132,
                ( Power::N10, East::Up, South::Up, North::Up, West::Side, ) => 3133,
                ( Power::N10, East::Up, South::Up, North::Up, West::None, ) => 3134,
                ( Power::N10, East::Up, South::Side, North::Up, West::Up, ) => 3135,
                ( Power::N10, East::Up, South::Side, North::Up, West::Side, ) => 3136,
                ( Power::N10, East::Up, South::Side, North::Up, West::None, ) => 3137,
                ( Power::N10, East::Up, South::None, North::Up, West::Up, ) => 3138,
                ( Power::N10, East::Up, South::None, North::Up, West::Side, ) => 3139,
                ( Power::N10, East::Up, South::None, North::Up, West::None, ) => 3140,
                ( Power::N11, East::Up, South::Up, North::Up, West::Up, ) => 3141,
                ( Power::N11, East::Up, South::Up, North::Up, West::Side, ) => 3142,
                ( Power::N11, East::Up, South::Up, North::Up, West::None, ) => 3143,
                ( Power::N11, East::Up, South::Side, North::Up, West::Up, ) => 3144,
                ( Power::N11, East::Up, South::Side, North::Up, West::Side, ) => 3145,
                ( Power::N11, East::Up, South::Side, North::Up, West::None, ) => 3146,
                ( Power::N11, East::Up, South::None, North::Up, West::Up, ) => 3147,
                ( Power::N11, East::Up, South::None, North::Up, West::Side, ) => 3148,
                ( Power::N11, East::Up, South::None, North::Up, West::None, ) => 3149,
                ( Power::N12, East::Up, South::Up, North::Up, West::Up, ) => 3150,
                ( Power::N12, East::Up, South::Up, North::Up, West::Side, ) => 3151,
                ( Power::N12, East::Up, South::Up, North::Up, West::None, ) => 3152,
                ( Power::N12, East::Up, South::Side, North::Up, West::Up, ) => 3153,
                ( Power::N12, East::Up, South::Side, North::Up, West::Side, ) => 3154,
                ( Power::N12, East::Up, South::Side, North::Up, West::None, ) => 3155,
                ( Power::N12, East::Up, South::None, North::Up, West::Up, ) => 3156,
                ( Power::N12, East::Up, South::None, North::Up, West::Side, ) => 3157,
                ( Power::N12, East::Up, South::None, North::Up, West::None, ) => 3158,
                ( Power::N13, East::Up, South::Up, North::Up, West::Up, ) => 3159,
                ( Power::N13, East::Up, South::Up, North::Up, West::Side, ) => 3160,
                ( Power::N13, East::Up, South::Up, North::Up, West::None, ) => 3161,
                ( Power::N13, East::Up, South::Side, North::Up, West::Up, ) => 3162,
                ( Power::N13, East::Up, South::Side, North::Up, West::Side, ) => 3163,
                ( Power::N13, East::Up, South::Side, North::Up, West::None, ) => 3164,
                ( Power::N13, East::Up, South::None, North::Up, West::Up, ) => 3165,
                ( Power::N13, East::Up, South::None, North::Up, West::Side, ) => 3166,
                ( Power::N13, East::Up, South::None, North::Up, West::None, ) => 3167,
                ( Power::N14, East::Up, South::Up, North::Up, West::Up, ) => 3168,
                ( Power::N14, East::Up, South::Up, North::Up, West::Side, ) => 3169,
                ( Power::N14, East::Up, South::Up, North::Up, West::None, ) => 3170,
                ( Power::N14, East::Up, South::Side, North::Up, West::Up, ) => 3171,
                ( Power::N14, East::Up, South::Side, North::Up, West::Side, ) => 3172,
                ( Power::N14, East::Up, South::Side, North::Up, West::None, ) => 3173,
                ( Power::N14, East::Up, South::None, North::Up, West::Up, ) => 3174,
                ( Power::N14, East::Up, South::None, North::Up, West::Side, ) => 3175,
                ( Power::N14, East::Up, South::None, North::Up, West::None, ) => 3176,
                ( Power::N15, East::Up, South::Up, North::Up, West::Up, ) => 3177,
                ( Power::N15, East::Up, South::Up, North::Up, West::Side, ) => 3178,
                ( Power::N15, East::Up, South::Up, North::Up, West::None, ) => 3179,
                ( Power::N15, East::Up, South::Side, North::Up, West::Up, ) => 3180,
                ( Power::N15, East::Up, South::Side, North::Up, West::Side, ) => 3181,
                ( Power::N15, East::Up, South::Side, North::Up, West::None, ) => 3182,
                ( Power::N15, East::Up, South::None, North::Up, West::Up, ) => 3183,
                ( Power::N15, East::Up, South::None, North::Up, West::Side, ) => 3184,
                ( Power::N15, East::Up, South::None, North::Up, West::None, ) => 3185,
                ( Power::N0, East::Up, South::Up, North::Side, West::Up, ) => 3186,
                ( Power::N0, East::Up, South::Up, North::Side, West::Side, ) => 3187,
                ( Power::N0, East::Up, South::Up, North::Side, West::None, ) => 3188,
                ( Power::N0, East::Up, South::Side, North::Side, West::Up, ) => 3189,
                ( Power::N0, East::Up, South::Side, North::Side, West::Side, ) => 3190,
                ( Power::N0, East::Up, South::Side, North::Side, West::None, ) => 3191,
                ( Power::N0, East::Up, South::None, North::Side, West::Up, ) => 3192,
                ( Power::N0, East::Up, South::None, North::Side, West::Side, ) => 3193,
                ( Power::N0, East::Up, South::None, North::Side, West::None, ) => 3194,
                ( Power::N1, East::Up, South::Up, North::Side, West::Up, ) => 3195,
                ( Power::N1, East::Up, South::Up, North::Side, West::Side, ) => 3196,
                ( Power::N1, East::Up, South::Up, North::Side, West::None, ) => 3197,
                ( Power::N1, East::Up, South::Side, North::Side, West::Up, ) => 3198,
                ( Power::N1, East::Up, South::Side, North::Side, West::Side, ) => 3199,
                ( Power::N1, East::Up, South::Side, North::Side, West::None, ) => 3200,
                ( Power::N1, East::Up, South::None, North::Side, West::Up, ) => 3201,
                ( Power::N1, East::Up, South::None, North::Side, West::Side, ) => 3202,
                ( Power::N1, East::Up, South::None, North::Side, West::None, ) => 3203,
                ( Power::N2, East::Up, South::Up, North::Side, West::Up, ) => 3204,
                ( Power::N2, East::Up, South::Up, North::Side, West::Side, ) => 3205,
                ( Power::N2, East::Up, South::Up, North::Side, West::None, ) => 3206,
                ( Power::N2, East::Up, South::Side, North::Side, West::Up, ) => 3207,
                ( Power::N2, East::Up, South::Side, North::Side, West::Side, ) => 3208,
                ( Power::N2, East::Up, South::Side, North::Side, West::None, ) => 3209,
                ( Power::N2, East::Up, South::None, North::Side, West::Up, ) => 3210,
                ( Power::N2, East::Up, South::None, North::Side, West::Side, ) => 3211,
                ( Power::N2, East::Up, South::None, North::Side, West::None, ) => 3212,
                ( Power::N3, East::Up, South::Up, North::Side, West::Up, ) => 3213,
                ( Power::N3, East::Up, South::Up, North::Side, West::Side, ) => 3214,
                ( Power::N3, East::Up, South::Up, North::Side, West::None, ) => 3215,
                ( Power::N3, East::Up, South::Side, North::Side, West::Up, ) => 3216,
                ( Power::N3, East::Up, South::Side, North::Side, West::Side, ) => 3217,
                ( Power::N3, East::Up, South::Side, North::Side, West::None, ) => 3218,
                ( Power::N3, East::Up, South::None, North::Side, West::Up, ) => 3219,
                ( Power::N3, East::Up, South::None, North::Side, West::Side, ) => 3220,
                ( Power::N3, East::Up, South::None, North::Side, West::None, ) => 3221,
                ( Power::N4, East::Up, South::Up, North::Side, West::Up, ) => 3222,
                ( Power::N4, East::Up, South::Up, North::Side, West::Side, ) => 3223,
                ( Power::N4, East::Up, South::Up, North::Side, West::None, ) => 3224,
                ( Power::N4, East::Up, South::Side, North::Side, West::Up, ) => 3225,
                ( Power::N4, East::Up, South::Side, North::Side, West::Side, ) => 3226,
                ( Power::N4, East::Up, South::Side, North::Side, West::None, ) => 3227,
                ( Power::N4, East::Up, South::None, North::Side, West::Up, ) => 3228,
                ( Power::N4, East::Up, South::None, North::Side, West::Side, ) => 3229,
                ( Power::N4, East::Up, South::None, North::Side, West::None, ) => 3230,
                ( Power::N5, East::Up, South::Up, North::Side, West::Up, ) => 3231,
                ( Power::N5, East::Up, South::Up, North::Side, West::Side, ) => 3232,
                ( Power::N5, East::Up, South::Up, North::Side, West::None, ) => 3233,
                ( Power::N5, East::Up, South::Side, North::Side, West::Up, ) => 3234,
                ( Power::N5, East::Up, South::Side, North::Side, West::Side, ) => 3235,
                ( Power::N5, East::Up, South::Side, North::Side, West::None, ) => 3236,
                ( Power::N5, East::Up, South::None, North::Side, West::Up, ) => 3237,
                ( Power::N5, East::Up, South::None, North::Side, West::Side, ) => 3238,
                ( Power::N5, East::Up, South::None, North::Side, West::None, ) => 3239,
                ( Power::N6, East::Up, South::Up, North::Side, West::Up, ) => 3240,
                ( Power::N6, East::Up, South::Up, North::Side, West::Side, ) => 3241,
                ( Power::N6, East::Up, South::Up, North::Side, West::None, ) => 3242,
                ( Power::N6, East::Up, South::Side, North::Side, West::Up, ) => 3243,
                ( Power::N6, East::Up, South::Side, North::Side, West::Side, ) => 3244,
                ( Power::N6, East::Up, South::Side, North::Side, West::None, ) => 3245,
                ( Power::N6, East::Up, South::None, North::Side, West::Up, ) => 3246,
                ( Power::N6, East::Up, South::None, North::Side, West::Side, ) => 3247,
                ( Power::N6, East::Up, South::None, North::Side, West::None, ) => 3248,
                ( Power::N7, East::Up, South::Up, North::Side, West::Up, ) => 3249,
                ( Power::N7, East::Up, South::Up, North::Side, West::Side, ) => 3250,
                ( Power::N7, East::Up, South::Up, North::Side, West::None, ) => 3251,
                ( Power::N7, East::Up, South::Side, North::Side, West::Up, ) => 3252,
                ( Power::N7, East::Up, South::Side, North::Side, West::Side, ) => 3253,
                ( Power::N7, East::Up, South::Side, North::Side, West::None, ) => 3254,
                ( Power::N7, East::Up, South::None, North::Side, West::Up, ) => 3255,
                ( Power::N7, East::Up, South::None, North::Side, West::Side, ) => 3256,
                ( Power::N7, East::Up, South::None, North::Side, West::None, ) => 3257,
                ( Power::N8, East::Up, South::Up, North::Side, West::Up, ) => 3258,
                ( Power::N8, East::Up, South::Up, North::Side, West::Side, ) => 3259,
                ( Power::N8, East::Up, South::Up, North::Side, West::None, ) => 3260,
                ( Power::N8, East::Up, South::Side, North::Side, West::Up, ) => 3261,
                ( Power::N8, East::Up, South::Side, North::Side, West::Side, ) => 3262,
                ( Power::N8, East::Up, South::Side, North::Side, West::None, ) => 3263,
                ( Power::N8, East::Up, South::None, North::Side, West::Up, ) => 3264,
                ( Power::N8, East::Up, South::None, North::Side, West::Side, ) => 3265,
                ( Power::N8, East::Up, South::None, North::Side, West::None, ) => 3266,
                ( Power::N9, East::Up, South::Up, North::Side, West::Up, ) => 3267,
                ( Power::N9, East::Up, South::Up, North::Side, West::Side, ) => 3268,
                ( Power::N9, East::Up, South::Up, North::Side, West::None, ) => 3269,
                ( Power::N9, East::Up, South::Side, North::Side, West::Up, ) => 3270,
                ( Power::N9, East::Up, South::Side, North::Side, West::Side, ) => 3271,
                ( Power::N9, East::Up, South::Side, North::Side, West::None, ) => 3272,
                ( Power::N9, East::Up, South::None, North::Side, West::Up, ) => 3273,
                ( Power::N9, East::Up, South::None, North::Side, West::Side, ) => 3274,
                ( Power::N9, East::Up, South::None, North::Side, West::None, ) => 3275,
                ( Power::N10, East::Up, South::Up, North::Side, West::Up, ) => 3276,
                ( Power::N10, East::Up, South::Up, North::Side, West::Side, ) => 3277,
                ( Power::N10, East::Up, South::Up, North::Side, West::None, ) => 3278,
                ( Power::N10, East::Up, South::Side, North::Side, West::Up, ) => 3279,
                ( Power::N10, East::Up, South::Side, North::Side, West::Side, ) => 3280,
                ( Power::N10, East::Up, South::Side, North::Side, West::None, ) => 3281,
                ( Power::N10, East::Up, South::None, North::Side, West::Up, ) => 3282,
                ( Power::N10, East::Up, South::None, North::Side, West::Side, ) => 3283,
                ( Power::N10, East::Up, South::None, North::Side, West::None, ) => 3284,
                ( Power::N11, East::Up, South::Up, North::Side, West::Up, ) => 3285,
                ( Power::N11, East::Up, South::Up, North::Side, West::Side, ) => 3286,
                ( Power::N11, East::Up, South::Up, North::Side, West::None, ) => 3287,
                ( Power::N11, East::Up, South::Side, North::Side, West::Up, ) => 3288,
                ( Power::N11, East::Up, South::Side, North::Side, West::Side, ) => 3289,
                ( Power::N11, East::Up, South::Side, North::Side, West::None, ) => 3290,
                ( Power::N11, East::Up, South::None, North::Side, West::Up, ) => 3291,
                ( Power::N11, East::Up, South::None, North::Side, West::Side, ) => 3292,
                ( Power::N11, East::Up, South::None, North::Side, West::None, ) => 3293,
                ( Power::N12, East::Up, South::Up, North::Side, West::Up, ) => 3294,
                ( Power::N12, East::Up, South::Up, North::Side, West::Side, ) => 3295,
                ( Power::N12, East::Up, South::Up, North::Side, West::None, ) => 3296,
                ( Power::N12, East::Up, South::Side, North::Side, West::Up, ) => 3297,
                ( Power::N12, East::Up, South::Side, North::Side, West::Side, ) => 3298,
                ( Power::N12, East::Up, South::Side, North::Side, West::None, ) => 3299,
                ( Power::N12, East::Up, South::None, North::Side, West::Up, ) => 3300,
                ( Power::N12, East::Up, South::None, North::Side, West::Side, ) => 3301,
                ( Power::N12, East::Up, South::None, North::Side, West::None, ) => 3302,
                ( Power::N13, East::Up, South::Up, North::Side, West::Up, ) => 3303,
                ( Power::N13, East::Up, South::Up, North::Side, West::Side, ) => 3304,
                ( Power::N13, East::Up, South::Up, North::Side, West::None, ) => 3305,
                ( Power::N13, East::Up, South::Side, North::Side, West::Up, ) => 3306,
                ( Power::N13, East::Up, South::Side, North::Side, West::Side, ) => 3307,
                ( Power::N13, East::Up, South::Side, North::Side, West::None, ) => 3308,
                ( Power::N13, East::Up, South::None, North::Side, West::Up, ) => 3309,
                ( Power::N13, East::Up, South::None, North::Side, West::Side, ) => 3310,
                ( Power::N13, East::Up, South::None, North::Side, West::None, ) => 3311,
                ( Power::N14, East::Up, South::Up, North::Side, West::Up, ) => 3312,
                ( Power::N14, East::Up, South::Up, North::Side, West::Side, ) => 3313,
                ( Power::N14, East::Up, South::Up, North::Side, West::None, ) => 3314,
                ( Power::N14, East::Up, South::Side, North::Side, West::Up, ) => 3315,
                ( Power::N14, East::Up, South::Side, North::Side, West::Side, ) => 3316,
                ( Power::N14, East::Up, South::Side, North::Side, West::None, ) => 3317,
                ( Power::N14, East::Up, South::None, North::Side, West::Up, ) => 3318,
                ( Power::N14, East::Up, South::None, North::Side, West::Side, ) => 3319,
                ( Power::N14, East::Up, South::None, North::Side, West::None, ) => 3320,
                ( Power::N15, East::Up, South::Up, North::Side, West::Up, ) => 3321,
                ( Power::N15, East::Up, South::Up, North::Side, West::Side, ) => 3322,
                ( Power::N15, East::Up, South::Up, North::Side, West::None, ) => 3323,
                ( Power::N15, East::Up, South::Side, North::Side, West::Up, ) => 3324,
                ( Power::N15, East::Up, South::Side, North::Side, West::Side, ) => 3325,
                ( Power::N15, East::Up, South::Side, North::Side, West::None, ) => 3326,
                ( Power::N15, East::Up, South::None, North::Side, West::Up, ) => 3327,
                ( Power::N15, East::Up, South::None, North::Side, West::Side, ) => 3328,
                ( Power::N15, East::Up, South::None, North::Side, West::None, ) => 3329,
                ( Power::N0, East::Up, South::Up, North::None, West::Up, ) => 3330,
                ( Power::N0, East::Up, South::Up, North::None, West::Side, ) => 3331,
                ( Power::N0, East::Up, South::Up, North::None, West::None, ) => 3332,
                ( Power::N0, East::Up, South::Side, North::None, West::Up, ) => 3333,
                ( Power::N0, East::Up, South::Side, North::None, West::Side, ) => 3334,
                ( Power::N0, East::Up, South::Side, North::None, West::None, ) => 3335,
                ( Power::N0, East::Up, South::None, North::None, West::Up, ) => 3336,
                ( Power::N0, East::Up, South::None, North::None, West::Side, ) => 3337,
                ( Power::N0, East::Up, South::None, North::None, West::None, ) => 3338,
                ( Power::N1, East::Up, South::Up, North::None, West::Up, ) => 3339,
                ( Power::N1, East::Up, South::Up, North::None, West::Side, ) => 3340,
                ( Power::N1, East::Up, South::Up, North::None, West::None, ) => 3341,
                ( Power::N1, East::Up, South::Side, North::None, West::Up, ) => 3342,
                ( Power::N1, East::Up, South::Side, North::None, West::Side, ) => 3343,
                ( Power::N1, East::Up, South::Side, North::None, West::None, ) => 3344,
                ( Power::N1, East::Up, South::None, North::None, West::Up, ) => 3345,
                ( Power::N1, East::Up, South::None, North::None, West::Side, ) => 3346,
                ( Power::N1, East::Up, South::None, North::None, West::None, ) => 3347,
                ( Power::N2, East::Up, South::Up, North::None, West::Up, ) => 3348,
                ( Power::N2, East::Up, South::Up, North::None, West::Side, ) => 3349,
                ( Power::N2, East::Up, South::Up, North::None, West::None, ) => 3350,
                ( Power::N2, East::Up, South::Side, North::None, West::Up, ) => 3351,
                ( Power::N2, East::Up, South::Side, North::None, West::Side, ) => 3352,
                ( Power::N2, East::Up, South::Side, North::None, West::None, ) => 3353,
                ( Power::N2, East::Up, South::None, North::None, West::Up, ) => 3354,
                ( Power::N2, East::Up, South::None, North::None, West::Side, ) => 3355,
                ( Power::N2, East::Up, South::None, North::None, West::None, ) => 3356,
                ( Power::N3, East::Up, South::Up, North::None, West::Up, ) => 3357,
                ( Power::N3, East::Up, South::Up, North::None, West::Side, ) => 3358,
                ( Power::N3, East::Up, South::Up, North::None, West::None, ) => 3359,
                ( Power::N3, East::Up, South::Side, North::None, West::Up, ) => 3360,
                ( Power::N3, East::Up, South::Side, North::None, West::Side, ) => 3361,
                ( Power::N3, East::Up, South::Side, North::None, West::None, ) => 3362,
                ( Power::N3, East::Up, South::None, North::None, West::Up, ) => 3363,
                ( Power::N3, East::Up, South::None, North::None, West::Side, ) => 3364,
                ( Power::N3, East::Up, South::None, North::None, West::None, ) => 3365,
                ( Power::N4, East::Up, South::Up, North::None, West::Up, ) => 3366,
                ( Power::N4, East::Up, South::Up, North::None, West::Side, ) => 3367,
                ( Power::N4, East::Up, South::Up, North::None, West::None, ) => 3368,
                ( Power::N4, East::Up, South::Side, North::None, West::Up, ) => 3369,
                ( Power::N4, East::Up, South::Side, North::None, West::Side, ) => 3370,
                ( Power::N4, East::Up, South::Side, North::None, West::None, ) => 3371,
                ( Power::N4, East::Up, South::None, North::None, West::Up, ) => 3372,
                ( Power::N4, East::Up, South::None, North::None, West::Side, ) => 3373,
                ( Power::N4, East::Up, South::None, North::None, West::None, ) => 3374,
                ( Power::N5, East::Up, South::Up, North::None, West::Up, ) => 3375,
                ( Power::N5, East::Up, South::Up, North::None, West::Side, ) => 3376,
                ( Power::N5, East::Up, South::Up, North::None, West::None, ) => 3377,
                ( Power::N5, East::Up, South::Side, North::None, West::Up, ) => 3378,
                ( Power::N5, East::Up, South::Side, North::None, West::Side, ) => 3379,
                ( Power::N5, East::Up, South::Side, North::None, West::None, ) => 3380,
                ( Power::N5, East::Up, South::None, North::None, West::Up, ) => 3381,
                ( Power::N5, East::Up, South::None, North::None, West::Side, ) => 3382,
                ( Power::N5, East::Up, South::None, North::None, West::None, ) => 3383,
                ( Power::N6, East::Up, South::Up, North::None, West::Up, ) => 3384,
                ( Power::N6, East::Up, South::Up, North::None, West::Side, ) => 3385,
                ( Power::N6, East::Up, South::Up, North::None, West::None, ) => 3386,
                ( Power::N6, East::Up, South::Side, North::None, West::Up, ) => 3387,
                ( Power::N6, East::Up, South::Side, North::None, West::Side, ) => 3388,
                ( Power::N6, East::Up, South::Side, North::None, West::None, ) => 3389,
                ( Power::N6, East::Up, South::None, North::None, West::Up, ) => 3390,
                ( Power::N6, East::Up, South::None, North::None, West::Side, ) => 3391,
                ( Power::N6, East::Up, South::None, North::None, West::None, ) => 3392,
                ( Power::N7, East::Up, South::Up, North::None, West::Up, ) => 3393,
                ( Power::N7, East::Up, South::Up, North::None, West::Side, ) => 3394,
                ( Power::N7, East::Up, South::Up, North::None, West::None, ) => 3395,
                ( Power::N7, East::Up, South::Side, North::None, West::Up, ) => 3396,
                ( Power::N7, East::Up, South::Side, North::None, West::Side, ) => 3397,
                ( Power::N7, East::Up, South::Side, North::None, West::None, ) => 3398,
                ( Power::N7, East::Up, South::None, North::None, West::Up, ) => 3399,
                ( Power::N7, East::Up, South::None, North::None, West::Side, ) => 3400,
                ( Power::N7, East::Up, South::None, North::None, West::None, ) => 3401,
                ( Power::N8, East::Up, South::Up, North::None, West::Up, ) => 3402,
                ( Power::N8, East::Up, South::Up, North::None, West::Side, ) => 3403,
                ( Power::N8, East::Up, South::Up, North::None, West::None, ) => 3404,
                ( Power::N8, East::Up, South::Side, North::None, West::Up, ) => 3405,
                ( Power::N8, East::Up, South::Side, North::None, West::Side, ) => 3406,
                ( Power::N8, East::Up, South::Side, North::None, West::None, ) => 3407,
                ( Power::N8, East::Up, South::None, North::None, West::Up, ) => 3408,
                ( Power::N8, East::Up, South::None, North::None, West::Side, ) => 3409,
                ( Power::N8, East::Up, South::None, North::None, West::None, ) => 3410,
                ( Power::N9, East::Up, South::Up, North::None, West::Up, ) => 3411,
                ( Power::N9, East::Up, South::Up, North::None, West::Side, ) => 3412,
                ( Power::N9, East::Up, South::Up, North::None, West::None, ) => 3413,
                ( Power::N9, East::Up, South::Side, North::None, West::Up, ) => 3414,
                ( Power::N9, East::Up, South::Side, North::None, West::Side, ) => 3415,
                ( Power::N9, East::Up, South::Side, North::None, West::None, ) => 3416,
                ( Power::N9, East::Up, South::None, North::None, West::Up, ) => 3417,
                ( Power::N9, East::Up, South::None, North::None, West::Side, ) => 3418,
                ( Power::N9, East::Up, South::None, North::None, West::None, ) => 3419,
                ( Power::N10, East::Up, South::Up, North::None, West::Up, ) => 3420,
                ( Power::N10, East::Up, South::Up, North::None, West::Side, ) => 3421,
                ( Power::N10, East::Up, South::Up, North::None, West::None, ) => 3422,
                ( Power::N10, East::Up, South::Side, North::None, West::Up, ) => 3423,
                ( Power::N10, East::Up, South::Side, North::None, West::Side, ) => 3424,
                ( Power::N10, East::Up, South::Side, North::None, West::None, ) => 3425,
                ( Power::N10, East::Up, South::None, North::None, West::Up, ) => 3426,
                ( Power::N10, East::Up, South::None, North::None, West::Side, ) => 3427,
                ( Power::N10, East::Up, South::None, North::None, West::None, ) => 3428,
                ( Power::N11, East::Up, South::Up, North::None, West::Up, ) => 3429,
                ( Power::N11, East::Up, South::Up, North::None, West::Side, ) => 3430,
                ( Power::N11, East::Up, South::Up, North::None, West::None, ) => 3431,
                ( Power::N11, East::Up, South::Side, North::None, West::Up, ) => 3432,
                ( Power::N11, East::Up, South::Side, North::None, West::Side, ) => 3433,
                ( Power::N11, East::Up, South::Side, North::None, West::None, ) => 3434,
                ( Power::N11, East::Up, South::None, North::None, West::Up, ) => 3435,
                ( Power::N11, East::Up, South::None, North::None, West::Side, ) => 3436,
                ( Power::N11, East::Up, South::None, North::None, West::None, ) => 3437,
                ( Power::N12, East::Up, South::Up, North::None, West::Up, ) => 3438,
                ( Power::N12, East::Up, South::Up, North::None, West::Side, ) => 3439,
                ( Power::N12, East::Up, South::Up, North::None, West::None, ) => 3440,
                ( Power::N12, East::Up, South::Side, North::None, West::Up, ) => 3441,
                ( Power::N12, East::Up, South::Side, North::None, West::Side, ) => 3442,
                ( Power::N12, East::Up, South::Side, North::None, West::None, ) => 3443,
                ( Power::N12, East::Up, South::None, North::None, West::Up, ) => 3444,
                ( Power::N12, East::Up, South::None, North::None, West::Side, ) => 3445,
                ( Power::N12, East::Up, South::None, North::None, West::None, ) => 3446,
                ( Power::N13, East::Up, South::Up, North::None, West::Up, ) => 3447,
                ( Power::N13, East::Up, South::Up, North::None, West::Side, ) => 3448,
                ( Power::N13, East::Up, South::Up, North::None, West::None, ) => 3449,
                ( Power::N13, East::Up, South::Side, North::None, West::Up, ) => 3450,
                ( Power::N13, East::Up, South::Side, North::None, West::Side, ) => 3451,
                ( Power::N13, East::Up, South::Side, North::None, West::None, ) => 3452,
                ( Power::N13, East::Up, South::None, North::None, West::Up, ) => 3453,
                ( Power::N13, East::Up, South::None, North::None, West::Side, ) => 3454,
                ( Power::N13, East::Up, South::None, North::None, West::None, ) => 3455,
                ( Power::N14, East::Up, South::Up, North::None, West::Up, ) => 3456,
                ( Power::N14, East::Up, South::Up, North::None, West::Side, ) => 3457,
                ( Power::N14, East::Up, South::Up, North::None, West::None, ) => 3458,
                ( Power::N14, East::Up, South::Side, North::None, West::Up, ) => 3459,
                ( Power::N14, East::Up, South::Side, North::None, West::Side, ) => 3460,
                ( Power::N14, East::Up, South::Side, North::None, West::None, ) => 3461,
                ( Power::N14, East::Up, South::None, North::None, West::Up, ) => 3462,
                ( Power::N14, East::Up, South::None, North::None, West::Side, ) => 3463,
                ( Power::N14, East::Up, South::None, North::None, West::None, ) => 3464,
                ( Power::N15, East::Up, South::Up, North::None, West::Up, ) => 3465,
                ( Power::N15, East::Up, South::Up, North::None, West::Side, ) => 3466,
                ( Power::N15, East::Up, South::Up, North::None, West::None, ) => 3467,
                ( Power::N15, East::Up, South::Side, North::None, West::Up, ) => 3468,
                ( Power::N15, East::Up, South::Side, North::None, West::Side, ) => 3469,
                ( Power::N15, East::Up, South::Side, North::None, West::None, ) => 3470,
                ( Power::N15, East::Up, South::None, North::None, West::Up, ) => 3471,
                ( Power::N15, East::Up, South::None, North::None, West::Side, ) => 3472,
                ( Power::N15, East::Up, South::None, North::None, West::None, ) => 3473,
                ( Power::N0, East::Side, South::Up, North::Up, West::Up, ) => 3474,
                ( Power::N0, East::Side, South::Up, North::Up, West::Side, ) => 3475,
                ( Power::N0, East::Side, South::Up, North::Up, West::None, ) => 3476,
                ( Power::N0, East::Side, South::Side, North::Up, West::Up, ) => 3477,
                ( Power::N0, East::Side, South::Side, North::Up, West::Side, ) => 3478,
                ( Power::N0, East::Side, South::Side, North::Up, West::None, ) => 3479,
                ( Power::N0, East::Side, South::None, North::Up, West::Up, ) => 3480,
                ( Power::N0, East::Side, South::None, North::Up, West::Side, ) => 3481,
                ( Power::N0, East::Side, South::None, North::Up, West::None, ) => 3482,
                ( Power::N1, East::Side, South::Up, North::Up, West::Up, ) => 3483,
                ( Power::N1, East::Side, South::Up, North::Up, West::Side, ) => 3484,
                ( Power::N1, East::Side, South::Up, North::Up, West::None, ) => 3485,
                ( Power::N1, East::Side, South::Side, North::Up, West::Up, ) => 3486,
                ( Power::N1, East::Side, South::Side, North::Up, West::Side, ) => 3487,
                ( Power::N1, East::Side, South::Side, North::Up, West::None, ) => 3488,
                ( Power::N1, East::Side, South::None, North::Up, West::Up, ) => 3489,
                ( Power::N1, East::Side, South::None, North::Up, West::Side, ) => 3490,
                ( Power::N1, East::Side, South::None, North::Up, West::None, ) => 3491,
                ( Power::N2, East::Side, South::Up, North::Up, West::Up, ) => 3492,
                ( Power::N2, East::Side, South::Up, North::Up, West::Side, ) => 3493,
                ( Power::N2, East::Side, South::Up, North::Up, West::None, ) => 3494,
                ( Power::N2, East::Side, South::Side, North::Up, West::Up, ) => 3495,
                ( Power::N2, East::Side, South::Side, North::Up, West::Side, ) => 3496,
                ( Power::N2, East::Side, South::Side, North::Up, West::None, ) => 3497,
                ( Power::N2, East::Side, South::None, North::Up, West::Up, ) => 3498,
                ( Power::N2, East::Side, South::None, North::Up, West::Side, ) => 3499,
                ( Power::N2, East::Side, South::None, North::Up, West::None, ) => 3500,
                ( Power::N3, East::Side, South::Up, North::Up, West::Up, ) => 3501,
                ( Power::N3, East::Side, South::Up, North::Up, West::Side, ) => 3502,
                ( Power::N3, East::Side, South::Up, North::Up, West::None, ) => 3503,
                ( Power::N3, East::Side, South::Side, North::Up, West::Up, ) => 3504,
                ( Power::N3, East::Side, South::Side, North::Up, West::Side, ) => 3505,
                ( Power::N3, East::Side, South::Side, North::Up, West::None, ) => 3506,
                ( Power::N3, East::Side, South::None, North::Up, West::Up, ) => 3507,
                ( Power::N3, East::Side, South::None, North::Up, West::Side, ) => 3508,
                ( Power::N3, East::Side, South::None, North::Up, West::None, ) => 3509,
                ( Power::N4, East::Side, South::Up, North::Up, West::Up, ) => 3510,
                ( Power::N4, East::Side, South::Up, North::Up, West::Side, ) => 3511,
                ( Power::N4, East::Side, South::Up, North::Up, West::None, ) => 3512,
                ( Power::N4, East::Side, South::Side, North::Up, West::Up, ) => 3513,
                ( Power::N4, East::Side, South::Side, North::Up, West::Side, ) => 3514,
                ( Power::N4, East::Side, South::Side, North::Up, West::None, ) => 3515,
                ( Power::N4, East::Side, South::None, North::Up, West::Up, ) => 3516,
                ( Power::N4, East::Side, South::None, North::Up, West::Side, ) => 3517,
                ( Power::N4, East::Side, South::None, North::Up, West::None, ) => 3518,
                ( Power::N5, East::Side, South::Up, North::Up, West::Up, ) => 3519,
                ( Power::N5, East::Side, South::Up, North::Up, West::Side, ) => 3520,
                ( Power::N5, East::Side, South::Up, North::Up, West::None, ) => 3521,
                ( Power::N5, East::Side, South::Side, North::Up, West::Up, ) => 3522,
                ( Power::N5, East::Side, South::Side, North::Up, West::Side, ) => 3523,
                ( Power::N5, East::Side, South::Side, North::Up, West::None, ) => 3524,
                ( Power::N5, East::Side, South::None, North::Up, West::Up, ) => 3525,
                ( Power::N5, East::Side, South::None, North::Up, West::Side, ) => 3526,
                ( Power::N5, East::Side, South::None, North::Up, West::None, ) => 3527,
                ( Power::N6, East::Side, South::Up, North::Up, West::Up, ) => 3528,
                ( Power::N6, East::Side, South::Up, North::Up, West::Side, ) => 3529,
                ( Power::N6, East::Side, South::Up, North::Up, West::None, ) => 3530,
                ( Power::N6, East::Side, South::Side, North::Up, West::Up, ) => 3531,
                ( Power::N6, East::Side, South::Side, North::Up, West::Side, ) => 3532,
                ( Power::N6, East::Side, South::Side, North::Up, West::None, ) => 3533,
                ( Power::N6, East::Side, South::None, North::Up, West::Up, ) => 3534,
                ( Power::N6, East::Side, South::None, North::Up, West::Side, ) => 3535,
                ( Power::N6, East::Side, South::None, North::Up, West::None, ) => 3536,
                ( Power::N7, East::Side, South::Up, North::Up, West::Up, ) => 3537,
                ( Power::N7, East::Side, South::Up, North::Up, West::Side, ) => 3538,
                ( Power::N7, East::Side, South::Up, North::Up, West::None, ) => 3539,
                ( Power::N7, East::Side, South::Side, North::Up, West::Up, ) => 3540,
                ( Power::N7, East::Side, South::Side, North::Up, West::Side, ) => 3541,
                ( Power::N7, East::Side, South::Side, North::Up, West::None, ) => 3542,
                ( Power::N7, East::Side, South::None, North::Up, West::Up, ) => 3543,
                ( Power::N7, East::Side, South::None, North::Up, West::Side, ) => 3544,
                ( Power::N7, East::Side, South::None, North::Up, West::None, ) => 3545,
                ( Power::N8, East::Side, South::Up, North::Up, West::Up, ) => 3546,
                ( Power::N8, East::Side, South::Up, North::Up, West::Side, ) => 3547,
                ( Power::N8, East::Side, South::Up, North::Up, West::None, ) => 3548,
                ( Power::N8, East::Side, South::Side, North::Up, West::Up, ) => 3549,
                ( Power::N8, East::Side, South::Side, North::Up, West::Side, ) => 3550,
                ( Power::N8, East::Side, South::Side, North::Up, West::None, ) => 3551,
                ( Power::N8, East::Side, South::None, North::Up, West::Up, ) => 3552,
                ( Power::N8, East::Side, South::None, North::Up, West::Side, ) => 3553,
                ( Power::N8, East::Side, South::None, North::Up, West::None, ) => 3554,
                ( Power::N9, East::Side, South::Up, North::Up, West::Up, ) => 3555,
                ( Power::N9, East::Side, South::Up, North::Up, West::Side, ) => 3556,
                ( Power::N9, East::Side, South::Up, North::Up, West::None, ) => 3557,
                ( Power::N9, East::Side, South::Side, North::Up, West::Up, ) => 3558,
                ( Power::N9, East::Side, South::Side, North::Up, West::Side, ) => 3559,
                ( Power::N9, East::Side, South::Side, North::Up, West::None, ) => 3560,
                ( Power::N9, East::Side, South::None, North::Up, West::Up, ) => 3561,
                ( Power::N9, East::Side, South::None, North::Up, West::Side, ) => 3562,
                ( Power::N9, East::Side, South::None, North::Up, West::None, ) => 3563,
                ( Power::N10, East::Side, South::Up, North::Up, West::Up, ) => 3564,
                ( Power::N10, East::Side, South::Up, North::Up, West::Side, ) => 3565,
                ( Power::N10, East::Side, South::Up, North::Up, West::None, ) => 3566,
                ( Power::N10, East::Side, South::Side, North::Up, West::Up, ) => 3567,
                ( Power::N10, East::Side, South::Side, North::Up, West::Side, ) => 3568,
                ( Power::N10, East::Side, South::Side, North::Up, West::None, ) => 3569,
                ( Power::N10, East::Side, South::None, North::Up, West::Up, ) => 3570,
                ( Power::N10, East::Side, South::None, North::Up, West::Side, ) => 3571,
                ( Power::N10, East::Side, South::None, North::Up, West::None, ) => 3572,
                ( Power::N11, East::Side, South::Up, North::Up, West::Up, ) => 3573,
                ( Power::N11, East::Side, South::Up, North::Up, West::Side, ) => 3574,
                ( Power::N11, East::Side, South::Up, North::Up, West::None, ) => 3575,
                ( Power::N11, East::Side, South::Side, North::Up, West::Up, ) => 3576,
                ( Power::N11, East::Side, South::Side, North::Up, West::Side, ) => 3577,
                ( Power::N11, East::Side, South::Side, North::Up, West::None, ) => 3578,
                ( Power::N11, East::Side, South::None, North::Up, West::Up, ) => 3579,
                ( Power::N11, East::Side, South::None, North::Up, West::Side, ) => 3580,
                ( Power::N11, East::Side, South::None, North::Up, West::None, ) => 3581,
                ( Power::N12, East::Side, South::Up, North::Up, West::Up, ) => 3582,
                ( Power::N12, East::Side, South::Up, North::Up, West::Side, ) => 3583,
                ( Power::N12, East::Side, South::Up, North::Up, West::None, ) => 3584,
                ( Power::N12, East::Side, South::Side, North::Up, West::Up, ) => 3585,
                ( Power::N12, East::Side, South::Side, North::Up, West::Side, ) => 3586,
                ( Power::N12, East::Side, South::Side, North::Up, West::None, ) => 3587,
                ( Power::N12, East::Side, South::None, North::Up, West::Up, ) => 3588,
                ( Power::N12, East::Side, South::None, North::Up, West::Side, ) => 3589,
                ( Power::N12, East::Side, South::None, North::Up, West::None, ) => 3590,
                ( Power::N13, East::Side, South::Up, North::Up, West::Up, ) => 3591,
                ( Power::N13, East::Side, South::Up, North::Up, West::Side, ) => 3592,
                ( Power::N13, East::Side, South::Up, North::Up, West::None, ) => 3593,
                ( Power::N13, East::Side, South::Side, North::Up, West::Up, ) => 3594,
                ( Power::N13, East::Side, South::Side, North::Up, West::Side, ) => 3595,
                ( Power::N13, East::Side, South::Side, North::Up, West::None, ) => 3596,
                ( Power::N13, East::Side, South::None, North::Up, West::Up, ) => 3597,
                ( Power::N13, East::Side, South::None, North::Up, West::Side, ) => 3598,
                ( Power::N13, East::Side, South::None, North::Up, West::None, ) => 3599,
                ( Power::N14, East::Side, South::Up, North::Up, West::Up, ) => 3600,
                ( Power::N14, East::Side, South::Up, North::Up, West::Side, ) => 3601,
                ( Power::N14, East::Side, South::Up, North::Up, West::None, ) => 3602,
                ( Power::N14, East::Side, South::Side, North::Up, West::Up, ) => 3603,
                ( Power::N14, East::Side, South::Side, North::Up, West::Side, ) => 3604,
                ( Power::N14, East::Side, South::Side, North::Up, West::None, ) => 3605,
                ( Power::N14, East::Side, South::None, North::Up, West::Up, ) => 3606,
                ( Power::N14, East::Side, South::None, North::Up, West::Side, ) => 3607,
                ( Power::N14, East::Side, South::None, North::Up, West::None, ) => 3608,
                ( Power::N15, East::Side, South::Up, North::Up, West::Up, ) => 3609,
                ( Power::N15, East::Side, South::Up, North::Up, West::Side, ) => 3610,
                ( Power::N15, East::Side, South::Up, North::Up, West::None, ) => 3611,
                ( Power::N15, East::Side, South::Side, North::Up, West::Up, ) => 3612,
                ( Power::N15, East::Side, South::Side, North::Up, West::Side, ) => 3613,
                ( Power::N15, East::Side, South::Side, North::Up, West::None, ) => 3614,
                ( Power::N15, East::Side, South::None, North::Up, West::Up, ) => 3615,
                ( Power::N15, East::Side, South::None, North::Up, West::Side, ) => 3616,
                ( Power::N15, East::Side, South::None, North::Up, West::None, ) => 3617,
                ( Power::N0, East::Side, South::Up, North::Side, West::Up, ) => 3618,
                ( Power::N0, East::Side, South::Up, North::Side, West::Side, ) => 3619,
                ( Power::N0, East::Side, South::Up, North::Side, West::None, ) => 3620,
                ( Power::N0, East::Side, South::Side, North::Side, West::Up, ) => 3621,
                ( Power::N0, East::Side, South::Side, North::Side, West::Side, ) => 3622,
                ( Power::N0, East::Side, South::Side, North::Side, West::None, ) => 3623,
                ( Power::N0, East::Side, South::None, North::Side, West::Up, ) => 3624,
                ( Power::N0, East::Side, South::None, North::Side, West::Side, ) => 3625,
                ( Power::N0, East::Side, South::None, North::Side, West::None, ) => 3626,
                ( Power::N1, East::Side, South::Up, North::Side, West::Up, ) => 3627,
                ( Power::N1, East::Side, South::Up, North::Side, West::Side, ) => 3628,
                ( Power::N1, East::Side, South::Up, North::Side, West::None, ) => 3629,
                ( Power::N1, East::Side, South::Side, North::Side, West::Up, ) => 3630,
                ( Power::N1, East::Side, South::Side, North::Side, West::Side, ) => 3631,
                ( Power::N1, East::Side, South::Side, North::Side, West::None, ) => 3632,
                ( Power::N1, East::Side, South::None, North::Side, West::Up, ) => 3633,
                ( Power::N1, East::Side, South::None, North::Side, West::Side, ) => 3634,
                ( Power::N1, East::Side, South::None, North::Side, West::None, ) => 3635,
                ( Power::N2, East::Side, South::Up, North::Side, West::Up, ) => 3636,
                ( Power::N2, East::Side, South::Up, North::Side, West::Side, ) => 3637,
                ( Power::N2, East::Side, South::Up, North::Side, West::None, ) => 3638,
                ( Power::N2, East::Side, South::Side, North::Side, West::Up, ) => 3639,
                ( Power::N2, East::Side, South::Side, North::Side, West::Side, ) => 3640,
                ( Power::N2, East::Side, South::Side, North::Side, West::None, ) => 3641,
                ( Power::N2, East::Side, South::None, North::Side, West::Up, ) => 3642,
                ( Power::N2, East::Side, South::None, North::Side, West::Side, ) => 3643,
                ( Power::N2, East::Side, South::None, North::Side, West::None, ) => 3644,
                ( Power::N3, East::Side, South::Up, North::Side, West::Up, ) => 3645,
                ( Power::N3, East::Side, South::Up, North::Side, West::Side, ) => 3646,
                ( Power::N3, East::Side, South::Up, North::Side, West::None, ) => 3647,
                ( Power::N3, East::Side, South::Side, North::Side, West::Up, ) => 3648,
                ( Power::N3, East::Side, South::Side, North::Side, West::Side, ) => 3649,
                ( Power::N3, East::Side, South::Side, North::Side, West::None, ) => 3650,
                ( Power::N3, East::Side, South::None, North::Side, West::Up, ) => 3651,
                ( Power::N3, East::Side, South::None, North::Side, West::Side, ) => 3652,
                ( Power::N3, East::Side, South::None, North::Side, West::None, ) => 3653,
                ( Power::N4, East::Side, South::Up, North::Side, West::Up, ) => 3654,
                ( Power::N4, East::Side, South::Up, North::Side, West::Side, ) => 3655,
                ( Power::N4, East::Side, South::Up, North::Side, West::None, ) => 3656,
                ( Power::N4, East::Side, South::Side, North::Side, West::Up, ) => 3657,
                ( Power::N4, East::Side, South::Side, North::Side, West::Side, ) => 3658,
                ( Power::N4, East::Side, South::Side, North::Side, West::None, ) => 3659,
                ( Power::N4, East::Side, South::None, North::Side, West::Up, ) => 3660,
                ( Power::N4, East::Side, South::None, North::Side, West::Side, ) => 3661,
                ( Power::N4, East::Side, South::None, North::Side, West::None, ) => 3662,
                ( Power::N5, East::Side, South::Up, North::Side, West::Up, ) => 3663,
                ( Power::N5, East::Side, South::Up, North::Side, West::Side, ) => 3664,
                ( Power::N5, East::Side, South::Up, North::Side, West::None, ) => 3665,
                ( Power::N5, East::Side, South::Side, North::Side, West::Up, ) => 3666,
                ( Power::N5, East::Side, South::Side, North::Side, West::Side, ) => 3667,
                ( Power::N5, East::Side, South::Side, North::Side, West::None, ) => 3668,
                ( Power::N5, East::Side, South::None, North::Side, West::Up, ) => 3669,
                ( Power::N5, East::Side, South::None, North::Side, West::Side, ) => 3670,
                ( Power::N5, East::Side, South::None, North::Side, West::None, ) => 3671,
                ( Power::N6, East::Side, South::Up, North::Side, West::Up, ) => 3672,
                ( Power::N6, East::Side, South::Up, North::Side, West::Side, ) => 3673,
                ( Power::N6, East::Side, South::Up, North::Side, West::None, ) => 3674,
                ( Power::N6, East::Side, South::Side, North::Side, West::Up, ) => 3675,
                ( Power::N6, East::Side, South::Side, North::Side, West::Side, ) => 3676,
                ( Power::N6, East::Side, South::Side, North::Side, West::None, ) => 3677,
                ( Power::N6, East::Side, South::None, North::Side, West::Up, ) => 3678,
                ( Power::N6, East::Side, South::None, North::Side, West::Side, ) => 3679,
                ( Power::N6, East::Side, South::None, North::Side, West::None, ) => 3680,
                ( Power::N7, East::Side, South::Up, North::Side, West::Up, ) => 3681,
                ( Power::N7, East::Side, South::Up, North::Side, West::Side, ) => 3682,
                ( Power::N7, East::Side, South::Up, North::Side, West::None, ) => 3683,
                ( Power::N7, East::Side, South::Side, North::Side, West::Up, ) => 3684,
                ( Power::N7, East::Side, South::Side, North::Side, West::Side, ) => 3685,
                ( Power::N7, East::Side, South::Side, North::Side, West::None, ) => 3686,
                ( Power::N7, East::Side, South::None, North::Side, West::Up, ) => 3687,
                ( Power::N7, East::Side, South::None, North::Side, West::Side, ) => 3688,
                ( Power::N7, East::Side, South::None, North::Side, West::None, ) => 3689,
                ( Power::N8, East::Side, South::Up, North::Side, West::Up, ) => 3690,
                ( Power::N8, East::Side, South::Up, North::Side, West::Side, ) => 3691,
                ( Power::N8, East::Side, South::Up, North::Side, West::None, ) => 3692,
                ( Power::N8, East::Side, South::Side, North::Side, West::Up, ) => 3693,
                ( Power::N8, East::Side, South::Side, North::Side, West::Side, ) => 3694,
                ( Power::N8, East::Side, South::Side, North::Side, West::None, ) => 3695,
                ( Power::N8, East::Side, South::None, North::Side, West::Up, ) => 3696,
                ( Power::N8, East::Side, South::None, North::Side, West::Side, ) => 3697,
                ( Power::N8, East::Side, South::None, North::Side, West::None, ) => 3698,
                ( Power::N9, East::Side, South::Up, North::Side, West::Up, ) => 3699,
                ( Power::N9, East::Side, South::Up, North::Side, West::Side, ) => 3700,
                ( Power::N9, East::Side, South::Up, North::Side, West::None, ) => 3701,
                ( Power::N9, East::Side, South::Side, North::Side, West::Up, ) => 3702,
                ( Power::N9, East::Side, South::Side, North::Side, West::Side, ) => 3703,
                ( Power::N9, East::Side, South::Side, North::Side, West::None, ) => 3704,
                ( Power::N9, East::Side, South::None, North::Side, West::Up, ) => 3705,
                ( Power::N9, East::Side, South::None, North::Side, West::Side, ) => 3706,
                ( Power::N9, East::Side, South::None, North::Side, West::None, ) => 3707,
                ( Power::N10, East::Side, South::Up, North::Side, West::Up, ) => 3708,
                ( Power::N10, East::Side, South::Up, North::Side, West::Side, ) => 3709,
                ( Power::N10, East::Side, South::Up, North::Side, West::None, ) => 3710,
                ( Power::N10, East::Side, South::Side, North::Side, West::Up, ) => 3711,
                ( Power::N10, East::Side, South::Side, North::Side, West::Side, ) => 3712,
                ( Power::N10, East::Side, South::Side, North::Side, West::None, ) => 3713,
                ( Power::N10, East::Side, South::None, North::Side, West::Up, ) => 3714,
                ( Power::N10, East::Side, South::None, North::Side, West::Side, ) => 3715,
                ( Power::N10, East::Side, South::None, North::Side, West::None, ) => 3716,
                ( Power::N11, East::Side, South::Up, North::Side, West::Up, ) => 3717,
                ( Power::N11, East::Side, South::Up, North::Side, West::Side, ) => 3718,
                ( Power::N11, East::Side, South::Up, North::Side, West::None, ) => 3719,
                ( Power::N11, East::Side, South::Side, North::Side, West::Up, ) => 3720,
                ( Power::N11, East::Side, South::Side, North::Side, West::Side, ) => 3721,
                ( Power::N11, East::Side, South::Side, North::Side, West::None, ) => 3722,
                ( Power::N11, East::Side, South::None, North::Side, West::Up, ) => 3723,
                ( Power::N11, East::Side, South::None, North::Side, West::Side, ) => 3724,
                ( Power::N11, East::Side, South::None, North::Side, West::None, ) => 3725,
                ( Power::N12, East::Side, South::Up, North::Side, West::Up, ) => 3726,
                ( Power::N12, East::Side, South::Up, North::Side, West::Side, ) => 3727,
                ( Power::N12, East::Side, South::Up, North::Side, West::None, ) => 3728,
                ( Power::N12, East::Side, South::Side, North::Side, West::Up, ) => 3729,
                ( Power::N12, East::Side, South::Side, North::Side, West::Side, ) => 3730,
                ( Power::N12, East::Side, South::Side, North::Side, West::None, ) => 3731,
                ( Power::N12, East::Side, South::None, North::Side, West::Up, ) => 3732,
                ( Power::N12, East::Side, South::None, North::Side, West::Side, ) => 3733,
                ( Power::N12, East::Side, South::None, North::Side, West::None, ) => 3734,
                ( Power::N13, East::Side, South::Up, North::Side, West::Up, ) => 3735,
                ( Power::N13, East::Side, South::Up, North::Side, West::Side, ) => 3736,
                ( Power::N13, East::Side, South::Up, North::Side, West::None, ) => 3737,
                ( Power::N13, East::Side, South::Side, North::Side, West::Up, ) => 3738,
                ( Power::N13, East::Side, South::Side, North::Side, West::Side, ) => 3739,
                ( Power::N13, East::Side, South::Side, North::Side, West::None, ) => 3740,
                ( Power::N13, East::Side, South::None, North::Side, West::Up, ) => 3741,
                ( Power::N13, East::Side, South::None, North::Side, West::Side, ) => 3742,
                ( Power::N13, East::Side, South::None, North::Side, West::None, ) => 3743,
                ( Power::N14, East::Side, South::Up, North::Side, West::Up, ) => 3744,
                ( Power::N14, East::Side, South::Up, North::Side, West::Side, ) => 3745,
                ( Power::N14, East::Side, South::Up, North::Side, West::None, ) => 3746,
                ( Power::N14, East::Side, South::Side, North::Side, West::Up, ) => 3747,
                ( Power::N14, East::Side, South::Side, North::Side, West::Side, ) => 3748,
                ( Power::N14, East::Side, South::Side, North::Side, West::None, ) => 3749,
                ( Power::N14, East::Side, South::None, North::Side, West::Up, ) => 3750,
                ( Power::N14, East::Side, South::None, North::Side, West::Side, ) => 3751,
                ( Power::N14, East::Side, South::None, North::Side, West::None, ) => 3752,
                ( Power::N15, East::Side, South::Up, North::Side, West::Up, ) => 3753,
                ( Power::N15, East::Side, South::Up, North::Side, West::Side, ) => 3754,
                ( Power::N15, East::Side, South::Up, North::Side, West::None, ) => 3755,
                ( Power::N15, East::Side, South::Side, North::Side, West::Up, ) => 3756,
                ( Power::N15, East::Side, South::Side, North::Side, West::Side, ) => 3757,
                ( Power::N15, East::Side, South::Side, North::Side, West::None, ) => 3758,
                ( Power::N15, East::Side, South::None, North::Side, West::Up, ) => 3759,
                ( Power::N15, East::Side, South::None, North::Side, West::Side, ) => 3760,
                ( Power::N15, East::Side, South::None, North::Side, West::None, ) => 3761,
                ( Power::N0, East::Side, South::Up, North::None, West::Up, ) => 3762,
                ( Power::N0, East::Side, South::Up, North::None, West::Side, ) => 3763,
                ( Power::N0, East::Side, South::Up, North::None, West::None, ) => 3764,
                ( Power::N0, East::Side, South::Side, North::None, West::Up, ) => 3765,
                ( Power::N0, East::Side, South::Side, North::None, West::Side, ) => 3766,
                ( Power::N0, East::Side, South::Side, North::None, West::None, ) => 3767,
                ( Power::N0, East::Side, South::None, North::None, West::Up, ) => 3768,
                ( Power::N0, East::Side, South::None, North::None, West::Side, ) => 3769,
                ( Power::N0, East::Side, South::None, North::None, West::None, ) => 3770,
                ( Power::N1, East::Side, South::Up, North::None, West::Up, ) => 3771,
                ( Power::N1, East::Side, South::Up, North::None, West::Side, ) => 3772,
                ( Power::N1, East::Side, South::Up, North::None, West::None, ) => 3773,
                ( Power::N1, East::Side, South::Side, North::None, West::Up, ) => 3774,
                ( Power::N1, East::Side, South::Side, North::None, West::Side, ) => 3775,
                ( Power::N1, East::Side, South::Side, North::None, West::None, ) => 3776,
                ( Power::N1, East::Side, South::None, North::None, West::Up, ) => 3777,
                ( Power::N1, East::Side, South::None, North::None, West::Side, ) => 3778,
                ( Power::N1, East::Side, South::None, North::None, West::None, ) => 3779,
                ( Power::N2, East::Side, South::Up, North::None, West::Up, ) => 3780,
                ( Power::N2, East::Side, South::Up, North::None, West::Side, ) => 3781,
                ( Power::N2, East::Side, South::Up, North::None, West::None, ) => 3782,
                ( Power::N2, East::Side, South::Side, North::None, West::Up, ) => 3783,
                ( Power::N2, East::Side, South::Side, North::None, West::Side, ) => 3784,
                ( Power::N2, East::Side, South::Side, North::None, West::None, ) => 3785,
                ( Power::N2, East::Side, South::None, North::None, West::Up, ) => 3786,
                ( Power::N2, East::Side, South::None, North::None, West::Side, ) => 3787,
                ( Power::N2, East::Side, South::None, North::None, West::None, ) => 3788,
                ( Power::N3, East::Side, South::Up, North::None, West::Up, ) => 3789,
                ( Power::N3, East::Side, South::Up, North::None, West::Side, ) => 3790,
                ( Power::N3, East::Side, South::Up, North::None, West::None, ) => 3791,
                ( Power::N3, East::Side, South::Side, North::None, West::Up, ) => 3792,
                ( Power::N3, East::Side, South::Side, North::None, West::Side, ) => 3793,
                ( Power::N3, East::Side, South::Side, North::None, West::None, ) => 3794,
                ( Power::N3, East::Side, South::None, North::None, West::Up, ) => 3795,
                ( Power::N3, East::Side, South::None, North::None, West::Side, ) => 3796,
                ( Power::N3, East::Side, South::None, North::None, West::None, ) => 3797,
                ( Power::N4, East::Side, South::Up, North::None, West::Up, ) => 3798,
                ( Power::N4, East::Side, South::Up, North::None, West::Side, ) => 3799,
                ( Power::N4, East::Side, South::Up, North::None, West::None, ) => 3800,
                ( Power::N4, East::Side, South::Side, North::None, West::Up, ) => 3801,
                ( Power::N4, East::Side, South::Side, North::None, West::Side, ) => 3802,
                ( Power::N4, East::Side, South::Side, North::None, West::None, ) => 3803,
                ( Power::N4, East::Side, South::None, North::None, West::Up, ) => 3804,
                ( Power::N4, East::Side, South::None, North::None, West::Side, ) => 3805,
                ( Power::N4, East::Side, South::None, North::None, West::None, ) => 3806,
                ( Power::N5, East::Side, South::Up, North::None, West::Up, ) => 3807,
                ( Power::N5, East::Side, South::Up, North::None, West::Side, ) => 3808,
                ( Power::N5, East::Side, South::Up, North::None, West::None, ) => 3809,
                ( Power::N5, East::Side, South::Side, North::None, West::Up, ) => 3810,
                ( Power::N5, East::Side, South::Side, North::None, West::Side, ) => 3811,
                ( Power::N5, East::Side, South::Side, North::None, West::None, ) => 3812,
                ( Power::N5, East::Side, South::None, North::None, West::Up, ) => 3813,
                ( Power::N5, East::Side, South::None, North::None, West::Side, ) => 3814,
                ( Power::N5, East::Side, South::None, North::None, West::None, ) => 3815,
                ( Power::N6, East::Side, South::Up, North::None, West::Up, ) => 3816,
                ( Power::N6, East::Side, South::Up, North::None, West::Side, ) => 3817,
                ( Power::N6, East::Side, South::Up, North::None, West::None, ) => 3818,
                ( Power::N6, East::Side, South::Side, North::None, West::Up, ) => 3819,
                ( Power::N6, East::Side, South::Side, North::None, West::Side, ) => 3820,
                ( Power::N6, East::Side, South::Side, North::None, West::None, ) => 3821,
                ( Power::N6, East::Side, South::None, North::None, West::Up, ) => 3822,
                ( Power::N6, East::Side, South::None, North::None, West::Side, ) => 3823,
                ( Power::N6, East::Side, South::None, North::None, West::None, ) => 3824,
                ( Power::N7, East::Side, South::Up, North::None, West::Up, ) => 3825,
                ( Power::N7, East::Side, South::Up, North::None, West::Side, ) => 3826,
                ( Power::N7, East::Side, South::Up, North::None, West::None, ) => 3827,
                ( Power::N7, East::Side, South::Side, North::None, West::Up, ) => 3828,
                ( Power::N7, East::Side, South::Side, North::None, West::Side, ) => 3829,
                ( Power::N7, East::Side, South::Side, North::None, West::None, ) => 3830,
                ( Power::N7, East::Side, South::None, North::None, West::Up, ) => 3831,
                ( Power::N7, East::Side, South::None, North::None, West::Side, ) => 3832,
                ( Power::N7, East::Side, South::None, North::None, West::None, ) => 3833,
                ( Power::N8, East::Side, South::Up, North::None, West::Up, ) => 3834,
                ( Power::N8, East::Side, South::Up, North::None, West::Side, ) => 3835,
                ( Power::N8, East::Side, South::Up, North::None, West::None, ) => 3836,
                ( Power::N8, East::Side, South::Side, North::None, West::Up, ) => 3837,
                ( Power::N8, East::Side, South::Side, North::None, West::Side, ) => 3838,
                ( Power::N8, East::Side, South::Side, North::None, West::None, ) => 3839,
                ( Power::N8, East::Side, South::None, North::None, West::Up, ) => 3840,
                ( Power::N8, East::Side, South::None, North::None, West::Side, ) => 3841,
                ( Power::N8, East::Side, South::None, North::None, West::None, ) => 3842,
                ( Power::N9, East::Side, South::Up, North::None, West::Up, ) => 3843,
                ( Power::N9, East::Side, South::Up, North::None, West::Side, ) => 3844,
                ( Power::N9, East::Side, South::Up, North::None, West::None, ) => 3845,
                ( Power::N9, East::Side, South::Side, North::None, West::Up, ) => 3846,
                ( Power::N9, East::Side, South::Side, North::None, West::Side, ) => 3847,
                ( Power::N9, East::Side, South::Side, North::None, West::None, ) => 3848,
                ( Power::N9, East::Side, South::None, North::None, West::Up, ) => 3849,
                ( Power::N9, East::Side, South::None, North::None, West::Side, ) => 3850,
                ( Power::N9, East::Side, South::None, North::None, West::None, ) => 3851,
                ( Power::N10, East::Side, South::Up, North::None, West::Up, ) => 3852,
                ( Power::N10, East::Side, South::Up, North::None, West::Side, ) => 3853,
                ( Power::N10, East::Side, South::Up, North::None, West::None, ) => 3854,
                ( Power::N10, East::Side, South::Side, North::None, West::Up, ) => 3855,
                ( Power::N10, East::Side, South::Side, North::None, West::Side, ) => 3856,
                ( Power::N10, East::Side, South::Side, North::None, West::None, ) => 3857,
                ( Power::N10, East::Side, South::None, North::None, West::Up, ) => 3858,
                ( Power::N10, East::Side, South::None, North::None, West::Side, ) => 3859,
                ( Power::N10, East::Side, South::None, North::None, West::None, ) => 3860,
                ( Power::N11, East::Side, South::Up, North::None, West::Up, ) => 3861,
                ( Power::N11, East::Side, South::Up, North::None, West::Side, ) => 3862,
                ( Power::N11, East::Side, South::Up, North::None, West::None, ) => 3863,
                ( Power::N11, East::Side, South::Side, North::None, West::Up, ) => 3864,
                ( Power::N11, East::Side, South::Side, North::None, West::Side, ) => 3865,
                ( Power::N11, East::Side, South::Side, North::None, West::None, ) => 3866,
                ( Power::N11, East::Side, South::None, North::None, West::Up, ) => 3867,
                ( Power::N11, East::Side, South::None, North::None, West::Side, ) => 3868,
                ( Power::N11, East::Side, South::None, North::None, West::None, ) => 3869,
                ( Power::N12, East::Side, South::Up, North::None, West::Up, ) => 3870,
                ( Power::N12, East::Side, South::Up, North::None, West::Side, ) => 3871,
                ( Power::N12, East::Side, South::Up, North::None, West::None, ) => 3872,
                ( Power::N12, East::Side, South::Side, North::None, West::Up, ) => 3873,
                ( Power::N12, East::Side, South::Side, North::None, West::Side, ) => 3874,
                ( Power::N12, East::Side, South::Side, North::None, West::None, ) => 3875,
                ( Power::N12, East::Side, South::None, North::None, West::Up, ) => 3876,
                ( Power::N12, East::Side, South::None, North::None, West::Side, ) => 3877,
                ( Power::N12, East::Side, South::None, North::None, West::None, ) => 3878,
                ( Power::N13, East::Side, South::Up, North::None, West::Up, ) => 3879,
                ( Power::N13, East::Side, South::Up, North::None, West::Side, ) => 3880,
                ( Power::N13, East::Side, South::Up, North::None, West::None, ) => 3881,
                ( Power::N13, East::Side, South::Side, North::None, West::Up, ) => 3882,
                ( Power::N13, East::Side, South::Side, North::None, West::Side, ) => 3883,
                ( Power::N13, East::Side, South::Side, North::None, West::None, ) => 3884,
                ( Power::N13, East::Side, South::None, North::None, West::Up, ) => 3885,
                ( Power::N13, East::Side, South::None, North::None, West::Side, ) => 3886,
                ( Power::N13, East::Side, South::None, North::None, West::None, ) => 3887,
                ( Power::N14, East::Side, South::Up, North::None, West::Up, ) => 3888,
                ( Power::N14, East::Side, South::Up, North::None, West::Side, ) => 3889,
                ( Power::N14, East::Side, South::Up, North::None, West::None, ) => 3890,
                ( Power::N14, East::Side, South::Side, North::None, West::Up, ) => 3891,
                ( Power::N14, East::Side, South::Side, North::None, West::Side, ) => 3892,
                ( Power::N14, East::Side, South::Side, North::None, West::None, ) => 3893,
                ( Power::N14, East::Side, South::None, North::None, West::Up, ) => 3894,
                ( Power::N14, East::Side, South::None, North::None, West::Side, ) => 3895,
                ( Power::N14, East::Side, South::None, North::None, West::None, ) => 3896,
                ( Power::N15, East::Side, South::Up, North::None, West::Up, ) => 3897,
                ( Power::N15, East::Side, South::Up, North::None, West::Side, ) => 3898,
                ( Power::N15, East::Side, South::Up, North::None, West::None, ) => 3899,
                ( Power::N15, East::Side, South::Side, North::None, West::Up, ) => 3900,
                ( Power::N15, East::Side, South::Side, North::None, West::Side, ) => 3901,
                ( Power::N15, East::Side, South::Side, North::None, West::None, ) => 3902,
                ( Power::N15, East::Side, South::None, North::None, West::Up, ) => 3903,
                ( Power::N15, East::Side, South::None, North::None, West::Side, ) => 3904,
                ( Power::N15, East::Side, South::None, North::None, West::None, ) => 3905,
                ( Power::N0, East::None, South::Up, North::Up, West::Up, ) => 3906,
                ( Power::N0, East::None, South::Up, North::Up, West::Side, ) => 3907,
                ( Power::N0, East::None, South::Up, North::Up, West::None, ) => 3908,
                ( Power::N0, East::None, South::Side, North::Up, West::Up, ) => 3909,
                ( Power::N0, East::None, South::Side, North::Up, West::Side, ) => 3910,
                ( Power::N0, East::None, South::Side, North::Up, West::None, ) => 3911,
                ( Power::N0, East::None, South::None, North::Up, West::Up, ) => 3912,
                ( Power::N0, East::None, South::None, North::Up, West::Side, ) => 3913,
                ( Power::N0, East::None, South::None, North::Up, West::None, ) => 3914,
                ( Power::N1, East::None, South::Up, North::Up, West::Up, ) => 3915,
                ( Power::N1, East::None, South::Up, North::Up, West::Side, ) => 3916,
                ( Power::N1, East::None, South::Up, North::Up, West::None, ) => 3917,
                ( Power::N1, East::None, South::Side, North::Up, West::Up, ) => 3918,
                ( Power::N1, East::None, South::Side, North::Up, West::Side, ) => 3919,
                ( Power::N1, East::None, South::Side, North::Up, West::None, ) => 3920,
                ( Power::N1, East::None, South::None, North::Up, West::Up, ) => 3921,
                ( Power::N1, East::None, South::None, North::Up, West::Side, ) => 3922,
                ( Power::N1, East::None, South::None, North::Up, West::None, ) => 3923,
                ( Power::N2, East::None, South::Up, North::Up, West::Up, ) => 3924,
                ( Power::N2, East::None, South::Up, North::Up, West::Side, ) => 3925,
                ( Power::N2, East::None, South::Up, North::Up, West::None, ) => 3926,
                ( Power::N2, East::None, South::Side, North::Up, West::Up, ) => 3927,
                ( Power::N2, East::None, South::Side, North::Up, West::Side, ) => 3928,
                ( Power::N2, East::None, South::Side, North::Up, West::None, ) => 3929,
                ( Power::N2, East::None, South::None, North::Up, West::Up, ) => 3930,
                ( Power::N2, East::None, South::None, North::Up, West::Side, ) => 3931,
                ( Power::N2, East::None, South::None, North::Up, West::None, ) => 3932,
                ( Power::N3, East::None, South::Up, North::Up, West::Up, ) => 3933,
                ( Power::N3, East::None, South::Up, North::Up, West::Side, ) => 3934,
                ( Power::N3, East::None, South::Up, North::Up, West::None, ) => 3935,
                ( Power::N3, East::None, South::Side, North::Up, West::Up, ) => 3936,
                ( Power::N3, East::None, South::Side, North::Up, West::Side, ) => 3937,
                ( Power::N3, East::None, South::Side, North::Up, West::None, ) => 3938,
                ( Power::N3, East::None, South::None, North::Up, West::Up, ) => 3939,
                ( Power::N3, East::None, South::None, North::Up, West::Side, ) => 3940,
                ( Power::N3, East::None, South::None, North::Up, West::None, ) => 3941,
                ( Power::N4, East::None, South::Up, North::Up, West::Up, ) => 3942,
                ( Power::N4, East::None, South::Up, North::Up, West::Side, ) => 3943,
                ( Power::N4, East::None, South::Up, North::Up, West::None, ) => 3944,
                ( Power::N4, East::None, South::Side, North::Up, West::Up, ) => 3945,
                ( Power::N4, East::None, South::Side, North::Up, West::Side, ) => 3946,
                ( Power::N4, East::None, South::Side, North::Up, West::None, ) => 3947,
                ( Power::N4, East::None, South::None, North::Up, West::Up, ) => 3948,
                ( Power::N4, East::None, South::None, North::Up, West::Side, ) => 3949,
                ( Power::N4, East::None, South::None, North::Up, West::None, ) => 3950,
                ( Power::N5, East::None, South::Up, North::Up, West::Up, ) => 3951,
                ( Power::N5, East::None, South::Up, North::Up, West::Side, ) => 3952,
                ( Power::N5, East::None, South::Up, North::Up, West::None, ) => 3953,
                ( Power::N5, East::None, South::Side, North::Up, West::Up, ) => 3954,
                ( Power::N5, East::None, South::Side, North::Up, West::Side, ) => 3955,
                ( Power::N5, East::None, South::Side, North::Up, West::None, ) => 3956,
                ( Power::N5, East::None, South::None, North::Up, West::Up, ) => 3957,
                ( Power::N5, East::None, South::None, North::Up, West::Side, ) => 3958,
                ( Power::N5, East::None, South::None, North::Up, West::None, ) => 3959,
                ( Power::N6, East::None, South::Up, North::Up, West::Up, ) => 3960,
                ( Power::N6, East::None, South::Up, North::Up, West::Side, ) => 3961,
                ( Power::N6, East::None, South::Up, North::Up, West::None, ) => 3962,
                ( Power::N6, East::None, South::Side, North::Up, West::Up, ) => 3963,
                ( Power::N6, East::None, South::Side, North::Up, West::Side, ) => 3964,
                ( Power::N6, East::None, South::Side, North::Up, West::None, ) => 3965,
                ( Power::N6, East::None, South::None, North::Up, West::Up, ) => 3966,
                ( Power::N6, East::None, South::None, North::Up, West::Side, ) => 3967,
                ( Power::N6, East::None, South::None, North::Up, West::None, ) => 3968,
                ( Power::N7, East::None, South::Up, North::Up, West::Up, ) => 3969,
                ( Power::N7, East::None, South::Up, North::Up, West::Side, ) => 3970,
                ( Power::N7, East::None, South::Up, North::Up, West::None, ) => 3971,
                ( Power::N7, East::None, South::Side, North::Up, West::Up, ) => 3972,
                ( Power::N7, East::None, South::Side, North::Up, West::Side, ) => 3973,
                ( Power::N7, East::None, South::Side, North::Up, West::None, ) => 3974,
                ( Power::N7, East::None, South::None, North::Up, West::Up, ) => 3975,
                ( Power::N7, East::None, South::None, North::Up, West::Side, ) => 3976,
                ( Power::N7, East::None, South::None, North::Up, West::None, ) => 3977,
                ( Power::N8, East::None, South::Up, North::Up, West::Up, ) => 3978,
                ( Power::N8, East::None, South::Up, North::Up, West::Side, ) => 3979,
                ( Power::N8, East::None, South::Up, North::Up, West::None, ) => 3980,
                ( Power::N8, East::None, South::Side, North::Up, West::Up, ) => 3981,
                ( Power::N8, East::None, South::Side, North::Up, West::Side, ) => 3982,
                ( Power::N8, East::None, South::Side, North::Up, West::None, ) => 3983,
                ( Power::N8, East::None, South::None, North::Up, West::Up, ) => 3984,
                ( Power::N8, East::None, South::None, North::Up, West::Side, ) => 3985,
                ( Power::N8, East::None, South::None, North::Up, West::None, ) => 3986,
                ( Power::N9, East::None, South::Up, North::Up, West::Up, ) => 3987,
                ( Power::N9, East::None, South::Up, North::Up, West::Side, ) => 3988,
                ( Power::N9, East::None, South::Up, North::Up, West::None, ) => 3989,
                ( Power::N9, East::None, South::Side, North::Up, West::Up, ) => 3990,
                ( Power::N9, East::None, South::Side, North::Up, West::Side, ) => 3991,
                ( Power::N9, East::None, South::Side, North::Up, West::None, ) => 3992,
                ( Power::N9, East::None, South::None, North::Up, West::Up, ) => 3993,
                ( Power::N9, East::None, South::None, North::Up, West::Side, ) => 3994,
                ( Power::N9, East::None, South::None, North::Up, West::None, ) => 3995,
                ( Power::N10, East::None, South::Up, North::Up, West::Up, ) => 3996,
                ( Power::N10, East::None, South::Up, North::Up, West::Side, ) => 3997,
                ( Power::N10, East::None, South::Up, North::Up, West::None, ) => 3998,
                ( Power::N10, East::None, South::Side, North::Up, West::Up, ) => 3999,
                ( Power::N10, East::None, South::Side, North::Up, West::Side, ) => 4000,
                ( Power::N10, East::None, South::Side, North::Up, West::None, ) => 4001,
                ( Power::N10, East::None, South::None, North::Up, West::Up, ) => 4002,
                ( Power::N10, East::None, South::None, North::Up, West::Side, ) => 4003,
                ( Power::N10, East::None, South::None, North::Up, West::None, ) => 4004,
                ( Power::N11, East::None, South::Up, North::Up, West::Up, ) => 4005,
                ( Power::N11, East::None, South::Up, North::Up, West::Side, ) => 4006,
                ( Power::N11, East::None, South::Up, North::Up, West::None, ) => 4007,
                ( Power::N11, East::None, South::Side, North::Up, West::Up, ) => 4008,
                ( Power::N11, East::None, South::Side, North::Up, West::Side, ) => 4009,
                ( Power::N11, East::None, South::Side, North::Up, West::None, ) => 4010,
                ( Power::N11, East::None, South::None, North::Up, West::Up, ) => 4011,
                ( Power::N11, East::None, South::None, North::Up, West::Side, ) => 4012,
                ( Power::N11, East::None, South::None, North::Up, West::None, ) => 4013,
                ( Power::N12, East::None, South::Up, North::Up, West::Up, ) => 4014,
                ( Power::N12, East::None, South::Up, North::Up, West::Side, ) => 4015,
                ( Power::N12, East::None, South::Up, North::Up, West::None, ) => 4016,
                ( Power::N12, East::None, South::Side, North::Up, West::Up, ) => 4017,
                ( Power::N12, East::None, South::Side, North::Up, West::Side, ) => 4018,
                ( Power::N12, East::None, South::Side, North::Up, West::None, ) => 4019,
                ( Power::N12, East::None, South::None, North::Up, West::Up, ) => 4020,
                ( Power::N12, East::None, South::None, North::Up, West::Side, ) => 4021,
                ( Power::N12, East::None, South::None, North::Up, West::None, ) => 4022,
                ( Power::N13, East::None, South::Up, North::Up, West::Up, ) => 4023,
                ( Power::N13, East::None, South::Up, North::Up, West::Side, ) => 4024,
                ( Power::N13, East::None, South::Up, North::Up, West::None, ) => 4025,
                ( Power::N13, East::None, South::Side, North::Up, West::Up, ) => 4026,
                ( Power::N13, East::None, South::Side, North::Up, West::Side, ) => 4027,
                ( Power::N13, East::None, South::Side, North::Up, West::None, ) => 4028,
                ( Power::N13, East::None, South::None, North::Up, West::Up, ) => 4029,
                ( Power::N13, East::None, South::None, North::Up, West::Side, ) => 4030,
                ( Power::N13, East::None, South::None, North::Up, West::None, ) => 4031,
                ( Power::N14, East::None, South::Up, North::Up, West::Up, ) => 4032,
                ( Power::N14, East::None, South::Up, North::Up, West::Side, ) => 4033,
                ( Power::N14, East::None, South::Up, North::Up, West::None, ) => 4034,
                ( Power::N14, East::None, South::Side, North::Up, West::Up, ) => 4035,
                ( Power::N14, East::None, South::Side, North::Up, West::Side, ) => 4036,
                ( Power::N14, East::None, South::Side, North::Up, West::None, ) => 4037,
                ( Power::N14, East::None, South::None, North::Up, West::Up, ) => 4038,
                ( Power::N14, East::None, South::None, North::Up, West::Side, ) => 4039,
                ( Power::N14, East::None, South::None, North::Up, West::None, ) => 4040,
                ( Power::N15, East::None, South::Up, North::Up, West::Up, ) => 4041,
                ( Power::N15, East::None, South::Up, North::Up, West::Side, ) => 4042,
                ( Power::N15, East::None, South::Up, North::Up, West::None, ) => 4043,
                ( Power::N15, East::None, South::Side, North::Up, West::Up, ) => 4044,
                ( Power::N15, East::None, South::Side, North::Up, West::Side, ) => 4045,
                ( Power::N15, East::None, South::Side, North::Up, West::None, ) => 4046,
                ( Power::N15, East::None, South::None, North::Up, West::Up, ) => 4047,
                ( Power::N15, East::None, South::None, North::Up, West::Side, ) => 4048,
                ( Power::N15, East::None, South::None, North::Up, West::None, ) => 4049,
                ( Power::N0, East::None, South::Up, North::Side, West::Up, ) => 4050,
                ( Power::N0, East::None, South::Up, North::Side, West::Side, ) => 4051,
                ( Power::N0, East::None, South::Up, North::Side, West::None, ) => 4052,
                ( Power::N0, East::None, South::Side, North::Side, West::Up, ) => 4053,
                ( Power::N0, East::None, South::Side, North::Side, West::Side, ) => 4054,
                ( Power::N0, East::None, South::Side, North::Side, West::None, ) => 4055,
                ( Power::N0, East::None, South::None, North::Side, West::Up, ) => 4056,
                ( Power::N0, East::None, South::None, North::Side, West::Side, ) => 4057,
                ( Power::N0, East::None, South::None, North::Side, West::None, ) => 4058,
                ( Power::N1, East::None, South::Up, North::Side, West::Up, ) => 4059,
                ( Power::N1, East::None, South::Up, North::Side, West::Side, ) => 4060,
                ( Power::N1, East::None, South::Up, North::Side, West::None, ) => 4061,
                ( Power::N1, East::None, South::Side, North::Side, West::Up, ) => 4062,
                ( Power::N1, East::None, South::Side, North::Side, West::Side, ) => 4063,
                ( Power::N1, East::None, South::Side, North::Side, West::None, ) => 4064,
                ( Power::N1, East::None, South::None, North::Side, West::Up, ) => 4065,
                ( Power::N1, East::None, South::None, North::Side, West::Side, ) => 4066,
                ( Power::N1, East::None, South::None, North::Side, West::None, ) => 4067,
                ( Power::N2, East::None, South::Up, North::Side, West::Up, ) => 4068,
                ( Power::N2, East::None, South::Up, North::Side, West::Side, ) => 4069,
                ( Power::N2, East::None, South::Up, North::Side, West::None, ) => 4070,
                ( Power::N2, East::None, South::Side, North::Side, West::Up, ) => 4071,
                ( Power::N2, East::None, South::Side, North::Side, West::Side, ) => 4072,
                ( Power::N2, East::None, South::Side, North::Side, West::None, ) => 4073,
                ( Power::N2, East::None, South::None, North::Side, West::Up, ) => 4074,
                ( Power::N2, East::None, South::None, North::Side, West::Side, ) => 4075,
                ( Power::N2, East::None, South::None, North::Side, West::None, ) => 4076,
                ( Power::N3, East::None, South::Up, North::Side, West::Up, ) => 4077,
                ( Power::N3, East::None, South::Up, North::Side, West::Side, ) => 4078,
                ( Power::N3, East::None, South::Up, North::Side, West::None, ) => 4079,
                ( Power::N3, East::None, South::Side, North::Side, West::Up, ) => 4080,
                ( Power::N3, East::None, South::Side, North::Side, West::Side, ) => 4081,
                ( Power::N3, East::None, South::Side, North::Side, West::None, ) => 4082,
                ( Power::N3, East::None, South::None, North::Side, West::Up, ) => 4083,
                ( Power::N3, East::None, South::None, North::Side, West::Side, ) => 4084,
                ( Power::N3, East::None, South::None, North::Side, West::None, ) => 4085,
                ( Power::N4, East::None, South::Up, North::Side, West::Up, ) => 4086,
                ( Power::N4, East::None, South::Up, North::Side, West::Side, ) => 4087,
                ( Power::N4, East::None, South::Up, North::Side, West::None, ) => 4088,
                ( Power::N4, East::None, South::Side, North::Side, West::Up, ) => 4089,
                ( Power::N4, East::None, South::Side, North::Side, West::Side, ) => 4090,
                ( Power::N4, East::None, South::Side, North::Side, West::None, ) => 4091,
                ( Power::N4, East::None, South::None, North::Side, West::Up, ) => 4092,
                ( Power::N4, East::None, South::None, North::Side, West::Side, ) => 4093,
                ( Power::N4, East::None, South::None, North::Side, West::None, ) => 4094,
                ( Power::N5, East::None, South::Up, North::Side, West::Up, ) => 4095,
                ( Power::N5, East::None, South::Up, North::Side, West::Side, ) => 4096,
                ( Power::N5, East::None, South::Up, North::Side, West::None, ) => 4097,
                ( Power::N5, East::None, South::Side, North::Side, West::Up, ) => 4098,
                ( Power::N5, East::None, South::Side, North::Side, West::Side, ) => 4099,
                ( Power::N5, East::None, South::Side, North::Side, West::None, ) => 4100,
                ( Power::N5, East::None, South::None, North::Side, West::Up, ) => 4101,
                ( Power::N5, East::None, South::None, North::Side, West::Side, ) => 4102,
                ( Power::N5, East::None, South::None, North::Side, West::None, ) => 4103,
                ( Power::N6, East::None, South::Up, North::Side, West::Up, ) => 4104,
                ( Power::N6, East::None, South::Up, North::Side, West::Side, ) => 4105,
                ( Power::N6, East::None, South::Up, North::Side, West::None, ) => 4106,
                ( Power::N6, East::None, South::Side, North::Side, West::Up, ) => 4107,
                ( Power::N6, East::None, South::Side, North::Side, West::Side, ) => 4108,
                ( Power::N6, East::None, South::Side, North::Side, West::None, ) => 4109,
                ( Power::N6, East::None, South::None, North::Side, West::Up, ) => 4110,
                ( Power::N6, East::None, South::None, North::Side, West::Side, ) => 4111,
                ( Power::N6, East::None, South::None, North::Side, West::None, ) => 4112,
                ( Power::N7, East::None, South::Up, North::Side, West::Up, ) => 4113,
                ( Power::N7, East::None, South::Up, North::Side, West::Side, ) => 4114,
                ( Power::N7, East::None, South::Up, North::Side, West::None, ) => 4115,
                ( Power::N7, East::None, South::Side, North::Side, West::Up, ) => 4116,
                ( Power::N7, East::None, South::Side, North::Side, West::Side, ) => 4117,
                ( Power::N7, East::None, South::Side, North::Side, West::None, ) => 4118,
                ( Power::N7, East::None, South::None, North::Side, West::Up, ) => 4119,
                ( Power::N7, East::None, South::None, North::Side, West::Side, ) => 4120,
                ( Power::N7, East::None, South::None, North::Side, West::None, ) => 4121,
                ( Power::N8, East::None, South::Up, North::Side, West::Up, ) => 4122,
                ( Power::N8, East::None, South::Up, North::Side, West::Side, ) => 4123,
                ( Power::N8, East::None, South::Up, North::Side, West::None, ) => 4124,
                ( Power::N8, East::None, South::Side, North::Side, West::Up, ) => 4125,
                ( Power::N8, East::None, South::Side, North::Side, West::Side, ) => 4126,
                ( Power::N8, East::None, South::Side, North::Side, West::None, ) => 4127,
                ( Power::N8, East::None, South::None, North::Side, West::Up, ) => 4128,
                ( Power::N8, East::None, South::None, North::Side, West::Side, ) => 4129,
                ( Power::N8, East::None, South::None, North::Side, West::None, ) => 4130,
                ( Power::N9, East::None, South::Up, North::Side, West::Up, ) => 4131,
                ( Power::N9, East::None, South::Up, North::Side, West::Side, ) => 4132,
                ( Power::N9, East::None, South::Up, North::Side, West::None, ) => 4133,
                ( Power::N9, East::None, South::Side, North::Side, West::Up, ) => 4134,
                ( Power::N9, East::None, South::Side, North::Side, West::Side, ) => 4135,
                ( Power::N9, East::None, South::Side, North::Side, West::None, ) => 4136,
                ( Power::N9, East::None, South::None, North::Side, West::Up, ) => 4137,
                ( Power::N9, East::None, South::None, North::Side, West::Side, ) => 4138,
                ( Power::N9, East::None, South::None, North::Side, West::None, ) => 4139,
                ( Power::N10, East::None, South::Up, North::Side, West::Up, ) => 4140,
                ( Power::N10, East::None, South::Up, North::Side, West::Side, ) => 4141,
                ( Power::N10, East::None, South::Up, North::Side, West::None, ) => 4142,
                ( Power::N10, East::None, South::Side, North::Side, West::Up, ) => 4143,
                ( Power::N10, East::None, South::Side, North::Side, West::Side, ) => 4144,
                ( Power::N10, East::None, South::Side, North::Side, West::None, ) => 4145,
                ( Power::N10, East::None, South::None, North::Side, West::Up, ) => 4146,
                ( Power::N10, East::None, South::None, North::Side, West::Side, ) => 4147,
                ( Power::N10, East::None, South::None, North::Side, West::None, ) => 4148,
                ( Power::N11, East::None, South::Up, North::Side, West::Up, ) => 4149,
                ( Power::N11, East::None, South::Up, North::Side, West::Side, ) => 4150,
                ( Power::N11, East::None, South::Up, North::Side, West::None, ) => 4151,
                ( Power::N11, East::None, South::Side, North::Side, West::Up, ) => 4152,
                ( Power::N11, East::None, South::Side, North::Side, West::Side, ) => 4153,
                ( Power::N11, East::None, South::Side, North::Side, West::None, ) => 4154,
                ( Power::N11, East::None, South::None, North::Side, West::Up, ) => 4155,
                ( Power::N11, East::None, South::None, North::Side, West::Side, ) => 4156,
                ( Power::N11, East::None, South::None, North::Side, West::None, ) => 4157,
                ( Power::N12, East::None, South::Up, North::Side, West::Up, ) => 4158,
                ( Power::N12, East::None, South::Up, North::Side, West::Side, ) => 4159,
                ( Power::N12, East::None, South::Up, North::Side, West::None, ) => 4160,
                ( Power::N12, East::None, South::Side, North::Side, West::Up, ) => 4161,
                ( Power::N12, East::None, South::Side, North::Side, West::Side, ) => 4162,
                ( Power::N12, East::None, South::Side, North::Side, West::None, ) => 4163,
                ( Power::N12, East::None, South::None, North::Side, West::Up, ) => 4164,
                ( Power::N12, East::None, South::None, North::Side, West::Side, ) => 4165,
                ( Power::N12, East::None, South::None, North::Side, West::None, ) => 4166,
                ( Power::N13, East::None, South::Up, North::Side, West::Up, ) => 4167,
                ( Power::N13, East::None, South::Up, North::Side, West::Side, ) => 4168,
                ( Power::N13, East::None, South::Up, North::Side, West::None, ) => 4169,
                ( Power::N13, East::None, South::Side, North::Side, West::Up, ) => 4170,
                ( Power::N13, East::None, South::Side, North::Side, West::Side, ) => 4171,
                ( Power::N13, East::None, South::Side, North::Side, West::None, ) => 4172,
                ( Power::N13, East::None, South::None, North::Side, West::Up, ) => 4173,
                ( Power::N13, East::None, South::None, North::Side, West::Side, ) => 4174,
                ( Power::N13, East::None, South::None, North::Side, West::None, ) => 4175,
                ( Power::N14, East::None, South::Up, North::Side, West::Up, ) => 4176,
                ( Power::N14, East::None, South::Up, North::Side, West::Side, ) => 4177,
                ( Power::N14, East::None, South::Up, North::Side, West::None, ) => 4178,
                ( Power::N14, East::None, South::Side, North::Side, West::Up, ) => 4179,
                ( Power::N14, East::None, South::Side, North::Side, West::Side, ) => 4180,
                ( Power::N14, East::None, South::Side, North::Side, West::None, ) => 4181,
                ( Power::N14, East::None, South::None, North::Side, West::Up, ) => 4182,
                ( Power::N14, East::None, South::None, North::Side, West::Side, ) => 4183,
                ( Power::N14, East::None, South::None, North::Side, West::None, ) => 4184,
                ( Power::N15, East::None, South::Up, North::Side, West::Up, ) => 4185,
                ( Power::N15, East::None, South::Up, North::Side, West::Side, ) => 4186,
                ( Power::N15, East::None, South::Up, North::Side, West::None, ) => 4187,
                ( Power::N15, East::None, South::Side, North::Side, West::Up, ) => 4188,
                ( Power::N15, East::None, South::Side, North::Side, West::Side, ) => 4189,
                ( Power::N15, East::None, South::Side, North::Side, West::None, ) => 4190,
                ( Power::N15, East::None, South::None, North::Side, West::Up, ) => 4191,
                ( Power::N15, East::None, South::None, North::Side, West::Side, ) => 4192,
                ( Power::N15, East::None, South::None, North::Side, West::None, ) => 4193,
                ( Power::N0, East::None, South::Up, North::None, West::Up, ) => 4194,
                ( Power::N0, East::None, South::Up, North::None, West::Side, ) => 4195,
                ( Power::N0, East::None, South::Up, North::None, West::None, ) => 4196,
                ( Power::N0, East::None, South::Side, North::None, West::Up, ) => 4197,
                ( Power::N0, East::None, South::Side, North::None, West::Side, ) => 4198,
                ( Power::N0, East::None, South::Side, North::None, West::None, ) => 4199,
                ( Power::N0, East::None, South::None, North::None, West::Up, ) => 4200,
                ( Power::N0, East::None, South::None, North::None, West::Side, ) => 4201,
                ( Power::N0, East::None, South::None, North::None, West::None, ) => 4202,
                ( Power::N1, East::None, South::Up, North::None, West::Up, ) => 4203,
                ( Power::N1, East::None, South::Up, North::None, West::Side, ) => 4204,
                ( Power::N1, East::None, South::Up, North::None, West::None, ) => 4205,
                ( Power::N1, East::None, South::Side, North::None, West::Up, ) => 4206,
                ( Power::N1, East::None, South::Side, North::None, West::Side, ) => 4207,
                ( Power::N1, East::None, South::Side, North::None, West::None, ) => 4208,
                ( Power::N1, East::None, South::None, North::None, West::Up, ) => 4209,
                ( Power::N1, East::None, South::None, North::None, West::Side, ) => 4210,
                ( Power::N1, East::None, South::None, North::None, West::None, ) => 4211,
                ( Power::N2, East::None, South::Up, North::None, West::Up, ) => 4212,
                ( Power::N2, East::None, South::Up, North::None, West::Side, ) => 4213,
                ( Power::N2, East::None, South::Up, North::None, West::None, ) => 4214,
                ( Power::N2, East::None, South::Side, North::None, West::Up, ) => 4215,
                ( Power::N2, East::None, South::Side, North::None, West::Side, ) => 4216,
                ( Power::N2, East::None, South::Side, North::None, West::None, ) => 4217,
                ( Power::N2, East::None, South::None, North::None, West::Up, ) => 4218,
                ( Power::N2, East::None, South::None, North::None, West::Side, ) => 4219,
                ( Power::N2, East::None, South::None, North::None, West::None, ) => 4220,
                ( Power::N3, East::None, South::Up, North::None, West::Up, ) => 4221,
                ( Power::N3, East::None, South::Up, North::None, West::Side, ) => 4222,
                ( Power::N3, East::None, South::Up, North::None, West::None, ) => 4223,
                ( Power::N3, East::None, South::Side, North::None, West::Up, ) => 4224,
                ( Power::N3, East::None, South::Side, North::None, West::Side, ) => 4225,
                ( Power::N3, East::None, South::Side, North::None, West::None, ) => 4226,
                ( Power::N3, East::None, South::None, North::None, West::Up, ) => 4227,
                ( Power::N3, East::None, South::None, North::None, West::Side, ) => 4228,
                ( Power::N3, East::None, South::None, North::None, West::None, ) => 4229,
                ( Power::N4, East::None, South::Up, North::None, West::Up, ) => 4230,
                ( Power::N4, East::None, South::Up, North::None, West::Side, ) => 4231,
                ( Power::N4, East::None, South::Up, North::None, West::None, ) => 4232,
                ( Power::N4, East::None, South::Side, North::None, West::Up, ) => 4233,
                ( Power::N4, East::None, South::Side, North::None, West::Side, ) => 4234,
                ( Power::N4, East::None, South::Side, North::None, West::None, ) => 4235,
                ( Power::N4, East::None, South::None, North::None, West::Up, ) => 4236,
                ( Power::N4, East::None, South::None, North::None, West::Side, ) => 4237,
                ( Power::N4, East::None, South::None, North::None, West::None, ) => 4238,
                ( Power::N5, East::None, South::Up, North::None, West::Up, ) => 4239,
                ( Power::N5, East::None, South::Up, North::None, West::Side, ) => 4240,
                ( Power::N5, East::None, South::Up, North::None, West::None, ) => 4241,
                ( Power::N5, East::None, South::Side, North::None, West::Up, ) => 4242,
                ( Power::N5, East::None, South::Side, North::None, West::Side, ) => 4243,
                ( Power::N5, East::None, South::Side, North::None, West::None, ) => 4244,
                ( Power::N5, East::None, South::None, North::None, West::Up, ) => 4245,
                ( Power::N5, East::None, South::None, North::None, West::Side, ) => 4246,
                ( Power::N5, East::None, South::None, North::None, West::None, ) => 4247,
                ( Power::N6, East::None, South::Up, North::None, West::Up, ) => 4248,
                ( Power::N6, East::None, South::Up, North::None, West::Side, ) => 4249,
                ( Power::N6, East::None, South::Up, North::None, West::None, ) => 4250,
                ( Power::N6, East::None, South::Side, North::None, West::Up, ) => 4251,
                ( Power::N6, East::None, South::Side, North::None, West::Side, ) => 4252,
                ( Power::N6, East::None, South::Side, North::None, West::None, ) => 4253,
                ( Power::N6, East::None, South::None, North::None, West::Up, ) => 4254,
                ( Power::N6, East::None, South::None, North::None, West::Side, ) => 4255,
                ( Power::N6, East::None, South::None, North::None, West::None, ) => 4256,
                ( Power::N7, East::None, South::Up, North::None, West::Up, ) => 4257,
                ( Power::N7, East::None, South::Up, North::None, West::Side, ) => 4258,
                ( Power::N7, East::None, South::Up, North::None, West::None, ) => 4259,
                ( Power::N7, East::None, South::Side, North::None, West::Up, ) => 4260,
                ( Power::N7, East::None, South::Side, North::None, West::Side, ) => 4261,
                ( Power::N7, East::None, South::Side, North::None, West::None, ) => 4262,
                ( Power::N7, East::None, South::None, North::None, West::Up, ) => 4263,
                ( Power::N7, East::None, South::None, North::None, West::Side, ) => 4264,
                ( Power::N7, East::None, South::None, North::None, West::None, ) => 4265,
                ( Power::N8, East::None, South::Up, North::None, West::Up, ) => 4266,
                ( Power::N8, East::None, South::Up, North::None, West::Side, ) => 4267,
                ( Power::N8, East::None, South::Up, North::None, West::None, ) => 4268,
                ( Power::N8, East::None, South::Side, North::None, West::Up, ) => 4269,
                ( Power::N8, East::None, South::Side, North::None, West::Side, ) => 4270,
                ( Power::N8, East::None, South::Side, North::None, West::None, ) => 4271,
                ( Power::N8, East::None, South::None, North::None, West::Up, ) => 4272,
                ( Power::N8, East::None, South::None, North::None, West::Side, ) => 4273,
                ( Power::N8, East::None, South::None, North::None, West::None, ) => 4274,
                ( Power::N9, East::None, South::Up, North::None, West::Up, ) => 4275,
                ( Power::N9, East::None, South::Up, North::None, West::Side, ) => 4276,
                ( Power::N9, East::None, South::Up, North::None, West::None, ) => 4277,
                ( Power::N9, East::None, South::Side, North::None, West::Up, ) => 4278,
                ( Power::N9, East::None, South::Side, North::None, West::Side, ) => 4279,
                ( Power::N9, East::None, South::Side, North::None, West::None, ) => 4280,
                ( Power::N9, East::None, South::None, North::None, West::Up, ) => 4281,
                ( Power::N9, East::None, South::None, North::None, West::Side, ) => 4282,
                ( Power::N9, East::None, South::None, North::None, West::None, ) => 4283,
                ( Power::N10, East::None, South::Up, North::None, West::Up, ) => 4284,
                ( Power::N10, East::None, South::Up, North::None, West::Side, ) => 4285,
                ( Power::N10, East::None, South::Up, North::None, West::None, ) => 4286,
                ( Power::N10, East::None, South::Side, North::None, West::Up, ) => 4287,
                ( Power::N10, East::None, South::Side, North::None, West::Side, ) => 4288,
                ( Power::N10, East::None, South::Side, North::None, West::None, ) => 4289,
                ( Power::N10, East::None, South::None, North::None, West::Up, ) => 4290,
                ( Power::N10, East::None, South::None, North::None, West::Side, ) => 4291,
                ( Power::N10, East::None, South::None, North::None, West::None, ) => 4292,
                ( Power::N11, East::None, South::Up, North::None, West::Up, ) => 4293,
                ( Power::N11, East::None, South::Up, North::None, West::Side, ) => 4294,
                ( Power::N11, East::None, South::Up, North::None, West::None, ) => 4295,
                ( Power::N11, East::None, South::Side, North::None, West::Up, ) => 4296,
                ( Power::N11, East::None, South::Side, North::None, West::Side, ) => 4297,
                ( Power::N11, East::None, South::Side, North::None, West::None, ) => 4298,
                ( Power::N11, East::None, South::None, North::None, West::Up, ) => 4299,
                ( Power::N11, East::None, South::None, North::None, West::Side, ) => 4300,
                ( Power::N11, East::None, South::None, North::None, West::None, ) => 4301,
                ( Power::N12, East::None, South::Up, North::None, West::Up, ) => 4302,
                ( Power::N12, East::None, South::Up, North::None, West::Side, ) => 4303,
                ( Power::N12, East::None, South::Up, North::None, West::None, ) => 4304,
                ( Power::N12, East::None, South::Side, North::None, West::Up, ) => 4305,
                ( Power::N12, East::None, South::Side, North::None, West::Side, ) => 4306,
                ( Power::N12, East::None, South::Side, North::None, West::None, ) => 4307,
                ( Power::N12, East::None, South::None, North::None, West::Up, ) => 4308,
                ( Power::N12, East::None, South::None, North::None, West::Side, ) => 4309,
                ( Power::N12, East::None, South::None, North::None, West::None, ) => 4310,
                ( Power::N13, East::None, South::Up, North::None, West::Up, ) => 4311,
                ( Power::N13, East::None, South::Up, North::None, West::Side, ) => 4312,
                ( Power::N13, East::None, South::Up, North::None, West::None, ) => 4313,
                ( Power::N13, East::None, South::Side, North::None, West::Up, ) => 4314,
                ( Power::N13, East::None, South::Side, North::None, West::Side, ) => 4315,
                ( Power::N13, East::None, South::Side, North::None, West::None, ) => 4316,
                ( Power::N13, East::None, South::None, North::None, West::Up, ) => 4317,
                ( Power::N13, East::None, South::None, North::None, West::Side, ) => 4318,
                ( Power::N13, East::None, South::None, North::None, West::None, ) => 4319,
                ( Power::N14, East::None, South::Up, North::None, West::Up, ) => 4320,
                ( Power::N14, East::None, South::Up, North::None, West::Side, ) => 4321,
                ( Power::N14, East::None, South::Up, North::None, West::None, ) => 4322,
                ( Power::N14, East::None, South::Side, North::None, West::Up, ) => 4323,
                ( Power::N14, East::None, South::Side, North::None, West::Side, ) => 4324,
                ( Power::N14, East::None, South::Side, North::None, West::None, ) => 4325,
                ( Power::N14, East::None, South::None, North::None, West::Up, ) => 4326,
                ( Power::N14, East::None, South::None, North::None, West::Side, ) => 4327,
                ( Power::N14, East::None, South::None, North::None, West::None, ) => 4328,
                ( Power::N15, East::None, South::Up, North::None, West::Up, ) => 4329,
                ( Power::N15, East::None, South::Up, North::None, West::Side, ) => 4330,
                ( Power::N15, East::None, South::Up, North::None, West::None, ) => 4331,
                ( Power::N15, East::None, South::Side, North::None, West::Up, ) => 4332,
                ( Power::N15, East::None, South::Side, North::None, West::Side, ) => 4333,
                ( Power::N15, East::None, South::Side, North::None, West::None, ) => 4334,
                ( Power::N15, East::None, South::None, North::None, West::Up, ) => 4335,
                ( Power::N15, East::None, South::None, North::None, West::Side, ) => 4336,
                ( Power::N15, East::None, South::None, North::None, West::None, ) => 4337,
            })
        }
    }

    impl From<RedstoneWire> for BlockState {
        #[inline(always)]
        fn from(value : RedstoneWire) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedstoneWire {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedstoneWire { }

    impl Block for RedstoneWire {
        const DEFAULT_STATE : Self = Self {
            power : Power::N0,
            east : East::None,
            south : South::None,
            north : North::None,
            west : West::None,
        };
    }

}

/// `minecraft:stone_bricks` block.
pub mod stone_bricks {
    use super::*;

    /// `minecraft:stone_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StoneBricks;

    impl StoneBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6780)
        }
    }

    impl From<StoneBricks> for BlockState {
        #[inline(always)]
        fn from(value : StoneBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StoneBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StoneBricks { }

    impl Block for StoneBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:white_tulip` block.
pub mod white_tulip {
    use super::*;

    /// `minecraft:white_tulip` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteTulip;

    impl WhiteTulip {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2129)
        }
    }

    impl From<WhiteTulip> for BlockState {
        #[inline(always)]
        fn from(value : WhiteTulip) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteTulip {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteTulip { }

    impl Block for WhiteTulip {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:lime_stained_glass` block.
pub mod lime_stained_glass {
    use super::*;

    /// `minecraft:lime_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeStainedGlass;

    impl LimeStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6129)
        }
    }

    impl From<LimeStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : LimeStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeStainedGlass { }

    impl Block for LimeStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:frogspawn` block.
pub mod frogspawn {
    use super::*;

    /// `minecraft:frogspawn` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Frogspawn;

    impl Frogspawn {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27664)
        }
    }

    impl From<Frogspawn> for BlockState {
        #[inline(always)]
        fn from(value : Frogspawn) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Frogspawn {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Frogspawn { }

    impl Block for Frogspawn {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:black_wool` block.
pub mod black_wool {
    use super::*;

    /// `minecraft:black_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackWool;

    impl BlackWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2108)
        }
    }

    impl From<BlackWool> for BlockState {
        #[inline(always)]
        fn from(value : BlackWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackWool { }

    impl Block for BlackWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:brown_wool` block.
pub mod brown_wool {
    use super::*;

    /// `minecraft:brown_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownWool;

    impl BrownWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2105)
        }
    }

    impl From<BrownWool> for BlockState {
        #[inline(always)]
        fn from(value : BrownWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownWool { }

    impl Block for BrownWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:powered_rail` block.
pub mod powered_rail {
    use super::*;

    /// `minecraft:powered_rail` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PoweredRail {
        /// `powered` state.
        pub powered : bool,
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `north_south` variant.
        NorthSouth,
        /// `east_west` variant.
        EastWest,
        /// `ascending_east` variant.
        AscendingEast,
        /// `ascending_west` variant.
        AscendingWest,
        /// `ascending_north` variant.
        AscendingNorth,
        /// `ascending_south` variant.
        AscendingSouth,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl PoweredRail {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.shape, self.waterlogged, )) {
                ( true, Shape::NorthSouth, true, ) => 1987,
                ( true, Shape::NorthSouth, false, ) => 1988,
                ( true, Shape::EastWest, true, ) => 1989,
                ( true, Shape::EastWest, false, ) => 1990,
                ( true, Shape::AscendingEast, true, ) => 1991,
                ( true, Shape::AscendingEast, false, ) => 1992,
                ( true, Shape::AscendingWest, true, ) => 1993,
                ( true, Shape::AscendingWest, false, ) => 1994,
                ( true, Shape::AscendingNorth, true, ) => 1995,
                ( true, Shape::AscendingNorth, false, ) => 1996,
                ( true, Shape::AscendingSouth, true, ) => 1997,
                ( true, Shape::AscendingSouth, false, ) => 1998,
                ( false, Shape::NorthSouth, true, ) => 1999,
                ( false, Shape::NorthSouth, false, ) => 2000,
                ( false, Shape::EastWest, true, ) => 2001,
                ( false, Shape::EastWest, false, ) => 2002,
                ( false, Shape::AscendingEast, true, ) => 2003,
                ( false, Shape::AscendingEast, false, ) => 2004,
                ( false, Shape::AscendingWest, true, ) => 2005,
                ( false, Shape::AscendingWest, false, ) => 2006,
                ( false, Shape::AscendingNorth, true, ) => 2007,
                ( false, Shape::AscendingNorth, false, ) => 2008,
                ( false, Shape::AscendingSouth, true, ) => 2009,
                ( false, Shape::AscendingSouth, false, ) => 2010,
            })
        }
    }

    impl From<PoweredRail> for BlockState {
        #[inline(always)]
        fn from(value : PoweredRail) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PoweredRail {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PoweredRail { }

    impl Block for PoweredRail {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            shape : Shape::NorthSouth,
            waterlogged : false,
        };
    }

}

/// `minecraft:granite_stairs` block.
pub mod granite_stairs {
    use super::*;

    /// `minecraft:granite_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GraniteStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl GraniteStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, self.shape, self.half, )) {
                ( Facing::North, true, Shape::Straight, Half::Top, ) => 14737,
                ( Facing::North, false, Shape::Straight, Half::Top, ) => 14738,
                ( Facing::North, true, Shape::InnerLeft, Half::Top, ) => 14739,
                ( Facing::North, false, Shape::InnerLeft, Half::Top, ) => 14740,
                ( Facing::North, true, Shape::InnerRight, Half::Top, ) => 14741,
                ( Facing::North, false, Shape::InnerRight, Half::Top, ) => 14742,
                ( Facing::North, true, Shape::OuterLeft, Half::Top, ) => 14743,
                ( Facing::North, false, Shape::OuterLeft, Half::Top, ) => 14744,
                ( Facing::North, true, Shape::OuterRight, Half::Top, ) => 14745,
                ( Facing::North, false, Shape::OuterRight, Half::Top, ) => 14746,
                ( Facing::North, true, Shape::Straight, Half::Bottom, ) => 14747,
                ( Facing::North, false, Shape::Straight, Half::Bottom, ) => 14748,
                ( Facing::North, true, Shape::InnerLeft, Half::Bottom, ) => 14749,
                ( Facing::North, false, Shape::InnerLeft, Half::Bottom, ) => 14750,
                ( Facing::North, true, Shape::InnerRight, Half::Bottom, ) => 14751,
                ( Facing::North, false, Shape::InnerRight, Half::Bottom, ) => 14752,
                ( Facing::North, true, Shape::OuterLeft, Half::Bottom, ) => 14753,
                ( Facing::North, false, Shape::OuterLeft, Half::Bottom, ) => 14754,
                ( Facing::North, true, Shape::OuterRight, Half::Bottom, ) => 14755,
                ( Facing::North, false, Shape::OuterRight, Half::Bottom, ) => 14756,
                ( Facing::South, true, Shape::Straight, Half::Top, ) => 14757,
                ( Facing::South, false, Shape::Straight, Half::Top, ) => 14758,
                ( Facing::South, true, Shape::InnerLeft, Half::Top, ) => 14759,
                ( Facing::South, false, Shape::InnerLeft, Half::Top, ) => 14760,
                ( Facing::South, true, Shape::InnerRight, Half::Top, ) => 14761,
                ( Facing::South, false, Shape::InnerRight, Half::Top, ) => 14762,
                ( Facing::South, true, Shape::OuterLeft, Half::Top, ) => 14763,
                ( Facing::South, false, Shape::OuterLeft, Half::Top, ) => 14764,
                ( Facing::South, true, Shape::OuterRight, Half::Top, ) => 14765,
                ( Facing::South, false, Shape::OuterRight, Half::Top, ) => 14766,
                ( Facing::South, true, Shape::Straight, Half::Bottom, ) => 14767,
                ( Facing::South, false, Shape::Straight, Half::Bottom, ) => 14768,
                ( Facing::South, true, Shape::InnerLeft, Half::Bottom, ) => 14769,
                ( Facing::South, false, Shape::InnerLeft, Half::Bottom, ) => 14770,
                ( Facing::South, true, Shape::InnerRight, Half::Bottom, ) => 14771,
                ( Facing::South, false, Shape::InnerRight, Half::Bottom, ) => 14772,
                ( Facing::South, true, Shape::OuterLeft, Half::Bottom, ) => 14773,
                ( Facing::South, false, Shape::OuterLeft, Half::Bottom, ) => 14774,
                ( Facing::South, true, Shape::OuterRight, Half::Bottom, ) => 14775,
                ( Facing::South, false, Shape::OuterRight, Half::Bottom, ) => 14776,
                ( Facing::West, true, Shape::Straight, Half::Top, ) => 14777,
                ( Facing::West, false, Shape::Straight, Half::Top, ) => 14778,
                ( Facing::West, true, Shape::InnerLeft, Half::Top, ) => 14779,
                ( Facing::West, false, Shape::InnerLeft, Half::Top, ) => 14780,
                ( Facing::West, true, Shape::InnerRight, Half::Top, ) => 14781,
                ( Facing::West, false, Shape::InnerRight, Half::Top, ) => 14782,
                ( Facing::West, true, Shape::OuterLeft, Half::Top, ) => 14783,
                ( Facing::West, false, Shape::OuterLeft, Half::Top, ) => 14784,
                ( Facing::West, true, Shape::OuterRight, Half::Top, ) => 14785,
                ( Facing::West, false, Shape::OuterRight, Half::Top, ) => 14786,
                ( Facing::West, true, Shape::Straight, Half::Bottom, ) => 14787,
                ( Facing::West, false, Shape::Straight, Half::Bottom, ) => 14788,
                ( Facing::West, true, Shape::InnerLeft, Half::Bottom, ) => 14789,
                ( Facing::West, false, Shape::InnerLeft, Half::Bottom, ) => 14790,
                ( Facing::West, true, Shape::InnerRight, Half::Bottom, ) => 14791,
                ( Facing::West, false, Shape::InnerRight, Half::Bottom, ) => 14792,
                ( Facing::West, true, Shape::OuterLeft, Half::Bottom, ) => 14793,
                ( Facing::West, false, Shape::OuterLeft, Half::Bottom, ) => 14794,
                ( Facing::West, true, Shape::OuterRight, Half::Bottom, ) => 14795,
                ( Facing::West, false, Shape::OuterRight, Half::Bottom, ) => 14796,
                ( Facing::East, true, Shape::Straight, Half::Top, ) => 14797,
                ( Facing::East, false, Shape::Straight, Half::Top, ) => 14798,
                ( Facing::East, true, Shape::InnerLeft, Half::Top, ) => 14799,
                ( Facing::East, false, Shape::InnerLeft, Half::Top, ) => 14800,
                ( Facing::East, true, Shape::InnerRight, Half::Top, ) => 14801,
                ( Facing::East, false, Shape::InnerRight, Half::Top, ) => 14802,
                ( Facing::East, true, Shape::OuterLeft, Half::Top, ) => 14803,
                ( Facing::East, false, Shape::OuterLeft, Half::Top, ) => 14804,
                ( Facing::East, true, Shape::OuterRight, Half::Top, ) => 14805,
                ( Facing::East, false, Shape::OuterRight, Half::Top, ) => 14806,
                ( Facing::East, true, Shape::Straight, Half::Bottom, ) => 14807,
                ( Facing::East, false, Shape::Straight, Half::Bottom, ) => 14808,
                ( Facing::East, true, Shape::InnerLeft, Half::Bottom, ) => 14809,
                ( Facing::East, false, Shape::InnerLeft, Half::Bottom, ) => 14810,
                ( Facing::East, true, Shape::InnerRight, Half::Bottom, ) => 14811,
                ( Facing::East, false, Shape::InnerRight, Half::Bottom, ) => 14812,
                ( Facing::East, true, Shape::OuterLeft, Half::Bottom, ) => 14813,
                ( Facing::East, false, Shape::OuterLeft, Half::Bottom, ) => 14814,
                ( Facing::East, true, Shape::OuterRight, Half::Bottom, ) => 14815,
                ( Facing::East, false, Shape::OuterRight, Half::Bottom, ) => 14816,
            })
        }
    }

    impl From<GraniteStairs> for BlockState {
        #[inline(always)]
        fn from(value : GraniteStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GraniteStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GraniteStairs { }

    impl Block for GraniteStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
            shape : Shape::Straight,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:creeper_head` block.
pub mod creeper_head {
    use super::*;

    /// `minecraft:creeper_head` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CreeperHead {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `powered` state.
        pub powered : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl CreeperHead {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.powered, )) {
                ( Rotation::N0, true, ) => 9796,
                ( Rotation::N1, true, ) => 9797,
                ( Rotation::N2, true, ) => 9798,
                ( Rotation::N3, true, ) => 9799,
                ( Rotation::N4, true, ) => 9800,
                ( Rotation::N5, true, ) => 9801,
                ( Rotation::N6, true, ) => 9802,
                ( Rotation::N7, true, ) => 9803,
                ( Rotation::N8, true, ) => 9804,
                ( Rotation::N9, true, ) => 9805,
                ( Rotation::N10, true, ) => 9806,
                ( Rotation::N11, true, ) => 9807,
                ( Rotation::N12, true, ) => 9808,
                ( Rotation::N13, true, ) => 9809,
                ( Rotation::N14, true, ) => 9810,
                ( Rotation::N15, true, ) => 9811,
                ( Rotation::N0, false, ) => 9812,
                ( Rotation::N1, false, ) => 9813,
                ( Rotation::N2, false, ) => 9814,
                ( Rotation::N3, false, ) => 9815,
                ( Rotation::N4, false, ) => 9816,
                ( Rotation::N5, false, ) => 9817,
                ( Rotation::N6, false, ) => 9818,
                ( Rotation::N7, false, ) => 9819,
                ( Rotation::N8, false, ) => 9820,
                ( Rotation::N9, false, ) => 9821,
                ( Rotation::N10, false, ) => 9822,
                ( Rotation::N11, false, ) => 9823,
                ( Rotation::N12, false, ) => 9824,
                ( Rotation::N13, false, ) => 9825,
                ( Rotation::N14, false, ) => 9826,
                ( Rotation::N15, false, ) => 9827,
            })
        }
    }

    impl From<CreeperHead> for BlockState {
        #[inline(always)]
        fn from(value : CreeperHead) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CreeperHead {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CreeperHead { }

    impl Block for CreeperHead {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            powered : false,
        };
    }

}

/// `minecraft:polished_blackstone_pressure_plate` block.
pub mod polished_blackstone_pressure_plate {
    use super::*;

    /// `minecraft:polished_blackstone_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedBlackstonePressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl PolishedBlackstonePressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 21432,
                ( false, ) => 21433,
            })
        }
    }

    impl From<PolishedBlackstonePressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : PolishedBlackstonePressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedBlackstonePressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedBlackstonePressurePlate { }

    impl Block for PolishedBlackstonePressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:cracked_deepslate_tiles` block.
pub mod cracked_deepslate_tiles {
    use super::*;

    /// `minecraft:cracked_deepslate_tiles` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrackedDeepslateTiles;

    impl CrackedDeepslateTiles {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27645)
        }
    }

    impl From<CrackedDeepslateTiles> for BlockState {
        #[inline(always)]
        fn from(value : CrackedDeepslateTiles) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrackedDeepslateTiles {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrackedDeepslateTiles { }

    impl Block for CrackedDeepslateTiles {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:polished_blackstone_slab` block.
pub mod polished_blackstone_slab {
    use super::*;

    /// `minecraft:polished_blackstone_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedBlackstoneSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl PolishedBlackstoneSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 21426,
                ( Kind::Top, false, ) => 21427,
                ( Kind::Bottom, true, ) => 21428,
                ( Kind::Bottom, false, ) => 21429,
                ( Kind::Double, true, ) => 21430,
                ( Kind::Double, false, ) => 21431,
            })
        }
    }

    impl From<PolishedBlackstoneSlab> for BlockState {
        #[inline(always)]
        fn from(value : PolishedBlackstoneSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedBlackstoneSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedBlackstoneSlab { }

    impl Block for PolishedBlackstoneSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:resin_clump` block.
pub mod resin_clump {
    use super::*;

    /// `minecraft:resin_clump` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ResinClump {
        /// `north` state.
        pub north : bool,
        /// `south` state.
        pub south : bool,
        /// `west` state.
        pub west : bool,
        /// `down` state.
        pub down : bool,
        /// `up` state.
        pub up : bool,
        /// `east` state.
        pub east : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl ResinClump {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.south, self.west, self.down, self.up, self.east, self.waterlogged, )) {
                ( true, true, true, true, true, true, true, ) => 7240,
                ( true, true, false, true, true, true, true, ) => 7241,
                ( true, true, true, true, true, true, false, ) => 7242,
                ( true, true, false, true, true, true, false, ) => 7243,
                ( true, true, true, true, false, true, true, ) => 7244,
                ( true, true, false, true, false, true, true, ) => 7245,
                ( true, true, true, true, false, true, false, ) => 7246,
                ( true, true, false, true, false, true, false, ) => 7247,
                ( true, false, true, true, true, true, true, ) => 7248,
                ( true, false, false, true, true, true, true, ) => 7249,
                ( true, false, true, true, true, true, false, ) => 7250,
                ( true, false, false, true, true, true, false, ) => 7251,
                ( true, false, true, true, false, true, true, ) => 7252,
                ( true, false, false, true, false, true, true, ) => 7253,
                ( true, false, true, true, false, true, false, ) => 7254,
                ( true, false, false, true, false, true, false, ) => 7255,
                ( false, true, true, true, true, true, true, ) => 7256,
                ( false, true, false, true, true, true, true, ) => 7257,
                ( false, true, true, true, true, true, false, ) => 7258,
                ( false, true, false, true, true, true, false, ) => 7259,
                ( false, true, true, true, false, true, true, ) => 7260,
                ( false, true, false, true, false, true, true, ) => 7261,
                ( false, true, true, true, false, true, false, ) => 7262,
                ( false, true, false, true, false, true, false, ) => 7263,
                ( false, false, true, true, true, true, true, ) => 7264,
                ( false, false, false, true, true, true, true, ) => 7265,
                ( false, false, true, true, true, true, false, ) => 7266,
                ( false, false, false, true, true, true, false, ) => 7267,
                ( false, false, true, true, false, true, true, ) => 7268,
                ( false, false, false, true, false, true, true, ) => 7269,
                ( false, false, true, true, false, true, false, ) => 7270,
                ( false, false, false, true, false, true, false, ) => 7271,
                ( true, true, true, true, true, false, true, ) => 7272,
                ( true, true, false, true, true, false, true, ) => 7273,
                ( true, true, true, true, true, false, false, ) => 7274,
                ( true, true, false, true, true, false, false, ) => 7275,
                ( true, true, true, true, false, false, true, ) => 7276,
                ( true, true, false, true, false, false, true, ) => 7277,
                ( true, true, true, true, false, false, false, ) => 7278,
                ( true, true, false, true, false, false, false, ) => 7279,
                ( true, false, true, true, true, false, true, ) => 7280,
                ( true, false, false, true, true, false, true, ) => 7281,
                ( true, false, true, true, true, false, false, ) => 7282,
                ( true, false, false, true, true, false, false, ) => 7283,
                ( true, false, true, true, false, false, true, ) => 7284,
                ( true, false, false, true, false, false, true, ) => 7285,
                ( true, false, true, true, false, false, false, ) => 7286,
                ( true, false, false, true, false, false, false, ) => 7287,
                ( false, true, true, true, true, false, true, ) => 7288,
                ( false, true, false, true, true, false, true, ) => 7289,
                ( false, true, true, true, true, false, false, ) => 7290,
                ( false, true, false, true, true, false, false, ) => 7291,
                ( false, true, true, true, false, false, true, ) => 7292,
                ( false, true, false, true, false, false, true, ) => 7293,
                ( false, true, true, true, false, false, false, ) => 7294,
                ( false, true, false, true, false, false, false, ) => 7295,
                ( false, false, true, true, true, false, true, ) => 7296,
                ( false, false, false, true, true, false, true, ) => 7297,
                ( false, false, true, true, true, false, false, ) => 7298,
                ( false, false, false, true, true, false, false, ) => 7299,
                ( false, false, true, true, false, false, true, ) => 7300,
                ( false, false, false, true, false, false, true, ) => 7301,
                ( false, false, true, true, false, false, false, ) => 7302,
                ( false, false, false, true, false, false, false, ) => 7303,
                ( true, true, true, false, true, true, true, ) => 7304,
                ( true, true, false, false, true, true, true, ) => 7305,
                ( true, true, true, false, true, true, false, ) => 7306,
                ( true, true, false, false, true, true, false, ) => 7307,
                ( true, true, true, false, false, true, true, ) => 7308,
                ( true, true, false, false, false, true, true, ) => 7309,
                ( true, true, true, false, false, true, false, ) => 7310,
                ( true, true, false, false, false, true, false, ) => 7311,
                ( true, false, true, false, true, true, true, ) => 7312,
                ( true, false, false, false, true, true, true, ) => 7313,
                ( true, false, true, false, true, true, false, ) => 7314,
                ( true, false, false, false, true, true, false, ) => 7315,
                ( true, false, true, false, false, true, true, ) => 7316,
                ( true, false, false, false, false, true, true, ) => 7317,
                ( true, false, true, false, false, true, false, ) => 7318,
                ( true, false, false, false, false, true, false, ) => 7319,
                ( false, true, true, false, true, true, true, ) => 7320,
                ( false, true, false, false, true, true, true, ) => 7321,
                ( false, true, true, false, true, true, false, ) => 7322,
                ( false, true, false, false, true, true, false, ) => 7323,
                ( false, true, true, false, false, true, true, ) => 7324,
                ( false, true, false, false, false, true, true, ) => 7325,
                ( false, true, true, false, false, true, false, ) => 7326,
                ( false, true, false, false, false, true, false, ) => 7327,
                ( false, false, true, false, true, true, true, ) => 7328,
                ( false, false, false, false, true, true, true, ) => 7329,
                ( false, false, true, false, true, true, false, ) => 7330,
                ( false, false, false, false, true, true, false, ) => 7331,
                ( false, false, true, false, false, true, true, ) => 7332,
                ( false, false, false, false, false, true, true, ) => 7333,
                ( false, false, true, false, false, true, false, ) => 7334,
                ( false, false, false, false, false, true, false, ) => 7335,
                ( true, true, true, false, true, false, true, ) => 7336,
                ( true, true, false, false, true, false, true, ) => 7337,
                ( true, true, true, false, true, false, false, ) => 7338,
                ( true, true, false, false, true, false, false, ) => 7339,
                ( true, true, true, false, false, false, true, ) => 7340,
                ( true, true, false, false, false, false, true, ) => 7341,
                ( true, true, true, false, false, false, false, ) => 7342,
                ( true, true, false, false, false, false, false, ) => 7343,
                ( true, false, true, false, true, false, true, ) => 7344,
                ( true, false, false, false, true, false, true, ) => 7345,
                ( true, false, true, false, true, false, false, ) => 7346,
                ( true, false, false, false, true, false, false, ) => 7347,
                ( true, false, true, false, false, false, true, ) => 7348,
                ( true, false, false, false, false, false, true, ) => 7349,
                ( true, false, true, false, false, false, false, ) => 7350,
                ( true, false, false, false, false, false, false, ) => 7351,
                ( false, true, true, false, true, false, true, ) => 7352,
                ( false, true, false, false, true, false, true, ) => 7353,
                ( false, true, true, false, true, false, false, ) => 7354,
                ( false, true, false, false, true, false, false, ) => 7355,
                ( false, true, true, false, false, false, true, ) => 7356,
                ( false, true, false, false, false, false, true, ) => 7357,
                ( false, true, true, false, false, false, false, ) => 7358,
                ( false, true, false, false, false, false, false, ) => 7359,
                ( false, false, true, false, true, false, true, ) => 7360,
                ( false, false, false, false, true, false, true, ) => 7361,
                ( false, false, true, false, true, false, false, ) => 7362,
                ( false, false, false, false, true, false, false, ) => 7363,
                ( false, false, true, false, false, false, true, ) => 7364,
                ( false, false, false, false, false, false, true, ) => 7365,
                ( false, false, true, false, false, false, false, ) => 7366,
                ( false, false, false, false, false, false, false, ) => 7367,
            })
        }
    }

    impl From<ResinClump> for BlockState {
        #[inline(always)]
        fn from(value : ResinClump) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ResinClump {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ResinClump { }

    impl Block for ResinClump {
        const DEFAULT_STATE : Self = Self {
            north : false,
            south : false,
            west : false,
            down : false,
            up : false,
            east : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:dropper` block.
pub mod dropper {
    use super::*;

    /// `minecraft:dropper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Dropper {
        /// `triggered` state.
        pub triggered : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Dropper {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.triggered, self.facing, )) {
                ( true, Facing::North, ) => 10153,
                ( false, Facing::North, ) => 10154,
                ( true, Facing::East, ) => 10155,
                ( false, Facing::East, ) => 10156,
                ( true, Facing::South, ) => 10157,
                ( false, Facing::South, ) => 10158,
                ( true, Facing::West, ) => 10159,
                ( false, Facing::West, ) => 10160,
                ( true, Facing::Up, ) => 10161,
                ( false, Facing::Up, ) => 10162,
                ( true, Facing::Down, ) => 10163,
                ( false, Facing::Down, ) => 10164,
            })
        }
    }

    impl From<Dropper> for BlockState {
        #[inline(always)]
        fn from(value : Dropper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Dropper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Dropper { }

    impl Block for Dropper {
        const DEFAULT_STATE : Self = Self {
            triggered : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:nether_gold_ore` block.
pub mod nether_gold_ore {
    use super::*;

    /// `minecraft:nether_gold_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct NetherGoldOre;

    impl NetherGoldOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(135)
        }
    }

    impl From<NetherGoldOre> for BlockState {
        #[inline(always)]
        fn from(value : NetherGoldOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for NetherGoldOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for NetherGoldOre { }

    impl Block for NetherGoldOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dead_horn_coral_block` block.
pub mod dead_horn_coral_block {
    use super::*;

    /// `minecraft:dead_horn_coral_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadHornCoralBlock;

    impl DeadHornCoralBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13862)
        }
    }

    impl From<DeadHornCoralBlock> for BlockState {
        #[inline(always)]
        fn from(value : DeadHornCoralBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadHornCoralBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadHornCoralBlock { }

    impl Block for DeadHornCoralBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:chorus_flower` block.
pub mod chorus_flower {
    use super::*;

    /// `minecraft:chorus_flower` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChorusFlower {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl ChorusFlower {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 13427,
                ( Age::N1, ) => 13428,
                ( Age::N2, ) => 13429,
                ( Age::N3, ) => 13430,
                ( Age::N4, ) => 13431,
                ( Age::N5, ) => 13432,
            })
        }
    }

    impl From<ChorusFlower> for BlockState {
        #[inline(always)]
        fn from(value : ChorusFlower) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChorusFlower {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChorusFlower { }

    impl Block for ChorusFlower {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:crafting_table` block.
pub mod crafting_table {
    use super::*;

    /// `minecraft:crafting_table` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CraftingTable;

    impl CraftingTable {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(4341)
        }
    }

    impl From<CraftingTable> for BlockState {
        #[inline(always)]
        fn from(value : CraftingTable) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CraftingTable {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CraftingTable { }

    impl Block for CraftingTable {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:beacon` block.
pub mod beacon {
    use super::*;

    /// `minecraft:beacon` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Beacon;

    impl Beacon {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(8702)
        }
    }

    impl From<Beacon> for BlockState {
        #[inline(always)]
        fn from(value : Beacon) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Beacon {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Beacon { }

    impl Block for Beacon {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:decorated_pot` block.
pub mod decorated_pot {
    use super::*;

    /// `minecraft:decorated_pot` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DecoratedPot {
        /// `cracked` state.
        pub cracked : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DecoratedPot {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.cracked, self.waterlogged, self.facing, )) {
                ( true, true, Facing::North, ) => 27666,
                ( true, false, Facing::North, ) => 27667,
                ( true, true, Facing::South, ) => 27668,
                ( true, false, Facing::South, ) => 27669,
                ( true, true, Facing::West, ) => 27670,
                ( true, false, Facing::West, ) => 27671,
                ( true, true, Facing::East, ) => 27672,
                ( true, false, Facing::East, ) => 27673,
                ( false, true, Facing::North, ) => 27674,
                ( false, false, Facing::North, ) => 27675,
                ( false, true, Facing::South, ) => 27676,
                ( false, false, Facing::South, ) => 27677,
                ( false, true, Facing::West, ) => 27678,
                ( false, false, Facing::West, ) => 27679,
                ( false, true, Facing::East, ) => 27680,
                ( false, false, Facing::East, ) => 27681,
            })
        }
    }

    impl From<DecoratedPot> for BlockState {
        #[inline(always)]
        fn from(value : DecoratedPot) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DecoratedPot {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DecoratedPot { }

    impl Block for DecoratedPot {
        const DEFAULT_STATE : Self = Self {
            cracked : false,
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:gray_banner` block.
pub mod gray_banner {
    use super::*;

    /// `minecraft:gray_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl GrayBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11760,
                ( Rotation::N1, ) => 11761,
                ( Rotation::N2, ) => 11762,
                ( Rotation::N3, ) => 11763,
                ( Rotation::N4, ) => 11764,
                ( Rotation::N5, ) => 11765,
                ( Rotation::N6, ) => 11766,
                ( Rotation::N7, ) => 11767,
                ( Rotation::N8, ) => 11768,
                ( Rotation::N9, ) => 11769,
                ( Rotation::N10, ) => 11770,
                ( Rotation::N11, ) => 11771,
                ( Rotation::N12, ) => 11772,
                ( Rotation::N13, ) => 11773,
                ( Rotation::N14, ) => 11774,
                ( Rotation::N15, ) => 11775,
            })
        }
    }

    impl From<GrayBanner> for BlockState {
        #[inline(always)]
        fn from(value : GrayBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayBanner { }

    impl Block for GrayBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:iron_ore` block.
pub mod iron_ore {
    use super::*;

    /// `minecraft:iron_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct IronOre;

    impl IronOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(131)
        }
    }

    impl From<IronOre> for BlockState {
        #[inline(always)]
        fn from(value : IronOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for IronOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for IronOre { }

    impl Block for IronOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dead_fire_coral_wall_fan` block.
pub mod dead_fire_coral_wall_fan {
    use super::*;

    /// `minecraft:dead_fire_coral_wall_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadFireCoralWallFan {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DeadFireCoralWallFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 13932,
                ( Facing::North, false, ) => 13933,
                ( Facing::South, true, ) => 13934,
                ( Facing::South, false, ) => 13935,
                ( Facing::West, true, ) => 13936,
                ( Facing::West, false, ) => 13937,
                ( Facing::East, true, ) => 13938,
                ( Facing::East, false, ) => 13939,
            })
        }
    }

    impl From<DeadFireCoralWallFan> for BlockState {
        #[inline(always)]
        fn from(value : DeadFireCoralWallFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadFireCoralWallFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadFireCoralWallFan { }

    impl Block for DeadFireCoralWallFan {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : true,
        };
    }

}

/// `minecraft:mangrove_propagule` block.
pub mod mangrove_propagule {
    use super::*;

    /// `minecraft:mangrove_propagule` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangrovePropagule {
        /// `age` state.
        pub age : Age,
        /// `stage` state.
        pub stage : Stage,
        /// `hanging` state.
        pub hanging : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    /// `stage` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Stage {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
    }
    impl crate::Sealed for Stage { }
    impl BlockProperty for Stage { }

    impl MangrovePropagule {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, self.stage, self.hanging, self.waterlogged, )) {
                ( Age::N0, Stage::N0, true, true, ) => 45,
                ( Age::N0, Stage::N0, true, false, ) => 46,
                ( Age::N0, Stage::N1, true, true, ) => 47,
                ( Age::N0, Stage::N1, true, false, ) => 48,
                ( Age::N0, Stage::N0, false, true, ) => 49,
                ( Age::N0, Stage::N0, false, false, ) => 50,
                ( Age::N0, Stage::N1, false, true, ) => 51,
                ( Age::N0, Stage::N1, false, false, ) => 52,
                ( Age::N1, Stage::N0, true, true, ) => 53,
                ( Age::N1, Stage::N0, true, false, ) => 54,
                ( Age::N1, Stage::N1, true, true, ) => 55,
                ( Age::N1, Stage::N1, true, false, ) => 56,
                ( Age::N1, Stage::N0, false, true, ) => 57,
                ( Age::N1, Stage::N0, false, false, ) => 58,
                ( Age::N1, Stage::N1, false, true, ) => 59,
                ( Age::N1, Stage::N1, false, false, ) => 60,
                ( Age::N2, Stage::N0, true, true, ) => 61,
                ( Age::N2, Stage::N0, true, false, ) => 62,
                ( Age::N2, Stage::N1, true, true, ) => 63,
                ( Age::N2, Stage::N1, true, false, ) => 64,
                ( Age::N2, Stage::N0, false, true, ) => 65,
                ( Age::N2, Stage::N0, false, false, ) => 66,
                ( Age::N2, Stage::N1, false, true, ) => 67,
                ( Age::N2, Stage::N1, false, false, ) => 68,
                ( Age::N3, Stage::N0, true, true, ) => 69,
                ( Age::N3, Stage::N0, true, false, ) => 70,
                ( Age::N3, Stage::N1, true, true, ) => 71,
                ( Age::N3, Stage::N1, true, false, ) => 72,
                ( Age::N3, Stage::N0, false, true, ) => 73,
                ( Age::N3, Stage::N0, false, false, ) => 74,
                ( Age::N3, Stage::N1, false, true, ) => 75,
                ( Age::N3, Stage::N1, false, false, ) => 76,
                ( Age::N4, Stage::N0, true, true, ) => 77,
                ( Age::N4, Stage::N0, true, false, ) => 78,
                ( Age::N4, Stage::N1, true, true, ) => 79,
                ( Age::N4, Stage::N1, true, false, ) => 80,
                ( Age::N4, Stage::N0, false, true, ) => 81,
                ( Age::N4, Stage::N0, false, false, ) => 82,
                ( Age::N4, Stage::N1, false, true, ) => 83,
                ( Age::N4, Stage::N1, false, false, ) => 84,
            })
        }
    }

    impl From<MangrovePropagule> for BlockState {
        #[inline(always)]
        fn from(value : MangrovePropagule) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangrovePropagule {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangrovePropagule { }

    impl Block for MangrovePropagule {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
            stage : Stage::N0,
            hanging : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:polished_blackstone_brick_stairs` block.
pub mod polished_blackstone_brick_stairs {
    use super::*;

    /// `minecraft:polished_blackstone_brick_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedBlackstoneBrickStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl PolishedBlackstoneBrickStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, self.half, self.shape, )) {
                ( true, Facing::North, Half::Top, Shape::Straight, ) => 20941,
                ( false, Facing::North, Half::Top, Shape::Straight, ) => 20942,
                ( true, Facing::North, Half::Top, Shape::InnerLeft, ) => 20943,
                ( false, Facing::North, Half::Top, Shape::InnerLeft, ) => 20944,
                ( true, Facing::North, Half::Top, Shape::InnerRight, ) => 20945,
                ( false, Facing::North, Half::Top, Shape::InnerRight, ) => 20946,
                ( true, Facing::North, Half::Top, Shape::OuterLeft, ) => 20947,
                ( false, Facing::North, Half::Top, Shape::OuterLeft, ) => 20948,
                ( true, Facing::North, Half::Top, Shape::OuterRight, ) => 20949,
                ( false, Facing::North, Half::Top, Shape::OuterRight, ) => 20950,
                ( true, Facing::North, Half::Bottom, Shape::Straight, ) => 20951,
                ( false, Facing::North, Half::Bottom, Shape::Straight, ) => 20952,
                ( true, Facing::North, Half::Bottom, Shape::InnerLeft, ) => 20953,
                ( false, Facing::North, Half::Bottom, Shape::InnerLeft, ) => 20954,
                ( true, Facing::North, Half::Bottom, Shape::InnerRight, ) => 20955,
                ( false, Facing::North, Half::Bottom, Shape::InnerRight, ) => 20956,
                ( true, Facing::North, Half::Bottom, Shape::OuterLeft, ) => 20957,
                ( false, Facing::North, Half::Bottom, Shape::OuterLeft, ) => 20958,
                ( true, Facing::North, Half::Bottom, Shape::OuterRight, ) => 20959,
                ( false, Facing::North, Half::Bottom, Shape::OuterRight, ) => 20960,
                ( true, Facing::South, Half::Top, Shape::Straight, ) => 20961,
                ( false, Facing::South, Half::Top, Shape::Straight, ) => 20962,
                ( true, Facing::South, Half::Top, Shape::InnerLeft, ) => 20963,
                ( false, Facing::South, Half::Top, Shape::InnerLeft, ) => 20964,
                ( true, Facing::South, Half::Top, Shape::InnerRight, ) => 20965,
                ( false, Facing::South, Half::Top, Shape::InnerRight, ) => 20966,
                ( true, Facing::South, Half::Top, Shape::OuterLeft, ) => 20967,
                ( false, Facing::South, Half::Top, Shape::OuterLeft, ) => 20968,
                ( true, Facing::South, Half::Top, Shape::OuterRight, ) => 20969,
                ( false, Facing::South, Half::Top, Shape::OuterRight, ) => 20970,
                ( true, Facing::South, Half::Bottom, Shape::Straight, ) => 20971,
                ( false, Facing::South, Half::Bottom, Shape::Straight, ) => 20972,
                ( true, Facing::South, Half::Bottom, Shape::InnerLeft, ) => 20973,
                ( false, Facing::South, Half::Bottom, Shape::InnerLeft, ) => 20974,
                ( true, Facing::South, Half::Bottom, Shape::InnerRight, ) => 20975,
                ( false, Facing::South, Half::Bottom, Shape::InnerRight, ) => 20976,
                ( true, Facing::South, Half::Bottom, Shape::OuterLeft, ) => 20977,
                ( false, Facing::South, Half::Bottom, Shape::OuterLeft, ) => 20978,
                ( true, Facing::South, Half::Bottom, Shape::OuterRight, ) => 20979,
                ( false, Facing::South, Half::Bottom, Shape::OuterRight, ) => 20980,
                ( true, Facing::West, Half::Top, Shape::Straight, ) => 20981,
                ( false, Facing::West, Half::Top, Shape::Straight, ) => 20982,
                ( true, Facing::West, Half::Top, Shape::InnerLeft, ) => 20983,
                ( false, Facing::West, Half::Top, Shape::InnerLeft, ) => 20984,
                ( true, Facing::West, Half::Top, Shape::InnerRight, ) => 20985,
                ( false, Facing::West, Half::Top, Shape::InnerRight, ) => 20986,
                ( true, Facing::West, Half::Top, Shape::OuterLeft, ) => 20987,
                ( false, Facing::West, Half::Top, Shape::OuterLeft, ) => 20988,
                ( true, Facing::West, Half::Top, Shape::OuterRight, ) => 20989,
                ( false, Facing::West, Half::Top, Shape::OuterRight, ) => 20990,
                ( true, Facing::West, Half::Bottom, Shape::Straight, ) => 20991,
                ( false, Facing::West, Half::Bottom, Shape::Straight, ) => 20992,
                ( true, Facing::West, Half::Bottom, Shape::InnerLeft, ) => 20993,
                ( false, Facing::West, Half::Bottom, Shape::InnerLeft, ) => 20994,
                ( true, Facing::West, Half::Bottom, Shape::InnerRight, ) => 20995,
                ( false, Facing::West, Half::Bottom, Shape::InnerRight, ) => 20996,
                ( true, Facing::West, Half::Bottom, Shape::OuterLeft, ) => 20997,
                ( false, Facing::West, Half::Bottom, Shape::OuterLeft, ) => 20998,
                ( true, Facing::West, Half::Bottom, Shape::OuterRight, ) => 20999,
                ( false, Facing::West, Half::Bottom, Shape::OuterRight, ) => 21000,
                ( true, Facing::East, Half::Top, Shape::Straight, ) => 21001,
                ( false, Facing::East, Half::Top, Shape::Straight, ) => 21002,
                ( true, Facing::East, Half::Top, Shape::InnerLeft, ) => 21003,
                ( false, Facing::East, Half::Top, Shape::InnerLeft, ) => 21004,
                ( true, Facing::East, Half::Top, Shape::InnerRight, ) => 21005,
                ( false, Facing::East, Half::Top, Shape::InnerRight, ) => 21006,
                ( true, Facing::East, Half::Top, Shape::OuterLeft, ) => 21007,
                ( false, Facing::East, Half::Top, Shape::OuterLeft, ) => 21008,
                ( true, Facing::East, Half::Top, Shape::OuterRight, ) => 21009,
                ( false, Facing::East, Half::Top, Shape::OuterRight, ) => 21010,
                ( true, Facing::East, Half::Bottom, Shape::Straight, ) => 21011,
                ( false, Facing::East, Half::Bottom, Shape::Straight, ) => 21012,
                ( true, Facing::East, Half::Bottom, Shape::InnerLeft, ) => 21013,
                ( false, Facing::East, Half::Bottom, Shape::InnerLeft, ) => 21014,
                ( true, Facing::East, Half::Bottom, Shape::InnerRight, ) => 21015,
                ( false, Facing::East, Half::Bottom, Shape::InnerRight, ) => 21016,
                ( true, Facing::East, Half::Bottom, Shape::OuterLeft, ) => 21017,
                ( false, Facing::East, Half::Bottom, Shape::OuterLeft, ) => 21018,
                ( true, Facing::East, Half::Bottom, Shape::OuterRight, ) => 21019,
                ( false, Facing::East, Half::Bottom, Shape::OuterRight, ) => 21020,
            })
        }
    }

    impl From<PolishedBlackstoneBrickStairs> for BlockState {
        #[inline(always)]
        fn from(value : PolishedBlackstoneBrickStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedBlackstoneBrickStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedBlackstoneBrickStairs { }

    impl Block for PolishedBlackstoneBrickStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
            half : Half::Bottom,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:magenta_glazed_terracotta` block.
pub mod magenta_glazed_terracotta {
    use super::*;

    /// `minecraft:magenta_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl MagentaGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13695,
                ( Facing::South, ) => 13696,
                ( Facing::West, ) => 13697,
                ( Facing::East, ) => 13698,
            })
        }
    }

    impl From<MagentaGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : MagentaGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaGlazedTerracotta { }

    impl Block for MagentaGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:potted_red_tulip` block.
pub mod potted_red_tulip {
    use super::*;

    /// `minecraft:potted_red_tulip` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedRedTulip;

    impl PottedRedTulip {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9368)
        }
    }

    impl From<PottedRedTulip> for BlockState {
        #[inline(always)]
        fn from(value : PottedRedTulip) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedRedTulip {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedRedTulip { }

    impl Block for PottedRedTulip {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:soul_lantern` block.
pub mod soul_lantern {
    use super::*;

    /// `minecraft:soul_lantern` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SoulLantern {
        /// `hanging` state.
        pub hanging : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl SoulLantern {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.hanging, self.waterlogged, )) {
                ( true, true, ) => 19562,
                ( true, false, ) => 19563,
                ( false, true, ) => 19564,
                ( false, false, ) => 19565,
            })
        }
    }

    impl From<SoulLantern> for BlockState {
        #[inline(always)]
        fn from(value : SoulLantern) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SoulLantern {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SoulLantern { }

    impl Block for SoulLantern {
        const DEFAULT_STATE : Self = Self {
            hanging : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:potted_dark_oak_sapling` block.
pub mod potted_dark_oak_sapling {
    use super::*;

    /// `minecraft:potted_dark_oak_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedDarkOakSapling;

    impl PottedDarkOakSapling {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9359)
        }
    }

    impl From<PottedDarkOakSapling> for BlockState {
        #[inline(always)]
        fn from(value : PottedDarkOakSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedDarkOakSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedDarkOakSapling { }

    impl Block for PottedDarkOakSapling {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:pink_bed` block.
pub mod pink_bed {
    use super::*;

    /// `minecraft:pink_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkBed {
        /// `occupied` state.
        pub occupied : bool,
        /// `part` state.
        pub part : Part,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PinkBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.occupied, self.part, self.facing, )) {
                ( true, Part::Head, Facing::North, ) => 1827,
                ( true, Part::Foot, Facing::North, ) => 1828,
                ( false, Part::Head, Facing::North, ) => 1829,
                ( false, Part::Foot, Facing::North, ) => 1830,
                ( true, Part::Head, Facing::South, ) => 1831,
                ( true, Part::Foot, Facing::South, ) => 1832,
                ( false, Part::Head, Facing::South, ) => 1833,
                ( false, Part::Foot, Facing::South, ) => 1834,
                ( true, Part::Head, Facing::West, ) => 1835,
                ( true, Part::Foot, Facing::West, ) => 1836,
                ( false, Part::Head, Facing::West, ) => 1837,
                ( false, Part::Foot, Facing::West, ) => 1838,
                ( true, Part::Head, Facing::East, ) => 1839,
                ( true, Part::Foot, Facing::East, ) => 1840,
                ( false, Part::Head, Facing::East, ) => 1841,
                ( false, Part::Foot, Facing::East, ) => 1842,
            })
        }
    }

    impl From<PinkBed> for BlockState {
        #[inline(always)]
        fn from(value : PinkBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkBed { }

    impl Block for PinkBed {
        const DEFAULT_STATE : Self = Self {
            occupied : false,
            part : Part::Foot,
            facing : Facing::North,
        };
    }

}

/// `minecraft:damaged_anvil` block.
pub mod damaged_anvil {
    use super::*;

    /// `minecraft:damaged_anvil` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DamagedAnvil {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DamagedAnvil {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 9924,
                ( Facing::South, ) => 9925,
                ( Facing::West, ) => 9926,
                ( Facing::East, ) => 9927,
            })
        }
    }

    impl From<DamagedAnvil> for BlockState {
        #[inline(always)]
        fn from(value : DamagedAnvil) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DamagedAnvil {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DamagedAnvil { }

    impl Block for DamagedAnvil {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:oxidized_cut_copper_stairs` block.
pub mod oxidized_cut_copper_stairs {
    use super::*;

    /// `minecraft:oxidized_cut_copper_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OxidizedCutCopperStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl OxidizedCutCopperStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.facing, self.half, self.waterlogged, )) {
                ( Shape::Straight, Facing::North, Half::Top, true, ) => 24016,
                ( Shape::Straight, Facing::North, Half::Top, false, ) => 24017,
                ( Shape::InnerLeft, Facing::North, Half::Top, true, ) => 24018,
                ( Shape::InnerLeft, Facing::North, Half::Top, false, ) => 24019,
                ( Shape::InnerRight, Facing::North, Half::Top, true, ) => 24020,
                ( Shape::InnerRight, Facing::North, Half::Top, false, ) => 24021,
                ( Shape::OuterLeft, Facing::North, Half::Top, true, ) => 24022,
                ( Shape::OuterLeft, Facing::North, Half::Top, false, ) => 24023,
                ( Shape::OuterRight, Facing::North, Half::Top, true, ) => 24024,
                ( Shape::OuterRight, Facing::North, Half::Top, false, ) => 24025,
                ( Shape::Straight, Facing::North, Half::Bottom, true, ) => 24026,
                ( Shape::Straight, Facing::North, Half::Bottom, false, ) => 24027,
                ( Shape::InnerLeft, Facing::North, Half::Bottom, true, ) => 24028,
                ( Shape::InnerLeft, Facing::North, Half::Bottom, false, ) => 24029,
                ( Shape::InnerRight, Facing::North, Half::Bottom, true, ) => 24030,
                ( Shape::InnerRight, Facing::North, Half::Bottom, false, ) => 24031,
                ( Shape::OuterLeft, Facing::North, Half::Bottom, true, ) => 24032,
                ( Shape::OuterLeft, Facing::North, Half::Bottom, false, ) => 24033,
                ( Shape::OuterRight, Facing::North, Half::Bottom, true, ) => 24034,
                ( Shape::OuterRight, Facing::North, Half::Bottom, false, ) => 24035,
                ( Shape::Straight, Facing::South, Half::Top, true, ) => 24036,
                ( Shape::Straight, Facing::South, Half::Top, false, ) => 24037,
                ( Shape::InnerLeft, Facing::South, Half::Top, true, ) => 24038,
                ( Shape::InnerLeft, Facing::South, Half::Top, false, ) => 24039,
                ( Shape::InnerRight, Facing::South, Half::Top, true, ) => 24040,
                ( Shape::InnerRight, Facing::South, Half::Top, false, ) => 24041,
                ( Shape::OuterLeft, Facing::South, Half::Top, true, ) => 24042,
                ( Shape::OuterLeft, Facing::South, Half::Top, false, ) => 24043,
                ( Shape::OuterRight, Facing::South, Half::Top, true, ) => 24044,
                ( Shape::OuterRight, Facing::South, Half::Top, false, ) => 24045,
                ( Shape::Straight, Facing::South, Half::Bottom, true, ) => 24046,
                ( Shape::Straight, Facing::South, Half::Bottom, false, ) => 24047,
                ( Shape::InnerLeft, Facing::South, Half::Bottom, true, ) => 24048,
                ( Shape::InnerLeft, Facing::South, Half::Bottom, false, ) => 24049,
                ( Shape::InnerRight, Facing::South, Half::Bottom, true, ) => 24050,
                ( Shape::InnerRight, Facing::South, Half::Bottom, false, ) => 24051,
                ( Shape::OuterLeft, Facing::South, Half::Bottom, true, ) => 24052,
                ( Shape::OuterLeft, Facing::South, Half::Bottom, false, ) => 24053,
                ( Shape::OuterRight, Facing::South, Half::Bottom, true, ) => 24054,
                ( Shape::OuterRight, Facing::South, Half::Bottom, false, ) => 24055,
                ( Shape::Straight, Facing::West, Half::Top, true, ) => 24056,
                ( Shape::Straight, Facing::West, Half::Top, false, ) => 24057,
                ( Shape::InnerLeft, Facing::West, Half::Top, true, ) => 24058,
                ( Shape::InnerLeft, Facing::West, Half::Top, false, ) => 24059,
                ( Shape::InnerRight, Facing::West, Half::Top, true, ) => 24060,
                ( Shape::InnerRight, Facing::West, Half::Top, false, ) => 24061,
                ( Shape::OuterLeft, Facing::West, Half::Top, true, ) => 24062,
                ( Shape::OuterLeft, Facing::West, Half::Top, false, ) => 24063,
                ( Shape::OuterRight, Facing::West, Half::Top, true, ) => 24064,
                ( Shape::OuterRight, Facing::West, Half::Top, false, ) => 24065,
                ( Shape::Straight, Facing::West, Half::Bottom, true, ) => 24066,
                ( Shape::Straight, Facing::West, Half::Bottom, false, ) => 24067,
                ( Shape::InnerLeft, Facing::West, Half::Bottom, true, ) => 24068,
                ( Shape::InnerLeft, Facing::West, Half::Bottom, false, ) => 24069,
                ( Shape::InnerRight, Facing::West, Half::Bottom, true, ) => 24070,
                ( Shape::InnerRight, Facing::West, Half::Bottom, false, ) => 24071,
                ( Shape::OuterLeft, Facing::West, Half::Bottom, true, ) => 24072,
                ( Shape::OuterLeft, Facing::West, Half::Bottom, false, ) => 24073,
                ( Shape::OuterRight, Facing::West, Half::Bottom, true, ) => 24074,
                ( Shape::OuterRight, Facing::West, Half::Bottom, false, ) => 24075,
                ( Shape::Straight, Facing::East, Half::Top, true, ) => 24076,
                ( Shape::Straight, Facing::East, Half::Top, false, ) => 24077,
                ( Shape::InnerLeft, Facing::East, Half::Top, true, ) => 24078,
                ( Shape::InnerLeft, Facing::East, Half::Top, false, ) => 24079,
                ( Shape::InnerRight, Facing::East, Half::Top, true, ) => 24080,
                ( Shape::InnerRight, Facing::East, Half::Top, false, ) => 24081,
                ( Shape::OuterLeft, Facing::East, Half::Top, true, ) => 24082,
                ( Shape::OuterLeft, Facing::East, Half::Top, false, ) => 24083,
                ( Shape::OuterRight, Facing::East, Half::Top, true, ) => 24084,
                ( Shape::OuterRight, Facing::East, Half::Top, false, ) => 24085,
                ( Shape::Straight, Facing::East, Half::Bottom, true, ) => 24086,
                ( Shape::Straight, Facing::East, Half::Bottom, false, ) => 24087,
                ( Shape::InnerLeft, Facing::East, Half::Bottom, true, ) => 24088,
                ( Shape::InnerLeft, Facing::East, Half::Bottom, false, ) => 24089,
                ( Shape::InnerRight, Facing::East, Half::Bottom, true, ) => 24090,
                ( Shape::InnerRight, Facing::East, Half::Bottom, false, ) => 24091,
                ( Shape::OuterLeft, Facing::East, Half::Bottom, true, ) => 24092,
                ( Shape::OuterLeft, Facing::East, Half::Bottom, false, ) => 24093,
                ( Shape::OuterRight, Facing::East, Half::Bottom, true, ) => 24094,
                ( Shape::OuterRight, Facing::East, Half::Bottom, false, ) => 24095,
            })
        }
    }

    impl From<OxidizedCutCopperStairs> for BlockState {
        #[inline(always)]
        fn from(value : OxidizedCutCopperStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OxidizedCutCopperStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OxidizedCutCopperStairs { }

    impl Block for OxidizedCutCopperStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            facing : Facing::North,
            half : Half::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:potted_birch_sapling` block.
pub mod potted_birch_sapling {
    use super::*;

    /// `minecraft:potted_birch_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedBirchSapling;

    impl PottedBirchSapling {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9355)
        }
    }

    impl From<PottedBirchSapling> for BlockState {
        #[inline(always)]
        fn from(value : PottedBirchSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedBirchSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedBirchSapling { }

    impl Block for PottedBirchSapling {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:light_gray_shulker_box` block.
pub mod light_gray_shulker_box {
    use super::*;

    /// `minecraft:light_gray_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl LightGrayShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13639,
                ( Facing::East, ) => 13640,
                ( Facing::South, ) => 13641,
                ( Facing::West, ) => 13642,
                ( Facing::Up, ) => 13643,
                ( Facing::Down, ) => 13644,
            })
        }
    }

    impl From<LightGrayShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayShulkerBox { }

    impl Block for LightGrayShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:cyan_concrete_powder` block.
pub mod cyan_concrete_powder {
    use super::*;

    /// `minecraft:cyan_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanConcretePowder;

    impl CyanConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13776)
        }
    }

    impl From<CyanConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : CyanConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanConcretePowder { }

    impl Block for CyanConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:red_mushroom_block` block.
pub mod red_mushroom_block {
    use super::*;

    /// `minecraft:red_mushroom_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedMushroomBlock {
        /// `west` state.
        pub west : bool,
        /// `up` state.
        pub up : bool,
        /// `down` state.
        pub down : bool,
        /// `south` state.
        pub south : bool,
        /// `north` state.
        pub north : bool,
        /// `east` state.
        pub east : bool,
    }

    impl RedMushroomBlock {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.west, self.up, self.down, self.south, self.north, self.east, )) {
                ( true, true, true, true, true, true, ) => 6856,
                ( false, true, true, true, true, true, ) => 6857,
                ( true, false, true, true, true, true, ) => 6858,
                ( false, false, true, true, true, true, ) => 6859,
                ( true, true, true, false, true, true, ) => 6860,
                ( false, true, true, false, true, true, ) => 6861,
                ( true, false, true, false, true, true, ) => 6862,
                ( false, false, true, false, true, true, ) => 6863,
                ( true, true, true, true, false, true, ) => 6864,
                ( false, true, true, true, false, true, ) => 6865,
                ( true, false, true, true, false, true, ) => 6866,
                ( false, false, true, true, false, true, ) => 6867,
                ( true, true, true, false, false, true, ) => 6868,
                ( false, true, true, false, false, true, ) => 6869,
                ( true, false, true, false, false, true, ) => 6870,
                ( false, false, true, false, false, true, ) => 6871,
                ( true, true, true, true, true, false, ) => 6872,
                ( false, true, true, true, true, false, ) => 6873,
                ( true, false, true, true, true, false, ) => 6874,
                ( false, false, true, true, true, false, ) => 6875,
                ( true, true, true, false, true, false, ) => 6876,
                ( false, true, true, false, true, false, ) => 6877,
                ( true, false, true, false, true, false, ) => 6878,
                ( false, false, true, false, true, false, ) => 6879,
                ( true, true, true, true, false, false, ) => 6880,
                ( false, true, true, true, false, false, ) => 6881,
                ( true, false, true, true, false, false, ) => 6882,
                ( false, false, true, true, false, false, ) => 6883,
                ( true, true, true, false, false, false, ) => 6884,
                ( false, true, true, false, false, false, ) => 6885,
                ( true, false, true, false, false, false, ) => 6886,
                ( false, false, true, false, false, false, ) => 6887,
                ( true, true, false, true, true, true, ) => 6888,
                ( false, true, false, true, true, true, ) => 6889,
                ( true, false, false, true, true, true, ) => 6890,
                ( false, false, false, true, true, true, ) => 6891,
                ( true, true, false, false, true, true, ) => 6892,
                ( false, true, false, false, true, true, ) => 6893,
                ( true, false, false, false, true, true, ) => 6894,
                ( false, false, false, false, true, true, ) => 6895,
                ( true, true, false, true, false, true, ) => 6896,
                ( false, true, false, true, false, true, ) => 6897,
                ( true, false, false, true, false, true, ) => 6898,
                ( false, false, false, true, false, true, ) => 6899,
                ( true, true, false, false, false, true, ) => 6900,
                ( false, true, false, false, false, true, ) => 6901,
                ( true, false, false, false, false, true, ) => 6902,
                ( false, false, false, false, false, true, ) => 6903,
                ( true, true, false, true, true, false, ) => 6904,
                ( false, true, false, true, true, false, ) => 6905,
                ( true, false, false, true, true, false, ) => 6906,
                ( false, false, false, true, true, false, ) => 6907,
                ( true, true, false, false, true, false, ) => 6908,
                ( false, true, false, false, true, false, ) => 6909,
                ( true, false, false, false, true, false, ) => 6910,
                ( false, false, false, false, true, false, ) => 6911,
                ( true, true, false, true, false, false, ) => 6912,
                ( false, true, false, true, false, false, ) => 6913,
                ( true, false, false, true, false, false, ) => 6914,
                ( false, false, false, true, false, false, ) => 6915,
                ( true, true, false, false, false, false, ) => 6916,
                ( false, true, false, false, false, false, ) => 6917,
                ( true, false, false, false, false, false, ) => 6918,
                ( false, false, false, false, false, false, ) => 6919,
            })
        }
    }

    impl From<RedMushroomBlock> for BlockState {
        #[inline(always)]
        fn from(value : RedMushroomBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedMushroomBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedMushroomBlock { }

    impl Block for RedMushroomBlock {
        const DEFAULT_STATE : Self = Self {
            west : true,
            up : true,
            down : true,
            south : true,
            north : true,
            east : true,
        };
    }

}

/// `minecraft:red_nether_brick_wall` block.
pub mod red_nether_brick_wall {
    use super::*;

    /// `minecraft:red_nether_brick_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedNetherBrickWall {
        /// `up` state.
        pub up : bool,
        /// `west` state.
        pub west : West,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `east` state.
        pub east : East,
        /// `south` state.
        pub south : South,
        /// `north` state.
        pub north : North,
    }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    impl RedNetherBrickWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.up, self.west, self.waterlogged, self.east, self.south, self.north, )) {
                ( true, West::None, true, East::None, South::None, North::None, ) => 18131,
                ( true, West::Low, true, East::None, South::None, North::None, ) => 18132,
                ( true, West::Tall, true, East::None, South::None, North::None, ) => 18133,
                ( true, West::None, false, East::None, South::None, North::None, ) => 18134,
                ( true, West::Low, false, East::None, South::None, North::None, ) => 18135,
                ( true, West::Tall, false, East::None, South::None, North::None, ) => 18136,
                ( false, West::None, true, East::None, South::None, North::None, ) => 18137,
                ( false, West::Low, true, East::None, South::None, North::None, ) => 18138,
                ( false, West::Tall, true, East::None, South::None, North::None, ) => 18139,
                ( false, West::None, false, East::None, South::None, North::None, ) => 18140,
                ( false, West::Low, false, East::None, South::None, North::None, ) => 18141,
                ( false, West::Tall, false, East::None, South::None, North::None, ) => 18142,
                ( true, West::None, true, East::None, South::Low, North::None, ) => 18143,
                ( true, West::Low, true, East::None, South::Low, North::None, ) => 18144,
                ( true, West::Tall, true, East::None, South::Low, North::None, ) => 18145,
                ( true, West::None, false, East::None, South::Low, North::None, ) => 18146,
                ( true, West::Low, false, East::None, South::Low, North::None, ) => 18147,
                ( true, West::Tall, false, East::None, South::Low, North::None, ) => 18148,
                ( false, West::None, true, East::None, South::Low, North::None, ) => 18149,
                ( false, West::Low, true, East::None, South::Low, North::None, ) => 18150,
                ( false, West::Tall, true, East::None, South::Low, North::None, ) => 18151,
                ( false, West::None, false, East::None, South::Low, North::None, ) => 18152,
                ( false, West::Low, false, East::None, South::Low, North::None, ) => 18153,
                ( false, West::Tall, false, East::None, South::Low, North::None, ) => 18154,
                ( true, West::None, true, East::None, South::Tall, North::None, ) => 18155,
                ( true, West::Low, true, East::None, South::Tall, North::None, ) => 18156,
                ( true, West::Tall, true, East::None, South::Tall, North::None, ) => 18157,
                ( true, West::None, false, East::None, South::Tall, North::None, ) => 18158,
                ( true, West::Low, false, East::None, South::Tall, North::None, ) => 18159,
                ( true, West::Tall, false, East::None, South::Tall, North::None, ) => 18160,
                ( false, West::None, true, East::None, South::Tall, North::None, ) => 18161,
                ( false, West::Low, true, East::None, South::Tall, North::None, ) => 18162,
                ( false, West::Tall, true, East::None, South::Tall, North::None, ) => 18163,
                ( false, West::None, false, East::None, South::Tall, North::None, ) => 18164,
                ( false, West::Low, false, East::None, South::Tall, North::None, ) => 18165,
                ( false, West::Tall, false, East::None, South::Tall, North::None, ) => 18166,
                ( true, West::None, true, East::None, South::None, North::Low, ) => 18167,
                ( true, West::Low, true, East::None, South::None, North::Low, ) => 18168,
                ( true, West::Tall, true, East::None, South::None, North::Low, ) => 18169,
                ( true, West::None, false, East::None, South::None, North::Low, ) => 18170,
                ( true, West::Low, false, East::None, South::None, North::Low, ) => 18171,
                ( true, West::Tall, false, East::None, South::None, North::Low, ) => 18172,
                ( false, West::None, true, East::None, South::None, North::Low, ) => 18173,
                ( false, West::Low, true, East::None, South::None, North::Low, ) => 18174,
                ( false, West::Tall, true, East::None, South::None, North::Low, ) => 18175,
                ( false, West::None, false, East::None, South::None, North::Low, ) => 18176,
                ( false, West::Low, false, East::None, South::None, North::Low, ) => 18177,
                ( false, West::Tall, false, East::None, South::None, North::Low, ) => 18178,
                ( true, West::None, true, East::None, South::Low, North::Low, ) => 18179,
                ( true, West::Low, true, East::None, South::Low, North::Low, ) => 18180,
                ( true, West::Tall, true, East::None, South::Low, North::Low, ) => 18181,
                ( true, West::None, false, East::None, South::Low, North::Low, ) => 18182,
                ( true, West::Low, false, East::None, South::Low, North::Low, ) => 18183,
                ( true, West::Tall, false, East::None, South::Low, North::Low, ) => 18184,
                ( false, West::None, true, East::None, South::Low, North::Low, ) => 18185,
                ( false, West::Low, true, East::None, South::Low, North::Low, ) => 18186,
                ( false, West::Tall, true, East::None, South::Low, North::Low, ) => 18187,
                ( false, West::None, false, East::None, South::Low, North::Low, ) => 18188,
                ( false, West::Low, false, East::None, South::Low, North::Low, ) => 18189,
                ( false, West::Tall, false, East::None, South::Low, North::Low, ) => 18190,
                ( true, West::None, true, East::None, South::Tall, North::Low, ) => 18191,
                ( true, West::Low, true, East::None, South::Tall, North::Low, ) => 18192,
                ( true, West::Tall, true, East::None, South::Tall, North::Low, ) => 18193,
                ( true, West::None, false, East::None, South::Tall, North::Low, ) => 18194,
                ( true, West::Low, false, East::None, South::Tall, North::Low, ) => 18195,
                ( true, West::Tall, false, East::None, South::Tall, North::Low, ) => 18196,
                ( false, West::None, true, East::None, South::Tall, North::Low, ) => 18197,
                ( false, West::Low, true, East::None, South::Tall, North::Low, ) => 18198,
                ( false, West::Tall, true, East::None, South::Tall, North::Low, ) => 18199,
                ( false, West::None, false, East::None, South::Tall, North::Low, ) => 18200,
                ( false, West::Low, false, East::None, South::Tall, North::Low, ) => 18201,
                ( false, West::Tall, false, East::None, South::Tall, North::Low, ) => 18202,
                ( true, West::None, true, East::None, South::None, North::Tall, ) => 18203,
                ( true, West::Low, true, East::None, South::None, North::Tall, ) => 18204,
                ( true, West::Tall, true, East::None, South::None, North::Tall, ) => 18205,
                ( true, West::None, false, East::None, South::None, North::Tall, ) => 18206,
                ( true, West::Low, false, East::None, South::None, North::Tall, ) => 18207,
                ( true, West::Tall, false, East::None, South::None, North::Tall, ) => 18208,
                ( false, West::None, true, East::None, South::None, North::Tall, ) => 18209,
                ( false, West::Low, true, East::None, South::None, North::Tall, ) => 18210,
                ( false, West::Tall, true, East::None, South::None, North::Tall, ) => 18211,
                ( false, West::None, false, East::None, South::None, North::Tall, ) => 18212,
                ( false, West::Low, false, East::None, South::None, North::Tall, ) => 18213,
                ( false, West::Tall, false, East::None, South::None, North::Tall, ) => 18214,
                ( true, West::None, true, East::None, South::Low, North::Tall, ) => 18215,
                ( true, West::Low, true, East::None, South::Low, North::Tall, ) => 18216,
                ( true, West::Tall, true, East::None, South::Low, North::Tall, ) => 18217,
                ( true, West::None, false, East::None, South::Low, North::Tall, ) => 18218,
                ( true, West::Low, false, East::None, South::Low, North::Tall, ) => 18219,
                ( true, West::Tall, false, East::None, South::Low, North::Tall, ) => 18220,
                ( false, West::None, true, East::None, South::Low, North::Tall, ) => 18221,
                ( false, West::Low, true, East::None, South::Low, North::Tall, ) => 18222,
                ( false, West::Tall, true, East::None, South::Low, North::Tall, ) => 18223,
                ( false, West::None, false, East::None, South::Low, North::Tall, ) => 18224,
                ( false, West::Low, false, East::None, South::Low, North::Tall, ) => 18225,
                ( false, West::Tall, false, East::None, South::Low, North::Tall, ) => 18226,
                ( true, West::None, true, East::None, South::Tall, North::Tall, ) => 18227,
                ( true, West::Low, true, East::None, South::Tall, North::Tall, ) => 18228,
                ( true, West::Tall, true, East::None, South::Tall, North::Tall, ) => 18229,
                ( true, West::None, false, East::None, South::Tall, North::Tall, ) => 18230,
                ( true, West::Low, false, East::None, South::Tall, North::Tall, ) => 18231,
                ( true, West::Tall, false, East::None, South::Tall, North::Tall, ) => 18232,
                ( false, West::None, true, East::None, South::Tall, North::Tall, ) => 18233,
                ( false, West::Low, true, East::None, South::Tall, North::Tall, ) => 18234,
                ( false, West::Tall, true, East::None, South::Tall, North::Tall, ) => 18235,
                ( false, West::None, false, East::None, South::Tall, North::Tall, ) => 18236,
                ( false, West::Low, false, East::None, South::Tall, North::Tall, ) => 18237,
                ( false, West::Tall, false, East::None, South::Tall, North::Tall, ) => 18238,
                ( true, West::None, true, East::Low, South::None, North::None, ) => 18239,
                ( true, West::Low, true, East::Low, South::None, North::None, ) => 18240,
                ( true, West::Tall, true, East::Low, South::None, North::None, ) => 18241,
                ( true, West::None, false, East::Low, South::None, North::None, ) => 18242,
                ( true, West::Low, false, East::Low, South::None, North::None, ) => 18243,
                ( true, West::Tall, false, East::Low, South::None, North::None, ) => 18244,
                ( false, West::None, true, East::Low, South::None, North::None, ) => 18245,
                ( false, West::Low, true, East::Low, South::None, North::None, ) => 18246,
                ( false, West::Tall, true, East::Low, South::None, North::None, ) => 18247,
                ( false, West::None, false, East::Low, South::None, North::None, ) => 18248,
                ( false, West::Low, false, East::Low, South::None, North::None, ) => 18249,
                ( false, West::Tall, false, East::Low, South::None, North::None, ) => 18250,
                ( true, West::None, true, East::Low, South::Low, North::None, ) => 18251,
                ( true, West::Low, true, East::Low, South::Low, North::None, ) => 18252,
                ( true, West::Tall, true, East::Low, South::Low, North::None, ) => 18253,
                ( true, West::None, false, East::Low, South::Low, North::None, ) => 18254,
                ( true, West::Low, false, East::Low, South::Low, North::None, ) => 18255,
                ( true, West::Tall, false, East::Low, South::Low, North::None, ) => 18256,
                ( false, West::None, true, East::Low, South::Low, North::None, ) => 18257,
                ( false, West::Low, true, East::Low, South::Low, North::None, ) => 18258,
                ( false, West::Tall, true, East::Low, South::Low, North::None, ) => 18259,
                ( false, West::None, false, East::Low, South::Low, North::None, ) => 18260,
                ( false, West::Low, false, East::Low, South::Low, North::None, ) => 18261,
                ( false, West::Tall, false, East::Low, South::Low, North::None, ) => 18262,
                ( true, West::None, true, East::Low, South::Tall, North::None, ) => 18263,
                ( true, West::Low, true, East::Low, South::Tall, North::None, ) => 18264,
                ( true, West::Tall, true, East::Low, South::Tall, North::None, ) => 18265,
                ( true, West::None, false, East::Low, South::Tall, North::None, ) => 18266,
                ( true, West::Low, false, East::Low, South::Tall, North::None, ) => 18267,
                ( true, West::Tall, false, East::Low, South::Tall, North::None, ) => 18268,
                ( false, West::None, true, East::Low, South::Tall, North::None, ) => 18269,
                ( false, West::Low, true, East::Low, South::Tall, North::None, ) => 18270,
                ( false, West::Tall, true, East::Low, South::Tall, North::None, ) => 18271,
                ( false, West::None, false, East::Low, South::Tall, North::None, ) => 18272,
                ( false, West::Low, false, East::Low, South::Tall, North::None, ) => 18273,
                ( false, West::Tall, false, East::Low, South::Tall, North::None, ) => 18274,
                ( true, West::None, true, East::Low, South::None, North::Low, ) => 18275,
                ( true, West::Low, true, East::Low, South::None, North::Low, ) => 18276,
                ( true, West::Tall, true, East::Low, South::None, North::Low, ) => 18277,
                ( true, West::None, false, East::Low, South::None, North::Low, ) => 18278,
                ( true, West::Low, false, East::Low, South::None, North::Low, ) => 18279,
                ( true, West::Tall, false, East::Low, South::None, North::Low, ) => 18280,
                ( false, West::None, true, East::Low, South::None, North::Low, ) => 18281,
                ( false, West::Low, true, East::Low, South::None, North::Low, ) => 18282,
                ( false, West::Tall, true, East::Low, South::None, North::Low, ) => 18283,
                ( false, West::None, false, East::Low, South::None, North::Low, ) => 18284,
                ( false, West::Low, false, East::Low, South::None, North::Low, ) => 18285,
                ( false, West::Tall, false, East::Low, South::None, North::Low, ) => 18286,
                ( true, West::None, true, East::Low, South::Low, North::Low, ) => 18287,
                ( true, West::Low, true, East::Low, South::Low, North::Low, ) => 18288,
                ( true, West::Tall, true, East::Low, South::Low, North::Low, ) => 18289,
                ( true, West::None, false, East::Low, South::Low, North::Low, ) => 18290,
                ( true, West::Low, false, East::Low, South::Low, North::Low, ) => 18291,
                ( true, West::Tall, false, East::Low, South::Low, North::Low, ) => 18292,
                ( false, West::None, true, East::Low, South::Low, North::Low, ) => 18293,
                ( false, West::Low, true, East::Low, South::Low, North::Low, ) => 18294,
                ( false, West::Tall, true, East::Low, South::Low, North::Low, ) => 18295,
                ( false, West::None, false, East::Low, South::Low, North::Low, ) => 18296,
                ( false, West::Low, false, East::Low, South::Low, North::Low, ) => 18297,
                ( false, West::Tall, false, East::Low, South::Low, North::Low, ) => 18298,
                ( true, West::None, true, East::Low, South::Tall, North::Low, ) => 18299,
                ( true, West::Low, true, East::Low, South::Tall, North::Low, ) => 18300,
                ( true, West::Tall, true, East::Low, South::Tall, North::Low, ) => 18301,
                ( true, West::None, false, East::Low, South::Tall, North::Low, ) => 18302,
                ( true, West::Low, false, East::Low, South::Tall, North::Low, ) => 18303,
                ( true, West::Tall, false, East::Low, South::Tall, North::Low, ) => 18304,
                ( false, West::None, true, East::Low, South::Tall, North::Low, ) => 18305,
                ( false, West::Low, true, East::Low, South::Tall, North::Low, ) => 18306,
                ( false, West::Tall, true, East::Low, South::Tall, North::Low, ) => 18307,
                ( false, West::None, false, East::Low, South::Tall, North::Low, ) => 18308,
                ( false, West::Low, false, East::Low, South::Tall, North::Low, ) => 18309,
                ( false, West::Tall, false, East::Low, South::Tall, North::Low, ) => 18310,
                ( true, West::None, true, East::Low, South::None, North::Tall, ) => 18311,
                ( true, West::Low, true, East::Low, South::None, North::Tall, ) => 18312,
                ( true, West::Tall, true, East::Low, South::None, North::Tall, ) => 18313,
                ( true, West::None, false, East::Low, South::None, North::Tall, ) => 18314,
                ( true, West::Low, false, East::Low, South::None, North::Tall, ) => 18315,
                ( true, West::Tall, false, East::Low, South::None, North::Tall, ) => 18316,
                ( false, West::None, true, East::Low, South::None, North::Tall, ) => 18317,
                ( false, West::Low, true, East::Low, South::None, North::Tall, ) => 18318,
                ( false, West::Tall, true, East::Low, South::None, North::Tall, ) => 18319,
                ( false, West::None, false, East::Low, South::None, North::Tall, ) => 18320,
                ( false, West::Low, false, East::Low, South::None, North::Tall, ) => 18321,
                ( false, West::Tall, false, East::Low, South::None, North::Tall, ) => 18322,
                ( true, West::None, true, East::Low, South::Low, North::Tall, ) => 18323,
                ( true, West::Low, true, East::Low, South::Low, North::Tall, ) => 18324,
                ( true, West::Tall, true, East::Low, South::Low, North::Tall, ) => 18325,
                ( true, West::None, false, East::Low, South::Low, North::Tall, ) => 18326,
                ( true, West::Low, false, East::Low, South::Low, North::Tall, ) => 18327,
                ( true, West::Tall, false, East::Low, South::Low, North::Tall, ) => 18328,
                ( false, West::None, true, East::Low, South::Low, North::Tall, ) => 18329,
                ( false, West::Low, true, East::Low, South::Low, North::Tall, ) => 18330,
                ( false, West::Tall, true, East::Low, South::Low, North::Tall, ) => 18331,
                ( false, West::None, false, East::Low, South::Low, North::Tall, ) => 18332,
                ( false, West::Low, false, East::Low, South::Low, North::Tall, ) => 18333,
                ( false, West::Tall, false, East::Low, South::Low, North::Tall, ) => 18334,
                ( true, West::None, true, East::Low, South::Tall, North::Tall, ) => 18335,
                ( true, West::Low, true, East::Low, South::Tall, North::Tall, ) => 18336,
                ( true, West::Tall, true, East::Low, South::Tall, North::Tall, ) => 18337,
                ( true, West::None, false, East::Low, South::Tall, North::Tall, ) => 18338,
                ( true, West::Low, false, East::Low, South::Tall, North::Tall, ) => 18339,
                ( true, West::Tall, false, East::Low, South::Tall, North::Tall, ) => 18340,
                ( false, West::None, true, East::Low, South::Tall, North::Tall, ) => 18341,
                ( false, West::Low, true, East::Low, South::Tall, North::Tall, ) => 18342,
                ( false, West::Tall, true, East::Low, South::Tall, North::Tall, ) => 18343,
                ( false, West::None, false, East::Low, South::Tall, North::Tall, ) => 18344,
                ( false, West::Low, false, East::Low, South::Tall, North::Tall, ) => 18345,
                ( false, West::Tall, false, East::Low, South::Tall, North::Tall, ) => 18346,
                ( true, West::None, true, East::Tall, South::None, North::None, ) => 18347,
                ( true, West::Low, true, East::Tall, South::None, North::None, ) => 18348,
                ( true, West::Tall, true, East::Tall, South::None, North::None, ) => 18349,
                ( true, West::None, false, East::Tall, South::None, North::None, ) => 18350,
                ( true, West::Low, false, East::Tall, South::None, North::None, ) => 18351,
                ( true, West::Tall, false, East::Tall, South::None, North::None, ) => 18352,
                ( false, West::None, true, East::Tall, South::None, North::None, ) => 18353,
                ( false, West::Low, true, East::Tall, South::None, North::None, ) => 18354,
                ( false, West::Tall, true, East::Tall, South::None, North::None, ) => 18355,
                ( false, West::None, false, East::Tall, South::None, North::None, ) => 18356,
                ( false, West::Low, false, East::Tall, South::None, North::None, ) => 18357,
                ( false, West::Tall, false, East::Tall, South::None, North::None, ) => 18358,
                ( true, West::None, true, East::Tall, South::Low, North::None, ) => 18359,
                ( true, West::Low, true, East::Tall, South::Low, North::None, ) => 18360,
                ( true, West::Tall, true, East::Tall, South::Low, North::None, ) => 18361,
                ( true, West::None, false, East::Tall, South::Low, North::None, ) => 18362,
                ( true, West::Low, false, East::Tall, South::Low, North::None, ) => 18363,
                ( true, West::Tall, false, East::Tall, South::Low, North::None, ) => 18364,
                ( false, West::None, true, East::Tall, South::Low, North::None, ) => 18365,
                ( false, West::Low, true, East::Tall, South::Low, North::None, ) => 18366,
                ( false, West::Tall, true, East::Tall, South::Low, North::None, ) => 18367,
                ( false, West::None, false, East::Tall, South::Low, North::None, ) => 18368,
                ( false, West::Low, false, East::Tall, South::Low, North::None, ) => 18369,
                ( false, West::Tall, false, East::Tall, South::Low, North::None, ) => 18370,
                ( true, West::None, true, East::Tall, South::Tall, North::None, ) => 18371,
                ( true, West::Low, true, East::Tall, South::Tall, North::None, ) => 18372,
                ( true, West::Tall, true, East::Tall, South::Tall, North::None, ) => 18373,
                ( true, West::None, false, East::Tall, South::Tall, North::None, ) => 18374,
                ( true, West::Low, false, East::Tall, South::Tall, North::None, ) => 18375,
                ( true, West::Tall, false, East::Tall, South::Tall, North::None, ) => 18376,
                ( false, West::None, true, East::Tall, South::Tall, North::None, ) => 18377,
                ( false, West::Low, true, East::Tall, South::Tall, North::None, ) => 18378,
                ( false, West::Tall, true, East::Tall, South::Tall, North::None, ) => 18379,
                ( false, West::None, false, East::Tall, South::Tall, North::None, ) => 18380,
                ( false, West::Low, false, East::Tall, South::Tall, North::None, ) => 18381,
                ( false, West::Tall, false, East::Tall, South::Tall, North::None, ) => 18382,
                ( true, West::None, true, East::Tall, South::None, North::Low, ) => 18383,
                ( true, West::Low, true, East::Tall, South::None, North::Low, ) => 18384,
                ( true, West::Tall, true, East::Tall, South::None, North::Low, ) => 18385,
                ( true, West::None, false, East::Tall, South::None, North::Low, ) => 18386,
                ( true, West::Low, false, East::Tall, South::None, North::Low, ) => 18387,
                ( true, West::Tall, false, East::Tall, South::None, North::Low, ) => 18388,
                ( false, West::None, true, East::Tall, South::None, North::Low, ) => 18389,
                ( false, West::Low, true, East::Tall, South::None, North::Low, ) => 18390,
                ( false, West::Tall, true, East::Tall, South::None, North::Low, ) => 18391,
                ( false, West::None, false, East::Tall, South::None, North::Low, ) => 18392,
                ( false, West::Low, false, East::Tall, South::None, North::Low, ) => 18393,
                ( false, West::Tall, false, East::Tall, South::None, North::Low, ) => 18394,
                ( true, West::None, true, East::Tall, South::Low, North::Low, ) => 18395,
                ( true, West::Low, true, East::Tall, South::Low, North::Low, ) => 18396,
                ( true, West::Tall, true, East::Tall, South::Low, North::Low, ) => 18397,
                ( true, West::None, false, East::Tall, South::Low, North::Low, ) => 18398,
                ( true, West::Low, false, East::Tall, South::Low, North::Low, ) => 18399,
                ( true, West::Tall, false, East::Tall, South::Low, North::Low, ) => 18400,
                ( false, West::None, true, East::Tall, South::Low, North::Low, ) => 18401,
                ( false, West::Low, true, East::Tall, South::Low, North::Low, ) => 18402,
                ( false, West::Tall, true, East::Tall, South::Low, North::Low, ) => 18403,
                ( false, West::None, false, East::Tall, South::Low, North::Low, ) => 18404,
                ( false, West::Low, false, East::Tall, South::Low, North::Low, ) => 18405,
                ( false, West::Tall, false, East::Tall, South::Low, North::Low, ) => 18406,
                ( true, West::None, true, East::Tall, South::Tall, North::Low, ) => 18407,
                ( true, West::Low, true, East::Tall, South::Tall, North::Low, ) => 18408,
                ( true, West::Tall, true, East::Tall, South::Tall, North::Low, ) => 18409,
                ( true, West::None, false, East::Tall, South::Tall, North::Low, ) => 18410,
                ( true, West::Low, false, East::Tall, South::Tall, North::Low, ) => 18411,
                ( true, West::Tall, false, East::Tall, South::Tall, North::Low, ) => 18412,
                ( false, West::None, true, East::Tall, South::Tall, North::Low, ) => 18413,
                ( false, West::Low, true, East::Tall, South::Tall, North::Low, ) => 18414,
                ( false, West::Tall, true, East::Tall, South::Tall, North::Low, ) => 18415,
                ( false, West::None, false, East::Tall, South::Tall, North::Low, ) => 18416,
                ( false, West::Low, false, East::Tall, South::Tall, North::Low, ) => 18417,
                ( false, West::Tall, false, East::Tall, South::Tall, North::Low, ) => 18418,
                ( true, West::None, true, East::Tall, South::None, North::Tall, ) => 18419,
                ( true, West::Low, true, East::Tall, South::None, North::Tall, ) => 18420,
                ( true, West::Tall, true, East::Tall, South::None, North::Tall, ) => 18421,
                ( true, West::None, false, East::Tall, South::None, North::Tall, ) => 18422,
                ( true, West::Low, false, East::Tall, South::None, North::Tall, ) => 18423,
                ( true, West::Tall, false, East::Tall, South::None, North::Tall, ) => 18424,
                ( false, West::None, true, East::Tall, South::None, North::Tall, ) => 18425,
                ( false, West::Low, true, East::Tall, South::None, North::Tall, ) => 18426,
                ( false, West::Tall, true, East::Tall, South::None, North::Tall, ) => 18427,
                ( false, West::None, false, East::Tall, South::None, North::Tall, ) => 18428,
                ( false, West::Low, false, East::Tall, South::None, North::Tall, ) => 18429,
                ( false, West::Tall, false, East::Tall, South::None, North::Tall, ) => 18430,
                ( true, West::None, true, East::Tall, South::Low, North::Tall, ) => 18431,
                ( true, West::Low, true, East::Tall, South::Low, North::Tall, ) => 18432,
                ( true, West::Tall, true, East::Tall, South::Low, North::Tall, ) => 18433,
                ( true, West::None, false, East::Tall, South::Low, North::Tall, ) => 18434,
                ( true, West::Low, false, East::Tall, South::Low, North::Tall, ) => 18435,
                ( true, West::Tall, false, East::Tall, South::Low, North::Tall, ) => 18436,
                ( false, West::None, true, East::Tall, South::Low, North::Tall, ) => 18437,
                ( false, West::Low, true, East::Tall, South::Low, North::Tall, ) => 18438,
                ( false, West::Tall, true, East::Tall, South::Low, North::Tall, ) => 18439,
                ( false, West::None, false, East::Tall, South::Low, North::Tall, ) => 18440,
                ( false, West::Low, false, East::Tall, South::Low, North::Tall, ) => 18441,
                ( false, West::Tall, false, East::Tall, South::Low, North::Tall, ) => 18442,
                ( true, West::None, true, East::Tall, South::Tall, North::Tall, ) => 18443,
                ( true, West::Low, true, East::Tall, South::Tall, North::Tall, ) => 18444,
                ( true, West::Tall, true, East::Tall, South::Tall, North::Tall, ) => 18445,
                ( true, West::None, false, East::Tall, South::Tall, North::Tall, ) => 18446,
                ( true, West::Low, false, East::Tall, South::Tall, North::Tall, ) => 18447,
                ( true, West::Tall, false, East::Tall, South::Tall, North::Tall, ) => 18448,
                ( false, West::None, true, East::Tall, South::Tall, North::Tall, ) => 18449,
                ( false, West::Low, true, East::Tall, South::Tall, North::Tall, ) => 18450,
                ( false, West::Tall, true, East::Tall, South::Tall, North::Tall, ) => 18451,
                ( false, West::None, false, East::Tall, South::Tall, North::Tall, ) => 18452,
                ( false, West::Low, false, East::Tall, South::Tall, North::Tall, ) => 18453,
                ( false, West::Tall, false, East::Tall, South::Tall, North::Tall, ) => 18454,
            })
        }
    }

    impl From<RedNetherBrickWall> for BlockState {
        #[inline(always)]
        fn from(value : RedNetherBrickWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedNetherBrickWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedNetherBrickWall { }

    impl Block for RedNetherBrickWall {
        const DEFAULT_STATE : Self = Self {
            up : true,
            west : West::None,
            waterlogged : false,
            east : East::None,
            south : South::None,
            north : North::None,
        };
    }

}

/// `minecraft:netherrack` block.
pub mod netherrack {
    use super::*;

    /// `minecraft:netherrack` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Netherrack;

    impl Netherrack {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6028)
        }
    }

    impl From<Netherrack> for BlockState {
        #[inline(always)]
        fn from(value : Netherrack) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Netherrack {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Netherrack { }

    impl Block for Netherrack {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_oxidized_copper_trapdoor` block.
pub mod waxed_oxidized_copper_trapdoor {
    use super::*;

    /// `minecraft:waxed_oxidized_copper_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedOxidizedCopperTrapdoor {
        /// `powered` state.
        pub powered : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `open` state.
        pub open : bool,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl WaxedOxidizedCopperTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.waterlogged, self.facing, self.open, self.half, )) {
                ( true, true, Facing::North, true, Half::Top, ) => 25608,
                ( true, false, Facing::North, true, Half::Top, ) => 25609,
                ( false, true, Facing::North, true, Half::Top, ) => 25610,
                ( false, false, Facing::North, true, Half::Top, ) => 25611,
                ( true, true, Facing::North, false, Half::Top, ) => 25612,
                ( true, false, Facing::North, false, Half::Top, ) => 25613,
                ( false, true, Facing::North, false, Half::Top, ) => 25614,
                ( false, false, Facing::North, false, Half::Top, ) => 25615,
                ( true, true, Facing::North, true, Half::Bottom, ) => 25616,
                ( true, false, Facing::North, true, Half::Bottom, ) => 25617,
                ( false, true, Facing::North, true, Half::Bottom, ) => 25618,
                ( false, false, Facing::North, true, Half::Bottom, ) => 25619,
                ( true, true, Facing::North, false, Half::Bottom, ) => 25620,
                ( true, false, Facing::North, false, Half::Bottom, ) => 25621,
                ( false, true, Facing::North, false, Half::Bottom, ) => 25622,
                ( false, false, Facing::North, false, Half::Bottom, ) => 25623,
                ( true, true, Facing::South, true, Half::Top, ) => 25624,
                ( true, false, Facing::South, true, Half::Top, ) => 25625,
                ( false, true, Facing::South, true, Half::Top, ) => 25626,
                ( false, false, Facing::South, true, Half::Top, ) => 25627,
                ( true, true, Facing::South, false, Half::Top, ) => 25628,
                ( true, false, Facing::South, false, Half::Top, ) => 25629,
                ( false, true, Facing::South, false, Half::Top, ) => 25630,
                ( false, false, Facing::South, false, Half::Top, ) => 25631,
                ( true, true, Facing::South, true, Half::Bottom, ) => 25632,
                ( true, false, Facing::South, true, Half::Bottom, ) => 25633,
                ( false, true, Facing::South, true, Half::Bottom, ) => 25634,
                ( false, false, Facing::South, true, Half::Bottom, ) => 25635,
                ( true, true, Facing::South, false, Half::Bottom, ) => 25636,
                ( true, false, Facing::South, false, Half::Bottom, ) => 25637,
                ( false, true, Facing::South, false, Half::Bottom, ) => 25638,
                ( false, false, Facing::South, false, Half::Bottom, ) => 25639,
                ( true, true, Facing::West, true, Half::Top, ) => 25640,
                ( true, false, Facing::West, true, Half::Top, ) => 25641,
                ( false, true, Facing::West, true, Half::Top, ) => 25642,
                ( false, false, Facing::West, true, Half::Top, ) => 25643,
                ( true, true, Facing::West, false, Half::Top, ) => 25644,
                ( true, false, Facing::West, false, Half::Top, ) => 25645,
                ( false, true, Facing::West, false, Half::Top, ) => 25646,
                ( false, false, Facing::West, false, Half::Top, ) => 25647,
                ( true, true, Facing::West, true, Half::Bottom, ) => 25648,
                ( true, false, Facing::West, true, Half::Bottom, ) => 25649,
                ( false, true, Facing::West, true, Half::Bottom, ) => 25650,
                ( false, false, Facing::West, true, Half::Bottom, ) => 25651,
                ( true, true, Facing::West, false, Half::Bottom, ) => 25652,
                ( true, false, Facing::West, false, Half::Bottom, ) => 25653,
                ( false, true, Facing::West, false, Half::Bottom, ) => 25654,
                ( false, false, Facing::West, false, Half::Bottom, ) => 25655,
                ( true, true, Facing::East, true, Half::Top, ) => 25656,
                ( true, false, Facing::East, true, Half::Top, ) => 25657,
                ( false, true, Facing::East, true, Half::Top, ) => 25658,
                ( false, false, Facing::East, true, Half::Top, ) => 25659,
                ( true, true, Facing::East, false, Half::Top, ) => 25660,
                ( true, false, Facing::East, false, Half::Top, ) => 25661,
                ( false, true, Facing::East, false, Half::Top, ) => 25662,
                ( false, false, Facing::East, false, Half::Top, ) => 25663,
                ( true, true, Facing::East, true, Half::Bottom, ) => 25664,
                ( true, false, Facing::East, true, Half::Bottom, ) => 25665,
                ( false, true, Facing::East, true, Half::Bottom, ) => 25666,
                ( false, false, Facing::East, true, Half::Bottom, ) => 25667,
                ( true, true, Facing::East, false, Half::Bottom, ) => 25668,
                ( true, false, Facing::East, false, Half::Bottom, ) => 25669,
                ( false, true, Facing::East, false, Half::Bottom, ) => 25670,
                ( false, false, Facing::East, false, Half::Bottom, ) => 25671,
            })
        }
    }

    impl From<WaxedOxidizedCopperTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : WaxedOxidizedCopperTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedOxidizedCopperTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedOxidizedCopperTrapdoor { }

    impl Block for WaxedOxidizedCopperTrapdoor {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            waterlogged : false,
            facing : Facing::North,
            open : false,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:crimson_stairs` block.
pub mod crimson_stairs {
    use super::*;

    /// `minecraft:crimson_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl CrimsonStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.half, self.shape, self.waterlogged, )) {
                ( Facing::North, Half::Top, Shape::Straight, true, ) => 19995,
                ( Facing::North, Half::Top, Shape::Straight, false, ) => 19996,
                ( Facing::North, Half::Top, Shape::InnerLeft, true, ) => 19997,
                ( Facing::North, Half::Top, Shape::InnerLeft, false, ) => 19998,
                ( Facing::North, Half::Top, Shape::InnerRight, true, ) => 19999,
                ( Facing::North, Half::Top, Shape::InnerRight, false, ) => 20000,
                ( Facing::North, Half::Top, Shape::OuterLeft, true, ) => 20001,
                ( Facing::North, Half::Top, Shape::OuterLeft, false, ) => 20002,
                ( Facing::North, Half::Top, Shape::OuterRight, true, ) => 20003,
                ( Facing::North, Half::Top, Shape::OuterRight, false, ) => 20004,
                ( Facing::North, Half::Bottom, Shape::Straight, true, ) => 20005,
                ( Facing::North, Half::Bottom, Shape::Straight, false, ) => 20006,
                ( Facing::North, Half::Bottom, Shape::InnerLeft, true, ) => 20007,
                ( Facing::North, Half::Bottom, Shape::InnerLeft, false, ) => 20008,
                ( Facing::North, Half::Bottom, Shape::InnerRight, true, ) => 20009,
                ( Facing::North, Half::Bottom, Shape::InnerRight, false, ) => 20010,
                ( Facing::North, Half::Bottom, Shape::OuterLeft, true, ) => 20011,
                ( Facing::North, Half::Bottom, Shape::OuterLeft, false, ) => 20012,
                ( Facing::North, Half::Bottom, Shape::OuterRight, true, ) => 20013,
                ( Facing::North, Half::Bottom, Shape::OuterRight, false, ) => 20014,
                ( Facing::South, Half::Top, Shape::Straight, true, ) => 20015,
                ( Facing::South, Half::Top, Shape::Straight, false, ) => 20016,
                ( Facing::South, Half::Top, Shape::InnerLeft, true, ) => 20017,
                ( Facing::South, Half::Top, Shape::InnerLeft, false, ) => 20018,
                ( Facing::South, Half::Top, Shape::InnerRight, true, ) => 20019,
                ( Facing::South, Half::Top, Shape::InnerRight, false, ) => 20020,
                ( Facing::South, Half::Top, Shape::OuterLeft, true, ) => 20021,
                ( Facing::South, Half::Top, Shape::OuterLeft, false, ) => 20022,
                ( Facing::South, Half::Top, Shape::OuterRight, true, ) => 20023,
                ( Facing::South, Half::Top, Shape::OuterRight, false, ) => 20024,
                ( Facing::South, Half::Bottom, Shape::Straight, true, ) => 20025,
                ( Facing::South, Half::Bottom, Shape::Straight, false, ) => 20026,
                ( Facing::South, Half::Bottom, Shape::InnerLeft, true, ) => 20027,
                ( Facing::South, Half::Bottom, Shape::InnerLeft, false, ) => 20028,
                ( Facing::South, Half::Bottom, Shape::InnerRight, true, ) => 20029,
                ( Facing::South, Half::Bottom, Shape::InnerRight, false, ) => 20030,
                ( Facing::South, Half::Bottom, Shape::OuterLeft, true, ) => 20031,
                ( Facing::South, Half::Bottom, Shape::OuterLeft, false, ) => 20032,
                ( Facing::South, Half::Bottom, Shape::OuterRight, true, ) => 20033,
                ( Facing::South, Half::Bottom, Shape::OuterRight, false, ) => 20034,
                ( Facing::West, Half::Top, Shape::Straight, true, ) => 20035,
                ( Facing::West, Half::Top, Shape::Straight, false, ) => 20036,
                ( Facing::West, Half::Top, Shape::InnerLeft, true, ) => 20037,
                ( Facing::West, Half::Top, Shape::InnerLeft, false, ) => 20038,
                ( Facing::West, Half::Top, Shape::InnerRight, true, ) => 20039,
                ( Facing::West, Half::Top, Shape::InnerRight, false, ) => 20040,
                ( Facing::West, Half::Top, Shape::OuterLeft, true, ) => 20041,
                ( Facing::West, Half::Top, Shape::OuterLeft, false, ) => 20042,
                ( Facing::West, Half::Top, Shape::OuterRight, true, ) => 20043,
                ( Facing::West, Half::Top, Shape::OuterRight, false, ) => 20044,
                ( Facing::West, Half::Bottom, Shape::Straight, true, ) => 20045,
                ( Facing::West, Half::Bottom, Shape::Straight, false, ) => 20046,
                ( Facing::West, Half::Bottom, Shape::InnerLeft, true, ) => 20047,
                ( Facing::West, Half::Bottom, Shape::InnerLeft, false, ) => 20048,
                ( Facing::West, Half::Bottom, Shape::InnerRight, true, ) => 20049,
                ( Facing::West, Half::Bottom, Shape::InnerRight, false, ) => 20050,
                ( Facing::West, Half::Bottom, Shape::OuterLeft, true, ) => 20051,
                ( Facing::West, Half::Bottom, Shape::OuterLeft, false, ) => 20052,
                ( Facing::West, Half::Bottom, Shape::OuterRight, true, ) => 20053,
                ( Facing::West, Half::Bottom, Shape::OuterRight, false, ) => 20054,
                ( Facing::East, Half::Top, Shape::Straight, true, ) => 20055,
                ( Facing::East, Half::Top, Shape::Straight, false, ) => 20056,
                ( Facing::East, Half::Top, Shape::InnerLeft, true, ) => 20057,
                ( Facing::East, Half::Top, Shape::InnerLeft, false, ) => 20058,
                ( Facing::East, Half::Top, Shape::InnerRight, true, ) => 20059,
                ( Facing::East, Half::Top, Shape::InnerRight, false, ) => 20060,
                ( Facing::East, Half::Top, Shape::OuterLeft, true, ) => 20061,
                ( Facing::East, Half::Top, Shape::OuterLeft, false, ) => 20062,
                ( Facing::East, Half::Top, Shape::OuterRight, true, ) => 20063,
                ( Facing::East, Half::Top, Shape::OuterRight, false, ) => 20064,
                ( Facing::East, Half::Bottom, Shape::Straight, true, ) => 20065,
                ( Facing::East, Half::Bottom, Shape::Straight, false, ) => 20066,
                ( Facing::East, Half::Bottom, Shape::InnerLeft, true, ) => 20067,
                ( Facing::East, Half::Bottom, Shape::InnerLeft, false, ) => 20068,
                ( Facing::East, Half::Bottom, Shape::InnerRight, true, ) => 20069,
                ( Facing::East, Half::Bottom, Shape::InnerRight, false, ) => 20070,
                ( Facing::East, Half::Bottom, Shape::OuterLeft, true, ) => 20071,
                ( Facing::East, Half::Bottom, Shape::OuterLeft, false, ) => 20072,
                ( Facing::East, Half::Bottom, Shape::OuterRight, true, ) => 20073,
                ( Facing::East, Half::Bottom, Shape::OuterRight, false, ) => 20074,
            })
        }
    }

    impl From<CrimsonStairs> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonStairs { }

    impl Block for CrimsonStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            half : Half::Bottom,
            shape : Shape::Straight,
            waterlogged : false,
        };
    }

}

/// `minecraft:pitcher_crop` block.
pub mod pitcher_crop {
    use super::*;

    /// `minecraft:pitcher_crop` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PitcherCrop {
        /// `age` state.
        pub age : Age,
        /// `half` state.
        pub half : Half,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl PitcherCrop {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, self.half, )) {
                ( Age::N0, Half::Upper, ) => 13520,
                ( Age::N0, Half::Lower, ) => 13521,
                ( Age::N1, Half::Upper, ) => 13522,
                ( Age::N1, Half::Lower, ) => 13523,
                ( Age::N2, Half::Upper, ) => 13524,
                ( Age::N2, Half::Lower, ) => 13525,
                ( Age::N3, Half::Upper, ) => 13526,
                ( Age::N3, Half::Lower, ) => 13527,
                ( Age::N4, Half::Upper, ) => 13528,
                ( Age::N4, Half::Lower, ) => 13529,
            })
        }
    }

    impl From<PitcherCrop> for BlockState {
        #[inline(always)]
        fn from(value : PitcherCrop) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PitcherCrop {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PitcherCrop { }

    impl Block for PitcherCrop {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
            half : Half::Lower,
        };
    }

}

/// `minecraft:light_blue_glazed_terracotta` block.
pub mod light_blue_glazed_terracotta {
    use super::*;

    /// `minecraft:light_blue_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl LightBlueGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13699,
                ( Facing::South, ) => 13700,
                ( Facing::West, ) => 13701,
                ( Facing::East, ) => 13702,
            })
        }
    }

    impl From<LightBlueGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueGlazedTerracotta { }

    impl Block for LightBlueGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:gray_glazed_terracotta` block.
pub mod gray_glazed_terracotta {
    use super::*;

    /// `minecraft:gray_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl GrayGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13715,
                ( Facing::South, ) => 13716,
                ( Facing::West, ) => 13717,
                ( Facing::East, ) => 13718,
            })
        }
    }

    impl From<GrayGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : GrayGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayGlazedTerracotta { }

    impl Block for GrayGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:polished_diorite_slab` block.
pub mod polished_diorite_slab {
    use super::*;

    /// `minecraft:polished_diorite_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedDioriteSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl PolishedDioriteSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 15155,
                ( false, Kind::Top, ) => 15156,
                ( true, Kind::Bottom, ) => 15157,
                ( false, Kind::Bottom, ) => 15158,
                ( true, Kind::Double, ) => 15159,
                ( false, Kind::Double, ) => 15160,
            })
        }
    }

    impl From<PolishedDioriteSlab> for BlockState {
        #[inline(always)]
        fn from(value : PolishedDioriteSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedDioriteSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedDioriteSlab { }

    impl Block for PolishedDioriteSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:stripped_warped_hyphae` block.
pub mod stripped_warped_hyphae {
    use super::*;

    /// `minecraft:stripped_warped_hyphae` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedWarpedHyphae {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedWarpedHyphae {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 19643,
                ( Axis::Y, ) => 19644,
                ( Axis::Z, ) => 19645,
            })
        }
    }

    impl From<StrippedWarpedHyphae> for BlockState {
        #[inline(always)]
        fn from(value : StrippedWarpedHyphae) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedWarpedHyphae {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedWarpedHyphae { }

    impl Block for StrippedWarpedHyphae {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:waxed_weathered_cut_copper` block.
pub mod waxed_weathered_cut_copper {
    use super::*;

    /// `minecraft:waxed_weathered_cut_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedWeatheredCutCopper;

    impl WaxedWeatheredCutCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24365)
        }
    }

    impl From<WaxedWeatheredCutCopper> for BlockState {
        #[inline(always)]
        fn from(value : WaxedWeatheredCutCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedWeatheredCutCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedWeatheredCutCopper { }

    impl Block for WaxedWeatheredCutCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:spruce_planks` block.
pub mod spruce_planks {
    use super::*;

    /// `minecraft:spruce_planks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SprucePlanks;

    impl SprucePlanks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(16)
        }
    }

    impl From<SprucePlanks> for BlockState {
        #[inline(always)]
        fn from(value : SprucePlanks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SprucePlanks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SprucePlanks { }

    impl Block for SprucePlanks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:jungle_wall_hanging_sign` block.
pub mod jungle_wall_hanging_sign {
    use super::*;

    /// `minecraft:jungle_wall_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleWallHangingSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl JungleWallHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 5746,
                ( false, Facing::North, ) => 5747,
                ( true, Facing::South, ) => 5748,
                ( false, Facing::South, ) => 5749,
                ( true, Facing::West, ) => 5750,
                ( false, Facing::West, ) => 5751,
                ( true, Facing::East, ) => 5752,
                ( false, Facing::East, ) => 5753,
            })
        }
    }

    impl From<JungleWallHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : JungleWallHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleWallHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleWallHangingSign { }

    impl Block for JungleWallHangingSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:mangrove_leaves` block.
pub mod mangrove_leaves {
    use super::*;

    /// `minecraft:mangrove_leaves` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveLeaves {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `distance` state.
        pub distance : Distance,
        /// `persistent` state.
        pub persistent : bool,
    }

    /// `distance` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Distance {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Distance { }
    impl BlockProperty for Distance { }

    impl MangroveLeaves {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.distance, self.persistent, )) {
                ( true, Distance::N1, true, ) => 476,
                ( false, Distance::N1, true, ) => 477,
                ( true, Distance::N1, false, ) => 478,
                ( false, Distance::N1, false, ) => 479,
                ( true, Distance::N2, true, ) => 480,
                ( false, Distance::N2, true, ) => 481,
                ( true, Distance::N2, false, ) => 482,
                ( false, Distance::N2, false, ) => 483,
                ( true, Distance::N3, true, ) => 484,
                ( false, Distance::N3, true, ) => 485,
                ( true, Distance::N3, false, ) => 486,
                ( false, Distance::N3, false, ) => 487,
                ( true, Distance::N4, true, ) => 488,
                ( false, Distance::N4, true, ) => 489,
                ( true, Distance::N4, false, ) => 490,
                ( false, Distance::N4, false, ) => 491,
                ( true, Distance::N5, true, ) => 492,
                ( false, Distance::N5, true, ) => 493,
                ( true, Distance::N5, false, ) => 494,
                ( false, Distance::N5, false, ) => 495,
                ( true, Distance::N6, true, ) => 496,
                ( false, Distance::N6, true, ) => 497,
                ( true, Distance::N6, false, ) => 498,
                ( false, Distance::N6, false, ) => 499,
                ( true, Distance::N7, true, ) => 500,
                ( false, Distance::N7, true, ) => 501,
                ( true, Distance::N7, false, ) => 502,
                ( false, Distance::N7, false, ) => 503,
            })
        }
    }

    impl From<MangroveLeaves> for BlockState {
        #[inline(always)]
        fn from(value : MangroveLeaves) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveLeaves {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveLeaves { }

    impl Block for MangroveLeaves {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            distance : Distance::N7,
            persistent : false,
        };
    }

}

/// `minecraft:spruce_wall_hanging_sign` block.
pub mod spruce_wall_hanging_sign {
    use super::*;

    /// `minecraft:spruce_wall_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceWallHangingSign {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl SpruceWallHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 5714,
                ( Facing::North, false, ) => 5715,
                ( Facing::South, true, ) => 5716,
                ( Facing::South, false, ) => 5717,
                ( Facing::West, true, ) => 5718,
                ( Facing::West, false, ) => 5719,
                ( Facing::East, true, ) => 5720,
                ( Facing::East, false, ) => 5721,
            })
        }
    }

    impl From<SpruceWallHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : SpruceWallHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceWallHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceWallHangingSign { }

    impl Block for SpruceWallHangingSign {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:cherry_button` block.
pub mod cherry_button {
    use super::*;

    /// `minecraft:cherry_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryButton {
        /// `powered` state.
        pub powered : bool,
        /// `face` state.
        pub face : Face,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CherryButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.face, self.facing, )) {
                ( true, Face::Floor, Facing::North, ) => 9516,
                ( false, Face::Floor, Facing::North, ) => 9517,
                ( true, Face::Floor, Facing::South, ) => 9518,
                ( false, Face::Floor, Facing::South, ) => 9519,
                ( true, Face::Floor, Facing::West, ) => 9520,
                ( false, Face::Floor, Facing::West, ) => 9521,
                ( true, Face::Floor, Facing::East, ) => 9522,
                ( false, Face::Floor, Facing::East, ) => 9523,
                ( true, Face::Wall, Facing::North, ) => 9524,
                ( false, Face::Wall, Facing::North, ) => 9525,
                ( true, Face::Wall, Facing::South, ) => 9526,
                ( false, Face::Wall, Facing::South, ) => 9527,
                ( true, Face::Wall, Facing::West, ) => 9528,
                ( false, Face::Wall, Facing::West, ) => 9529,
                ( true, Face::Wall, Facing::East, ) => 9530,
                ( false, Face::Wall, Facing::East, ) => 9531,
                ( true, Face::Ceiling, Facing::North, ) => 9532,
                ( false, Face::Ceiling, Facing::North, ) => 9533,
                ( true, Face::Ceiling, Facing::South, ) => 9534,
                ( false, Face::Ceiling, Facing::South, ) => 9535,
                ( true, Face::Ceiling, Facing::West, ) => 9536,
                ( false, Face::Ceiling, Facing::West, ) => 9537,
                ( true, Face::Ceiling, Facing::East, ) => 9538,
                ( false, Face::Ceiling, Facing::East, ) => 9539,
            })
        }
    }

    impl From<CherryButton> for BlockState {
        #[inline(always)]
        fn from(value : CherryButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryButton { }

    impl Block for CherryButton {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            face : Face::Wall,
            facing : Facing::North,
        };
    }

}

/// `minecraft:loom` block.
pub mod loom {
    use super::*;

    /// `minecraft:loom` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Loom {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Loom {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 19459,
                ( Facing::South, ) => 19460,
                ( Facing::West, ) => 19461,
                ( Facing::East, ) => 19462,
            })
        }
    }

    impl From<Loom> for BlockState {
        #[inline(always)]
        fn from(value : Loom) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Loom {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Loom { }

    impl Block for Loom {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:red_sandstone_wall` block.
pub mod red_sandstone_wall {
    use super::*;

    /// `minecraft:red_sandstone_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedSandstoneWall {
        /// `up` state.
        pub up : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : West,
        /// `east` state.
        pub east : East,
        /// `north` state.
        pub north : North,
        /// `south` state.
        pub south : South,
    }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    impl RedSandstoneWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.up, self.waterlogged, self.west, self.east, self.north, self.south, )) {
                ( true, true, West::None, East::None, North::None, South::None, ) => 15863,
                ( true, true, West::Low, East::None, North::None, South::None, ) => 15864,
                ( true, true, West::Tall, East::None, North::None, South::None, ) => 15865,
                ( true, false, West::None, East::None, North::None, South::None, ) => 15866,
                ( true, false, West::Low, East::None, North::None, South::None, ) => 15867,
                ( true, false, West::Tall, East::None, North::None, South::None, ) => 15868,
                ( false, true, West::None, East::None, North::None, South::None, ) => 15869,
                ( false, true, West::Low, East::None, North::None, South::None, ) => 15870,
                ( false, true, West::Tall, East::None, North::None, South::None, ) => 15871,
                ( false, false, West::None, East::None, North::None, South::None, ) => 15872,
                ( false, false, West::Low, East::None, North::None, South::None, ) => 15873,
                ( false, false, West::Tall, East::None, North::None, South::None, ) => 15874,
                ( true, true, West::None, East::None, North::None, South::Low, ) => 15875,
                ( true, true, West::Low, East::None, North::None, South::Low, ) => 15876,
                ( true, true, West::Tall, East::None, North::None, South::Low, ) => 15877,
                ( true, false, West::None, East::None, North::None, South::Low, ) => 15878,
                ( true, false, West::Low, East::None, North::None, South::Low, ) => 15879,
                ( true, false, West::Tall, East::None, North::None, South::Low, ) => 15880,
                ( false, true, West::None, East::None, North::None, South::Low, ) => 15881,
                ( false, true, West::Low, East::None, North::None, South::Low, ) => 15882,
                ( false, true, West::Tall, East::None, North::None, South::Low, ) => 15883,
                ( false, false, West::None, East::None, North::None, South::Low, ) => 15884,
                ( false, false, West::Low, East::None, North::None, South::Low, ) => 15885,
                ( false, false, West::Tall, East::None, North::None, South::Low, ) => 15886,
                ( true, true, West::None, East::None, North::None, South::Tall, ) => 15887,
                ( true, true, West::Low, East::None, North::None, South::Tall, ) => 15888,
                ( true, true, West::Tall, East::None, North::None, South::Tall, ) => 15889,
                ( true, false, West::None, East::None, North::None, South::Tall, ) => 15890,
                ( true, false, West::Low, East::None, North::None, South::Tall, ) => 15891,
                ( true, false, West::Tall, East::None, North::None, South::Tall, ) => 15892,
                ( false, true, West::None, East::None, North::None, South::Tall, ) => 15893,
                ( false, true, West::Low, East::None, North::None, South::Tall, ) => 15894,
                ( false, true, West::Tall, East::None, North::None, South::Tall, ) => 15895,
                ( false, false, West::None, East::None, North::None, South::Tall, ) => 15896,
                ( false, false, West::Low, East::None, North::None, South::Tall, ) => 15897,
                ( false, false, West::Tall, East::None, North::None, South::Tall, ) => 15898,
                ( true, true, West::None, East::None, North::Low, South::None, ) => 15899,
                ( true, true, West::Low, East::None, North::Low, South::None, ) => 15900,
                ( true, true, West::Tall, East::None, North::Low, South::None, ) => 15901,
                ( true, false, West::None, East::None, North::Low, South::None, ) => 15902,
                ( true, false, West::Low, East::None, North::Low, South::None, ) => 15903,
                ( true, false, West::Tall, East::None, North::Low, South::None, ) => 15904,
                ( false, true, West::None, East::None, North::Low, South::None, ) => 15905,
                ( false, true, West::Low, East::None, North::Low, South::None, ) => 15906,
                ( false, true, West::Tall, East::None, North::Low, South::None, ) => 15907,
                ( false, false, West::None, East::None, North::Low, South::None, ) => 15908,
                ( false, false, West::Low, East::None, North::Low, South::None, ) => 15909,
                ( false, false, West::Tall, East::None, North::Low, South::None, ) => 15910,
                ( true, true, West::None, East::None, North::Low, South::Low, ) => 15911,
                ( true, true, West::Low, East::None, North::Low, South::Low, ) => 15912,
                ( true, true, West::Tall, East::None, North::Low, South::Low, ) => 15913,
                ( true, false, West::None, East::None, North::Low, South::Low, ) => 15914,
                ( true, false, West::Low, East::None, North::Low, South::Low, ) => 15915,
                ( true, false, West::Tall, East::None, North::Low, South::Low, ) => 15916,
                ( false, true, West::None, East::None, North::Low, South::Low, ) => 15917,
                ( false, true, West::Low, East::None, North::Low, South::Low, ) => 15918,
                ( false, true, West::Tall, East::None, North::Low, South::Low, ) => 15919,
                ( false, false, West::None, East::None, North::Low, South::Low, ) => 15920,
                ( false, false, West::Low, East::None, North::Low, South::Low, ) => 15921,
                ( false, false, West::Tall, East::None, North::Low, South::Low, ) => 15922,
                ( true, true, West::None, East::None, North::Low, South::Tall, ) => 15923,
                ( true, true, West::Low, East::None, North::Low, South::Tall, ) => 15924,
                ( true, true, West::Tall, East::None, North::Low, South::Tall, ) => 15925,
                ( true, false, West::None, East::None, North::Low, South::Tall, ) => 15926,
                ( true, false, West::Low, East::None, North::Low, South::Tall, ) => 15927,
                ( true, false, West::Tall, East::None, North::Low, South::Tall, ) => 15928,
                ( false, true, West::None, East::None, North::Low, South::Tall, ) => 15929,
                ( false, true, West::Low, East::None, North::Low, South::Tall, ) => 15930,
                ( false, true, West::Tall, East::None, North::Low, South::Tall, ) => 15931,
                ( false, false, West::None, East::None, North::Low, South::Tall, ) => 15932,
                ( false, false, West::Low, East::None, North::Low, South::Tall, ) => 15933,
                ( false, false, West::Tall, East::None, North::Low, South::Tall, ) => 15934,
                ( true, true, West::None, East::None, North::Tall, South::None, ) => 15935,
                ( true, true, West::Low, East::None, North::Tall, South::None, ) => 15936,
                ( true, true, West::Tall, East::None, North::Tall, South::None, ) => 15937,
                ( true, false, West::None, East::None, North::Tall, South::None, ) => 15938,
                ( true, false, West::Low, East::None, North::Tall, South::None, ) => 15939,
                ( true, false, West::Tall, East::None, North::Tall, South::None, ) => 15940,
                ( false, true, West::None, East::None, North::Tall, South::None, ) => 15941,
                ( false, true, West::Low, East::None, North::Tall, South::None, ) => 15942,
                ( false, true, West::Tall, East::None, North::Tall, South::None, ) => 15943,
                ( false, false, West::None, East::None, North::Tall, South::None, ) => 15944,
                ( false, false, West::Low, East::None, North::Tall, South::None, ) => 15945,
                ( false, false, West::Tall, East::None, North::Tall, South::None, ) => 15946,
                ( true, true, West::None, East::None, North::Tall, South::Low, ) => 15947,
                ( true, true, West::Low, East::None, North::Tall, South::Low, ) => 15948,
                ( true, true, West::Tall, East::None, North::Tall, South::Low, ) => 15949,
                ( true, false, West::None, East::None, North::Tall, South::Low, ) => 15950,
                ( true, false, West::Low, East::None, North::Tall, South::Low, ) => 15951,
                ( true, false, West::Tall, East::None, North::Tall, South::Low, ) => 15952,
                ( false, true, West::None, East::None, North::Tall, South::Low, ) => 15953,
                ( false, true, West::Low, East::None, North::Tall, South::Low, ) => 15954,
                ( false, true, West::Tall, East::None, North::Tall, South::Low, ) => 15955,
                ( false, false, West::None, East::None, North::Tall, South::Low, ) => 15956,
                ( false, false, West::Low, East::None, North::Tall, South::Low, ) => 15957,
                ( false, false, West::Tall, East::None, North::Tall, South::Low, ) => 15958,
                ( true, true, West::None, East::None, North::Tall, South::Tall, ) => 15959,
                ( true, true, West::Low, East::None, North::Tall, South::Tall, ) => 15960,
                ( true, true, West::Tall, East::None, North::Tall, South::Tall, ) => 15961,
                ( true, false, West::None, East::None, North::Tall, South::Tall, ) => 15962,
                ( true, false, West::Low, East::None, North::Tall, South::Tall, ) => 15963,
                ( true, false, West::Tall, East::None, North::Tall, South::Tall, ) => 15964,
                ( false, true, West::None, East::None, North::Tall, South::Tall, ) => 15965,
                ( false, true, West::Low, East::None, North::Tall, South::Tall, ) => 15966,
                ( false, true, West::Tall, East::None, North::Tall, South::Tall, ) => 15967,
                ( false, false, West::None, East::None, North::Tall, South::Tall, ) => 15968,
                ( false, false, West::Low, East::None, North::Tall, South::Tall, ) => 15969,
                ( false, false, West::Tall, East::None, North::Tall, South::Tall, ) => 15970,
                ( true, true, West::None, East::Low, North::None, South::None, ) => 15971,
                ( true, true, West::Low, East::Low, North::None, South::None, ) => 15972,
                ( true, true, West::Tall, East::Low, North::None, South::None, ) => 15973,
                ( true, false, West::None, East::Low, North::None, South::None, ) => 15974,
                ( true, false, West::Low, East::Low, North::None, South::None, ) => 15975,
                ( true, false, West::Tall, East::Low, North::None, South::None, ) => 15976,
                ( false, true, West::None, East::Low, North::None, South::None, ) => 15977,
                ( false, true, West::Low, East::Low, North::None, South::None, ) => 15978,
                ( false, true, West::Tall, East::Low, North::None, South::None, ) => 15979,
                ( false, false, West::None, East::Low, North::None, South::None, ) => 15980,
                ( false, false, West::Low, East::Low, North::None, South::None, ) => 15981,
                ( false, false, West::Tall, East::Low, North::None, South::None, ) => 15982,
                ( true, true, West::None, East::Low, North::None, South::Low, ) => 15983,
                ( true, true, West::Low, East::Low, North::None, South::Low, ) => 15984,
                ( true, true, West::Tall, East::Low, North::None, South::Low, ) => 15985,
                ( true, false, West::None, East::Low, North::None, South::Low, ) => 15986,
                ( true, false, West::Low, East::Low, North::None, South::Low, ) => 15987,
                ( true, false, West::Tall, East::Low, North::None, South::Low, ) => 15988,
                ( false, true, West::None, East::Low, North::None, South::Low, ) => 15989,
                ( false, true, West::Low, East::Low, North::None, South::Low, ) => 15990,
                ( false, true, West::Tall, East::Low, North::None, South::Low, ) => 15991,
                ( false, false, West::None, East::Low, North::None, South::Low, ) => 15992,
                ( false, false, West::Low, East::Low, North::None, South::Low, ) => 15993,
                ( false, false, West::Tall, East::Low, North::None, South::Low, ) => 15994,
                ( true, true, West::None, East::Low, North::None, South::Tall, ) => 15995,
                ( true, true, West::Low, East::Low, North::None, South::Tall, ) => 15996,
                ( true, true, West::Tall, East::Low, North::None, South::Tall, ) => 15997,
                ( true, false, West::None, East::Low, North::None, South::Tall, ) => 15998,
                ( true, false, West::Low, East::Low, North::None, South::Tall, ) => 15999,
                ( true, false, West::Tall, East::Low, North::None, South::Tall, ) => 16000,
                ( false, true, West::None, East::Low, North::None, South::Tall, ) => 16001,
                ( false, true, West::Low, East::Low, North::None, South::Tall, ) => 16002,
                ( false, true, West::Tall, East::Low, North::None, South::Tall, ) => 16003,
                ( false, false, West::None, East::Low, North::None, South::Tall, ) => 16004,
                ( false, false, West::Low, East::Low, North::None, South::Tall, ) => 16005,
                ( false, false, West::Tall, East::Low, North::None, South::Tall, ) => 16006,
                ( true, true, West::None, East::Low, North::Low, South::None, ) => 16007,
                ( true, true, West::Low, East::Low, North::Low, South::None, ) => 16008,
                ( true, true, West::Tall, East::Low, North::Low, South::None, ) => 16009,
                ( true, false, West::None, East::Low, North::Low, South::None, ) => 16010,
                ( true, false, West::Low, East::Low, North::Low, South::None, ) => 16011,
                ( true, false, West::Tall, East::Low, North::Low, South::None, ) => 16012,
                ( false, true, West::None, East::Low, North::Low, South::None, ) => 16013,
                ( false, true, West::Low, East::Low, North::Low, South::None, ) => 16014,
                ( false, true, West::Tall, East::Low, North::Low, South::None, ) => 16015,
                ( false, false, West::None, East::Low, North::Low, South::None, ) => 16016,
                ( false, false, West::Low, East::Low, North::Low, South::None, ) => 16017,
                ( false, false, West::Tall, East::Low, North::Low, South::None, ) => 16018,
                ( true, true, West::None, East::Low, North::Low, South::Low, ) => 16019,
                ( true, true, West::Low, East::Low, North::Low, South::Low, ) => 16020,
                ( true, true, West::Tall, East::Low, North::Low, South::Low, ) => 16021,
                ( true, false, West::None, East::Low, North::Low, South::Low, ) => 16022,
                ( true, false, West::Low, East::Low, North::Low, South::Low, ) => 16023,
                ( true, false, West::Tall, East::Low, North::Low, South::Low, ) => 16024,
                ( false, true, West::None, East::Low, North::Low, South::Low, ) => 16025,
                ( false, true, West::Low, East::Low, North::Low, South::Low, ) => 16026,
                ( false, true, West::Tall, East::Low, North::Low, South::Low, ) => 16027,
                ( false, false, West::None, East::Low, North::Low, South::Low, ) => 16028,
                ( false, false, West::Low, East::Low, North::Low, South::Low, ) => 16029,
                ( false, false, West::Tall, East::Low, North::Low, South::Low, ) => 16030,
                ( true, true, West::None, East::Low, North::Low, South::Tall, ) => 16031,
                ( true, true, West::Low, East::Low, North::Low, South::Tall, ) => 16032,
                ( true, true, West::Tall, East::Low, North::Low, South::Tall, ) => 16033,
                ( true, false, West::None, East::Low, North::Low, South::Tall, ) => 16034,
                ( true, false, West::Low, East::Low, North::Low, South::Tall, ) => 16035,
                ( true, false, West::Tall, East::Low, North::Low, South::Tall, ) => 16036,
                ( false, true, West::None, East::Low, North::Low, South::Tall, ) => 16037,
                ( false, true, West::Low, East::Low, North::Low, South::Tall, ) => 16038,
                ( false, true, West::Tall, East::Low, North::Low, South::Tall, ) => 16039,
                ( false, false, West::None, East::Low, North::Low, South::Tall, ) => 16040,
                ( false, false, West::Low, East::Low, North::Low, South::Tall, ) => 16041,
                ( false, false, West::Tall, East::Low, North::Low, South::Tall, ) => 16042,
                ( true, true, West::None, East::Low, North::Tall, South::None, ) => 16043,
                ( true, true, West::Low, East::Low, North::Tall, South::None, ) => 16044,
                ( true, true, West::Tall, East::Low, North::Tall, South::None, ) => 16045,
                ( true, false, West::None, East::Low, North::Tall, South::None, ) => 16046,
                ( true, false, West::Low, East::Low, North::Tall, South::None, ) => 16047,
                ( true, false, West::Tall, East::Low, North::Tall, South::None, ) => 16048,
                ( false, true, West::None, East::Low, North::Tall, South::None, ) => 16049,
                ( false, true, West::Low, East::Low, North::Tall, South::None, ) => 16050,
                ( false, true, West::Tall, East::Low, North::Tall, South::None, ) => 16051,
                ( false, false, West::None, East::Low, North::Tall, South::None, ) => 16052,
                ( false, false, West::Low, East::Low, North::Tall, South::None, ) => 16053,
                ( false, false, West::Tall, East::Low, North::Tall, South::None, ) => 16054,
                ( true, true, West::None, East::Low, North::Tall, South::Low, ) => 16055,
                ( true, true, West::Low, East::Low, North::Tall, South::Low, ) => 16056,
                ( true, true, West::Tall, East::Low, North::Tall, South::Low, ) => 16057,
                ( true, false, West::None, East::Low, North::Tall, South::Low, ) => 16058,
                ( true, false, West::Low, East::Low, North::Tall, South::Low, ) => 16059,
                ( true, false, West::Tall, East::Low, North::Tall, South::Low, ) => 16060,
                ( false, true, West::None, East::Low, North::Tall, South::Low, ) => 16061,
                ( false, true, West::Low, East::Low, North::Tall, South::Low, ) => 16062,
                ( false, true, West::Tall, East::Low, North::Tall, South::Low, ) => 16063,
                ( false, false, West::None, East::Low, North::Tall, South::Low, ) => 16064,
                ( false, false, West::Low, East::Low, North::Tall, South::Low, ) => 16065,
                ( false, false, West::Tall, East::Low, North::Tall, South::Low, ) => 16066,
                ( true, true, West::None, East::Low, North::Tall, South::Tall, ) => 16067,
                ( true, true, West::Low, East::Low, North::Tall, South::Tall, ) => 16068,
                ( true, true, West::Tall, East::Low, North::Tall, South::Tall, ) => 16069,
                ( true, false, West::None, East::Low, North::Tall, South::Tall, ) => 16070,
                ( true, false, West::Low, East::Low, North::Tall, South::Tall, ) => 16071,
                ( true, false, West::Tall, East::Low, North::Tall, South::Tall, ) => 16072,
                ( false, true, West::None, East::Low, North::Tall, South::Tall, ) => 16073,
                ( false, true, West::Low, East::Low, North::Tall, South::Tall, ) => 16074,
                ( false, true, West::Tall, East::Low, North::Tall, South::Tall, ) => 16075,
                ( false, false, West::None, East::Low, North::Tall, South::Tall, ) => 16076,
                ( false, false, West::Low, East::Low, North::Tall, South::Tall, ) => 16077,
                ( false, false, West::Tall, East::Low, North::Tall, South::Tall, ) => 16078,
                ( true, true, West::None, East::Tall, North::None, South::None, ) => 16079,
                ( true, true, West::Low, East::Tall, North::None, South::None, ) => 16080,
                ( true, true, West::Tall, East::Tall, North::None, South::None, ) => 16081,
                ( true, false, West::None, East::Tall, North::None, South::None, ) => 16082,
                ( true, false, West::Low, East::Tall, North::None, South::None, ) => 16083,
                ( true, false, West::Tall, East::Tall, North::None, South::None, ) => 16084,
                ( false, true, West::None, East::Tall, North::None, South::None, ) => 16085,
                ( false, true, West::Low, East::Tall, North::None, South::None, ) => 16086,
                ( false, true, West::Tall, East::Tall, North::None, South::None, ) => 16087,
                ( false, false, West::None, East::Tall, North::None, South::None, ) => 16088,
                ( false, false, West::Low, East::Tall, North::None, South::None, ) => 16089,
                ( false, false, West::Tall, East::Tall, North::None, South::None, ) => 16090,
                ( true, true, West::None, East::Tall, North::None, South::Low, ) => 16091,
                ( true, true, West::Low, East::Tall, North::None, South::Low, ) => 16092,
                ( true, true, West::Tall, East::Tall, North::None, South::Low, ) => 16093,
                ( true, false, West::None, East::Tall, North::None, South::Low, ) => 16094,
                ( true, false, West::Low, East::Tall, North::None, South::Low, ) => 16095,
                ( true, false, West::Tall, East::Tall, North::None, South::Low, ) => 16096,
                ( false, true, West::None, East::Tall, North::None, South::Low, ) => 16097,
                ( false, true, West::Low, East::Tall, North::None, South::Low, ) => 16098,
                ( false, true, West::Tall, East::Tall, North::None, South::Low, ) => 16099,
                ( false, false, West::None, East::Tall, North::None, South::Low, ) => 16100,
                ( false, false, West::Low, East::Tall, North::None, South::Low, ) => 16101,
                ( false, false, West::Tall, East::Tall, North::None, South::Low, ) => 16102,
                ( true, true, West::None, East::Tall, North::None, South::Tall, ) => 16103,
                ( true, true, West::Low, East::Tall, North::None, South::Tall, ) => 16104,
                ( true, true, West::Tall, East::Tall, North::None, South::Tall, ) => 16105,
                ( true, false, West::None, East::Tall, North::None, South::Tall, ) => 16106,
                ( true, false, West::Low, East::Tall, North::None, South::Tall, ) => 16107,
                ( true, false, West::Tall, East::Tall, North::None, South::Tall, ) => 16108,
                ( false, true, West::None, East::Tall, North::None, South::Tall, ) => 16109,
                ( false, true, West::Low, East::Tall, North::None, South::Tall, ) => 16110,
                ( false, true, West::Tall, East::Tall, North::None, South::Tall, ) => 16111,
                ( false, false, West::None, East::Tall, North::None, South::Tall, ) => 16112,
                ( false, false, West::Low, East::Tall, North::None, South::Tall, ) => 16113,
                ( false, false, West::Tall, East::Tall, North::None, South::Tall, ) => 16114,
                ( true, true, West::None, East::Tall, North::Low, South::None, ) => 16115,
                ( true, true, West::Low, East::Tall, North::Low, South::None, ) => 16116,
                ( true, true, West::Tall, East::Tall, North::Low, South::None, ) => 16117,
                ( true, false, West::None, East::Tall, North::Low, South::None, ) => 16118,
                ( true, false, West::Low, East::Tall, North::Low, South::None, ) => 16119,
                ( true, false, West::Tall, East::Tall, North::Low, South::None, ) => 16120,
                ( false, true, West::None, East::Tall, North::Low, South::None, ) => 16121,
                ( false, true, West::Low, East::Tall, North::Low, South::None, ) => 16122,
                ( false, true, West::Tall, East::Tall, North::Low, South::None, ) => 16123,
                ( false, false, West::None, East::Tall, North::Low, South::None, ) => 16124,
                ( false, false, West::Low, East::Tall, North::Low, South::None, ) => 16125,
                ( false, false, West::Tall, East::Tall, North::Low, South::None, ) => 16126,
                ( true, true, West::None, East::Tall, North::Low, South::Low, ) => 16127,
                ( true, true, West::Low, East::Tall, North::Low, South::Low, ) => 16128,
                ( true, true, West::Tall, East::Tall, North::Low, South::Low, ) => 16129,
                ( true, false, West::None, East::Tall, North::Low, South::Low, ) => 16130,
                ( true, false, West::Low, East::Tall, North::Low, South::Low, ) => 16131,
                ( true, false, West::Tall, East::Tall, North::Low, South::Low, ) => 16132,
                ( false, true, West::None, East::Tall, North::Low, South::Low, ) => 16133,
                ( false, true, West::Low, East::Tall, North::Low, South::Low, ) => 16134,
                ( false, true, West::Tall, East::Tall, North::Low, South::Low, ) => 16135,
                ( false, false, West::None, East::Tall, North::Low, South::Low, ) => 16136,
                ( false, false, West::Low, East::Tall, North::Low, South::Low, ) => 16137,
                ( false, false, West::Tall, East::Tall, North::Low, South::Low, ) => 16138,
                ( true, true, West::None, East::Tall, North::Low, South::Tall, ) => 16139,
                ( true, true, West::Low, East::Tall, North::Low, South::Tall, ) => 16140,
                ( true, true, West::Tall, East::Tall, North::Low, South::Tall, ) => 16141,
                ( true, false, West::None, East::Tall, North::Low, South::Tall, ) => 16142,
                ( true, false, West::Low, East::Tall, North::Low, South::Tall, ) => 16143,
                ( true, false, West::Tall, East::Tall, North::Low, South::Tall, ) => 16144,
                ( false, true, West::None, East::Tall, North::Low, South::Tall, ) => 16145,
                ( false, true, West::Low, East::Tall, North::Low, South::Tall, ) => 16146,
                ( false, true, West::Tall, East::Tall, North::Low, South::Tall, ) => 16147,
                ( false, false, West::None, East::Tall, North::Low, South::Tall, ) => 16148,
                ( false, false, West::Low, East::Tall, North::Low, South::Tall, ) => 16149,
                ( false, false, West::Tall, East::Tall, North::Low, South::Tall, ) => 16150,
                ( true, true, West::None, East::Tall, North::Tall, South::None, ) => 16151,
                ( true, true, West::Low, East::Tall, North::Tall, South::None, ) => 16152,
                ( true, true, West::Tall, East::Tall, North::Tall, South::None, ) => 16153,
                ( true, false, West::None, East::Tall, North::Tall, South::None, ) => 16154,
                ( true, false, West::Low, East::Tall, North::Tall, South::None, ) => 16155,
                ( true, false, West::Tall, East::Tall, North::Tall, South::None, ) => 16156,
                ( false, true, West::None, East::Tall, North::Tall, South::None, ) => 16157,
                ( false, true, West::Low, East::Tall, North::Tall, South::None, ) => 16158,
                ( false, true, West::Tall, East::Tall, North::Tall, South::None, ) => 16159,
                ( false, false, West::None, East::Tall, North::Tall, South::None, ) => 16160,
                ( false, false, West::Low, East::Tall, North::Tall, South::None, ) => 16161,
                ( false, false, West::Tall, East::Tall, North::Tall, South::None, ) => 16162,
                ( true, true, West::None, East::Tall, North::Tall, South::Low, ) => 16163,
                ( true, true, West::Low, East::Tall, North::Tall, South::Low, ) => 16164,
                ( true, true, West::Tall, East::Tall, North::Tall, South::Low, ) => 16165,
                ( true, false, West::None, East::Tall, North::Tall, South::Low, ) => 16166,
                ( true, false, West::Low, East::Tall, North::Tall, South::Low, ) => 16167,
                ( true, false, West::Tall, East::Tall, North::Tall, South::Low, ) => 16168,
                ( false, true, West::None, East::Tall, North::Tall, South::Low, ) => 16169,
                ( false, true, West::Low, East::Tall, North::Tall, South::Low, ) => 16170,
                ( false, true, West::Tall, East::Tall, North::Tall, South::Low, ) => 16171,
                ( false, false, West::None, East::Tall, North::Tall, South::Low, ) => 16172,
                ( false, false, West::Low, East::Tall, North::Tall, South::Low, ) => 16173,
                ( false, false, West::Tall, East::Tall, North::Tall, South::Low, ) => 16174,
                ( true, true, West::None, East::Tall, North::Tall, South::Tall, ) => 16175,
                ( true, true, West::Low, East::Tall, North::Tall, South::Tall, ) => 16176,
                ( true, true, West::Tall, East::Tall, North::Tall, South::Tall, ) => 16177,
                ( true, false, West::None, East::Tall, North::Tall, South::Tall, ) => 16178,
                ( true, false, West::Low, East::Tall, North::Tall, South::Tall, ) => 16179,
                ( true, false, West::Tall, East::Tall, North::Tall, South::Tall, ) => 16180,
                ( false, true, West::None, East::Tall, North::Tall, South::Tall, ) => 16181,
                ( false, true, West::Low, East::Tall, North::Tall, South::Tall, ) => 16182,
                ( false, true, West::Tall, East::Tall, North::Tall, South::Tall, ) => 16183,
                ( false, false, West::None, East::Tall, North::Tall, South::Tall, ) => 16184,
                ( false, false, West::Low, East::Tall, North::Tall, South::Tall, ) => 16185,
                ( false, false, West::Tall, East::Tall, North::Tall, South::Tall, ) => 16186,
            })
        }
    }

    impl From<RedSandstoneWall> for BlockState {
        #[inline(always)]
        fn from(value : RedSandstoneWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedSandstoneWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedSandstoneWall { }

    impl Block for RedSandstoneWall {
        const DEFAULT_STATE : Self = Self {
            up : true,
            waterlogged : false,
            west : West::None,
            east : East::None,
            north : North::None,
            south : South::None,
        };
    }

}

/// `minecraft:light_gray_candle` block.
pub mod light_gray_candle {
    use super::*;

    /// `minecraft:light_gray_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayCandle {
        /// `candles` state.
        pub candles : Candles,
        /// `lit` state.
        pub lit : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl LightGrayCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.candles, self.lit, self.waterlogged, )) {
                ( Candles::N1, true, true, ) => 21929,
                ( Candles::N1, true, false, ) => 21930,
                ( Candles::N1, false, true, ) => 21931,
                ( Candles::N1, false, false, ) => 21932,
                ( Candles::N2, true, true, ) => 21933,
                ( Candles::N2, true, false, ) => 21934,
                ( Candles::N2, false, true, ) => 21935,
                ( Candles::N2, false, false, ) => 21936,
                ( Candles::N3, true, true, ) => 21937,
                ( Candles::N3, true, false, ) => 21938,
                ( Candles::N3, false, true, ) => 21939,
                ( Candles::N3, false, false, ) => 21940,
                ( Candles::N4, true, true, ) => 21941,
                ( Candles::N4, true, false, ) => 21942,
                ( Candles::N4, false, true, ) => 21943,
                ( Candles::N4, false, false, ) => 21944,
            })
        }
    }

    impl From<LightGrayCandle> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayCandle { }

    impl Block for LightGrayCandle {
        const DEFAULT_STATE : Self = Self {
            candles : Candles::N1,
            lit : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:moss_carpet` block.
pub mod moss_carpet {
    use super::*;

    /// `minecraft:moss_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MossCarpet;

    impl MossCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(25886)
        }
    }

    impl From<MossCarpet> for BlockState {
        #[inline(always)]
        fn from(value : MossCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MossCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MossCarpet { }

    impl Block for MossCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:prismarine_brick_slab` block.
pub mod prismarine_brick_slab {
    use super::*;

    /// `minecraft:prismarine_brick_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PrismarineBrickSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl PrismarineBrickSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 11601,
                ( Kind::Top, false, ) => 11602,
                ( Kind::Bottom, true, ) => 11603,
                ( Kind::Bottom, false, ) => 11604,
                ( Kind::Double, true, ) => 11605,
                ( Kind::Double, false, ) => 11606,
            })
        }
    }

    impl From<PrismarineBrickSlab> for BlockState {
        #[inline(always)]
        fn from(value : PrismarineBrickSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PrismarineBrickSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PrismarineBrickSlab { }

    impl Block for PrismarineBrickSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:dragon_egg` block.
pub mod dragon_egg {
    use super::*;

    /// `minecraft:dragon_egg` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DragonEgg;

    impl DragonEgg {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(8200)
        }
    }

    impl From<DragonEgg> for BlockState {
        #[inline(always)]
        fn from(value : DragonEgg) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DragonEgg {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DragonEgg { }

    impl Block for DragonEgg {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:quartz_stairs` block.
pub mod quartz_stairs {
    use super::*;

    /// `minecraft:quartz_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct QuartzStairs {
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl QuartzStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.shape, self.facing, self.waterlogged, )) {
                ( Half::Top, Shape::Straight, Facing::North, true, ) => 10049,
                ( Half::Top, Shape::Straight, Facing::North, false, ) => 10050,
                ( Half::Top, Shape::InnerLeft, Facing::North, true, ) => 10051,
                ( Half::Top, Shape::InnerLeft, Facing::North, false, ) => 10052,
                ( Half::Top, Shape::InnerRight, Facing::North, true, ) => 10053,
                ( Half::Top, Shape::InnerRight, Facing::North, false, ) => 10054,
                ( Half::Top, Shape::OuterLeft, Facing::North, true, ) => 10055,
                ( Half::Top, Shape::OuterLeft, Facing::North, false, ) => 10056,
                ( Half::Top, Shape::OuterRight, Facing::North, true, ) => 10057,
                ( Half::Top, Shape::OuterRight, Facing::North, false, ) => 10058,
                ( Half::Bottom, Shape::Straight, Facing::North, true, ) => 10059,
                ( Half::Bottom, Shape::Straight, Facing::North, false, ) => 10060,
                ( Half::Bottom, Shape::InnerLeft, Facing::North, true, ) => 10061,
                ( Half::Bottom, Shape::InnerLeft, Facing::North, false, ) => 10062,
                ( Half::Bottom, Shape::InnerRight, Facing::North, true, ) => 10063,
                ( Half::Bottom, Shape::InnerRight, Facing::North, false, ) => 10064,
                ( Half::Bottom, Shape::OuterLeft, Facing::North, true, ) => 10065,
                ( Half::Bottom, Shape::OuterLeft, Facing::North, false, ) => 10066,
                ( Half::Bottom, Shape::OuterRight, Facing::North, true, ) => 10067,
                ( Half::Bottom, Shape::OuterRight, Facing::North, false, ) => 10068,
                ( Half::Top, Shape::Straight, Facing::South, true, ) => 10069,
                ( Half::Top, Shape::Straight, Facing::South, false, ) => 10070,
                ( Half::Top, Shape::InnerLeft, Facing::South, true, ) => 10071,
                ( Half::Top, Shape::InnerLeft, Facing::South, false, ) => 10072,
                ( Half::Top, Shape::InnerRight, Facing::South, true, ) => 10073,
                ( Half::Top, Shape::InnerRight, Facing::South, false, ) => 10074,
                ( Half::Top, Shape::OuterLeft, Facing::South, true, ) => 10075,
                ( Half::Top, Shape::OuterLeft, Facing::South, false, ) => 10076,
                ( Half::Top, Shape::OuterRight, Facing::South, true, ) => 10077,
                ( Half::Top, Shape::OuterRight, Facing::South, false, ) => 10078,
                ( Half::Bottom, Shape::Straight, Facing::South, true, ) => 10079,
                ( Half::Bottom, Shape::Straight, Facing::South, false, ) => 10080,
                ( Half::Bottom, Shape::InnerLeft, Facing::South, true, ) => 10081,
                ( Half::Bottom, Shape::InnerLeft, Facing::South, false, ) => 10082,
                ( Half::Bottom, Shape::InnerRight, Facing::South, true, ) => 10083,
                ( Half::Bottom, Shape::InnerRight, Facing::South, false, ) => 10084,
                ( Half::Bottom, Shape::OuterLeft, Facing::South, true, ) => 10085,
                ( Half::Bottom, Shape::OuterLeft, Facing::South, false, ) => 10086,
                ( Half::Bottom, Shape::OuterRight, Facing::South, true, ) => 10087,
                ( Half::Bottom, Shape::OuterRight, Facing::South, false, ) => 10088,
                ( Half::Top, Shape::Straight, Facing::West, true, ) => 10089,
                ( Half::Top, Shape::Straight, Facing::West, false, ) => 10090,
                ( Half::Top, Shape::InnerLeft, Facing::West, true, ) => 10091,
                ( Half::Top, Shape::InnerLeft, Facing::West, false, ) => 10092,
                ( Half::Top, Shape::InnerRight, Facing::West, true, ) => 10093,
                ( Half::Top, Shape::InnerRight, Facing::West, false, ) => 10094,
                ( Half::Top, Shape::OuterLeft, Facing::West, true, ) => 10095,
                ( Half::Top, Shape::OuterLeft, Facing::West, false, ) => 10096,
                ( Half::Top, Shape::OuterRight, Facing::West, true, ) => 10097,
                ( Half::Top, Shape::OuterRight, Facing::West, false, ) => 10098,
                ( Half::Bottom, Shape::Straight, Facing::West, true, ) => 10099,
                ( Half::Bottom, Shape::Straight, Facing::West, false, ) => 10100,
                ( Half::Bottom, Shape::InnerLeft, Facing::West, true, ) => 10101,
                ( Half::Bottom, Shape::InnerLeft, Facing::West, false, ) => 10102,
                ( Half::Bottom, Shape::InnerRight, Facing::West, true, ) => 10103,
                ( Half::Bottom, Shape::InnerRight, Facing::West, false, ) => 10104,
                ( Half::Bottom, Shape::OuterLeft, Facing::West, true, ) => 10105,
                ( Half::Bottom, Shape::OuterLeft, Facing::West, false, ) => 10106,
                ( Half::Bottom, Shape::OuterRight, Facing::West, true, ) => 10107,
                ( Half::Bottom, Shape::OuterRight, Facing::West, false, ) => 10108,
                ( Half::Top, Shape::Straight, Facing::East, true, ) => 10109,
                ( Half::Top, Shape::Straight, Facing::East, false, ) => 10110,
                ( Half::Top, Shape::InnerLeft, Facing::East, true, ) => 10111,
                ( Half::Top, Shape::InnerLeft, Facing::East, false, ) => 10112,
                ( Half::Top, Shape::InnerRight, Facing::East, true, ) => 10113,
                ( Half::Top, Shape::InnerRight, Facing::East, false, ) => 10114,
                ( Half::Top, Shape::OuterLeft, Facing::East, true, ) => 10115,
                ( Half::Top, Shape::OuterLeft, Facing::East, false, ) => 10116,
                ( Half::Top, Shape::OuterRight, Facing::East, true, ) => 10117,
                ( Half::Top, Shape::OuterRight, Facing::East, false, ) => 10118,
                ( Half::Bottom, Shape::Straight, Facing::East, true, ) => 10119,
                ( Half::Bottom, Shape::Straight, Facing::East, false, ) => 10120,
                ( Half::Bottom, Shape::InnerLeft, Facing::East, true, ) => 10121,
                ( Half::Bottom, Shape::InnerLeft, Facing::East, false, ) => 10122,
                ( Half::Bottom, Shape::InnerRight, Facing::East, true, ) => 10123,
                ( Half::Bottom, Shape::InnerRight, Facing::East, false, ) => 10124,
                ( Half::Bottom, Shape::OuterLeft, Facing::East, true, ) => 10125,
                ( Half::Bottom, Shape::OuterLeft, Facing::East, false, ) => 10126,
                ( Half::Bottom, Shape::OuterRight, Facing::East, true, ) => 10127,
                ( Half::Bottom, Shape::OuterRight, Facing::East, false, ) => 10128,
            })
        }
    }

    impl From<QuartzStairs> for BlockState {
        #[inline(always)]
        fn from(value : QuartzStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for QuartzStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for QuartzStairs { }

    impl Block for QuartzStairs {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            shape : Shape::Straight,
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:raw_gold_block` block.
pub mod raw_gold_block {
    use super::*;

    /// `minecraft:raw_gold_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RawGoldBlock;

    impl RawGoldBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27652)
        }
    }

    impl From<RawGoldBlock> for BlockState {
        #[inline(always)]
        fn from(value : RawGoldBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RawGoldBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RawGoldBlock { }

    impl Block for RawGoldBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:blue_banner` block.
pub mod blue_banner {
    use super::*;

    /// `minecraft:blue_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl BlueBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11824,
                ( Rotation::N1, ) => 11825,
                ( Rotation::N2, ) => 11826,
                ( Rotation::N3, ) => 11827,
                ( Rotation::N4, ) => 11828,
                ( Rotation::N5, ) => 11829,
                ( Rotation::N6, ) => 11830,
                ( Rotation::N7, ) => 11831,
                ( Rotation::N8, ) => 11832,
                ( Rotation::N9, ) => 11833,
                ( Rotation::N10, ) => 11834,
                ( Rotation::N11, ) => 11835,
                ( Rotation::N12, ) => 11836,
                ( Rotation::N13, ) => 11837,
                ( Rotation::N14, ) => 11838,
                ( Rotation::N15, ) => 11839,
            })
        }
    }

    impl From<BlueBanner> for BlockState {
        #[inline(always)]
        fn from(value : BlueBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueBanner { }

    impl Block for BlueBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:cracked_polished_blackstone_bricks` block.
pub mod cracked_polished_blackstone_bricks {
    use super::*;

    /// `minecraft:cracked_polished_blackstone_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrackedPolishedBlackstoneBricks;

    impl CrackedPolishedBlackstoneBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20933)
        }
    }

    impl From<CrackedPolishedBlackstoneBricks> for BlockState {
        #[inline(always)]
        fn from(value : CrackedPolishedBlackstoneBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrackedPolishedBlackstoneBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrackedPolishedBlackstoneBricks { }

    impl Block for CrackedPolishedBlackstoneBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:oak_planks` block.
pub mod oak_planks {
    use super::*;

    /// `minecraft:oak_planks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakPlanks;

    impl OakPlanks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(15)
        }
    }

    impl From<OakPlanks> for BlockState {
        #[inline(always)]
        fn from(value : OakPlanks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakPlanks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakPlanks { }

    impl Block for OakPlanks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:soul_fire` block.
pub mod soul_fire {
    use super::*;

    /// `minecraft:soul_fire` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SoulFire;

    impl SoulFire {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2918)
        }
    }

    impl From<SoulFire> for BlockState {
        #[inline(always)]
        fn from(value : SoulFire) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SoulFire {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SoulFire { }

    impl Block for SoulFire {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stone` block.
pub mod stone {
    use super::*;

    /// `minecraft:stone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Stone;

    impl Stone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(1)
        }
    }

    impl From<Stone> for BlockState {
        #[inline(always)]
        fn from(value : Stone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Stone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Stone { }

    impl Block for Stone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_oxidized_copper_grate` block.
pub mod waxed_oxidized_copper_grate {
    use super::*;

    /// `minecraft:waxed_oxidized_copper_grate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedOxidizedCopperGrate {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl WaxedOxidizedCopperGrate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 25750,
                ( false, ) => 25751,
            })
        }
    }

    impl From<WaxedOxidizedCopperGrate> for BlockState {
        #[inline(always)]
        fn from(value : WaxedOxidizedCopperGrate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedOxidizedCopperGrate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedOxidizedCopperGrate { }

    impl Block for WaxedOxidizedCopperGrate {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
        };
    }

}

/// `minecraft:jungle_button` block.
pub mod jungle_button {
    use super::*;

    /// `minecraft:jungle_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleButton {
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
        /// `face` state.
        pub face : Face,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    impl JungleButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.powered, self.face, )) {
                ( Facing::North, true, Face::Floor, ) => 9468,
                ( Facing::North, false, Face::Floor, ) => 9469,
                ( Facing::South, true, Face::Floor, ) => 9470,
                ( Facing::South, false, Face::Floor, ) => 9471,
                ( Facing::West, true, Face::Floor, ) => 9472,
                ( Facing::West, false, Face::Floor, ) => 9473,
                ( Facing::East, true, Face::Floor, ) => 9474,
                ( Facing::East, false, Face::Floor, ) => 9475,
                ( Facing::North, true, Face::Wall, ) => 9476,
                ( Facing::North, false, Face::Wall, ) => 9477,
                ( Facing::South, true, Face::Wall, ) => 9478,
                ( Facing::South, false, Face::Wall, ) => 9479,
                ( Facing::West, true, Face::Wall, ) => 9480,
                ( Facing::West, false, Face::Wall, ) => 9481,
                ( Facing::East, true, Face::Wall, ) => 9482,
                ( Facing::East, false, Face::Wall, ) => 9483,
                ( Facing::North, true, Face::Ceiling, ) => 9484,
                ( Facing::North, false, Face::Ceiling, ) => 9485,
                ( Facing::South, true, Face::Ceiling, ) => 9486,
                ( Facing::South, false, Face::Ceiling, ) => 9487,
                ( Facing::West, true, Face::Ceiling, ) => 9488,
                ( Facing::West, false, Face::Ceiling, ) => 9489,
                ( Facing::East, true, Face::Ceiling, ) => 9490,
                ( Facing::East, false, Face::Ceiling, ) => 9491,
            })
        }
    }

    impl From<JungleButton> for BlockState {
        #[inline(always)]
        fn from(value : JungleButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleButton { }

    impl Block for JungleButton {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            powered : false,
            face : Face::Wall,
        };
    }

}

/// `minecraft:piston` block.
pub mod piston {
    use super::*;

    /// `minecraft:piston` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Piston {
        /// `extended` state.
        pub extended : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Piston {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.extended, self.facing, )) {
                ( true, Facing::North, ) => 2057,
                ( true, Facing::East, ) => 2058,
                ( true, Facing::South, ) => 2059,
                ( true, Facing::West, ) => 2060,
                ( true, Facing::Up, ) => 2061,
                ( true, Facing::Down, ) => 2062,
                ( false, Facing::North, ) => 2063,
                ( false, Facing::East, ) => 2064,
                ( false, Facing::South, ) => 2065,
                ( false, Facing::West, ) => 2066,
                ( false, Facing::Up, ) => 2067,
                ( false, Facing::Down, ) => 2068,
            })
        }
    }

    impl From<Piston> for BlockState {
        #[inline(always)]
        fn from(value : Piston) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Piston {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Piston { }

    impl Block for Piston {
        const DEFAULT_STATE : Self = Self {
            extended : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:furnace` block.
pub mod furnace {
    use super::*;

    /// `minecraft:furnace` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Furnace {
        /// `facing` state.
        pub facing : Facing,
        /// `lit` state.
        pub lit : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Furnace {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.lit, )) {
                ( Facing::North, true, ) => 4358,
                ( Facing::North, false, ) => 4359,
                ( Facing::South, true, ) => 4360,
                ( Facing::South, false, ) => 4361,
                ( Facing::West, true, ) => 4362,
                ( Facing::West, false, ) => 4363,
                ( Facing::East, true, ) => 4364,
                ( Facing::East, false, ) => 4365,
            })
        }
    }

    impl From<Furnace> for BlockState {
        #[inline(always)]
        fn from(value : Furnace) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Furnace {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Furnace { }

    impl Block for Furnace {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            lit : false,
        };
    }

}

/// `minecraft:green_terracotta` block.
pub mod green_terracotta {
    use super::*;

    /// `minecraft:green_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenTerracotta;

    impl GreenTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10178)
        }
    }

    impl From<GreenTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : GreenTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenTerracotta { }

    impl Block for GreenTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:powder_snow_cauldron` block.
pub mod powder_snow_cauldron {
    use super::*;

    /// `minecraft:powder_snow_cauldron` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PowderSnowCauldron {
        /// `level` state.
        pub level : Level,
    }

    /// `level` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Level {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
    }
    impl crate::Sealed for Level { }
    impl BlockProperty for Level { }

    impl PowderSnowCauldron {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.level, )) {
                ( Level::N1, ) => 8187,
                ( Level::N2, ) => 8188,
                ( Level::N3, ) => 8189,
            })
        }
    }

    impl From<PowderSnowCauldron> for BlockState {
        #[inline(always)]
        fn from(value : PowderSnowCauldron) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PowderSnowCauldron {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PowderSnowCauldron { }

    impl Block for PowderSnowCauldron {
        const DEFAULT_STATE : Self = Self {
            level : Level::N1,
        };
    }

}

/// `minecraft:sandstone_wall` block.
pub mod sandstone_wall {
    use super::*;

    /// `minecraft:sandstone_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SandstoneWall {
        /// `up` state.
        pub up : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `north` state.
        pub north : North,
        /// `south` state.
        pub south : South,
        /// `west` state.
        pub west : West,
        /// `east` state.
        pub east : East,
    }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    impl SandstoneWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.up, self.waterlogged, self.north, self.south, self.west, self.east, )) {
                ( true, true, North::None, South::None, West::None, East::None, ) => 18455,
                ( true, true, North::None, South::None, West::Low, East::None, ) => 18456,
                ( true, true, North::None, South::None, West::Tall, East::None, ) => 18457,
                ( true, false, North::None, South::None, West::None, East::None, ) => 18458,
                ( true, false, North::None, South::None, West::Low, East::None, ) => 18459,
                ( true, false, North::None, South::None, West::Tall, East::None, ) => 18460,
                ( false, true, North::None, South::None, West::None, East::None, ) => 18461,
                ( false, true, North::None, South::None, West::Low, East::None, ) => 18462,
                ( false, true, North::None, South::None, West::Tall, East::None, ) => 18463,
                ( false, false, North::None, South::None, West::None, East::None, ) => 18464,
                ( false, false, North::None, South::None, West::Low, East::None, ) => 18465,
                ( false, false, North::None, South::None, West::Tall, East::None, ) => 18466,
                ( true, true, North::None, South::Low, West::None, East::None, ) => 18467,
                ( true, true, North::None, South::Low, West::Low, East::None, ) => 18468,
                ( true, true, North::None, South::Low, West::Tall, East::None, ) => 18469,
                ( true, false, North::None, South::Low, West::None, East::None, ) => 18470,
                ( true, false, North::None, South::Low, West::Low, East::None, ) => 18471,
                ( true, false, North::None, South::Low, West::Tall, East::None, ) => 18472,
                ( false, true, North::None, South::Low, West::None, East::None, ) => 18473,
                ( false, true, North::None, South::Low, West::Low, East::None, ) => 18474,
                ( false, true, North::None, South::Low, West::Tall, East::None, ) => 18475,
                ( false, false, North::None, South::Low, West::None, East::None, ) => 18476,
                ( false, false, North::None, South::Low, West::Low, East::None, ) => 18477,
                ( false, false, North::None, South::Low, West::Tall, East::None, ) => 18478,
                ( true, true, North::None, South::Tall, West::None, East::None, ) => 18479,
                ( true, true, North::None, South::Tall, West::Low, East::None, ) => 18480,
                ( true, true, North::None, South::Tall, West::Tall, East::None, ) => 18481,
                ( true, false, North::None, South::Tall, West::None, East::None, ) => 18482,
                ( true, false, North::None, South::Tall, West::Low, East::None, ) => 18483,
                ( true, false, North::None, South::Tall, West::Tall, East::None, ) => 18484,
                ( false, true, North::None, South::Tall, West::None, East::None, ) => 18485,
                ( false, true, North::None, South::Tall, West::Low, East::None, ) => 18486,
                ( false, true, North::None, South::Tall, West::Tall, East::None, ) => 18487,
                ( false, false, North::None, South::Tall, West::None, East::None, ) => 18488,
                ( false, false, North::None, South::Tall, West::Low, East::None, ) => 18489,
                ( false, false, North::None, South::Tall, West::Tall, East::None, ) => 18490,
                ( true, true, North::Low, South::None, West::None, East::None, ) => 18491,
                ( true, true, North::Low, South::None, West::Low, East::None, ) => 18492,
                ( true, true, North::Low, South::None, West::Tall, East::None, ) => 18493,
                ( true, false, North::Low, South::None, West::None, East::None, ) => 18494,
                ( true, false, North::Low, South::None, West::Low, East::None, ) => 18495,
                ( true, false, North::Low, South::None, West::Tall, East::None, ) => 18496,
                ( false, true, North::Low, South::None, West::None, East::None, ) => 18497,
                ( false, true, North::Low, South::None, West::Low, East::None, ) => 18498,
                ( false, true, North::Low, South::None, West::Tall, East::None, ) => 18499,
                ( false, false, North::Low, South::None, West::None, East::None, ) => 18500,
                ( false, false, North::Low, South::None, West::Low, East::None, ) => 18501,
                ( false, false, North::Low, South::None, West::Tall, East::None, ) => 18502,
                ( true, true, North::Low, South::Low, West::None, East::None, ) => 18503,
                ( true, true, North::Low, South::Low, West::Low, East::None, ) => 18504,
                ( true, true, North::Low, South::Low, West::Tall, East::None, ) => 18505,
                ( true, false, North::Low, South::Low, West::None, East::None, ) => 18506,
                ( true, false, North::Low, South::Low, West::Low, East::None, ) => 18507,
                ( true, false, North::Low, South::Low, West::Tall, East::None, ) => 18508,
                ( false, true, North::Low, South::Low, West::None, East::None, ) => 18509,
                ( false, true, North::Low, South::Low, West::Low, East::None, ) => 18510,
                ( false, true, North::Low, South::Low, West::Tall, East::None, ) => 18511,
                ( false, false, North::Low, South::Low, West::None, East::None, ) => 18512,
                ( false, false, North::Low, South::Low, West::Low, East::None, ) => 18513,
                ( false, false, North::Low, South::Low, West::Tall, East::None, ) => 18514,
                ( true, true, North::Low, South::Tall, West::None, East::None, ) => 18515,
                ( true, true, North::Low, South::Tall, West::Low, East::None, ) => 18516,
                ( true, true, North::Low, South::Tall, West::Tall, East::None, ) => 18517,
                ( true, false, North::Low, South::Tall, West::None, East::None, ) => 18518,
                ( true, false, North::Low, South::Tall, West::Low, East::None, ) => 18519,
                ( true, false, North::Low, South::Tall, West::Tall, East::None, ) => 18520,
                ( false, true, North::Low, South::Tall, West::None, East::None, ) => 18521,
                ( false, true, North::Low, South::Tall, West::Low, East::None, ) => 18522,
                ( false, true, North::Low, South::Tall, West::Tall, East::None, ) => 18523,
                ( false, false, North::Low, South::Tall, West::None, East::None, ) => 18524,
                ( false, false, North::Low, South::Tall, West::Low, East::None, ) => 18525,
                ( false, false, North::Low, South::Tall, West::Tall, East::None, ) => 18526,
                ( true, true, North::Tall, South::None, West::None, East::None, ) => 18527,
                ( true, true, North::Tall, South::None, West::Low, East::None, ) => 18528,
                ( true, true, North::Tall, South::None, West::Tall, East::None, ) => 18529,
                ( true, false, North::Tall, South::None, West::None, East::None, ) => 18530,
                ( true, false, North::Tall, South::None, West::Low, East::None, ) => 18531,
                ( true, false, North::Tall, South::None, West::Tall, East::None, ) => 18532,
                ( false, true, North::Tall, South::None, West::None, East::None, ) => 18533,
                ( false, true, North::Tall, South::None, West::Low, East::None, ) => 18534,
                ( false, true, North::Tall, South::None, West::Tall, East::None, ) => 18535,
                ( false, false, North::Tall, South::None, West::None, East::None, ) => 18536,
                ( false, false, North::Tall, South::None, West::Low, East::None, ) => 18537,
                ( false, false, North::Tall, South::None, West::Tall, East::None, ) => 18538,
                ( true, true, North::Tall, South::Low, West::None, East::None, ) => 18539,
                ( true, true, North::Tall, South::Low, West::Low, East::None, ) => 18540,
                ( true, true, North::Tall, South::Low, West::Tall, East::None, ) => 18541,
                ( true, false, North::Tall, South::Low, West::None, East::None, ) => 18542,
                ( true, false, North::Tall, South::Low, West::Low, East::None, ) => 18543,
                ( true, false, North::Tall, South::Low, West::Tall, East::None, ) => 18544,
                ( false, true, North::Tall, South::Low, West::None, East::None, ) => 18545,
                ( false, true, North::Tall, South::Low, West::Low, East::None, ) => 18546,
                ( false, true, North::Tall, South::Low, West::Tall, East::None, ) => 18547,
                ( false, false, North::Tall, South::Low, West::None, East::None, ) => 18548,
                ( false, false, North::Tall, South::Low, West::Low, East::None, ) => 18549,
                ( false, false, North::Tall, South::Low, West::Tall, East::None, ) => 18550,
                ( true, true, North::Tall, South::Tall, West::None, East::None, ) => 18551,
                ( true, true, North::Tall, South::Tall, West::Low, East::None, ) => 18552,
                ( true, true, North::Tall, South::Tall, West::Tall, East::None, ) => 18553,
                ( true, false, North::Tall, South::Tall, West::None, East::None, ) => 18554,
                ( true, false, North::Tall, South::Tall, West::Low, East::None, ) => 18555,
                ( true, false, North::Tall, South::Tall, West::Tall, East::None, ) => 18556,
                ( false, true, North::Tall, South::Tall, West::None, East::None, ) => 18557,
                ( false, true, North::Tall, South::Tall, West::Low, East::None, ) => 18558,
                ( false, true, North::Tall, South::Tall, West::Tall, East::None, ) => 18559,
                ( false, false, North::Tall, South::Tall, West::None, East::None, ) => 18560,
                ( false, false, North::Tall, South::Tall, West::Low, East::None, ) => 18561,
                ( false, false, North::Tall, South::Tall, West::Tall, East::None, ) => 18562,
                ( true, true, North::None, South::None, West::None, East::Low, ) => 18563,
                ( true, true, North::None, South::None, West::Low, East::Low, ) => 18564,
                ( true, true, North::None, South::None, West::Tall, East::Low, ) => 18565,
                ( true, false, North::None, South::None, West::None, East::Low, ) => 18566,
                ( true, false, North::None, South::None, West::Low, East::Low, ) => 18567,
                ( true, false, North::None, South::None, West::Tall, East::Low, ) => 18568,
                ( false, true, North::None, South::None, West::None, East::Low, ) => 18569,
                ( false, true, North::None, South::None, West::Low, East::Low, ) => 18570,
                ( false, true, North::None, South::None, West::Tall, East::Low, ) => 18571,
                ( false, false, North::None, South::None, West::None, East::Low, ) => 18572,
                ( false, false, North::None, South::None, West::Low, East::Low, ) => 18573,
                ( false, false, North::None, South::None, West::Tall, East::Low, ) => 18574,
                ( true, true, North::None, South::Low, West::None, East::Low, ) => 18575,
                ( true, true, North::None, South::Low, West::Low, East::Low, ) => 18576,
                ( true, true, North::None, South::Low, West::Tall, East::Low, ) => 18577,
                ( true, false, North::None, South::Low, West::None, East::Low, ) => 18578,
                ( true, false, North::None, South::Low, West::Low, East::Low, ) => 18579,
                ( true, false, North::None, South::Low, West::Tall, East::Low, ) => 18580,
                ( false, true, North::None, South::Low, West::None, East::Low, ) => 18581,
                ( false, true, North::None, South::Low, West::Low, East::Low, ) => 18582,
                ( false, true, North::None, South::Low, West::Tall, East::Low, ) => 18583,
                ( false, false, North::None, South::Low, West::None, East::Low, ) => 18584,
                ( false, false, North::None, South::Low, West::Low, East::Low, ) => 18585,
                ( false, false, North::None, South::Low, West::Tall, East::Low, ) => 18586,
                ( true, true, North::None, South::Tall, West::None, East::Low, ) => 18587,
                ( true, true, North::None, South::Tall, West::Low, East::Low, ) => 18588,
                ( true, true, North::None, South::Tall, West::Tall, East::Low, ) => 18589,
                ( true, false, North::None, South::Tall, West::None, East::Low, ) => 18590,
                ( true, false, North::None, South::Tall, West::Low, East::Low, ) => 18591,
                ( true, false, North::None, South::Tall, West::Tall, East::Low, ) => 18592,
                ( false, true, North::None, South::Tall, West::None, East::Low, ) => 18593,
                ( false, true, North::None, South::Tall, West::Low, East::Low, ) => 18594,
                ( false, true, North::None, South::Tall, West::Tall, East::Low, ) => 18595,
                ( false, false, North::None, South::Tall, West::None, East::Low, ) => 18596,
                ( false, false, North::None, South::Tall, West::Low, East::Low, ) => 18597,
                ( false, false, North::None, South::Tall, West::Tall, East::Low, ) => 18598,
                ( true, true, North::Low, South::None, West::None, East::Low, ) => 18599,
                ( true, true, North::Low, South::None, West::Low, East::Low, ) => 18600,
                ( true, true, North::Low, South::None, West::Tall, East::Low, ) => 18601,
                ( true, false, North::Low, South::None, West::None, East::Low, ) => 18602,
                ( true, false, North::Low, South::None, West::Low, East::Low, ) => 18603,
                ( true, false, North::Low, South::None, West::Tall, East::Low, ) => 18604,
                ( false, true, North::Low, South::None, West::None, East::Low, ) => 18605,
                ( false, true, North::Low, South::None, West::Low, East::Low, ) => 18606,
                ( false, true, North::Low, South::None, West::Tall, East::Low, ) => 18607,
                ( false, false, North::Low, South::None, West::None, East::Low, ) => 18608,
                ( false, false, North::Low, South::None, West::Low, East::Low, ) => 18609,
                ( false, false, North::Low, South::None, West::Tall, East::Low, ) => 18610,
                ( true, true, North::Low, South::Low, West::None, East::Low, ) => 18611,
                ( true, true, North::Low, South::Low, West::Low, East::Low, ) => 18612,
                ( true, true, North::Low, South::Low, West::Tall, East::Low, ) => 18613,
                ( true, false, North::Low, South::Low, West::None, East::Low, ) => 18614,
                ( true, false, North::Low, South::Low, West::Low, East::Low, ) => 18615,
                ( true, false, North::Low, South::Low, West::Tall, East::Low, ) => 18616,
                ( false, true, North::Low, South::Low, West::None, East::Low, ) => 18617,
                ( false, true, North::Low, South::Low, West::Low, East::Low, ) => 18618,
                ( false, true, North::Low, South::Low, West::Tall, East::Low, ) => 18619,
                ( false, false, North::Low, South::Low, West::None, East::Low, ) => 18620,
                ( false, false, North::Low, South::Low, West::Low, East::Low, ) => 18621,
                ( false, false, North::Low, South::Low, West::Tall, East::Low, ) => 18622,
                ( true, true, North::Low, South::Tall, West::None, East::Low, ) => 18623,
                ( true, true, North::Low, South::Tall, West::Low, East::Low, ) => 18624,
                ( true, true, North::Low, South::Tall, West::Tall, East::Low, ) => 18625,
                ( true, false, North::Low, South::Tall, West::None, East::Low, ) => 18626,
                ( true, false, North::Low, South::Tall, West::Low, East::Low, ) => 18627,
                ( true, false, North::Low, South::Tall, West::Tall, East::Low, ) => 18628,
                ( false, true, North::Low, South::Tall, West::None, East::Low, ) => 18629,
                ( false, true, North::Low, South::Tall, West::Low, East::Low, ) => 18630,
                ( false, true, North::Low, South::Tall, West::Tall, East::Low, ) => 18631,
                ( false, false, North::Low, South::Tall, West::None, East::Low, ) => 18632,
                ( false, false, North::Low, South::Tall, West::Low, East::Low, ) => 18633,
                ( false, false, North::Low, South::Tall, West::Tall, East::Low, ) => 18634,
                ( true, true, North::Tall, South::None, West::None, East::Low, ) => 18635,
                ( true, true, North::Tall, South::None, West::Low, East::Low, ) => 18636,
                ( true, true, North::Tall, South::None, West::Tall, East::Low, ) => 18637,
                ( true, false, North::Tall, South::None, West::None, East::Low, ) => 18638,
                ( true, false, North::Tall, South::None, West::Low, East::Low, ) => 18639,
                ( true, false, North::Tall, South::None, West::Tall, East::Low, ) => 18640,
                ( false, true, North::Tall, South::None, West::None, East::Low, ) => 18641,
                ( false, true, North::Tall, South::None, West::Low, East::Low, ) => 18642,
                ( false, true, North::Tall, South::None, West::Tall, East::Low, ) => 18643,
                ( false, false, North::Tall, South::None, West::None, East::Low, ) => 18644,
                ( false, false, North::Tall, South::None, West::Low, East::Low, ) => 18645,
                ( false, false, North::Tall, South::None, West::Tall, East::Low, ) => 18646,
                ( true, true, North::Tall, South::Low, West::None, East::Low, ) => 18647,
                ( true, true, North::Tall, South::Low, West::Low, East::Low, ) => 18648,
                ( true, true, North::Tall, South::Low, West::Tall, East::Low, ) => 18649,
                ( true, false, North::Tall, South::Low, West::None, East::Low, ) => 18650,
                ( true, false, North::Tall, South::Low, West::Low, East::Low, ) => 18651,
                ( true, false, North::Tall, South::Low, West::Tall, East::Low, ) => 18652,
                ( false, true, North::Tall, South::Low, West::None, East::Low, ) => 18653,
                ( false, true, North::Tall, South::Low, West::Low, East::Low, ) => 18654,
                ( false, true, North::Tall, South::Low, West::Tall, East::Low, ) => 18655,
                ( false, false, North::Tall, South::Low, West::None, East::Low, ) => 18656,
                ( false, false, North::Tall, South::Low, West::Low, East::Low, ) => 18657,
                ( false, false, North::Tall, South::Low, West::Tall, East::Low, ) => 18658,
                ( true, true, North::Tall, South::Tall, West::None, East::Low, ) => 18659,
                ( true, true, North::Tall, South::Tall, West::Low, East::Low, ) => 18660,
                ( true, true, North::Tall, South::Tall, West::Tall, East::Low, ) => 18661,
                ( true, false, North::Tall, South::Tall, West::None, East::Low, ) => 18662,
                ( true, false, North::Tall, South::Tall, West::Low, East::Low, ) => 18663,
                ( true, false, North::Tall, South::Tall, West::Tall, East::Low, ) => 18664,
                ( false, true, North::Tall, South::Tall, West::None, East::Low, ) => 18665,
                ( false, true, North::Tall, South::Tall, West::Low, East::Low, ) => 18666,
                ( false, true, North::Tall, South::Tall, West::Tall, East::Low, ) => 18667,
                ( false, false, North::Tall, South::Tall, West::None, East::Low, ) => 18668,
                ( false, false, North::Tall, South::Tall, West::Low, East::Low, ) => 18669,
                ( false, false, North::Tall, South::Tall, West::Tall, East::Low, ) => 18670,
                ( true, true, North::None, South::None, West::None, East::Tall, ) => 18671,
                ( true, true, North::None, South::None, West::Low, East::Tall, ) => 18672,
                ( true, true, North::None, South::None, West::Tall, East::Tall, ) => 18673,
                ( true, false, North::None, South::None, West::None, East::Tall, ) => 18674,
                ( true, false, North::None, South::None, West::Low, East::Tall, ) => 18675,
                ( true, false, North::None, South::None, West::Tall, East::Tall, ) => 18676,
                ( false, true, North::None, South::None, West::None, East::Tall, ) => 18677,
                ( false, true, North::None, South::None, West::Low, East::Tall, ) => 18678,
                ( false, true, North::None, South::None, West::Tall, East::Tall, ) => 18679,
                ( false, false, North::None, South::None, West::None, East::Tall, ) => 18680,
                ( false, false, North::None, South::None, West::Low, East::Tall, ) => 18681,
                ( false, false, North::None, South::None, West::Tall, East::Tall, ) => 18682,
                ( true, true, North::None, South::Low, West::None, East::Tall, ) => 18683,
                ( true, true, North::None, South::Low, West::Low, East::Tall, ) => 18684,
                ( true, true, North::None, South::Low, West::Tall, East::Tall, ) => 18685,
                ( true, false, North::None, South::Low, West::None, East::Tall, ) => 18686,
                ( true, false, North::None, South::Low, West::Low, East::Tall, ) => 18687,
                ( true, false, North::None, South::Low, West::Tall, East::Tall, ) => 18688,
                ( false, true, North::None, South::Low, West::None, East::Tall, ) => 18689,
                ( false, true, North::None, South::Low, West::Low, East::Tall, ) => 18690,
                ( false, true, North::None, South::Low, West::Tall, East::Tall, ) => 18691,
                ( false, false, North::None, South::Low, West::None, East::Tall, ) => 18692,
                ( false, false, North::None, South::Low, West::Low, East::Tall, ) => 18693,
                ( false, false, North::None, South::Low, West::Tall, East::Tall, ) => 18694,
                ( true, true, North::None, South::Tall, West::None, East::Tall, ) => 18695,
                ( true, true, North::None, South::Tall, West::Low, East::Tall, ) => 18696,
                ( true, true, North::None, South::Tall, West::Tall, East::Tall, ) => 18697,
                ( true, false, North::None, South::Tall, West::None, East::Tall, ) => 18698,
                ( true, false, North::None, South::Tall, West::Low, East::Tall, ) => 18699,
                ( true, false, North::None, South::Tall, West::Tall, East::Tall, ) => 18700,
                ( false, true, North::None, South::Tall, West::None, East::Tall, ) => 18701,
                ( false, true, North::None, South::Tall, West::Low, East::Tall, ) => 18702,
                ( false, true, North::None, South::Tall, West::Tall, East::Tall, ) => 18703,
                ( false, false, North::None, South::Tall, West::None, East::Tall, ) => 18704,
                ( false, false, North::None, South::Tall, West::Low, East::Tall, ) => 18705,
                ( false, false, North::None, South::Tall, West::Tall, East::Tall, ) => 18706,
                ( true, true, North::Low, South::None, West::None, East::Tall, ) => 18707,
                ( true, true, North::Low, South::None, West::Low, East::Tall, ) => 18708,
                ( true, true, North::Low, South::None, West::Tall, East::Tall, ) => 18709,
                ( true, false, North::Low, South::None, West::None, East::Tall, ) => 18710,
                ( true, false, North::Low, South::None, West::Low, East::Tall, ) => 18711,
                ( true, false, North::Low, South::None, West::Tall, East::Tall, ) => 18712,
                ( false, true, North::Low, South::None, West::None, East::Tall, ) => 18713,
                ( false, true, North::Low, South::None, West::Low, East::Tall, ) => 18714,
                ( false, true, North::Low, South::None, West::Tall, East::Tall, ) => 18715,
                ( false, false, North::Low, South::None, West::None, East::Tall, ) => 18716,
                ( false, false, North::Low, South::None, West::Low, East::Tall, ) => 18717,
                ( false, false, North::Low, South::None, West::Tall, East::Tall, ) => 18718,
                ( true, true, North::Low, South::Low, West::None, East::Tall, ) => 18719,
                ( true, true, North::Low, South::Low, West::Low, East::Tall, ) => 18720,
                ( true, true, North::Low, South::Low, West::Tall, East::Tall, ) => 18721,
                ( true, false, North::Low, South::Low, West::None, East::Tall, ) => 18722,
                ( true, false, North::Low, South::Low, West::Low, East::Tall, ) => 18723,
                ( true, false, North::Low, South::Low, West::Tall, East::Tall, ) => 18724,
                ( false, true, North::Low, South::Low, West::None, East::Tall, ) => 18725,
                ( false, true, North::Low, South::Low, West::Low, East::Tall, ) => 18726,
                ( false, true, North::Low, South::Low, West::Tall, East::Tall, ) => 18727,
                ( false, false, North::Low, South::Low, West::None, East::Tall, ) => 18728,
                ( false, false, North::Low, South::Low, West::Low, East::Tall, ) => 18729,
                ( false, false, North::Low, South::Low, West::Tall, East::Tall, ) => 18730,
                ( true, true, North::Low, South::Tall, West::None, East::Tall, ) => 18731,
                ( true, true, North::Low, South::Tall, West::Low, East::Tall, ) => 18732,
                ( true, true, North::Low, South::Tall, West::Tall, East::Tall, ) => 18733,
                ( true, false, North::Low, South::Tall, West::None, East::Tall, ) => 18734,
                ( true, false, North::Low, South::Tall, West::Low, East::Tall, ) => 18735,
                ( true, false, North::Low, South::Tall, West::Tall, East::Tall, ) => 18736,
                ( false, true, North::Low, South::Tall, West::None, East::Tall, ) => 18737,
                ( false, true, North::Low, South::Tall, West::Low, East::Tall, ) => 18738,
                ( false, true, North::Low, South::Tall, West::Tall, East::Tall, ) => 18739,
                ( false, false, North::Low, South::Tall, West::None, East::Tall, ) => 18740,
                ( false, false, North::Low, South::Tall, West::Low, East::Tall, ) => 18741,
                ( false, false, North::Low, South::Tall, West::Tall, East::Tall, ) => 18742,
                ( true, true, North::Tall, South::None, West::None, East::Tall, ) => 18743,
                ( true, true, North::Tall, South::None, West::Low, East::Tall, ) => 18744,
                ( true, true, North::Tall, South::None, West::Tall, East::Tall, ) => 18745,
                ( true, false, North::Tall, South::None, West::None, East::Tall, ) => 18746,
                ( true, false, North::Tall, South::None, West::Low, East::Tall, ) => 18747,
                ( true, false, North::Tall, South::None, West::Tall, East::Tall, ) => 18748,
                ( false, true, North::Tall, South::None, West::None, East::Tall, ) => 18749,
                ( false, true, North::Tall, South::None, West::Low, East::Tall, ) => 18750,
                ( false, true, North::Tall, South::None, West::Tall, East::Tall, ) => 18751,
                ( false, false, North::Tall, South::None, West::None, East::Tall, ) => 18752,
                ( false, false, North::Tall, South::None, West::Low, East::Tall, ) => 18753,
                ( false, false, North::Tall, South::None, West::Tall, East::Tall, ) => 18754,
                ( true, true, North::Tall, South::Low, West::None, East::Tall, ) => 18755,
                ( true, true, North::Tall, South::Low, West::Low, East::Tall, ) => 18756,
                ( true, true, North::Tall, South::Low, West::Tall, East::Tall, ) => 18757,
                ( true, false, North::Tall, South::Low, West::None, East::Tall, ) => 18758,
                ( true, false, North::Tall, South::Low, West::Low, East::Tall, ) => 18759,
                ( true, false, North::Tall, South::Low, West::Tall, East::Tall, ) => 18760,
                ( false, true, North::Tall, South::Low, West::None, East::Tall, ) => 18761,
                ( false, true, North::Tall, South::Low, West::Low, East::Tall, ) => 18762,
                ( false, true, North::Tall, South::Low, West::Tall, East::Tall, ) => 18763,
                ( false, false, North::Tall, South::Low, West::None, East::Tall, ) => 18764,
                ( false, false, North::Tall, South::Low, West::Low, East::Tall, ) => 18765,
                ( false, false, North::Tall, South::Low, West::Tall, East::Tall, ) => 18766,
                ( true, true, North::Tall, South::Tall, West::None, East::Tall, ) => 18767,
                ( true, true, North::Tall, South::Tall, West::Low, East::Tall, ) => 18768,
                ( true, true, North::Tall, South::Tall, West::Tall, East::Tall, ) => 18769,
                ( true, false, North::Tall, South::Tall, West::None, East::Tall, ) => 18770,
                ( true, false, North::Tall, South::Tall, West::Low, East::Tall, ) => 18771,
                ( true, false, North::Tall, South::Tall, West::Tall, East::Tall, ) => 18772,
                ( false, true, North::Tall, South::Tall, West::None, East::Tall, ) => 18773,
                ( false, true, North::Tall, South::Tall, West::Low, East::Tall, ) => 18774,
                ( false, true, North::Tall, South::Tall, West::Tall, East::Tall, ) => 18775,
                ( false, false, North::Tall, South::Tall, West::None, East::Tall, ) => 18776,
                ( false, false, North::Tall, South::Tall, West::Low, East::Tall, ) => 18777,
                ( false, false, North::Tall, South::Tall, West::Tall, East::Tall, ) => 18778,
            })
        }
    }

    impl From<SandstoneWall> for BlockState {
        #[inline(always)]
        fn from(value : SandstoneWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SandstoneWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SandstoneWall { }

    impl Block for SandstoneWall {
        const DEFAULT_STATE : Self = Self {
            up : true,
            waterlogged : false,
            north : North::None,
            south : South::None,
            west : West::None,
            east : East::None,
        };
    }

}

/// `minecraft:weathered_cut_copper_stairs` block.
pub mod weathered_cut_copper_stairs {
    use super::*;

    /// `minecraft:weathered_cut_copper_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WeatheredCutCopperStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WeatheredCutCopperStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.half, self.shape, self.facing, )) {
                ( true, Half::Top, Shape::Straight, Facing::North, ) => 24096,
                ( false, Half::Top, Shape::Straight, Facing::North, ) => 24097,
                ( true, Half::Top, Shape::InnerLeft, Facing::North, ) => 24098,
                ( false, Half::Top, Shape::InnerLeft, Facing::North, ) => 24099,
                ( true, Half::Top, Shape::InnerRight, Facing::North, ) => 24100,
                ( false, Half::Top, Shape::InnerRight, Facing::North, ) => 24101,
                ( true, Half::Top, Shape::OuterLeft, Facing::North, ) => 24102,
                ( false, Half::Top, Shape::OuterLeft, Facing::North, ) => 24103,
                ( true, Half::Top, Shape::OuterRight, Facing::North, ) => 24104,
                ( false, Half::Top, Shape::OuterRight, Facing::North, ) => 24105,
                ( true, Half::Bottom, Shape::Straight, Facing::North, ) => 24106,
                ( false, Half::Bottom, Shape::Straight, Facing::North, ) => 24107,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::North, ) => 24108,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::North, ) => 24109,
                ( true, Half::Bottom, Shape::InnerRight, Facing::North, ) => 24110,
                ( false, Half::Bottom, Shape::InnerRight, Facing::North, ) => 24111,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::North, ) => 24112,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::North, ) => 24113,
                ( true, Half::Bottom, Shape::OuterRight, Facing::North, ) => 24114,
                ( false, Half::Bottom, Shape::OuterRight, Facing::North, ) => 24115,
                ( true, Half::Top, Shape::Straight, Facing::South, ) => 24116,
                ( false, Half::Top, Shape::Straight, Facing::South, ) => 24117,
                ( true, Half::Top, Shape::InnerLeft, Facing::South, ) => 24118,
                ( false, Half::Top, Shape::InnerLeft, Facing::South, ) => 24119,
                ( true, Half::Top, Shape::InnerRight, Facing::South, ) => 24120,
                ( false, Half::Top, Shape::InnerRight, Facing::South, ) => 24121,
                ( true, Half::Top, Shape::OuterLeft, Facing::South, ) => 24122,
                ( false, Half::Top, Shape::OuterLeft, Facing::South, ) => 24123,
                ( true, Half::Top, Shape::OuterRight, Facing::South, ) => 24124,
                ( false, Half::Top, Shape::OuterRight, Facing::South, ) => 24125,
                ( true, Half::Bottom, Shape::Straight, Facing::South, ) => 24126,
                ( false, Half::Bottom, Shape::Straight, Facing::South, ) => 24127,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::South, ) => 24128,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::South, ) => 24129,
                ( true, Half::Bottom, Shape::InnerRight, Facing::South, ) => 24130,
                ( false, Half::Bottom, Shape::InnerRight, Facing::South, ) => 24131,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::South, ) => 24132,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::South, ) => 24133,
                ( true, Half::Bottom, Shape::OuterRight, Facing::South, ) => 24134,
                ( false, Half::Bottom, Shape::OuterRight, Facing::South, ) => 24135,
                ( true, Half::Top, Shape::Straight, Facing::West, ) => 24136,
                ( false, Half::Top, Shape::Straight, Facing::West, ) => 24137,
                ( true, Half::Top, Shape::InnerLeft, Facing::West, ) => 24138,
                ( false, Half::Top, Shape::InnerLeft, Facing::West, ) => 24139,
                ( true, Half::Top, Shape::InnerRight, Facing::West, ) => 24140,
                ( false, Half::Top, Shape::InnerRight, Facing::West, ) => 24141,
                ( true, Half::Top, Shape::OuterLeft, Facing::West, ) => 24142,
                ( false, Half::Top, Shape::OuterLeft, Facing::West, ) => 24143,
                ( true, Half::Top, Shape::OuterRight, Facing::West, ) => 24144,
                ( false, Half::Top, Shape::OuterRight, Facing::West, ) => 24145,
                ( true, Half::Bottom, Shape::Straight, Facing::West, ) => 24146,
                ( false, Half::Bottom, Shape::Straight, Facing::West, ) => 24147,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::West, ) => 24148,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::West, ) => 24149,
                ( true, Half::Bottom, Shape::InnerRight, Facing::West, ) => 24150,
                ( false, Half::Bottom, Shape::InnerRight, Facing::West, ) => 24151,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::West, ) => 24152,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::West, ) => 24153,
                ( true, Half::Bottom, Shape::OuterRight, Facing::West, ) => 24154,
                ( false, Half::Bottom, Shape::OuterRight, Facing::West, ) => 24155,
                ( true, Half::Top, Shape::Straight, Facing::East, ) => 24156,
                ( false, Half::Top, Shape::Straight, Facing::East, ) => 24157,
                ( true, Half::Top, Shape::InnerLeft, Facing::East, ) => 24158,
                ( false, Half::Top, Shape::InnerLeft, Facing::East, ) => 24159,
                ( true, Half::Top, Shape::InnerRight, Facing::East, ) => 24160,
                ( false, Half::Top, Shape::InnerRight, Facing::East, ) => 24161,
                ( true, Half::Top, Shape::OuterLeft, Facing::East, ) => 24162,
                ( false, Half::Top, Shape::OuterLeft, Facing::East, ) => 24163,
                ( true, Half::Top, Shape::OuterRight, Facing::East, ) => 24164,
                ( false, Half::Top, Shape::OuterRight, Facing::East, ) => 24165,
                ( true, Half::Bottom, Shape::Straight, Facing::East, ) => 24166,
                ( false, Half::Bottom, Shape::Straight, Facing::East, ) => 24167,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::East, ) => 24168,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::East, ) => 24169,
                ( true, Half::Bottom, Shape::InnerRight, Facing::East, ) => 24170,
                ( false, Half::Bottom, Shape::InnerRight, Facing::East, ) => 24171,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::East, ) => 24172,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::East, ) => 24173,
                ( true, Half::Bottom, Shape::OuterRight, Facing::East, ) => 24174,
                ( false, Half::Bottom, Shape::OuterRight, Facing::East, ) => 24175,
            })
        }
    }

    impl From<WeatheredCutCopperStairs> for BlockState {
        #[inline(always)]
        fn from(value : WeatheredCutCopperStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WeatheredCutCopperStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WeatheredCutCopperStairs { }

    impl Block for WeatheredCutCopperStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            half : Half::Bottom,
            shape : Shape::Straight,
            facing : Facing::North,
        };
    }

}

/// `minecraft:waxed_oxidized_copper_door` block.
pub mod waxed_oxidized_copper_door {
    use super::*;

    /// `minecraft:waxed_oxidized_copper_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedOxidizedCopperDoor {
        /// `hinge` state.
        pub hinge : Hinge,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
    }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl WaxedOxidizedCopperDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.hinge, self.open, self.powered, self.facing, self.half, )) {
                ( Hinge::Left, true, true, Facing::North, Half::Upper, ) => 25096,
                ( Hinge::Left, true, false, Facing::North, Half::Upper, ) => 25097,
                ( Hinge::Left, false, true, Facing::North, Half::Upper, ) => 25098,
                ( Hinge::Left, false, false, Facing::North, Half::Upper, ) => 25099,
                ( Hinge::Right, true, true, Facing::North, Half::Upper, ) => 25100,
                ( Hinge::Right, true, false, Facing::North, Half::Upper, ) => 25101,
                ( Hinge::Right, false, true, Facing::North, Half::Upper, ) => 25102,
                ( Hinge::Right, false, false, Facing::North, Half::Upper, ) => 25103,
                ( Hinge::Left, true, true, Facing::North, Half::Lower, ) => 25104,
                ( Hinge::Left, true, false, Facing::North, Half::Lower, ) => 25105,
                ( Hinge::Left, false, true, Facing::North, Half::Lower, ) => 25106,
                ( Hinge::Left, false, false, Facing::North, Half::Lower, ) => 25107,
                ( Hinge::Right, true, true, Facing::North, Half::Lower, ) => 25108,
                ( Hinge::Right, true, false, Facing::North, Half::Lower, ) => 25109,
                ( Hinge::Right, false, true, Facing::North, Half::Lower, ) => 25110,
                ( Hinge::Right, false, false, Facing::North, Half::Lower, ) => 25111,
                ( Hinge::Left, true, true, Facing::South, Half::Upper, ) => 25112,
                ( Hinge::Left, true, false, Facing::South, Half::Upper, ) => 25113,
                ( Hinge::Left, false, true, Facing::South, Half::Upper, ) => 25114,
                ( Hinge::Left, false, false, Facing::South, Half::Upper, ) => 25115,
                ( Hinge::Right, true, true, Facing::South, Half::Upper, ) => 25116,
                ( Hinge::Right, true, false, Facing::South, Half::Upper, ) => 25117,
                ( Hinge::Right, false, true, Facing::South, Half::Upper, ) => 25118,
                ( Hinge::Right, false, false, Facing::South, Half::Upper, ) => 25119,
                ( Hinge::Left, true, true, Facing::South, Half::Lower, ) => 25120,
                ( Hinge::Left, true, false, Facing::South, Half::Lower, ) => 25121,
                ( Hinge::Left, false, true, Facing::South, Half::Lower, ) => 25122,
                ( Hinge::Left, false, false, Facing::South, Half::Lower, ) => 25123,
                ( Hinge::Right, true, true, Facing::South, Half::Lower, ) => 25124,
                ( Hinge::Right, true, false, Facing::South, Half::Lower, ) => 25125,
                ( Hinge::Right, false, true, Facing::South, Half::Lower, ) => 25126,
                ( Hinge::Right, false, false, Facing::South, Half::Lower, ) => 25127,
                ( Hinge::Left, true, true, Facing::West, Half::Upper, ) => 25128,
                ( Hinge::Left, true, false, Facing::West, Half::Upper, ) => 25129,
                ( Hinge::Left, false, true, Facing::West, Half::Upper, ) => 25130,
                ( Hinge::Left, false, false, Facing::West, Half::Upper, ) => 25131,
                ( Hinge::Right, true, true, Facing::West, Half::Upper, ) => 25132,
                ( Hinge::Right, true, false, Facing::West, Half::Upper, ) => 25133,
                ( Hinge::Right, false, true, Facing::West, Half::Upper, ) => 25134,
                ( Hinge::Right, false, false, Facing::West, Half::Upper, ) => 25135,
                ( Hinge::Left, true, true, Facing::West, Half::Lower, ) => 25136,
                ( Hinge::Left, true, false, Facing::West, Half::Lower, ) => 25137,
                ( Hinge::Left, false, true, Facing::West, Half::Lower, ) => 25138,
                ( Hinge::Left, false, false, Facing::West, Half::Lower, ) => 25139,
                ( Hinge::Right, true, true, Facing::West, Half::Lower, ) => 25140,
                ( Hinge::Right, true, false, Facing::West, Half::Lower, ) => 25141,
                ( Hinge::Right, false, true, Facing::West, Half::Lower, ) => 25142,
                ( Hinge::Right, false, false, Facing::West, Half::Lower, ) => 25143,
                ( Hinge::Left, true, true, Facing::East, Half::Upper, ) => 25144,
                ( Hinge::Left, true, false, Facing::East, Half::Upper, ) => 25145,
                ( Hinge::Left, false, true, Facing::East, Half::Upper, ) => 25146,
                ( Hinge::Left, false, false, Facing::East, Half::Upper, ) => 25147,
                ( Hinge::Right, true, true, Facing::East, Half::Upper, ) => 25148,
                ( Hinge::Right, true, false, Facing::East, Half::Upper, ) => 25149,
                ( Hinge::Right, false, true, Facing::East, Half::Upper, ) => 25150,
                ( Hinge::Right, false, false, Facing::East, Half::Upper, ) => 25151,
                ( Hinge::Left, true, true, Facing::East, Half::Lower, ) => 25152,
                ( Hinge::Left, true, false, Facing::East, Half::Lower, ) => 25153,
                ( Hinge::Left, false, true, Facing::East, Half::Lower, ) => 25154,
                ( Hinge::Left, false, false, Facing::East, Half::Lower, ) => 25155,
                ( Hinge::Right, true, true, Facing::East, Half::Lower, ) => 25156,
                ( Hinge::Right, true, false, Facing::East, Half::Lower, ) => 25157,
                ( Hinge::Right, false, true, Facing::East, Half::Lower, ) => 25158,
                ( Hinge::Right, false, false, Facing::East, Half::Lower, ) => 25159,
            })
        }
    }

    impl From<WaxedOxidizedCopperDoor> for BlockState {
        #[inline(always)]
        fn from(value : WaxedOxidizedCopperDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedOxidizedCopperDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedOxidizedCopperDoor { }

    impl Block for WaxedOxidizedCopperDoor {
        const DEFAULT_STATE : Self = Self {
            hinge : Hinge::Left,
            open : false,
            powered : false,
            facing : Facing::North,
            half : Half::Lower,
        };
    }

}

/// `minecraft:dirt_path` block.
pub mod dirt_path {
    use super::*;

    /// `minecraft:dirt_path` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DirtPath;

    impl DirtPath {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13536)
        }
    }

    impl From<DirtPath> for BlockState {
        #[inline(always)]
        fn from(value : DirtPath) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DirtPath {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DirtPath { }

    impl Block for DirtPath {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:deepslate_iron_ore` block.
pub mod deepslate_iron_ore {
    use super::*;

    /// `minecraft:deepslate_iron_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateIronOre;

    impl DeepslateIronOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(132)
        }
    }

    impl From<DeepslateIronOre> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateIronOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateIronOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateIronOre { }

    impl Block for DeepslateIronOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:shroomlight` block.
pub mod shroomlight {
    use super::*;

    /// `minecraft:shroomlight` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Shroomlight;

    impl Shroomlight {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19665)
        }
    }

    impl From<Shroomlight> for BlockState {
        #[inline(always)]
        fn from(value : Shroomlight) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Shroomlight {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Shroomlight { }

    impl Block for Shroomlight {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:purple_glazed_terracotta` block.
pub mod purple_glazed_terracotta {
    use super::*;

    /// `minecraft:purple_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PurpleGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13727,
                ( Facing::South, ) => 13728,
                ( Facing::West, ) => 13729,
                ( Facing::East, ) => 13730,
            })
        }
    }

    impl From<PurpleGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : PurpleGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleGlazedTerracotta { }

    impl Block for PurpleGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:red_sandstone_slab` block.
pub mod red_sandstone_slab {
    use super::*;

    /// `minecraft:red_sandstone_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedSandstoneSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl RedSandstoneSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 12183,
                ( Kind::Top, false, ) => 12184,
                ( Kind::Bottom, true, ) => 12185,
                ( Kind::Bottom, false, ) => 12186,
                ( Kind::Double, true, ) => 12187,
                ( Kind::Double, false, ) => 12188,
            })
        }
    }

    impl From<RedSandstoneSlab> for BlockState {
        #[inline(always)]
        fn from(value : RedSandstoneSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedSandstoneSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedSandstoneSlab { }

    impl Block for RedSandstoneSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:birch_wall_hanging_sign` block.
pub mod birch_wall_hanging_sign {
    use super::*;

    /// `minecraft:birch_wall_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchWallHangingSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BirchWallHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 5722,
                ( false, Facing::North, ) => 5723,
                ( true, Facing::South, ) => 5724,
                ( false, Facing::South, ) => 5725,
                ( true, Facing::West, ) => 5726,
                ( false, Facing::West, ) => 5727,
                ( true, Facing::East, ) => 5728,
                ( false, Facing::East, ) => 5729,
            })
        }
    }

    impl From<BirchWallHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : BirchWallHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchWallHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchWallHangingSign { }

    impl Block for BirchWallHangingSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:yellow_wall_banner` block.
pub mod yellow_wall_banner {
    use super::*;

    /// `minecraft:yellow_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl YellowWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11920,
                ( Facing::South, ) => 11921,
                ( Facing::West, ) => 11922,
                ( Facing::East, ) => 11923,
            })
        }
    }

    impl From<YellowWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : YellowWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowWallBanner { }

    impl Block for YellowWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:dead_brain_coral_block` block.
pub mod dead_brain_coral_block {
    use super::*;

    /// `minecraft:dead_brain_coral_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadBrainCoralBlock;

    impl DeadBrainCoralBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13859)
        }
    }

    impl From<DeadBrainCoralBlock> for BlockState {
        #[inline(always)]
        fn from(value : DeadBrainCoralBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadBrainCoralBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadBrainCoralBlock { }

    impl Block for DeadBrainCoralBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:wall_torch` block.
pub mod wall_torch {
    use super::*;

    /// `minecraft:wall_torch` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WallTorch {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WallTorch {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 2402,
                ( Facing::South, ) => 2403,
                ( Facing::West, ) => 2404,
                ( Facing::East, ) => 2405,
            })
        }
    }

    impl From<WallTorch> for BlockState {
        #[inline(always)]
        fn from(value : WallTorch) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WallTorch {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WallTorch { }

    impl Block for WallTorch {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:coal_block` block.
pub mod coal_block {
    use super::*;

    /// `minecraft:coal_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CoalBlock;

    impl CoalBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11634)
        }
    }

    impl From<CoalBlock> for BlockState {
        #[inline(always)]
        fn from(value : CoalBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CoalBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CoalBlock { }

    impl Block for CoalBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:oak_leaves` block.
pub mod oak_leaves {
    use super::*;

    /// `minecraft:oak_leaves` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakLeaves {
        /// `persistent` state.
        pub persistent : bool,
        /// `distance` state.
        pub distance : Distance,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `distance` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Distance {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Distance { }
    impl BlockProperty for Distance { }

    impl OakLeaves {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.persistent, self.distance, self.waterlogged, )) {
                ( true, Distance::N1, true, ) => 252,
                ( true, Distance::N1, false, ) => 253,
                ( false, Distance::N1, true, ) => 254,
                ( false, Distance::N1, false, ) => 255,
                ( true, Distance::N2, true, ) => 256,
                ( true, Distance::N2, false, ) => 257,
                ( false, Distance::N2, true, ) => 258,
                ( false, Distance::N2, false, ) => 259,
                ( true, Distance::N3, true, ) => 260,
                ( true, Distance::N3, false, ) => 261,
                ( false, Distance::N3, true, ) => 262,
                ( false, Distance::N3, false, ) => 263,
                ( true, Distance::N4, true, ) => 264,
                ( true, Distance::N4, false, ) => 265,
                ( false, Distance::N4, true, ) => 266,
                ( false, Distance::N4, false, ) => 267,
                ( true, Distance::N5, true, ) => 268,
                ( true, Distance::N5, false, ) => 269,
                ( false, Distance::N5, true, ) => 270,
                ( false, Distance::N5, false, ) => 271,
                ( true, Distance::N6, true, ) => 272,
                ( true, Distance::N6, false, ) => 273,
                ( false, Distance::N6, true, ) => 274,
                ( false, Distance::N6, false, ) => 275,
                ( true, Distance::N7, true, ) => 276,
                ( true, Distance::N7, false, ) => 277,
                ( false, Distance::N7, true, ) => 278,
                ( false, Distance::N7, false, ) => 279,
            })
        }
    }

    impl From<OakLeaves> for BlockState {
        #[inline(always)]
        fn from(value : OakLeaves) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakLeaves {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakLeaves { }

    impl Block for OakLeaves {
        const DEFAULT_STATE : Self = Self {
            persistent : false,
            distance : Distance::N7,
            waterlogged : false,
        };
    }

}

/// `minecraft:cyan_terracotta` block.
pub mod cyan_terracotta {
    use super::*;

    /// `minecraft:cyan_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanTerracotta;

    impl CyanTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10174)
        }
    }

    impl From<CyanTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : CyanTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanTerracotta { }

    impl Block for CyanTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dark_oak_wall_hanging_sign` block.
pub mod dark_oak_wall_hanging_sign {
    use super::*;

    /// `minecraft:dark_oak_wall_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakWallHangingSign {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DarkOakWallHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 5754,
                ( Facing::North, false, ) => 5755,
                ( Facing::South, true, ) => 5756,
                ( Facing::South, false, ) => 5757,
                ( Facing::West, true, ) => 5758,
                ( Facing::West, false, ) => 5759,
                ( Facing::East, true, ) => 5760,
                ( Facing::East, false, ) => 5761,
            })
        }
    }

    impl From<DarkOakWallHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakWallHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakWallHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakWallHangingSign { }

    impl Block for DarkOakWallHangingSign {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:prismarine_stairs` block.
pub mod prismarine_stairs {
    use super::*;

    /// `minecraft:prismarine_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PrismarineStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl PrismarineStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.half, self.facing, self.shape, )) {
                ( true, Half::Top, Facing::North, Shape::Straight, ) => 11355,
                ( false, Half::Top, Facing::North, Shape::Straight, ) => 11356,
                ( true, Half::Top, Facing::North, Shape::InnerLeft, ) => 11357,
                ( false, Half::Top, Facing::North, Shape::InnerLeft, ) => 11358,
                ( true, Half::Top, Facing::North, Shape::InnerRight, ) => 11359,
                ( false, Half::Top, Facing::North, Shape::InnerRight, ) => 11360,
                ( true, Half::Top, Facing::North, Shape::OuterLeft, ) => 11361,
                ( false, Half::Top, Facing::North, Shape::OuterLeft, ) => 11362,
                ( true, Half::Top, Facing::North, Shape::OuterRight, ) => 11363,
                ( false, Half::Top, Facing::North, Shape::OuterRight, ) => 11364,
                ( true, Half::Bottom, Facing::North, Shape::Straight, ) => 11365,
                ( false, Half::Bottom, Facing::North, Shape::Straight, ) => 11366,
                ( true, Half::Bottom, Facing::North, Shape::InnerLeft, ) => 11367,
                ( false, Half::Bottom, Facing::North, Shape::InnerLeft, ) => 11368,
                ( true, Half::Bottom, Facing::North, Shape::InnerRight, ) => 11369,
                ( false, Half::Bottom, Facing::North, Shape::InnerRight, ) => 11370,
                ( true, Half::Bottom, Facing::North, Shape::OuterLeft, ) => 11371,
                ( false, Half::Bottom, Facing::North, Shape::OuterLeft, ) => 11372,
                ( true, Half::Bottom, Facing::North, Shape::OuterRight, ) => 11373,
                ( false, Half::Bottom, Facing::North, Shape::OuterRight, ) => 11374,
                ( true, Half::Top, Facing::South, Shape::Straight, ) => 11375,
                ( false, Half::Top, Facing::South, Shape::Straight, ) => 11376,
                ( true, Half::Top, Facing::South, Shape::InnerLeft, ) => 11377,
                ( false, Half::Top, Facing::South, Shape::InnerLeft, ) => 11378,
                ( true, Half::Top, Facing::South, Shape::InnerRight, ) => 11379,
                ( false, Half::Top, Facing::South, Shape::InnerRight, ) => 11380,
                ( true, Half::Top, Facing::South, Shape::OuterLeft, ) => 11381,
                ( false, Half::Top, Facing::South, Shape::OuterLeft, ) => 11382,
                ( true, Half::Top, Facing::South, Shape::OuterRight, ) => 11383,
                ( false, Half::Top, Facing::South, Shape::OuterRight, ) => 11384,
                ( true, Half::Bottom, Facing::South, Shape::Straight, ) => 11385,
                ( false, Half::Bottom, Facing::South, Shape::Straight, ) => 11386,
                ( true, Half::Bottom, Facing::South, Shape::InnerLeft, ) => 11387,
                ( false, Half::Bottom, Facing::South, Shape::InnerLeft, ) => 11388,
                ( true, Half::Bottom, Facing::South, Shape::InnerRight, ) => 11389,
                ( false, Half::Bottom, Facing::South, Shape::InnerRight, ) => 11390,
                ( true, Half::Bottom, Facing::South, Shape::OuterLeft, ) => 11391,
                ( false, Half::Bottom, Facing::South, Shape::OuterLeft, ) => 11392,
                ( true, Half::Bottom, Facing::South, Shape::OuterRight, ) => 11393,
                ( false, Half::Bottom, Facing::South, Shape::OuterRight, ) => 11394,
                ( true, Half::Top, Facing::West, Shape::Straight, ) => 11395,
                ( false, Half::Top, Facing::West, Shape::Straight, ) => 11396,
                ( true, Half::Top, Facing::West, Shape::InnerLeft, ) => 11397,
                ( false, Half::Top, Facing::West, Shape::InnerLeft, ) => 11398,
                ( true, Half::Top, Facing::West, Shape::InnerRight, ) => 11399,
                ( false, Half::Top, Facing::West, Shape::InnerRight, ) => 11400,
                ( true, Half::Top, Facing::West, Shape::OuterLeft, ) => 11401,
                ( false, Half::Top, Facing::West, Shape::OuterLeft, ) => 11402,
                ( true, Half::Top, Facing::West, Shape::OuterRight, ) => 11403,
                ( false, Half::Top, Facing::West, Shape::OuterRight, ) => 11404,
                ( true, Half::Bottom, Facing::West, Shape::Straight, ) => 11405,
                ( false, Half::Bottom, Facing::West, Shape::Straight, ) => 11406,
                ( true, Half::Bottom, Facing::West, Shape::InnerLeft, ) => 11407,
                ( false, Half::Bottom, Facing::West, Shape::InnerLeft, ) => 11408,
                ( true, Half::Bottom, Facing::West, Shape::InnerRight, ) => 11409,
                ( false, Half::Bottom, Facing::West, Shape::InnerRight, ) => 11410,
                ( true, Half::Bottom, Facing::West, Shape::OuterLeft, ) => 11411,
                ( false, Half::Bottom, Facing::West, Shape::OuterLeft, ) => 11412,
                ( true, Half::Bottom, Facing::West, Shape::OuterRight, ) => 11413,
                ( false, Half::Bottom, Facing::West, Shape::OuterRight, ) => 11414,
                ( true, Half::Top, Facing::East, Shape::Straight, ) => 11415,
                ( false, Half::Top, Facing::East, Shape::Straight, ) => 11416,
                ( true, Half::Top, Facing::East, Shape::InnerLeft, ) => 11417,
                ( false, Half::Top, Facing::East, Shape::InnerLeft, ) => 11418,
                ( true, Half::Top, Facing::East, Shape::InnerRight, ) => 11419,
                ( false, Half::Top, Facing::East, Shape::InnerRight, ) => 11420,
                ( true, Half::Top, Facing::East, Shape::OuterLeft, ) => 11421,
                ( false, Half::Top, Facing::East, Shape::OuterLeft, ) => 11422,
                ( true, Half::Top, Facing::East, Shape::OuterRight, ) => 11423,
                ( false, Half::Top, Facing::East, Shape::OuterRight, ) => 11424,
                ( true, Half::Bottom, Facing::East, Shape::Straight, ) => 11425,
                ( false, Half::Bottom, Facing::East, Shape::Straight, ) => 11426,
                ( true, Half::Bottom, Facing::East, Shape::InnerLeft, ) => 11427,
                ( false, Half::Bottom, Facing::East, Shape::InnerLeft, ) => 11428,
                ( true, Half::Bottom, Facing::East, Shape::InnerRight, ) => 11429,
                ( false, Half::Bottom, Facing::East, Shape::InnerRight, ) => 11430,
                ( true, Half::Bottom, Facing::East, Shape::OuterLeft, ) => 11431,
                ( false, Half::Bottom, Facing::East, Shape::OuterLeft, ) => 11432,
                ( true, Half::Bottom, Facing::East, Shape::OuterRight, ) => 11433,
                ( false, Half::Bottom, Facing::East, Shape::OuterRight, ) => 11434,
            })
        }
    }

    impl From<PrismarineStairs> for BlockState {
        #[inline(always)]
        fn from(value : PrismarineStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PrismarineStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PrismarineStairs { }

    impl Block for PrismarineStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            half : Half::Bottom,
            facing : Facing::North,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:purple_concrete` block.
pub mod purple_concrete {
    use super::*;

    /// `minecraft:purple_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleConcrete;

    impl PurpleConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13761)
        }
    }

    impl From<PurpleConcrete> for BlockState {
        #[inline(always)]
        fn from(value : PurpleConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleConcrete { }

    impl Block for PurpleConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:red_banner` block.
pub mod red_banner {
    use super::*;

    /// `minecraft:red_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl RedBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11872,
                ( Rotation::N1, ) => 11873,
                ( Rotation::N2, ) => 11874,
                ( Rotation::N3, ) => 11875,
                ( Rotation::N4, ) => 11876,
                ( Rotation::N5, ) => 11877,
                ( Rotation::N6, ) => 11878,
                ( Rotation::N7, ) => 11879,
                ( Rotation::N8, ) => 11880,
                ( Rotation::N9, ) => 11881,
                ( Rotation::N10, ) => 11882,
                ( Rotation::N11, ) => 11883,
                ( Rotation::N12, ) => 11884,
                ( Rotation::N13, ) => 11885,
                ( Rotation::N14, ) => 11886,
                ( Rotation::N15, ) => 11887,
            })
        }
    }

    impl From<RedBanner> for BlockState {
        #[inline(always)]
        fn from(value : RedBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedBanner { }

    impl Block for RedBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:repeater` block.
pub mod repeater {
    use super::*;

    /// `minecraft:repeater` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Repeater {
        /// `delay` state.
        pub delay : Delay,
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
        /// `locked` state.
        pub locked : bool,
    }

    /// `delay` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Delay {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Delay { }
    impl BlockProperty for Delay { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Repeater {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.delay, self.facing, self.powered, self.locked, )) {
                ( Delay::N1, Facing::North, true, true, ) => 6060,
                ( Delay::N1, Facing::North, false, true, ) => 6061,
                ( Delay::N1, Facing::North, true, false, ) => 6062,
                ( Delay::N1, Facing::North, false, false, ) => 6063,
                ( Delay::N1, Facing::South, true, true, ) => 6064,
                ( Delay::N1, Facing::South, false, true, ) => 6065,
                ( Delay::N1, Facing::South, true, false, ) => 6066,
                ( Delay::N1, Facing::South, false, false, ) => 6067,
                ( Delay::N1, Facing::West, true, true, ) => 6068,
                ( Delay::N1, Facing::West, false, true, ) => 6069,
                ( Delay::N1, Facing::West, true, false, ) => 6070,
                ( Delay::N1, Facing::West, false, false, ) => 6071,
                ( Delay::N1, Facing::East, true, true, ) => 6072,
                ( Delay::N1, Facing::East, false, true, ) => 6073,
                ( Delay::N1, Facing::East, true, false, ) => 6074,
                ( Delay::N1, Facing::East, false, false, ) => 6075,
                ( Delay::N2, Facing::North, true, true, ) => 6076,
                ( Delay::N2, Facing::North, false, true, ) => 6077,
                ( Delay::N2, Facing::North, true, false, ) => 6078,
                ( Delay::N2, Facing::North, false, false, ) => 6079,
                ( Delay::N2, Facing::South, true, true, ) => 6080,
                ( Delay::N2, Facing::South, false, true, ) => 6081,
                ( Delay::N2, Facing::South, true, false, ) => 6082,
                ( Delay::N2, Facing::South, false, false, ) => 6083,
                ( Delay::N2, Facing::West, true, true, ) => 6084,
                ( Delay::N2, Facing::West, false, true, ) => 6085,
                ( Delay::N2, Facing::West, true, false, ) => 6086,
                ( Delay::N2, Facing::West, false, false, ) => 6087,
                ( Delay::N2, Facing::East, true, true, ) => 6088,
                ( Delay::N2, Facing::East, false, true, ) => 6089,
                ( Delay::N2, Facing::East, true, false, ) => 6090,
                ( Delay::N2, Facing::East, false, false, ) => 6091,
                ( Delay::N3, Facing::North, true, true, ) => 6092,
                ( Delay::N3, Facing::North, false, true, ) => 6093,
                ( Delay::N3, Facing::North, true, false, ) => 6094,
                ( Delay::N3, Facing::North, false, false, ) => 6095,
                ( Delay::N3, Facing::South, true, true, ) => 6096,
                ( Delay::N3, Facing::South, false, true, ) => 6097,
                ( Delay::N3, Facing::South, true, false, ) => 6098,
                ( Delay::N3, Facing::South, false, false, ) => 6099,
                ( Delay::N3, Facing::West, true, true, ) => 6100,
                ( Delay::N3, Facing::West, false, true, ) => 6101,
                ( Delay::N3, Facing::West, true, false, ) => 6102,
                ( Delay::N3, Facing::West, false, false, ) => 6103,
                ( Delay::N3, Facing::East, true, true, ) => 6104,
                ( Delay::N3, Facing::East, false, true, ) => 6105,
                ( Delay::N3, Facing::East, true, false, ) => 6106,
                ( Delay::N3, Facing::East, false, false, ) => 6107,
                ( Delay::N4, Facing::North, true, true, ) => 6108,
                ( Delay::N4, Facing::North, false, true, ) => 6109,
                ( Delay::N4, Facing::North, true, false, ) => 6110,
                ( Delay::N4, Facing::North, false, false, ) => 6111,
                ( Delay::N4, Facing::South, true, true, ) => 6112,
                ( Delay::N4, Facing::South, false, true, ) => 6113,
                ( Delay::N4, Facing::South, true, false, ) => 6114,
                ( Delay::N4, Facing::South, false, false, ) => 6115,
                ( Delay::N4, Facing::West, true, true, ) => 6116,
                ( Delay::N4, Facing::West, false, true, ) => 6117,
                ( Delay::N4, Facing::West, true, false, ) => 6118,
                ( Delay::N4, Facing::West, false, false, ) => 6119,
                ( Delay::N4, Facing::East, true, true, ) => 6120,
                ( Delay::N4, Facing::East, false, true, ) => 6121,
                ( Delay::N4, Facing::East, true, false, ) => 6122,
                ( Delay::N4, Facing::East, false, false, ) => 6123,
            })
        }
    }

    impl From<Repeater> for BlockState {
        #[inline(always)]
        fn from(value : Repeater) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Repeater {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Repeater { }

    impl Block for Repeater {
        const DEFAULT_STATE : Self = Self {
            delay : Delay::N1,
            facing : Facing::North,
            powered : false,
            locked : false,
        };
    }

}

/// `minecraft:stripped_jungle_wood` block.
pub mod stripped_jungle_wood {
    use super::*;

    /// `minecraft:stripped_jungle_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedJungleWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedJungleWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 234,
                ( Axis::Y, ) => 235,
                ( Axis::Z, ) => 236,
            })
        }
    }

    impl From<StrippedJungleWood> for BlockState {
        #[inline(always)]
        fn from(value : StrippedJungleWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedJungleWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedJungleWood { }

    impl Block for StrippedJungleWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:mangrove_wood` block.
pub mod mangrove_wood {
    use super::*;

    /// `minecraft:mangrove_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl MangroveWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 222,
                ( Axis::Y, ) => 223,
                ( Axis::Z, ) => 224,
            })
        }
    }

    impl From<MangroveWood> for BlockState {
        #[inline(always)]
        fn from(value : MangroveWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveWood { }

    impl Block for MangroveWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:oxidized_copper_trapdoor` block.
pub mod oxidized_copper_trapdoor {
    use super::*;

    /// `minecraft:oxidized_copper_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OxidizedCopperTrapdoor {
        /// `powered` state.
        pub powered : bool,
        /// `half` state.
        pub half : Half,
        /// `open` state.
        pub open : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl OxidizedCopperTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.half, self.open, self.waterlogged, self.facing, )) {
                ( true, Half::Top, true, true, Facing::North, ) => 25352,
                ( true, Half::Top, true, false, Facing::North, ) => 25353,
                ( false, Half::Top, true, true, Facing::North, ) => 25354,
                ( false, Half::Top, true, false, Facing::North, ) => 25355,
                ( true, Half::Top, false, true, Facing::North, ) => 25356,
                ( true, Half::Top, false, false, Facing::North, ) => 25357,
                ( false, Half::Top, false, true, Facing::North, ) => 25358,
                ( false, Half::Top, false, false, Facing::North, ) => 25359,
                ( true, Half::Bottom, true, true, Facing::North, ) => 25360,
                ( true, Half::Bottom, true, false, Facing::North, ) => 25361,
                ( false, Half::Bottom, true, true, Facing::North, ) => 25362,
                ( false, Half::Bottom, true, false, Facing::North, ) => 25363,
                ( true, Half::Bottom, false, true, Facing::North, ) => 25364,
                ( true, Half::Bottom, false, false, Facing::North, ) => 25365,
                ( false, Half::Bottom, false, true, Facing::North, ) => 25366,
                ( false, Half::Bottom, false, false, Facing::North, ) => 25367,
                ( true, Half::Top, true, true, Facing::South, ) => 25368,
                ( true, Half::Top, true, false, Facing::South, ) => 25369,
                ( false, Half::Top, true, true, Facing::South, ) => 25370,
                ( false, Half::Top, true, false, Facing::South, ) => 25371,
                ( true, Half::Top, false, true, Facing::South, ) => 25372,
                ( true, Half::Top, false, false, Facing::South, ) => 25373,
                ( false, Half::Top, false, true, Facing::South, ) => 25374,
                ( false, Half::Top, false, false, Facing::South, ) => 25375,
                ( true, Half::Bottom, true, true, Facing::South, ) => 25376,
                ( true, Half::Bottom, true, false, Facing::South, ) => 25377,
                ( false, Half::Bottom, true, true, Facing::South, ) => 25378,
                ( false, Half::Bottom, true, false, Facing::South, ) => 25379,
                ( true, Half::Bottom, false, true, Facing::South, ) => 25380,
                ( true, Half::Bottom, false, false, Facing::South, ) => 25381,
                ( false, Half::Bottom, false, true, Facing::South, ) => 25382,
                ( false, Half::Bottom, false, false, Facing::South, ) => 25383,
                ( true, Half::Top, true, true, Facing::West, ) => 25384,
                ( true, Half::Top, true, false, Facing::West, ) => 25385,
                ( false, Half::Top, true, true, Facing::West, ) => 25386,
                ( false, Half::Top, true, false, Facing::West, ) => 25387,
                ( true, Half::Top, false, true, Facing::West, ) => 25388,
                ( true, Half::Top, false, false, Facing::West, ) => 25389,
                ( false, Half::Top, false, true, Facing::West, ) => 25390,
                ( false, Half::Top, false, false, Facing::West, ) => 25391,
                ( true, Half::Bottom, true, true, Facing::West, ) => 25392,
                ( true, Half::Bottom, true, false, Facing::West, ) => 25393,
                ( false, Half::Bottom, true, true, Facing::West, ) => 25394,
                ( false, Half::Bottom, true, false, Facing::West, ) => 25395,
                ( true, Half::Bottom, false, true, Facing::West, ) => 25396,
                ( true, Half::Bottom, false, false, Facing::West, ) => 25397,
                ( false, Half::Bottom, false, true, Facing::West, ) => 25398,
                ( false, Half::Bottom, false, false, Facing::West, ) => 25399,
                ( true, Half::Top, true, true, Facing::East, ) => 25400,
                ( true, Half::Top, true, false, Facing::East, ) => 25401,
                ( false, Half::Top, true, true, Facing::East, ) => 25402,
                ( false, Half::Top, true, false, Facing::East, ) => 25403,
                ( true, Half::Top, false, true, Facing::East, ) => 25404,
                ( true, Half::Top, false, false, Facing::East, ) => 25405,
                ( false, Half::Top, false, true, Facing::East, ) => 25406,
                ( false, Half::Top, false, false, Facing::East, ) => 25407,
                ( true, Half::Bottom, true, true, Facing::East, ) => 25408,
                ( true, Half::Bottom, true, false, Facing::East, ) => 25409,
                ( false, Half::Bottom, true, true, Facing::East, ) => 25410,
                ( false, Half::Bottom, true, false, Facing::East, ) => 25411,
                ( true, Half::Bottom, false, true, Facing::East, ) => 25412,
                ( true, Half::Bottom, false, false, Facing::East, ) => 25413,
                ( false, Half::Bottom, false, true, Facing::East, ) => 25414,
                ( false, Half::Bottom, false, false, Facing::East, ) => 25415,
            })
        }
    }

    impl From<OxidizedCopperTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : OxidizedCopperTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OxidizedCopperTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OxidizedCopperTrapdoor { }

    impl Block for OxidizedCopperTrapdoor {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            half : Half::Bottom,
            open : false,
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:spruce_fence_gate` block.
pub mod spruce_fence_gate {
    use super::*;

    /// `minecraft:spruce_fence_gate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceFenceGate {
        /// `facing` state.
        pub facing : Facing,
        /// `open` state.
        pub open : bool,
        /// `in_wall` state.
        pub in_wall : bool,
        /// `powered` state.
        pub powered : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl SpruceFenceGate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.open, self.in_wall, self.powered, )) {
                ( Facing::North, true, true, true, ) => 12205,
                ( Facing::North, true, true, false, ) => 12206,
                ( Facing::North, false, true, true, ) => 12207,
                ( Facing::North, false, true, false, ) => 12208,
                ( Facing::North, true, false, true, ) => 12209,
                ( Facing::North, true, false, false, ) => 12210,
                ( Facing::North, false, false, true, ) => 12211,
                ( Facing::North, false, false, false, ) => 12212,
                ( Facing::South, true, true, true, ) => 12213,
                ( Facing::South, true, true, false, ) => 12214,
                ( Facing::South, false, true, true, ) => 12215,
                ( Facing::South, false, true, false, ) => 12216,
                ( Facing::South, true, false, true, ) => 12217,
                ( Facing::South, true, false, false, ) => 12218,
                ( Facing::South, false, false, true, ) => 12219,
                ( Facing::South, false, false, false, ) => 12220,
                ( Facing::West, true, true, true, ) => 12221,
                ( Facing::West, true, true, false, ) => 12222,
                ( Facing::West, false, true, true, ) => 12223,
                ( Facing::West, false, true, false, ) => 12224,
                ( Facing::West, true, false, true, ) => 12225,
                ( Facing::West, true, false, false, ) => 12226,
                ( Facing::West, false, false, true, ) => 12227,
                ( Facing::West, false, false, false, ) => 12228,
                ( Facing::East, true, true, true, ) => 12229,
                ( Facing::East, true, true, false, ) => 12230,
                ( Facing::East, false, true, true, ) => 12231,
                ( Facing::East, false, true, false, ) => 12232,
                ( Facing::East, true, false, true, ) => 12233,
                ( Facing::East, true, false, false, ) => 12234,
                ( Facing::East, false, false, true, ) => 12235,
                ( Facing::East, false, false, false, ) => 12236,
            })
        }
    }

    impl From<SpruceFenceGate> for BlockState {
        #[inline(always)]
        fn from(value : SpruceFenceGate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceFenceGate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceFenceGate { }

    impl Block for SpruceFenceGate {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            open : false,
            in_wall : false,
            powered : false,
        };
    }

}

/// `minecraft:torchflower` block.
pub mod torchflower {
    use super::*;

    /// `minecraft:torchflower` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Torchflower;

    impl Torchflower {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2122)
        }
    }

    impl From<Torchflower> for BlockState {
        #[inline(always)]
        fn from(value : Torchflower) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Torchflower {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Torchflower { }

    impl Block for Torchflower {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:mangrove_sign` block.
pub mod mangrove_sign {
    use super::*;

    /// `minecraft:mangrove_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl MangroveSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.rotation, )) {
                ( true, Rotation::N0, ) => 4622,
                ( false, Rotation::N0, ) => 4623,
                ( true, Rotation::N1, ) => 4624,
                ( false, Rotation::N1, ) => 4625,
                ( true, Rotation::N2, ) => 4626,
                ( false, Rotation::N2, ) => 4627,
                ( true, Rotation::N3, ) => 4628,
                ( false, Rotation::N3, ) => 4629,
                ( true, Rotation::N4, ) => 4630,
                ( false, Rotation::N4, ) => 4631,
                ( true, Rotation::N5, ) => 4632,
                ( false, Rotation::N5, ) => 4633,
                ( true, Rotation::N6, ) => 4634,
                ( false, Rotation::N6, ) => 4635,
                ( true, Rotation::N7, ) => 4636,
                ( false, Rotation::N7, ) => 4637,
                ( true, Rotation::N8, ) => 4638,
                ( false, Rotation::N8, ) => 4639,
                ( true, Rotation::N9, ) => 4640,
                ( false, Rotation::N9, ) => 4641,
                ( true, Rotation::N10, ) => 4642,
                ( false, Rotation::N10, ) => 4643,
                ( true, Rotation::N11, ) => 4644,
                ( false, Rotation::N11, ) => 4645,
                ( true, Rotation::N12, ) => 4646,
                ( false, Rotation::N12, ) => 4647,
                ( true, Rotation::N13, ) => 4648,
                ( false, Rotation::N13, ) => 4649,
                ( true, Rotation::N14, ) => 4650,
                ( false, Rotation::N14, ) => 4651,
                ( true, Rotation::N15, ) => 4652,
                ( false, Rotation::N15, ) => 4653,
            })
        }
    }

    impl From<MangroveSign> for BlockState {
        #[inline(always)]
        fn from(value : MangroveSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveSign { }

    impl Block for MangroveSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:bamboo_block` block.
pub mod bamboo_block {
    use super::*;

    /// `minecraft:bamboo_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooBlock {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl BambooBlock {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 168,
                ( Axis::Y, ) => 169,
                ( Axis::Z, ) => 170,
            })
        }
    }

    impl From<BambooBlock> for BlockState {
        #[inline(always)]
        fn from(value : BambooBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooBlock { }

    impl Block for BambooBlock {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:tuff` block.
pub mod tuff {
    use super::*;

    /// `minecraft:tuff` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Tuff;

    impl Tuff {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(22141)
        }
    }

    impl From<Tuff> for BlockState {
        #[inline(always)]
        fn from(value : Tuff) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Tuff {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Tuff { }

    impl Block for Tuff {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_cut_copper_stairs` block.
pub mod waxed_cut_copper_stairs {
    use super::*;

    /// `minecraft:waxed_cut_copper_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedCutCopperStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WaxedCutCopperStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.shape, self.half, self.facing, )) {
                ( true, Shape::Straight, Half::Top, Facing::North, ) => 24608,
                ( false, Shape::Straight, Half::Top, Facing::North, ) => 24609,
                ( true, Shape::InnerLeft, Half::Top, Facing::North, ) => 24610,
                ( false, Shape::InnerLeft, Half::Top, Facing::North, ) => 24611,
                ( true, Shape::InnerRight, Half::Top, Facing::North, ) => 24612,
                ( false, Shape::InnerRight, Half::Top, Facing::North, ) => 24613,
                ( true, Shape::OuterLeft, Half::Top, Facing::North, ) => 24614,
                ( false, Shape::OuterLeft, Half::Top, Facing::North, ) => 24615,
                ( true, Shape::OuterRight, Half::Top, Facing::North, ) => 24616,
                ( false, Shape::OuterRight, Half::Top, Facing::North, ) => 24617,
                ( true, Shape::Straight, Half::Bottom, Facing::North, ) => 24618,
                ( false, Shape::Straight, Half::Bottom, Facing::North, ) => 24619,
                ( true, Shape::InnerLeft, Half::Bottom, Facing::North, ) => 24620,
                ( false, Shape::InnerLeft, Half::Bottom, Facing::North, ) => 24621,
                ( true, Shape::InnerRight, Half::Bottom, Facing::North, ) => 24622,
                ( false, Shape::InnerRight, Half::Bottom, Facing::North, ) => 24623,
                ( true, Shape::OuterLeft, Half::Bottom, Facing::North, ) => 24624,
                ( false, Shape::OuterLeft, Half::Bottom, Facing::North, ) => 24625,
                ( true, Shape::OuterRight, Half::Bottom, Facing::North, ) => 24626,
                ( false, Shape::OuterRight, Half::Bottom, Facing::North, ) => 24627,
                ( true, Shape::Straight, Half::Top, Facing::South, ) => 24628,
                ( false, Shape::Straight, Half::Top, Facing::South, ) => 24629,
                ( true, Shape::InnerLeft, Half::Top, Facing::South, ) => 24630,
                ( false, Shape::InnerLeft, Half::Top, Facing::South, ) => 24631,
                ( true, Shape::InnerRight, Half::Top, Facing::South, ) => 24632,
                ( false, Shape::InnerRight, Half::Top, Facing::South, ) => 24633,
                ( true, Shape::OuterLeft, Half::Top, Facing::South, ) => 24634,
                ( false, Shape::OuterLeft, Half::Top, Facing::South, ) => 24635,
                ( true, Shape::OuterRight, Half::Top, Facing::South, ) => 24636,
                ( false, Shape::OuterRight, Half::Top, Facing::South, ) => 24637,
                ( true, Shape::Straight, Half::Bottom, Facing::South, ) => 24638,
                ( false, Shape::Straight, Half::Bottom, Facing::South, ) => 24639,
                ( true, Shape::InnerLeft, Half::Bottom, Facing::South, ) => 24640,
                ( false, Shape::InnerLeft, Half::Bottom, Facing::South, ) => 24641,
                ( true, Shape::InnerRight, Half::Bottom, Facing::South, ) => 24642,
                ( false, Shape::InnerRight, Half::Bottom, Facing::South, ) => 24643,
                ( true, Shape::OuterLeft, Half::Bottom, Facing::South, ) => 24644,
                ( false, Shape::OuterLeft, Half::Bottom, Facing::South, ) => 24645,
                ( true, Shape::OuterRight, Half::Bottom, Facing::South, ) => 24646,
                ( false, Shape::OuterRight, Half::Bottom, Facing::South, ) => 24647,
                ( true, Shape::Straight, Half::Top, Facing::West, ) => 24648,
                ( false, Shape::Straight, Half::Top, Facing::West, ) => 24649,
                ( true, Shape::InnerLeft, Half::Top, Facing::West, ) => 24650,
                ( false, Shape::InnerLeft, Half::Top, Facing::West, ) => 24651,
                ( true, Shape::InnerRight, Half::Top, Facing::West, ) => 24652,
                ( false, Shape::InnerRight, Half::Top, Facing::West, ) => 24653,
                ( true, Shape::OuterLeft, Half::Top, Facing::West, ) => 24654,
                ( false, Shape::OuterLeft, Half::Top, Facing::West, ) => 24655,
                ( true, Shape::OuterRight, Half::Top, Facing::West, ) => 24656,
                ( false, Shape::OuterRight, Half::Top, Facing::West, ) => 24657,
                ( true, Shape::Straight, Half::Bottom, Facing::West, ) => 24658,
                ( false, Shape::Straight, Half::Bottom, Facing::West, ) => 24659,
                ( true, Shape::InnerLeft, Half::Bottom, Facing::West, ) => 24660,
                ( false, Shape::InnerLeft, Half::Bottom, Facing::West, ) => 24661,
                ( true, Shape::InnerRight, Half::Bottom, Facing::West, ) => 24662,
                ( false, Shape::InnerRight, Half::Bottom, Facing::West, ) => 24663,
                ( true, Shape::OuterLeft, Half::Bottom, Facing::West, ) => 24664,
                ( false, Shape::OuterLeft, Half::Bottom, Facing::West, ) => 24665,
                ( true, Shape::OuterRight, Half::Bottom, Facing::West, ) => 24666,
                ( false, Shape::OuterRight, Half::Bottom, Facing::West, ) => 24667,
                ( true, Shape::Straight, Half::Top, Facing::East, ) => 24668,
                ( false, Shape::Straight, Half::Top, Facing::East, ) => 24669,
                ( true, Shape::InnerLeft, Half::Top, Facing::East, ) => 24670,
                ( false, Shape::InnerLeft, Half::Top, Facing::East, ) => 24671,
                ( true, Shape::InnerRight, Half::Top, Facing::East, ) => 24672,
                ( false, Shape::InnerRight, Half::Top, Facing::East, ) => 24673,
                ( true, Shape::OuterLeft, Half::Top, Facing::East, ) => 24674,
                ( false, Shape::OuterLeft, Half::Top, Facing::East, ) => 24675,
                ( true, Shape::OuterRight, Half::Top, Facing::East, ) => 24676,
                ( false, Shape::OuterRight, Half::Top, Facing::East, ) => 24677,
                ( true, Shape::Straight, Half::Bottom, Facing::East, ) => 24678,
                ( false, Shape::Straight, Half::Bottom, Facing::East, ) => 24679,
                ( true, Shape::InnerLeft, Half::Bottom, Facing::East, ) => 24680,
                ( false, Shape::InnerLeft, Half::Bottom, Facing::East, ) => 24681,
                ( true, Shape::InnerRight, Half::Bottom, Facing::East, ) => 24682,
                ( false, Shape::InnerRight, Half::Bottom, Facing::East, ) => 24683,
                ( true, Shape::OuterLeft, Half::Bottom, Facing::East, ) => 24684,
                ( false, Shape::OuterLeft, Half::Bottom, Facing::East, ) => 24685,
                ( true, Shape::OuterRight, Half::Bottom, Facing::East, ) => 24686,
                ( false, Shape::OuterRight, Half::Bottom, Facing::East, ) => 24687,
            })
        }
    }

    impl From<WaxedCutCopperStairs> for BlockState {
        #[inline(always)]
        fn from(value : WaxedCutCopperStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedCutCopperStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedCutCopperStairs { }

    impl Block for WaxedCutCopperStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            shape : Shape::Straight,
            half : Half::Bottom,
            facing : Facing::North,
        };
    }

}

/// `minecraft:smooth_sandstone_slab` block.
pub mod smooth_sandstone_slab {
    use super::*;

    /// `minecraft:smooth_sandstone_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmoothSandstoneSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl SmoothSandstoneSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 15173,
                ( Kind::Top, false, ) => 15174,
                ( Kind::Bottom, true, ) => 15175,
                ( Kind::Bottom, false, ) => 15176,
                ( Kind::Double, true, ) => 15177,
                ( Kind::Double, false, ) => 15178,
            })
        }
    }

    impl From<SmoothSandstoneSlab> for BlockState {
        #[inline(always)]
        fn from(value : SmoothSandstoneSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmoothSandstoneSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmoothSandstoneSlab { }

    impl Block for SmoothSandstoneSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:bamboo_fence_gate` block.
pub mod bamboo_fence_gate {
    use super::*;

    /// `minecraft:bamboo_fence_gate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooFenceGate {
        /// `in_wall` state.
        pub in_wall : bool,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BambooFenceGate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.in_wall, self.open, self.powered, self.facing, )) {
                ( true, true, true, Facing::North, ) => 12461,
                ( true, true, false, Facing::North, ) => 12462,
                ( true, false, true, Facing::North, ) => 12463,
                ( true, false, false, Facing::North, ) => 12464,
                ( false, true, true, Facing::North, ) => 12465,
                ( false, true, false, Facing::North, ) => 12466,
                ( false, false, true, Facing::North, ) => 12467,
                ( false, false, false, Facing::North, ) => 12468,
                ( true, true, true, Facing::South, ) => 12469,
                ( true, true, false, Facing::South, ) => 12470,
                ( true, false, true, Facing::South, ) => 12471,
                ( true, false, false, Facing::South, ) => 12472,
                ( false, true, true, Facing::South, ) => 12473,
                ( false, true, false, Facing::South, ) => 12474,
                ( false, false, true, Facing::South, ) => 12475,
                ( false, false, false, Facing::South, ) => 12476,
                ( true, true, true, Facing::West, ) => 12477,
                ( true, true, false, Facing::West, ) => 12478,
                ( true, false, true, Facing::West, ) => 12479,
                ( true, false, false, Facing::West, ) => 12480,
                ( false, true, true, Facing::West, ) => 12481,
                ( false, true, false, Facing::West, ) => 12482,
                ( false, false, true, Facing::West, ) => 12483,
                ( false, false, false, Facing::West, ) => 12484,
                ( true, true, true, Facing::East, ) => 12485,
                ( true, true, false, Facing::East, ) => 12486,
                ( true, false, true, Facing::East, ) => 12487,
                ( true, false, false, Facing::East, ) => 12488,
                ( false, true, true, Facing::East, ) => 12489,
                ( false, true, false, Facing::East, ) => 12490,
                ( false, false, true, Facing::East, ) => 12491,
                ( false, false, false, Facing::East, ) => 12492,
            })
        }
    }

    impl From<BambooFenceGate> for BlockState {
        #[inline(always)]
        fn from(value : BambooFenceGate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooFenceGate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooFenceGate { }

    impl Block for BambooFenceGate {
        const DEFAULT_STATE : Self = Self {
            in_wall : false,
            open : false,
            powered : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:lime_bed` block.
pub mod lime_bed {
    use super::*;

    /// `minecraft:lime_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeBed {
        /// `part` state.
        pub part : Part,
        /// `facing` state.
        pub facing : Facing,
        /// `occupied` state.
        pub occupied : bool,
    }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl LimeBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.part, self.facing, self.occupied, )) {
                ( Part::Head, Facing::North, true, ) => 1811,
                ( Part::Foot, Facing::North, true, ) => 1812,
                ( Part::Head, Facing::North, false, ) => 1813,
                ( Part::Foot, Facing::North, false, ) => 1814,
                ( Part::Head, Facing::South, true, ) => 1815,
                ( Part::Foot, Facing::South, true, ) => 1816,
                ( Part::Head, Facing::South, false, ) => 1817,
                ( Part::Foot, Facing::South, false, ) => 1818,
                ( Part::Head, Facing::West, true, ) => 1819,
                ( Part::Foot, Facing::West, true, ) => 1820,
                ( Part::Head, Facing::West, false, ) => 1821,
                ( Part::Foot, Facing::West, false, ) => 1822,
                ( Part::Head, Facing::East, true, ) => 1823,
                ( Part::Foot, Facing::East, true, ) => 1824,
                ( Part::Head, Facing::East, false, ) => 1825,
                ( Part::Foot, Facing::East, false, ) => 1826,
            })
        }
    }

    impl From<LimeBed> for BlockState {
        #[inline(always)]
        fn from(value : LimeBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeBed { }

    impl Block for LimeBed {
        const DEFAULT_STATE : Self = Self {
            part : Part::Foot,
            facing : Facing::North,
            occupied : false,
        };
    }

}

/// `minecraft:pink_wool` block.
pub mod pink_wool {
    use super::*;

    /// `minecraft:pink_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkWool;

    impl PinkWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2099)
        }
    }

    impl From<PinkWool> for BlockState {
        #[inline(always)]
        fn from(value : PinkWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkWool { }

    impl Block for PinkWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:packed_mud` block.
pub mod packed_mud {
    use super::*;

    /// `minecraft:packed_mud` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PackedMud;

    impl PackedMud {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6784)
        }
    }

    impl From<PackedMud> for BlockState {
        #[inline(always)]
        fn from(value : PackedMud) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PackedMud {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PackedMud { }

    impl Block for PackedMud {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:prismarine_slab` block.
pub mod prismarine_slab {
    use super::*;

    /// `minecraft:prismarine_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PrismarineSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl PrismarineSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 11595,
                ( Kind::Top, false, ) => 11596,
                ( Kind::Bottom, true, ) => 11597,
                ( Kind::Bottom, false, ) => 11598,
                ( Kind::Double, true, ) => 11599,
                ( Kind::Double, false, ) => 11600,
            })
        }
    }

    impl From<PrismarineSlab> for BlockState {
        #[inline(always)]
        fn from(value : PrismarineSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PrismarineSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PrismarineSlab { }

    impl Block for PrismarineSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:smoker` block.
pub mod smoker {
    use super::*;

    /// `minecraft:smoker` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Smoker {
        /// `facing` state.
        pub facing : Facing,
        /// `lit` state.
        pub lit : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Smoker {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.lit, )) {
                ( Facing::North, true, ) => 19475,
                ( Facing::North, false, ) => 19476,
                ( Facing::South, true, ) => 19477,
                ( Facing::South, false, ) => 19478,
                ( Facing::West, true, ) => 19479,
                ( Facing::West, false, ) => 19480,
                ( Facing::East, true, ) => 19481,
                ( Facing::East, false, ) => 19482,
            })
        }
    }

    impl From<Smoker> for BlockState {
        #[inline(always)]
        fn from(value : Smoker) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Smoker {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Smoker { }

    impl Block for Smoker {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            lit : false,
        };
    }

}

/// `minecraft:white_stained_glass` block.
pub mod white_stained_glass {
    use super::*;

    /// `minecraft:white_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteStainedGlass;

    impl WhiteStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6124)
        }
    }

    impl From<WhiteStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : WhiteStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteStainedGlass { }

    impl Block for WhiteStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:acacia_sapling` block.
pub mod acacia_sapling {
    use super::*;

    /// `minecraft:acacia_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaSapling {
        /// `stage` state.
        pub stage : Stage,
    }

    /// `stage` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Stage {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
    }
    impl crate::Sealed for Stage { }
    impl BlockProperty for Stage { }

    impl AcaciaSapling {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.stage, )) {
                ( Stage::N0, ) => 37,
                ( Stage::N1, ) => 38,
            })
        }
    }

    impl From<AcaciaSapling> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaSapling { }

    impl Block for AcaciaSapling {
        const DEFAULT_STATE : Self = Self {
            stage : Stage::N0,
        };
    }

}

/// `minecraft:bamboo_hanging_sign` block.
pub mod bamboo_hanging_sign {
    use super::*;

    /// `minecraft:bamboo_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooHangingSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `attached` state.
        pub attached : bool,
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl BambooHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.attached, self.rotation, )) {
                ( true, true, Rotation::N0, ) => 5642,
                ( false, true, Rotation::N0, ) => 5643,
                ( true, true, Rotation::N1, ) => 5644,
                ( false, true, Rotation::N1, ) => 5645,
                ( true, true, Rotation::N2, ) => 5646,
                ( false, true, Rotation::N2, ) => 5647,
                ( true, true, Rotation::N3, ) => 5648,
                ( false, true, Rotation::N3, ) => 5649,
                ( true, true, Rotation::N4, ) => 5650,
                ( false, true, Rotation::N4, ) => 5651,
                ( true, true, Rotation::N5, ) => 5652,
                ( false, true, Rotation::N5, ) => 5653,
                ( true, true, Rotation::N6, ) => 5654,
                ( false, true, Rotation::N6, ) => 5655,
                ( true, true, Rotation::N7, ) => 5656,
                ( false, true, Rotation::N7, ) => 5657,
                ( true, true, Rotation::N8, ) => 5658,
                ( false, true, Rotation::N8, ) => 5659,
                ( true, true, Rotation::N9, ) => 5660,
                ( false, true, Rotation::N9, ) => 5661,
                ( true, true, Rotation::N10, ) => 5662,
                ( false, true, Rotation::N10, ) => 5663,
                ( true, true, Rotation::N11, ) => 5664,
                ( false, true, Rotation::N11, ) => 5665,
                ( true, true, Rotation::N12, ) => 5666,
                ( false, true, Rotation::N12, ) => 5667,
                ( true, true, Rotation::N13, ) => 5668,
                ( false, true, Rotation::N13, ) => 5669,
                ( true, true, Rotation::N14, ) => 5670,
                ( false, true, Rotation::N14, ) => 5671,
                ( true, true, Rotation::N15, ) => 5672,
                ( false, true, Rotation::N15, ) => 5673,
                ( true, false, Rotation::N0, ) => 5674,
                ( false, false, Rotation::N0, ) => 5675,
                ( true, false, Rotation::N1, ) => 5676,
                ( false, false, Rotation::N1, ) => 5677,
                ( true, false, Rotation::N2, ) => 5678,
                ( false, false, Rotation::N2, ) => 5679,
                ( true, false, Rotation::N3, ) => 5680,
                ( false, false, Rotation::N3, ) => 5681,
                ( true, false, Rotation::N4, ) => 5682,
                ( false, false, Rotation::N4, ) => 5683,
                ( true, false, Rotation::N5, ) => 5684,
                ( false, false, Rotation::N5, ) => 5685,
                ( true, false, Rotation::N6, ) => 5686,
                ( false, false, Rotation::N6, ) => 5687,
                ( true, false, Rotation::N7, ) => 5688,
                ( false, false, Rotation::N7, ) => 5689,
                ( true, false, Rotation::N8, ) => 5690,
                ( false, false, Rotation::N8, ) => 5691,
                ( true, false, Rotation::N9, ) => 5692,
                ( false, false, Rotation::N9, ) => 5693,
                ( true, false, Rotation::N10, ) => 5694,
                ( false, false, Rotation::N10, ) => 5695,
                ( true, false, Rotation::N11, ) => 5696,
                ( false, false, Rotation::N11, ) => 5697,
                ( true, false, Rotation::N12, ) => 5698,
                ( false, false, Rotation::N12, ) => 5699,
                ( true, false, Rotation::N13, ) => 5700,
                ( false, false, Rotation::N13, ) => 5701,
                ( true, false, Rotation::N14, ) => 5702,
                ( false, false, Rotation::N14, ) => 5703,
                ( true, false, Rotation::N15, ) => 5704,
                ( false, false, Rotation::N15, ) => 5705,
            })
        }
    }

    impl From<BambooHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : BambooHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooHangingSign { }

    impl Block for BambooHangingSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            attached : false,
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:birch_planks` block.
pub mod birch_planks {
    use super::*;

    /// `minecraft:birch_planks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchPlanks;

    impl BirchPlanks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(17)
        }
    }

    impl From<BirchPlanks> for BlockState {
        #[inline(always)]
        fn from(value : BirchPlanks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchPlanks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchPlanks { }

    impl Block for BirchPlanks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:chest` block.
pub mod chest {
    use super::*;

    /// `minecraft:chest` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Chest {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `single` variant.
        Single,
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Chest {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, self.facing, )) {
                ( true, Kind::Single, Facing::North, ) => 3018,
                ( false, Kind::Single, Facing::North, ) => 3019,
                ( true, Kind::Left, Facing::North, ) => 3020,
                ( false, Kind::Left, Facing::North, ) => 3021,
                ( true, Kind::Right, Facing::North, ) => 3022,
                ( false, Kind::Right, Facing::North, ) => 3023,
                ( true, Kind::Single, Facing::South, ) => 3024,
                ( false, Kind::Single, Facing::South, ) => 3025,
                ( true, Kind::Left, Facing::South, ) => 3026,
                ( false, Kind::Left, Facing::South, ) => 3027,
                ( true, Kind::Right, Facing::South, ) => 3028,
                ( false, Kind::Right, Facing::South, ) => 3029,
                ( true, Kind::Single, Facing::West, ) => 3030,
                ( false, Kind::Single, Facing::West, ) => 3031,
                ( true, Kind::Left, Facing::West, ) => 3032,
                ( false, Kind::Left, Facing::West, ) => 3033,
                ( true, Kind::Right, Facing::West, ) => 3034,
                ( false, Kind::Right, Facing::West, ) => 3035,
                ( true, Kind::Single, Facing::East, ) => 3036,
                ( false, Kind::Single, Facing::East, ) => 3037,
                ( true, Kind::Left, Facing::East, ) => 3038,
                ( false, Kind::Left, Facing::East, ) => 3039,
                ( true, Kind::Right, Facing::East, ) => 3040,
                ( false, Kind::Right, Facing::East, ) => 3041,
            })
        }
    }

    impl From<Chest> for BlockState {
        #[inline(always)]
        fn from(value : Chest) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Chest {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Chest { }

    impl Block for Chest {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Single,
            facing : Facing::North,
        };
    }

}

/// `minecraft:orange_glazed_terracotta` block.
pub mod orange_glazed_terracotta {
    use super::*;

    /// `minecraft:orange_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl OrangeGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13691,
                ( Facing::South, ) => 13692,
                ( Facing::West, ) => 13693,
                ( Facing::East, ) => 13694,
            })
        }
    }

    impl From<OrangeGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : OrangeGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeGlazedTerracotta { }

    impl Block for OrangeGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:warped_stem` block.
pub mod warped_stem {
    use super::*;

    /// `minecraft:warped_stem` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedStem {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl WarpedStem {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 19634,
                ( Axis::Y, ) => 19635,
                ( Axis::Z, ) => 19636,
            })
        }
    }

    impl From<WarpedStem> for BlockState {
        #[inline(always)]
        fn from(value : WarpedStem) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedStem {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedStem { }

    impl Block for WarpedStem {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:brain_coral_block` block.
pub mod brain_coral_block {
    use super::*;

    /// `minecraft:brain_coral_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrainCoralBlock;

    impl BrainCoralBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13864)
        }
    }

    impl From<BrainCoralBlock> for BlockState {
        #[inline(always)]
        fn from(value : BrainCoralBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrainCoralBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrainCoralBlock { }

    impl Block for BrainCoralBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:exposed_copper_grate` block.
pub mod exposed_copper_grate {
    use super::*;

    /// `minecraft:exposed_copper_grate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ExposedCopperGrate {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl ExposedCopperGrate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 25738,
                ( false, ) => 25739,
            })
        }
    }

    impl From<ExposedCopperGrate> for BlockState {
        #[inline(always)]
        fn from(value : ExposedCopperGrate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ExposedCopperGrate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ExposedCopperGrate { }

    impl Block for ExposedCopperGrate {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
        };
    }

}

/// `minecraft:pink_candle_cake` block.
pub mod pink_candle_cake {
    use super::*;

    /// `minecraft:pink_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl PinkCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22071,
                ( false, ) => 22072,
            })
        }
    }

    impl From<PinkCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : PinkCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkCandleCake { }

    impl Block for PinkCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:dark_oak_stairs` block.
pub mod dark_oak_stairs {
    use super::*;

    /// `minecraft:dark_oak_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DarkOakStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.waterlogged, self.half, self.facing, )) {
                ( Shape::Straight, true, Half::Top, Facing::North, ) => 10853,
                ( Shape::Straight, false, Half::Top, Facing::North, ) => 10854,
                ( Shape::InnerLeft, true, Half::Top, Facing::North, ) => 10855,
                ( Shape::InnerLeft, false, Half::Top, Facing::North, ) => 10856,
                ( Shape::InnerRight, true, Half::Top, Facing::North, ) => 10857,
                ( Shape::InnerRight, false, Half::Top, Facing::North, ) => 10858,
                ( Shape::OuterLeft, true, Half::Top, Facing::North, ) => 10859,
                ( Shape::OuterLeft, false, Half::Top, Facing::North, ) => 10860,
                ( Shape::OuterRight, true, Half::Top, Facing::North, ) => 10861,
                ( Shape::OuterRight, false, Half::Top, Facing::North, ) => 10862,
                ( Shape::Straight, true, Half::Bottom, Facing::North, ) => 10863,
                ( Shape::Straight, false, Half::Bottom, Facing::North, ) => 10864,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::North, ) => 10865,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::North, ) => 10866,
                ( Shape::InnerRight, true, Half::Bottom, Facing::North, ) => 10867,
                ( Shape::InnerRight, false, Half::Bottom, Facing::North, ) => 10868,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::North, ) => 10869,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::North, ) => 10870,
                ( Shape::OuterRight, true, Half::Bottom, Facing::North, ) => 10871,
                ( Shape::OuterRight, false, Half::Bottom, Facing::North, ) => 10872,
                ( Shape::Straight, true, Half::Top, Facing::South, ) => 10873,
                ( Shape::Straight, false, Half::Top, Facing::South, ) => 10874,
                ( Shape::InnerLeft, true, Half::Top, Facing::South, ) => 10875,
                ( Shape::InnerLeft, false, Half::Top, Facing::South, ) => 10876,
                ( Shape::InnerRight, true, Half::Top, Facing::South, ) => 10877,
                ( Shape::InnerRight, false, Half::Top, Facing::South, ) => 10878,
                ( Shape::OuterLeft, true, Half::Top, Facing::South, ) => 10879,
                ( Shape::OuterLeft, false, Half::Top, Facing::South, ) => 10880,
                ( Shape::OuterRight, true, Half::Top, Facing::South, ) => 10881,
                ( Shape::OuterRight, false, Half::Top, Facing::South, ) => 10882,
                ( Shape::Straight, true, Half::Bottom, Facing::South, ) => 10883,
                ( Shape::Straight, false, Half::Bottom, Facing::South, ) => 10884,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::South, ) => 10885,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::South, ) => 10886,
                ( Shape::InnerRight, true, Half::Bottom, Facing::South, ) => 10887,
                ( Shape::InnerRight, false, Half::Bottom, Facing::South, ) => 10888,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::South, ) => 10889,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::South, ) => 10890,
                ( Shape::OuterRight, true, Half::Bottom, Facing::South, ) => 10891,
                ( Shape::OuterRight, false, Half::Bottom, Facing::South, ) => 10892,
                ( Shape::Straight, true, Half::Top, Facing::West, ) => 10893,
                ( Shape::Straight, false, Half::Top, Facing::West, ) => 10894,
                ( Shape::InnerLeft, true, Half::Top, Facing::West, ) => 10895,
                ( Shape::InnerLeft, false, Half::Top, Facing::West, ) => 10896,
                ( Shape::InnerRight, true, Half::Top, Facing::West, ) => 10897,
                ( Shape::InnerRight, false, Half::Top, Facing::West, ) => 10898,
                ( Shape::OuterLeft, true, Half::Top, Facing::West, ) => 10899,
                ( Shape::OuterLeft, false, Half::Top, Facing::West, ) => 10900,
                ( Shape::OuterRight, true, Half::Top, Facing::West, ) => 10901,
                ( Shape::OuterRight, false, Half::Top, Facing::West, ) => 10902,
                ( Shape::Straight, true, Half::Bottom, Facing::West, ) => 10903,
                ( Shape::Straight, false, Half::Bottom, Facing::West, ) => 10904,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::West, ) => 10905,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::West, ) => 10906,
                ( Shape::InnerRight, true, Half::Bottom, Facing::West, ) => 10907,
                ( Shape::InnerRight, false, Half::Bottom, Facing::West, ) => 10908,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::West, ) => 10909,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::West, ) => 10910,
                ( Shape::OuterRight, true, Half::Bottom, Facing::West, ) => 10911,
                ( Shape::OuterRight, false, Half::Bottom, Facing::West, ) => 10912,
                ( Shape::Straight, true, Half::Top, Facing::East, ) => 10913,
                ( Shape::Straight, false, Half::Top, Facing::East, ) => 10914,
                ( Shape::InnerLeft, true, Half::Top, Facing::East, ) => 10915,
                ( Shape::InnerLeft, false, Half::Top, Facing::East, ) => 10916,
                ( Shape::InnerRight, true, Half::Top, Facing::East, ) => 10917,
                ( Shape::InnerRight, false, Half::Top, Facing::East, ) => 10918,
                ( Shape::OuterLeft, true, Half::Top, Facing::East, ) => 10919,
                ( Shape::OuterLeft, false, Half::Top, Facing::East, ) => 10920,
                ( Shape::OuterRight, true, Half::Top, Facing::East, ) => 10921,
                ( Shape::OuterRight, false, Half::Top, Facing::East, ) => 10922,
                ( Shape::Straight, true, Half::Bottom, Facing::East, ) => 10923,
                ( Shape::Straight, false, Half::Bottom, Facing::East, ) => 10924,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::East, ) => 10925,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::East, ) => 10926,
                ( Shape::InnerRight, true, Half::Bottom, Facing::East, ) => 10927,
                ( Shape::InnerRight, false, Half::Bottom, Facing::East, ) => 10928,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::East, ) => 10929,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::East, ) => 10930,
                ( Shape::OuterRight, true, Half::Bottom, Facing::East, ) => 10931,
                ( Shape::OuterRight, false, Half::Bottom, Facing::East, ) => 10932,
            })
        }
    }

    impl From<DarkOakStairs> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakStairs { }

    impl Block for DarkOakStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            waterlogged : false,
            half : Half::Bottom,
            facing : Facing::North,
        };
    }

}

/// `minecraft:cherry_wall_sign` block.
pub mod cherry_wall_sign {
    use super::*;

    /// `minecraft:cherry_wall_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryWallSign {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CherryWallSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 4890,
                ( Facing::North, false, ) => 4891,
                ( Facing::South, true, ) => 4892,
                ( Facing::South, false, ) => 4893,
                ( Facing::West, true, ) => 4894,
                ( Facing::West, false, ) => 4895,
                ( Facing::East, true, ) => 4896,
                ( Facing::East, false, ) => 4897,
            })
        }
    }

    impl From<CherryWallSign> for BlockState {
        #[inline(always)]
        fn from(value : CherryWallSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryWallSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryWallSign { }

    impl Block for CherryWallSign {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:coal_ore` block.
pub mod coal_ore {
    use super::*;

    /// `minecraft:coal_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CoalOre;

    impl CoalOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(133)
        }
    }

    impl From<CoalOre> for BlockState {
        #[inline(always)]
        fn from(value : CoalOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CoalOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CoalOre { }

    impl Block for CoalOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:infested_stone` block.
pub mod infested_stone {
    use super::*;

    /// `minecraft:infested_stone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct InfestedStone;

    impl InfestedStone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6786)
        }
    }

    impl From<InfestedStone> for BlockState {
        #[inline(always)]
        fn from(value : InfestedStone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for InfestedStone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for InfestedStone { }

    impl Block for InfestedStone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:potted_white_tulip` block.
pub mod potted_white_tulip {
    use super::*;

    /// `minecraft:potted_white_tulip` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedWhiteTulip;

    impl PottedWhiteTulip {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9370)
        }
    }

    impl From<PottedWhiteTulip> for BlockState {
        #[inline(always)]
        fn from(value : PottedWhiteTulip) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedWhiteTulip {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedWhiteTulip { }

    impl Block for PottedWhiteTulip {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:red_candle_cake` block.
pub mod red_candle_cake {
    use super::*;

    /// `minecraft:red_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl RedCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22087,
                ( false, ) => 22088,
            })
        }
    }

    impl From<RedCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : RedCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedCandleCake { }

    impl Block for RedCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:white_glazed_terracotta` block.
pub mod white_glazed_terracotta {
    use super::*;

    /// `minecraft:white_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WhiteGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13687,
                ( Facing::South, ) => 13688,
                ( Facing::West, ) => 13689,
                ( Facing::East, ) => 13690,
            })
        }
    }

    impl From<WhiteGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : WhiteGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteGlazedTerracotta { }

    impl Block for WhiteGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:cocoa` block.
pub mod cocoa {
    use super::*;

    /// `minecraft:cocoa` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Cocoa {
        /// `age` state.
        pub age : Age,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Cocoa {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, self.facing, )) {
                ( Age::N0, Facing::North, ) => 8203,
                ( Age::N0, Facing::South, ) => 8204,
                ( Age::N0, Facing::West, ) => 8205,
                ( Age::N0, Facing::East, ) => 8206,
                ( Age::N1, Facing::North, ) => 8207,
                ( Age::N1, Facing::South, ) => 8208,
                ( Age::N1, Facing::West, ) => 8209,
                ( Age::N1, Facing::East, ) => 8210,
                ( Age::N2, Facing::North, ) => 8211,
                ( Age::N2, Facing::South, ) => 8212,
                ( Age::N2, Facing::West, ) => 8213,
                ( Age::N2, Facing::East, ) => 8214,
            })
        }
    }

    impl From<Cocoa> for BlockState {
        #[inline(always)]
        fn from(value : Cocoa) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Cocoa {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Cocoa { }

    impl Block for Cocoa {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
            facing : Facing::North,
        };
    }

}

/// `minecraft:polished_blackstone_brick_wall` block.
pub mod polished_blackstone_brick_wall {
    use super::*;

    /// `minecraft:polished_blackstone_brick_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedBlackstoneBrickWall {
        /// `east` state.
        pub east : East,
        /// `south` state.
        pub south : South,
        /// `north` state.
        pub north : North,
        /// `up` state.
        pub up : bool,
        /// `west` state.
        pub west : West,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    impl PolishedBlackstoneBrickWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.south, self.north, self.up, self.west, self.waterlogged, )) {
                ( East::None, South::None, North::None, true, West::None, true, ) => 21021,
                ( East::None, South::None, North::None, true, West::Low, true, ) => 21022,
                ( East::None, South::None, North::None, true, West::Tall, true, ) => 21023,
                ( East::None, South::None, North::None, true, West::None, false, ) => 21024,
                ( East::None, South::None, North::None, true, West::Low, false, ) => 21025,
                ( East::None, South::None, North::None, true, West::Tall, false, ) => 21026,
                ( East::None, South::None, North::None, false, West::None, true, ) => 21027,
                ( East::None, South::None, North::None, false, West::Low, true, ) => 21028,
                ( East::None, South::None, North::None, false, West::Tall, true, ) => 21029,
                ( East::None, South::None, North::None, false, West::None, false, ) => 21030,
                ( East::None, South::None, North::None, false, West::Low, false, ) => 21031,
                ( East::None, South::None, North::None, false, West::Tall, false, ) => 21032,
                ( East::None, South::Low, North::None, true, West::None, true, ) => 21033,
                ( East::None, South::Low, North::None, true, West::Low, true, ) => 21034,
                ( East::None, South::Low, North::None, true, West::Tall, true, ) => 21035,
                ( East::None, South::Low, North::None, true, West::None, false, ) => 21036,
                ( East::None, South::Low, North::None, true, West::Low, false, ) => 21037,
                ( East::None, South::Low, North::None, true, West::Tall, false, ) => 21038,
                ( East::None, South::Low, North::None, false, West::None, true, ) => 21039,
                ( East::None, South::Low, North::None, false, West::Low, true, ) => 21040,
                ( East::None, South::Low, North::None, false, West::Tall, true, ) => 21041,
                ( East::None, South::Low, North::None, false, West::None, false, ) => 21042,
                ( East::None, South::Low, North::None, false, West::Low, false, ) => 21043,
                ( East::None, South::Low, North::None, false, West::Tall, false, ) => 21044,
                ( East::None, South::Tall, North::None, true, West::None, true, ) => 21045,
                ( East::None, South::Tall, North::None, true, West::Low, true, ) => 21046,
                ( East::None, South::Tall, North::None, true, West::Tall, true, ) => 21047,
                ( East::None, South::Tall, North::None, true, West::None, false, ) => 21048,
                ( East::None, South::Tall, North::None, true, West::Low, false, ) => 21049,
                ( East::None, South::Tall, North::None, true, West::Tall, false, ) => 21050,
                ( East::None, South::Tall, North::None, false, West::None, true, ) => 21051,
                ( East::None, South::Tall, North::None, false, West::Low, true, ) => 21052,
                ( East::None, South::Tall, North::None, false, West::Tall, true, ) => 21053,
                ( East::None, South::Tall, North::None, false, West::None, false, ) => 21054,
                ( East::None, South::Tall, North::None, false, West::Low, false, ) => 21055,
                ( East::None, South::Tall, North::None, false, West::Tall, false, ) => 21056,
                ( East::None, South::None, North::Low, true, West::None, true, ) => 21057,
                ( East::None, South::None, North::Low, true, West::Low, true, ) => 21058,
                ( East::None, South::None, North::Low, true, West::Tall, true, ) => 21059,
                ( East::None, South::None, North::Low, true, West::None, false, ) => 21060,
                ( East::None, South::None, North::Low, true, West::Low, false, ) => 21061,
                ( East::None, South::None, North::Low, true, West::Tall, false, ) => 21062,
                ( East::None, South::None, North::Low, false, West::None, true, ) => 21063,
                ( East::None, South::None, North::Low, false, West::Low, true, ) => 21064,
                ( East::None, South::None, North::Low, false, West::Tall, true, ) => 21065,
                ( East::None, South::None, North::Low, false, West::None, false, ) => 21066,
                ( East::None, South::None, North::Low, false, West::Low, false, ) => 21067,
                ( East::None, South::None, North::Low, false, West::Tall, false, ) => 21068,
                ( East::None, South::Low, North::Low, true, West::None, true, ) => 21069,
                ( East::None, South::Low, North::Low, true, West::Low, true, ) => 21070,
                ( East::None, South::Low, North::Low, true, West::Tall, true, ) => 21071,
                ( East::None, South::Low, North::Low, true, West::None, false, ) => 21072,
                ( East::None, South::Low, North::Low, true, West::Low, false, ) => 21073,
                ( East::None, South::Low, North::Low, true, West::Tall, false, ) => 21074,
                ( East::None, South::Low, North::Low, false, West::None, true, ) => 21075,
                ( East::None, South::Low, North::Low, false, West::Low, true, ) => 21076,
                ( East::None, South::Low, North::Low, false, West::Tall, true, ) => 21077,
                ( East::None, South::Low, North::Low, false, West::None, false, ) => 21078,
                ( East::None, South::Low, North::Low, false, West::Low, false, ) => 21079,
                ( East::None, South::Low, North::Low, false, West::Tall, false, ) => 21080,
                ( East::None, South::Tall, North::Low, true, West::None, true, ) => 21081,
                ( East::None, South::Tall, North::Low, true, West::Low, true, ) => 21082,
                ( East::None, South::Tall, North::Low, true, West::Tall, true, ) => 21083,
                ( East::None, South::Tall, North::Low, true, West::None, false, ) => 21084,
                ( East::None, South::Tall, North::Low, true, West::Low, false, ) => 21085,
                ( East::None, South::Tall, North::Low, true, West::Tall, false, ) => 21086,
                ( East::None, South::Tall, North::Low, false, West::None, true, ) => 21087,
                ( East::None, South::Tall, North::Low, false, West::Low, true, ) => 21088,
                ( East::None, South::Tall, North::Low, false, West::Tall, true, ) => 21089,
                ( East::None, South::Tall, North::Low, false, West::None, false, ) => 21090,
                ( East::None, South::Tall, North::Low, false, West::Low, false, ) => 21091,
                ( East::None, South::Tall, North::Low, false, West::Tall, false, ) => 21092,
                ( East::None, South::None, North::Tall, true, West::None, true, ) => 21093,
                ( East::None, South::None, North::Tall, true, West::Low, true, ) => 21094,
                ( East::None, South::None, North::Tall, true, West::Tall, true, ) => 21095,
                ( East::None, South::None, North::Tall, true, West::None, false, ) => 21096,
                ( East::None, South::None, North::Tall, true, West::Low, false, ) => 21097,
                ( East::None, South::None, North::Tall, true, West::Tall, false, ) => 21098,
                ( East::None, South::None, North::Tall, false, West::None, true, ) => 21099,
                ( East::None, South::None, North::Tall, false, West::Low, true, ) => 21100,
                ( East::None, South::None, North::Tall, false, West::Tall, true, ) => 21101,
                ( East::None, South::None, North::Tall, false, West::None, false, ) => 21102,
                ( East::None, South::None, North::Tall, false, West::Low, false, ) => 21103,
                ( East::None, South::None, North::Tall, false, West::Tall, false, ) => 21104,
                ( East::None, South::Low, North::Tall, true, West::None, true, ) => 21105,
                ( East::None, South::Low, North::Tall, true, West::Low, true, ) => 21106,
                ( East::None, South::Low, North::Tall, true, West::Tall, true, ) => 21107,
                ( East::None, South::Low, North::Tall, true, West::None, false, ) => 21108,
                ( East::None, South::Low, North::Tall, true, West::Low, false, ) => 21109,
                ( East::None, South::Low, North::Tall, true, West::Tall, false, ) => 21110,
                ( East::None, South::Low, North::Tall, false, West::None, true, ) => 21111,
                ( East::None, South::Low, North::Tall, false, West::Low, true, ) => 21112,
                ( East::None, South::Low, North::Tall, false, West::Tall, true, ) => 21113,
                ( East::None, South::Low, North::Tall, false, West::None, false, ) => 21114,
                ( East::None, South::Low, North::Tall, false, West::Low, false, ) => 21115,
                ( East::None, South::Low, North::Tall, false, West::Tall, false, ) => 21116,
                ( East::None, South::Tall, North::Tall, true, West::None, true, ) => 21117,
                ( East::None, South::Tall, North::Tall, true, West::Low, true, ) => 21118,
                ( East::None, South::Tall, North::Tall, true, West::Tall, true, ) => 21119,
                ( East::None, South::Tall, North::Tall, true, West::None, false, ) => 21120,
                ( East::None, South::Tall, North::Tall, true, West::Low, false, ) => 21121,
                ( East::None, South::Tall, North::Tall, true, West::Tall, false, ) => 21122,
                ( East::None, South::Tall, North::Tall, false, West::None, true, ) => 21123,
                ( East::None, South::Tall, North::Tall, false, West::Low, true, ) => 21124,
                ( East::None, South::Tall, North::Tall, false, West::Tall, true, ) => 21125,
                ( East::None, South::Tall, North::Tall, false, West::None, false, ) => 21126,
                ( East::None, South::Tall, North::Tall, false, West::Low, false, ) => 21127,
                ( East::None, South::Tall, North::Tall, false, West::Tall, false, ) => 21128,
                ( East::Low, South::None, North::None, true, West::None, true, ) => 21129,
                ( East::Low, South::None, North::None, true, West::Low, true, ) => 21130,
                ( East::Low, South::None, North::None, true, West::Tall, true, ) => 21131,
                ( East::Low, South::None, North::None, true, West::None, false, ) => 21132,
                ( East::Low, South::None, North::None, true, West::Low, false, ) => 21133,
                ( East::Low, South::None, North::None, true, West::Tall, false, ) => 21134,
                ( East::Low, South::None, North::None, false, West::None, true, ) => 21135,
                ( East::Low, South::None, North::None, false, West::Low, true, ) => 21136,
                ( East::Low, South::None, North::None, false, West::Tall, true, ) => 21137,
                ( East::Low, South::None, North::None, false, West::None, false, ) => 21138,
                ( East::Low, South::None, North::None, false, West::Low, false, ) => 21139,
                ( East::Low, South::None, North::None, false, West::Tall, false, ) => 21140,
                ( East::Low, South::Low, North::None, true, West::None, true, ) => 21141,
                ( East::Low, South::Low, North::None, true, West::Low, true, ) => 21142,
                ( East::Low, South::Low, North::None, true, West::Tall, true, ) => 21143,
                ( East::Low, South::Low, North::None, true, West::None, false, ) => 21144,
                ( East::Low, South::Low, North::None, true, West::Low, false, ) => 21145,
                ( East::Low, South::Low, North::None, true, West::Tall, false, ) => 21146,
                ( East::Low, South::Low, North::None, false, West::None, true, ) => 21147,
                ( East::Low, South::Low, North::None, false, West::Low, true, ) => 21148,
                ( East::Low, South::Low, North::None, false, West::Tall, true, ) => 21149,
                ( East::Low, South::Low, North::None, false, West::None, false, ) => 21150,
                ( East::Low, South::Low, North::None, false, West::Low, false, ) => 21151,
                ( East::Low, South::Low, North::None, false, West::Tall, false, ) => 21152,
                ( East::Low, South::Tall, North::None, true, West::None, true, ) => 21153,
                ( East::Low, South::Tall, North::None, true, West::Low, true, ) => 21154,
                ( East::Low, South::Tall, North::None, true, West::Tall, true, ) => 21155,
                ( East::Low, South::Tall, North::None, true, West::None, false, ) => 21156,
                ( East::Low, South::Tall, North::None, true, West::Low, false, ) => 21157,
                ( East::Low, South::Tall, North::None, true, West::Tall, false, ) => 21158,
                ( East::Low, South::Tall, North::None, false, West::None, true, ) => 21159,
                ( East::Low, South::Tall, North::None, false, West::Low, true, ) => 21160,
                ( East::Low, South::Tall, North::None, false, West::Tall, true, ) => 21161,
                ( East::Low, South::Tall, North::None, false, West::None, false, ) => 21162,
                ( East::Low, South::Tall, North::None, false, West::Low, false, ) => 21163,
                ( East::Low, South::Tall, North::None, false, West::Tall, false, ) => 21164,
                ( East::Low, South::None, North::Low, true, West::None, true, ) => 21165,
                ( East::Low, South::None, North::Low, true, West::Low, true, ) => 21166,
                ( East::Low, South::None, North::Low, true, West::Tall, true, ) => 21167,
                ( East::Low, South::None, North::Low, true, West::None, false, ) => 21168,
                ( East::Low, South::None, North::Low, true, West::Low, false, ) => 21169,
                ( East::Low, South::None, North::Low, true, West::Tall, false, ) => 21170,
                ( East::Low, South::None, North::Low, false, West::None, true, ) => 21171,
                ( East::Low, South::None, North::Low, false, West::Low, true, ) => 21172,
                ( East::Low, South::None, North::Low, false, West::Tall, true, ) => 21173,
                ( East::Low, South::None, North::Low, false, West::None, false, ) => 21174,
                ( East::Low, South::None, North::Low, false, West::Low, false, ) => 21175,
                ( East::Low, South::None, North::Low, false, West::Tall, false, ) => 21176,
                ( East::Low, South::Low, North::Low, true, West::None, true, ) => 21177,
                ( East::Low, South::Low, North::Low, true, West::Low, true, ) => 21178,
                ( East::Low, South::Low, North::Low, true, West::Tall, true, ) => 21179,
                ( East::Low, South::Low, North::Low, true, West::None, false, ) => 21180,
                ( East::Low, South::Low, North::Low, true, West::Low, false, ) => 21181,
                ( East::Low, South::Low, North::Low, true, West::Tall, false, ) => 21182,
                ( East::Low, South::Low, North::Low, false, West::None, true, ) => 21183,
                ( East::Low, South::Low, North::Low, false, West::Low, true, ) => 21184,
                ( East::Low, South::Low, North::Low, false, West::Tall, true, ) => 21185,
                ( East::Low, South::Low, North::Low, false, West::None, false, ) => 21186,
                ( East::Low, South::Low, North::Low, false, West::Low, false, ) => 21187,
                ( East::Low, South::Low, North::Low, false, West::Tall, false, ) => 21188,
                ( East::Low, South::Tall, North::Low, true, West::None, true, ) => 21189,
                ( East::Low, South::Tall, North::Low, true, West::Low, true, ) => 21190,
                ( East::Low, South::Tall, North::Low, true, West::Tall, true, ) => 21191,
                ( East::Low, South::Tall, North::Low, true, West::None, false, ) => 21192,
                ( East::Low, South::Tall, North::Low, true, West::Low, false, ) => 21193,
                ( East::Low, South::Tall, North::Low, true, West::Tall, false, ) => 21194,
                ( East::Low, South::Tall, North::Low, false, West::None, true, ) => 21195,
                ( East::Low, South::Tall, North::Low, false, West::Low, true, ) => 21196,
                ( East::Low, South::Tall, North::Low, false, West::Tall, true, ) => 21197,
                ( East::Low, South::Tall, North::Low, false, West::None, false, ) => 21198,
                ( East::Low, South::Tall, North::Low, false, West::Low, false, ) => 21199,
                ( East::Low, South::Tall, North::Low, false, West::Tall, false, ) => 21200,
                ( East::Low, South::None, North::Tall, true, West::None, true, ) => 21201,
                ( East::Low, South::None, North::Tall, true, West::Low, true, ) => 21202,
                ( East::Low, South::None, North::Tall, true, West::Tall, true, ) => 21203,
                ( East::Low, South::None, North::Tall, true, West::None, false, ) => 21204,
                ( East::Low, South::None, North::Tall, true, West::Low, false, ) => 21205,
                ( East::Low, South::None, North::Tall, true, West::Tall, false, ) => 21206,
                ( East::Low, South::None, North::Tall, false, West::None, true, ) => 21207,
                ( East::Low, South::None, North::Tall, false, West::Low, true, ) => 21208,
                ( East::Low, South::None, North::Tall, false, West::Tall, true, ) => 21209,
                ( East::Low, South::None, North::Tall, false, West::None, false, ) => 21210,
                ( East::Low, South::None, North::Tall, false, West::Low, false, ) => 21211,
                ( East::Low, South::None, North::Tall, false, West::Tall, false, ) => 21212,
                ( East::Low, South::Low, North::Tall, true, West::None, true, ) => 21213,
                ( East::Low, South::Low, North::Tall, true, West::Low, true, ) => 21214,
                ( East::Low, South::Low, North::Tall, true, West::Tall, true, ) => 21215,
                ( East::Low, South::Low, North::Tall, true, West::None, false, ) => 21216,
                ( East::Low, South::Low, North::Tall, true, West::Low, false, ) => 21217,
                ( East::Low, South::Low, North::Tall, true, West::Tall, false, ) => 21218,
                ( East::Low, South::Low, North::Tall, false, West::None, true, ) => 21219,
                ( East::Low, South::Low, North::Tall, false, West::Low, true, ) => 21220,
                ( East::Low, South::Low, North::Tall, false, West::Tall, true, ) => 21221,
                ( East::Low, South::Low, North::Tall, false, West::None, false, ) => 21222,
                ( East::Low, South::Low, North::Tall, false, West::Low, false, ) => 21223,
                ( East::Low, South::Low, North::Tall, false, West::Tall, false, ) => 21224,
                ( East::Low, South::Tall, North::Tall, true, West::None, true, ) => 21225,
                ( East::Low, South::Tall, North::Tall, true, West::Low, true, ) => 21226,
                ( East::Low, South::Tall, North::Tall, true, West::Tall, true, ) => 21227,
                ( East::Low, South::Tall, North::Tall, true, West::None, false, ) => 21228,
                ( East::Low, South::Tall, North::Tall, true, West::Low, false, ) => 21229,
                ( East::Low, South::Tall, North::Tall, true, West::Tall, false, ) => 21230,
                ( East::Low, South::Tall, North::Tall, false, West::None, true, ) => 21231,
                ( East::Low, South::Tall, North::Tall, false, West::Low, true, ) => 21232,
                ( East::Low, South::Tall, North::Tall, false, West::Tall, true, ) => 21233,
                ( East::Low, South::Tall, North::Tall, false, West::None, false, ) => 21234,
                ( East::Low, South::Tall, North::Tall, false, West::Low, false, ) => 21235,
                ( East::Low, South::Tall, North::Tall, false, West::Tall, false, ) => 21236,
                ( East::Tall, South::None, North::None, true, West::None, true, ) => 21237,
                ( East::Tall, South::None, North::None, true, West::Low, true, ) => 21238,
                ( East::Tall, South::None, North::None, true, West::Tall, true, ) => 21239,
                ( East::Tall, South::None, North::None, true, West::None, false, ) => 21240,
                ( East::Tall, South::None, North::None, true, West::Low, false, ) => 21241,
                ( East::Tall, South::None, North::None, true, West::Tall, false, ) => 21242,
                ( East::Tall, South::None, North::None, false, West::None, true, ) => 21243,
                ( East::Tall, South::None, North::None, false, West::Low, true, ) => 21244,
                ( East::Tall, South::None, North::None, false, West::Tall, true, ) => 21245,
                ( East::Tall, South::None, North::None, false, West::None, false, ) => 21246,
                ( East::Tall, South::None, North::None, false, West::Low, false, ) => 21247,
                ( East::Tall, South::None, North::None, false, West::Tall, false, ) => 21248,
                ( East::Tall, South::Low, North::None, true, West::None, true, ) => 21249,
                ( East::Tall, South::Low, North::None, true, West::Low, true, ) => 21250,
                ( East::Tall, South::Low, North::None, true, West::Tall, true, ) => 21251,
                ( East::Tall, South::Low, North::None, true, West::None, false, ) => 21252,
                ( East::Tall, South::Low, North::None, true, West::Low, false, ) => 21253,
                ( East::Tall, South::Low, North::None, true, West::Tall, false, ) => 21254,
                ( East::Tall, South::Low, North::None, false, West::None, true, ) => 21255,
                ( East::Tall, South::Low, North::None, false, West::Low, true, ) => 21256,
                ( East::Tall, South::Low, North::None, false, West::Tall, true, ) => 21257,
                ( East::Tall, South::Low, North::None, false, West::None, false, ) => 21258,
                ( East::Tall, South::Low, North::None, false, West::Low, false, ) => 21259,
                ( East::Tall, South::Low, North::None, false, West::Tall, false, ) => 21260,
                ( East::Tall, South::Tall, North::None, true, West::None, true, ) => 21261,
                ( East::Tall, South::Tall, North::None, true, West::Low, true, ) => 21262,
                ( East::Tall, South::Tall, North::None, true, West::Tall, true, ) => 21263,
                ( East::Tall, South::Tall, North::None, true, West::None, false, ) => 21264,
                ( East::Tall, South::Tall, North::None, true, West::Low, false, ) => 21265,
                ( East::Tall, South::Tall, North::None, true, West::Tall, false, ) => 21266,
                ( East::Tall, South::Tall, North::None, false, West::None, true, ) => 21267,
                ( East::Tall, South::Tall, North::None, false, West::Low, true, ) => 21268,
                ( East::Tall, South::Tall, North::None, false, West::Tall, true, ) => 21269,
                ( East::Tall, South::Tall, North::None, false, West::None, false, ) => 21270,
                ( East::Tall, South::Tall, North::None, false, West::Low, false, ) => 21271,
                ( East::Tall, South::Tall, North::None, false, West::Tall, false, ) => 21272,
                ( East::Tall, South::None, North::Low, true, West::None, true, ) => 21273,
                ( East::Tall, South::None, North::Low, true, West::Low, true, ) => 21274,
                ( East::Tall, South::None, North::Low, true, West::Tall, true, ) => 21275,
                ( East::Tall, South::None, North::Low, true, West::None, false, ) => 21276,
                ( East::Tall, South::None, North::Low, true, West::Low, false, ) => 21277,
                ( East::Tall, South::None, North::Low, true, West::Tall, false, ) => 21278,
                ( East::Tall, South::None, North::Low, false, West::None, true, ) => 21279,
                ( East::Tall, South::None, North::Low, false, West::Low, true, ) => 21280,
                ( East::Tall, South::None, North::Low, false, West::Tall, true, ) => 21281,
                ( East::Tall, South::None, North::Low, false, West::None, false, ) => 21282,
                ( East::Tall, South::None, North::Low, false, West::Low, false, ) => 21283,
                ( East::Tall, South::None, North::Low, false, West::Tall, false, ) => 21284,
                ( East::Tall, South::Low, North::Low, true, West::None, true, ) => 21285,
                ( East::Tall, South::Low, North::Low, true, West::Low, true, ) => 21286,
                ( East::Tall, South::Low, North::Low, true, West::Tall, true, ) => 21287,
                ( East::Tall, South::Low, North::Low, true, West::None, false, ) => 21288,
                ( East::Tall, South::Low, North::Low, true, West::Low, false, ) => 21289,
                ( East::Tall, South::Low, North::Low, true, West::Tall, false, ) => 21290,
                ( East::Tall, South::Low, North::Low, false, West::None, true, ) => 21291,
                ( East::Tall, South::Low, North::Low, false, West::Low, true, ) => 21292,
                ( East::Tall, South::Low, North::Low, false, West::Tall, true, ) => 21293,
                ( East::Tall, South::Low, North::Low, false, West::None, false, ) => 21294,
                ( East::Tall, South::Low, North::Low, false, West::Low, false, ) => 21295,
                ( East::Tall, South::Low, North::Low, false, West::Tall, false, ) => 21296,
                ( East::Tall, South::Tall, North::Low, true, West::None, true, ) => 21297,
                ( East::Tall, South::Tall, North::Low, true, West::Low, true, ) => 21298,
                ( East::Tall, South::Tall, North::Low, true, West::Tall, true, ) => 21299,
                ( East::Tall, South::Tall, North::Low, true, West::None, false, ) => 21300,
                ( East::Tall, South::Tall, North::Low, true, West::Low, false, ) => 21301,
                ( East::Tall, South::Tall, North::Low, true, West::Tall, false, ) => 21302,
                ( East::Tall, South::Tall, North::Low, false, West::None, true, ) => 21303,
                ( East::Tall, South::Tall, North::Low, false, West::Low, true, ) => 21304,
                ( East::Tall, South::Tall, North::Low, false, West::Tall, true, ) => 21305,
                ( East::Tall, South::Tall, North::Low, false, West::None, false, ) => 21306,
                ( East::Tall, South::Tall, North::Low, false, West::Low, false, ) => 21307,
                ( East::Tall, South::Tall, North::Low, false, West::Tall, false, ) => 21308,
                ( East::Tall, South::None, North::Tall, true, West::None, true, ) => 21309,
                ( East::Tall, South::None, North::Tall, true, West::Low, true, ) => 21310,
                ( East::Tall, South::None, North::Tall, true, West::Tall, true, ) => 21311,
                ( East::Tall, South::None, North::Tall, true, West::None, false, ) => 21312,
                ( East::Tall, South::None, North::Tall, true, West::Low, false, ) => 21313,
                ( East::Tall, South::None, North::Tall, true, West::Tall, false, ) => 21314,
                ( East::Tall, South::None, North::Tall, false, West::None, true, ) => 21315,
                ( East::Tall, South::None, North::Tall, false, West::Low, true, ) => 21316,
                ( East::Tall, South::None, North::Tall, false, West::Tall, true, ) => 21317,
                ( East::Tall, South::None, North::Tall, false, West::None, false, ) => 21318,
                ( East::Tall, South::None, North::Tall, false, West::Low, false, ) => 21319,
                ( East::Tall, South::None, North::Tall, false, West::Tall, false, ) => 21320,
                ( East::Tall, South::Low, North::Tall, true, West::None, true, ) => 21321,
                ( East::Tall, South::Low, North::Tall, true, West::Low, true, ) => 21322,
                ( East::Tall, South::Low, North::Tall, true, West::Tall, true, ) => 21323,
                ( East::Tall, South::Low, North::Tall, true, West::None, false, ) => 21324,
                ( East::Tall, South::Low, North::Tall, true, West::Low, false, ) => 21325,
                ( East::Tall, South::Low, North::Tall, true, West::Tall, false, ) => 21326,
                ( East::Tall, South::Low, North::Tall, false, West::None, true, ) => 21327,
                ( East::Tall, South::Low, North::Tall, false, West::Low, true, ) => 21328,
                ( East::Tall, South::Low, North::Tall, false, West::Tall, true, ) => 21329,
                ( East::Tall, South::Low, North::Tall, false, West::None, false, ) => 21330,
                ( East::Tall, South::Low, North::Tall, false, West::Low, false, ) => 21331,
                ( East::Tall, South::Low, North::Tall, false, West::Tall, false, ) => 21332,
                ( East::Tall, South::Tall, North::Tall, true, West::None, true, ) => 21333,
                ( East::Tall, South::Tall, North::Tall, true, West::Low, true, ) => 21334,
                ( East::Tall, South::Tall, North::Tall, true, West::Tall, true, ) => 21335,
                ( East::Tall, South::Tall, North::Tall, true, West::None, false, ) => 21336,
                ( East::Tall, South::Tall, North::Tall, true, West::Low, false, ) => 21337,
                ( East::Tall, South::Tall, North::Tall, true, West::Tall, false, ) => 21338,
                ( East::Tall, South::Tall, North::Tall, false, West::None, true, ) => 21339,
                ( East::Tall, South::Tall, North::Tall, false, West::Low, true, ) => 21340,
                ( East::Tall, South::Tall, North::Tall, false, West::Tall, true, ) => 21341,
                ( East::Tall, South::Tall, North::Tall, false, West::None, false, ) => 21342,
                ( East::Tall, South::Tall, North::Tall, false, West::Low, false, ) => 21343,
                ( East::Tall, South::Tall, North::Tall, false, West::Tall, false, ) => 21344,
            })
        }
    }

    impl From<PolishedBlackstoneBrickWall> for BlockState {
        #[inline(always)]
        fn from(value : PolishedBlackstoneBrickWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedBlackstoneBrickWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedBlackstoneBrickWall { }

    impl Block for PolishedBlackstoneBrickWall {
        const DEFAULT_STATE : Self = Self {
            east : East::None,
            south : South::None,
            north : North::None,
            up : true,
            west : West::None,
            waterlogged : false,
        };
    }

}

/// `minecraft:cherry_trapdoor` block.
pub mod cherry_trapdoor {
    use super::*;

    /// `minecraft:cherry_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryTrapdoor {
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
        /// `open` state.
        pub open : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl CherryTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.powered, self.open, self.waterlogged, self.half, )) {
                ( Facing::North, true, true, true, Half::Top, ) => 6460,
                ( Facing::North, true, true, false, Half::Top, ) => 6461,
                ( Facing::North, false, true, true, Half::Top, ) => 6462,
                ( Facing::North, false, true, false, Half::Top, ) => 6463,
                ( Facing::North, true, false, true, Half::Top, ) => 6464,
                ( Facing::North, true, false, false, Half::Top, ) => 6465,
                ( Facing::North, false, false, true, Half::Top, ) => 6466,
                ( Facing::North, false, false, false, Half::Top, ) => 6467,
                ( Facing::North, true, true, true, Half::Bottom, ) => 6468,
                ( Facing::North, true, true, false, Half::Bottom, ) => 6469,
                ( Facing::North, false, true, true, Half::Bottom, ) => 6470,
                ( Facing::North, false, true, false, Half::Bottom, ) => 6471,
                ( Facing::North, true, false, true, Half::Bottom, ) => 6472,
                ( Facing::North, true, false, false, Half::Bottom, ) => 6473,
                ( Facing::North, false, false, true, Half::Bottom, ) => 6474,
                ( Facing::North, false, false, false, Half::Bottom, ) => 6475,
                ( Facing::South, true, true, true, Half::Top, ) => 6476,
                ( Facing::South, true, true, false, Half::Top, ) => 6477,
                ( Facing::South, false, true, true, Half::Top, ) => 6478,
                ( Facing::South, false, true, false, Half::Top, ) => 6479,
                ( Facing::South, true, false, true, Half::Top, ) => 6480,
                ( Facing::South, true, false, false, Half::Top, ) => 6481,
                ( Facing::South, false, false, true, Half::Top, ) => 6482,
                ( Facing::South, false, false, false, Half::Top, ) => 6483,
                ( Facing::South, true, true, true, Half::Bottom, ) => 6484,
                ( Facing::South, true, true, false, Half::Bottom, ) => 6485,
                ( Facing::South, false, true, true, Half::Bottom, ) => 6486,
                ( Facing::South, false, true, false, Half::Bottom, ) => 6487,
                ( Facing::South, true, false, true, Half::Bottom, ) => 6488,
                ( Facing::South, true, false, false, Half::Bottom, ) => 6489,
                ( Facing::South, false, false, true, Half::Bottom, ) => 6490,
                ( Facing::South, false, false, false, Half::Bottom, ) => 6491,
                ( Facing::West, true, true, true, Half::Top, ) => 6492,
                ( Facing::West, true, true, false, Half::Top, ) => 6493,
                ( Facing::West, false, true, true, Half::Top, ) => 6494,
                ( Facing::West, false, true, false, Half::Top, ) => 6495,
                ( Facing::West, true, false, true, Half::Top, ) => 6496,
                ( Facing::West, true, false, false, Half::Top, ) => 6497,
                ( Facing::West, false, false, true, Half::Top, ) => 6498,
                ( Facing::West, false, false, false, Half::Top, ) => 6499,
                ( Facing::West, true, true, true, Half::Bottom, ) => 6500,
                ( Facing::West, true, true, false, Half::Bottom, ) => 6501,
                ( Facing::West, false, true, true, Half::Bottom, ) => 6502,
                ( Facing::West, false, true, false, Half::Bottom, ) => 6503,
                ( Facing::West, true, false, true, Half::Bottom, ) => 6504,
                ( Facing::West, true, false, false, Half::Bottom, ) => 6505,
                ( Facing::West, false, false, true, Half::Bottom, ) => 6506,
                ( Facing::West, false, false, false, Half::Bottom, ) => 6507,
                ( Facing::East, true, true, true, Half::Top, ) => 6508,
                ( Facing::East, true, true, false, Half::Top, ) => 6509,
                ( Facing::East, false, true, true, Half::Top, ) => 6510,
                ( Facing::East, false, true, false, Half::Top, ) => 6511,
                ( Facing::East, true, false, true, Half::Top, ) => 6512,
                ( Facing::East, true, false, false, Half::Top, ) => 6513,
                ( Facing::East, false, false, true, Half::Top, ) => 6514,
                ( Facing::East, false, false, false, Half::Top, ) => 6515,
                ( Facing::East, true, true, true, Half::Bottom, ) => 6516,
                ( Facing::East, true, true, false, Half::Bottom, ) => 6517,
                ( Facing::East, false, true, true, Half::Bottom, ) => 6518,
                ( Facing::East, false, true, false, Half::Bottom, ) => 6519,
                ( Facing::East, true, false, true, Half::Bottom, ) => 6520,
                ( Facing::East, true, false, false, Half::Bottom, ) => 6521,
                ( Facing::East, false, false, true, Half::Bottom, ) => 6522,
                ( Facing::East, false, false, false, Half::Bottom, ) => 6523,
            })
        }
    }

    impl From<CherryTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : CherryTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryTrapdoor { }

    impl Block for CherryTrapdoor {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            powered : false,
            open : false,
            waterlogged : false,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:dead_tube_coral_block` block.
pub mod dead_tube_coral_block {
    use super::*;

    /// `minecraft:dead_tube_coral_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadTubeCoralBlock;

    impl DeadTubeCoralBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13858)
        }
    }

    impl From<DeadTubeCoralBlock> for BlockState {
        #[inline(always)]
        fn from(value : DeadTubeCoralBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadTubeCoralBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadTubeCoralBlock { }

    impl Block for DeadTubeCoralBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:orange_tulip` block.
pub mod orange_tulip {
    use super::*;

    /// `minecraft:orange_tulip` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeTulip;

    impl OrangeTulip {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2128)
        }
    }

    impl From<OrangeTulip> for BlockState {
        #[inline(always)]
        fn from(value : OrangeTulip) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeTulip {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeTulip { }

    impl Block for OrangeTulip {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_oxidized_copper_bulb` block.
pub mod waxed_oxidized_copper_bulb {
    use super::*;

    /// `minecraft:waxed_oxidized_copper_bulb` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedOxidizedCopperBulb {
        /// `lit` state.
        pub lit : bool,
        /// `powered` state.
        pub powered : bool,
    }

    impl WaxedOxidizedCopperBulb {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, self.powered, )) {
                ( true, true, ) => 25780,
                ( true, false, ) => 25781,
                ( false, true, ) => 25782,
                ( false, false, ) => 25783,
            })
        }
    }

    impl From<WaxedOxidizedCopperBulb> for BlockState {
        #[inline(always)]
        fn from(value : WaxedOxidizedCopperBulb) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedOxidizedCopperBulb {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedOxidizedCopperBulb { }

    impl Block for WaxedOxidizedCopperBulb {
        const DEFAULT_STATE : Self = Self {
            lit : false,
            powered : false,
        };
    }

}

/// `minecraft:waxed_weathered_copper_bulb` block.
pub mod waxed_weathered_copper_bulb {
    use super::*;

    /// `minecraft:waxed_weathered_copper_bulb` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedWeatheredCopperBulb {
        /// `lit` state.
        pub lit : bool,
        /// `powered` state.
        pub powered : bool,
    }

    impl WaxedWeatheredCopperBulb {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, self.powered, )) {
                ( true, true, ) => 25776,
                ( true, false, ) => 25777,
                ( false, true, ) => 25778,
                ( false, false, ) => 25779,
            })
        }
    }

    impl From<WaxedWeatheredCopperBulb> for BlockState {
        #[inline(always)]
        fn from(value : WaxedWeatheredCopperBulb) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedWeatheredCopperBulb {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedWeatheredCopperBulb { }

    impl Block for WaxedWeatheredCopperBulb {
        const DEFAULT_STATE : Self = Self {
            lit : false,
            powered : false,
        };
    }

}

/// `minecraft:attached_melon_stem` block.
pub mod attached_melon_stem {
    use super::*;

    /// `minecraft:attached_melon_stem` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AttachedMelonStem {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl AttachedMelonStem {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 7060,
                ( Facing::South, ) => 7061,
                ( Facing::West, ) => 7062,
                ( Facing::East, ) => 7063,
            })
        }
    }

    impl From<AttachedMelonStem> for BlockState {
        #[inline(always)]
        fn from(value : AttachedMelonStem) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AttachedMelonStem {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AttachedMelonStem { }

    impl Block for AttachedMelonStem {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:green_stained_glass` block.
pub mod green_stained_glass {
    use super::*;

    /// `minecraft:green_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenStainedGlass;

    impl GreenStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6137)
        }
    }

    impl From<GreenStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : GreenStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenStainedGlass { }

    impl Block for GreenStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:red_stained_glass_pane` block.
pub mod red_stained_glass_pane {
    use super::*;

    /// `minecraft:red_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedStainedGlassPane {
        /// `north` state.
        pub north : bool,
        /// `south` state.
        pub south : bool,
        /// `east` state.
        pub east : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : bool,
    }

    impl RedStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.south, self.east, self.waterlogged, self.west, )) {
                ( true, true, true, true, true, ) => 10629,
                ( true, true, true, true, false, ) => 10630,
                ( true, true, true, false, true, ) => 10631,
                ( true, true, true, false, false, ) => 10632,
                ( true, false, true, true, true, ) => 10633,
                ( true, false, true, true, false, ) => 10634,
                ( true, false, true, false, true, ) => 10635,
                ( true, false, true, false, false, ) => 10636,
                ( false, true, true, true, true, ) => 10637,
                ( false, true, true, true, false, ) => 10638,
                ( false, true, true, false, true, ) => 10639,
                ( false, true, true, false, false, ) => 10640,
                ( false, false, true, true, true, ) => 10641,
                ( false, false, true, true, false, ) => 10642,
                ( false, false, true, false, true, ) => 10643,
                ( false, false, true, false, false, ) => 10644,
                ( true, true, false, true, true, ) => 10645,
                ( true, true, false, true, false, ) => 10646,
                ( true, true, false, false, true, ) => 10647,
                ( true, true, false, false, false, ) => 10648,
                ( true, false, false, true, true, ) => 10649,
                ( true, false, false, true, false, ) => 10650,
                ( true, false, false, false, true, ) => 10651,
                ( true, false, false, false, false, ) => 10652,
                ( false, true, false, true, true, ) => 10653,
                ( false, true, false, true, false, ) => 10654,
                ( false, true, false, false, true, ) => 10655,
                ( false, true, false, false, false, ) => 10656,
                ( false, false, false, true, true, ) => 10657,
                ( false, false, false, true, false, ) => 10658,
                ( false, false, false, false, true, ) => 10659,
                ( false, false, false, false, false, ) => 10660,
            })
        }
    }

    impl From<RedStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : RedStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedStainedGlassPane { }

    impl Block for RedStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            north : false,
            south : false,
            east : false,
            waterlogged : false,
            west : false,
        };
    }

}

/// `minecraft:gray_carpet` block.
pub mod gray_carpet {
    use super::*;

    /// `minecraft:gray_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayCarpet;

    impl GrayCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11624)
        }
    }

    impl From<GrayCarpet> for BlockState {
        #[inline(always)]
        fn from(value : GrayCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayCarpet { }

    impl Block for GrayCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:deepslate_brick_slab` block.
pub mod deepslate_brick_slab {
    use super::*;

    /// `minecraft:deepslate_brick_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateBrickSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl DeepslateBrickSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 27313,
                ( Kind::Top, false, ) => 27314,
                ( Kind::Bottom, true, ) => 27315,
                ( Kind::Bottom, false, ) => 27316,
                ( Kind::Double, true, ) => 27317,
                ( Kind::Double, false, ) => 27318,
            })
        }
    }

    impl From<DeepslateBrickSlab> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateBrickSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateBrickSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateBrickSlab { }

    impl Block for DeepslateBrickSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:soul_campfire` block.
pub mod soul_campfire {
    use super::*;

    /// `minecraft:soul_campfire` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SoulCampfire {
        /// `facing` state.
        pub facing : Facing,
        /// `signal_fire` state.
        pub signal_fire : bool,
        /// `lit` state.
        pub lit : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl SoulCampfire {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.signal_fire, self.lit, self.waterlogged, )) {
                ( Facing::North, true, true, true, ) => 19598,
                ( Facing::North, true, true, false, ) => 19599,
                ( Facing::North, false, true, true, ) => 19600,
                ( Facing::North, false, true, false, ) => 19601,
                ( Facing::North, true, false, true, ) => 19602,
                ( Facing::North, true, false, false, ) => 19603,
                ( Facing::North, false, false, true, ) => 19604,
                ( Facing::North, false, false, false, ) => 19605,
                ( Facing::South, true, true, true, ) => 19606,
                ( Facing::South, true, true, false, ) => 19607,
                ( Facing::South, false, true, true, ) => 19608,
                ( Facing::South, false, true, false, ) => 19609,
                ( Facing::South, true, false, true, ) => 19610,
                ( Facing::South, true, false, false, ) => 19611,
                ( Facing::South, false, false, true, ) => 19612,
                ( Facing::South, false, false, false, ) => 19613,
                ( Facing::West, true, true, true, ) => 19614,
                ( Facing::West, true, true, false, ) => 19615,
                ( Facing::West, false, true, true, ) => 19616,
                ( Facing::West, false, true, false, ) => 19617,
                ( Facing::West, true, false, true, ) => 19618,
                ( Facing::West, true, false, false, ) => 19619,
                ( Facing::West, false, false, true, ) => 19620,
                ( Facing::West, false, false, false, ) => 19621,
                ( Facing::East, true, true, true, ) => 19622,
                ( Facing::East, true, true, false, ) => 19623,
                ( Facing::East, false, true, true, ) => 19624,
                ( Facing::East, false, true, false, ) => 19625,
                ( Facing::East, true, false, true, ) => 19626,
                ( Facing::East, true, false, false, ) => 19627,
                ( Facing::East, false, false, true, ) => 19628,
                ( Facing::East, false, false, false, ) => 19629,
            })
        }
    }

    impl From<SoulCampfire> for BlockState {
        #[inline(always)]
        fn from(value : SoulCampfire) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SoulCampfire {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SoulCampfire { }

    impl Block for SoulCampfire {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            signal_fire : false,
            lit : true,
            waterlogged : false,
        };
    }

}

/// `minecraft:light_blue_terracotta` block.
pub mod light_blue_terracotta {
    use super::*;

    /// `minecraft:light_blue_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueTerracotta;

    impl LightBlueTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10168)
        }
    }

    impl From<LightBlueTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueTerracotta { }

    impl Block for LightBlueTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cobbled_deepslate_stairs` block.
pub mod cobbled_deepslate_stairs {
    use super::*;

    /// `minecraft:cobbled_deepslate_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CobbledDeepslateStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl CobbledDeepslateStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.shape, self.waterlogged, self.half, )) {
                ( Facing::North, Shape::Straight, true, Half::Top, ) => 26000,
                ( Facing::North, Shape::Straight, false, Half::Top, ) => 26001,
                ( Facing::North, Shape::InnerLeft, true, Half::Top, ) => 26002,
                ( Facing::North, Shape::InnerLeft, false, Half::Top, ) => 26003,
                ( Facing::North, Shape::InnerRight, true, Half::Top, ) => 26004,
                ( Facing::North, Shape::InnerRight, false, Half::Top, ) => 26005,
                ( Facing::North, Shape::OuterLeft, true, Half::Top, ) => 26006,
                ( Facing::North, Shape::OuterLeft, false, Half::Top, ) => 26007,
                ( Facing::North, Shape::OuterRight, true, Half::Top, ) => 26008,
                ( Facing::North, Shape::OuterRight, false, Half::Top, ) => 26009,
                ( Facing::North, Shape::Straight, true, Half::Bottom, ) => 26010,
                ( Facing::North, Shape::Straight, false, Half::Bottom, ) => 26011,
                ( Facing::North, Shape::InnerLeft, true, Half::Bottom, ) => 26012,
                ( Facing::North, Shape::InnerLeft, false, Half::Bottom, ) => 26013,
                ( Facing::North, Shape::InnerRight, true, Half::Bottom, ) => 26014,
                ( Facing::North, Shape::InnerRight, false, Half::Bottom, ) => 26015,
                ( Facing::North, Shape::OuterLeft, true, Half::Bottom, ) => 26016,
                ( Facing::North, Shape::OuterLeft, false, Half::Bottom, ) => 26017,
                ( Facing::North, Shape::OuterRight, true, Half::Bottom, ) => 26018,
                ( Facing::North, Shape::OuterRight, false, Half::Bottom, ) => 26019,
                ( Facing::South, Shape::Straight, true, Half::Top, ) => 26020,
                ( Facing::South, Shape::Straight, false, Half::Top, ) => 26021,
                ( Facing::South, Shape::InnerLeft, true, Half::Top, ) => 26022,
                ( Facing::South, Shape::InnerLeft, false, Half::Top, ) => 26023,
                ( Facing::South, Shape::InnerRight, true, Half::Top, ) => 26024,
                ( Facing::South, Shape::InnerRight, false, Half::Top, ) => 26025,
                ( Facing::South, Shape::OuterLeft, true, Half::Top, ) => 26026,
                ( Facing::South, Shape::OuterLeft, false, Half::Top, ) => 26027,
                ( Facing::South, Shape::OuterRight, true, Half::Top, ) => 26028,
                ( Facing::South, Shape::OuterRight, false, Half::Top, ) => 26029,
                ( Facing::South, Shape::Straight, true, Half::Bottom, ) => 26030,
                ( Facing::South, Shape::Straight, false, Half::Bottom, ) => 26031,
                ( Facing::South, Shape::InnerLeft, true, Half::Bottom, ) => 26032,
                ( Facing::South, Shape::InnerLeft, false, Half::Bottom, ) => 26033,
                ( Facing::South, Shape::InnerRight, true, Half::Bottom, ) => 26034,
                ( Facing::South, Shape::InnerRight, false, Half::Bottom, ) => 26035,
                ( Facing::South, Shape::OuterLeft, true, Half::Bottom, ) => 26036,
                ( Facing::South, Shape::OuterLeft, false, Half::Bottom, ) => 26037,
                ( Facing::South, Shape::OuterRight, true, Half::Bottom, ) => 26038,
                ( Facing::South, Shape::OuterRight, false, Half::Bottom, ) => 26039,
                ( Facing::West, Shape::Straight, true, Half::Top, ) => 26040,
                ( Facing::West, Shape::Straight, false, Half::Top, ) => 26041,
                ( Facing::West, Shape::InnerLeft, true, Half::Top, ) => 26042,
                ( Facing::West, Shape::InnerLeft, false, Half::Top, ) => 26043,
                ( Facing::West, Shape::InnerRight, true, Half::Top, ) => 26044,
                ( Facing::West, Shape::InnerRight, false, Half::Top, ) => 26045,
                ( Facing::West, Shape::OuterLeft, true, Half::Top, ) => 26046,
                ( Facing::West, Shape::OuterLeft, false, Half::Top, ) => 26047,
                ( Facing::West, Shape::OuterRight, true, Half::Top, ) => 26048,
                ( Facing::West, Shape::OuterRight, false, Half::Top, ) => 26049,
                ( Facing::West, Shape::Straight, true, Half::Bottom, ) => 26050,
                ( Facing::West, Shape::Straight, false, Half::Bottom, ) => 26051,
                ( Facing::West, Shape::InnerLeft, true, Half::Bottom, ) => 26052,
                ( Facing::West, Shape::InnerLeft, false, Half::Bottom, ) => 26053,
                ( Facing::West, Shape::InnerRight, true, Half::Bottom, ) => 26054,
                ( Facing::West, Shape::InnerRight, false, Half::Bottom, ) => 26055,
                ( Facing::West, Shape::OuterLeft, true, Half::Bottom, ) => 26056,
                ( Facing::West, Shape::OuterLeft, false, Half::Bottom, ) => 26057,
                ( Facing::West, Shape::OuterRight, true, Half::Bottom, ) => 26058,
                ( Facing::West, Shape::OuterRight, false, Half::Bottom, ) => 26059,
                ( Facing::East, Shape::Straight, true, Half::Top, ) => 26060,
                ( Facing::East, Shape::Straight, false, Half::Top, ) => 26061,
                ( Facing::East, Shape::InnerLeft, true, Half::Top, ) => 26062,
                ( Facing::East, Shape::InnerLeft, false, Half::Top, ) => 26063,
                ( Facing::East, Shape::InnerRight, true, Half::Top, ) => 26064,
                ( Facing::East, Shape::InnerRight, false, Half::Top, ) => 26065,
                ( Facing::East, Shape::OuterLeft, true, Half::Top, ) => 26066,
                ( Facing::East, Shape::OuterLeft, false, Half::Top, ) => 26067,
                ( Facing::East, Shape::OuterRight, true, Half::Top, ) => 26068,
                ( Facing::East, Shape::OuterRight, false, Half::Top, ) => 26069,
                ( Facing::East, Shape::Straight, true, Half::Bottom, ) => 26070,
                ( Facing::East, Shape::Straight, false, Half::Bottom, ) => 26071,
                ( Facing::East, Shape::InnerLeft, true, Half::Bottom, ) => 26072,
                ( Facing::East, Shape::InnerLeft, false, Half::Bottom, ) => 26073,
                ( Facing::East, Shape::InnerRight, true, Half::Bottom, ) => 26074,
                ( Facing::East, Shape::InnerRight, false, Half::Bottom, ) => 26075,
                ( Facing::East, Shape::OuterLeft, true, Half::Bottom, ) => 26076,
                ( Facing::East, Shape::OuterLeft, false, Half::Bottom, ) => 26077,
                ( Facing::East, Shape::OuterRight, true, Half::Bottom, ) => 26078,
                ( Facing::East, Shape::OuterRight, false, Half::Bottom, ) => 26079,
            })
        }
    }

    impl From<CobbledDeepslateStairs> for BlockState {
        #[inline(always)]
        fn from(value : CobbledDeepslateStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CobbledDeepslateStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CobbledDeepslateStairs { }

    impl Block for CobbledDeepslateStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            shape : Shape::Straight,
            waterlogged : false,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:pale_oak_fence_gate` block.
pub mod pale_oak_fence_gate {
    use super::*;

    /// `minecraft:pale_oak_fence_gate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakFenceGate {
        /// `facing` state.
        pub facing : Facing,
        /// `in_wall` state.
        pub in_wall : bool,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PaleOakFenceGate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.in_wall, self.open, self.powered, )) {
                ( Facing::North, true, true, true, ) => 12397,
                ( Facing::North, true, true, false, ) => 12398,
                ( Facing::North, true, false, true, ) => 12399,
                ( Facing::North, true, false, false, ) => 12400,
                ( Facing::North, false, true, true, ) => 12401,
                ( Facing::North, false, true, false, ) => 12402,
                ( Facing::North, false, false, true, ) => 12403,
                ( Facing::North, false, false, false, ) => 12404,
                ( Facing::South, true, true, true, ) => 12405,
                ( Facing::South, true, true, false, ) => 12406,
                ( Facing::South, true, false, true, ) => 12407,
                ( Facing::South, true, false, false, ) => 12408,
                ( Facing::South, false, true, true, ) => 12409,
                ( Facing::South, false, true, false, ) => 12410,
                ( Facing::South, false, false, true, ) => 12411,
                ( Facing::South, false, false, false, ) => 12412,
                ( Facing::West, true, true, true, ) => 12413,
                ( Facing::West, true, true, false, ) => 12414,
                ( Facing::West, true, false, true, ) => 12415,
                ( Facing::West, true, false, false, ) => 12416,
                ( Facing::West, false, true, true, ) => 12417,
                ( Facing::West, false, true, false, ) => 12418,
                ( Facing::West, false, false, true, ) => 12419,
                ( Facing::West, false, false, false, ) => 12420,
                ( Facing::East, true, true, true, ) => 12421,
                ( Facing::East, true, true, false, ) => 12422,
                ( Facing::East, true, false, true, ) => 12423,
                ( Facing::East, true, false, false, ) => 12424,
                ( Facing::East, false, true, true, ) => 12425,
                ( Facing::East, false, true, false, ) => 12426,
                ( Facing::East, false, false, true, ) => 12427,
                ( Facing::East, false, false, false, ) => 12428,
            })
        }
    }

    impl From<PaleOakFenceGate> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakFenceGate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakFenceGate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakFenceGate { }

    impl Block for PaleOakFenceGate {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            in_wall : false,
            open : false,
            powered : false,
        };
    }

}

/// `minecraft:cherry_stairs` block.
pub mod cherry_stairs {
    use super::*;

    /// `minecraft:cherry_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CherryStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.half, self.waterlogged, self.facing, )) {
                ( Shape::Straight, Half::Top, true, Facing::North, ) => 10773,
                ( Shape::Straight, Half::Top, false, Facing::North, ) => 10774,
                ( Shape::InnerLeft, Half::Top, true, Facing::North, ) => 10775,
                ( Shape::InnerLeft, Half::Top, false, Facing::North, ) => 10776,
                ( Shape::InnerRight, Half::Top, true, Facing::North, ) => 10777,
                ( Shape::InnerRight, Half::Top, false, Facing::North, ) => 10778,
                ( Shape::OuterLeft, Half::Top, true, Facing::North, ) => 10779,
                ( Shape::OuterLeft, Half::Top, false, Facing::North, ) => 10780,
                ( Shape::OuterRight, Half::Top, true, Facing::North, ) => 10781,
                ( Shape::OuterRight, Half::Top, false, Facing::North, ) => 10782,
                ( Shape::Straight, Half::Bottom, true, Facing::North, ) => 10783,
                ( Shape::Straight, Half::Bottom, false, Facing::North, ) => 10784,
                ( Shape::InnerLeft, Half::Bottom, true, Facing::North, ) => 10785,
                ( Shape::InnerLeft, Half::Bottom, false, Facing::North, ) => 10786,
                ( Shape::InnerRight, Half::Bottom, true, Facing::North, ) => 10787,
                ( Shape::InnerRight, Half::Bottom, false, Facing::North, ) => 10788,
                ( Shape::OuterLeft, Half::Bottom, true, Facing::North, ) => 10789,
                ( Shape::OuterLeft, Half::Bottom, false, Facing::North, ) => 10790,
                ( Shape::OuterRight, Half::Bottom, true, Facing::North, ) => 10791,
                ( Shape::OuterRight, Half::Bottom, false, Facing::North, ) => 10792,
                ( Shape::Straight, Half::Top, true, Facing::South, ) => 10793,
                ( Shape::Straight, Half::Top, false, Facing::South, ) => 10794,
                ( Shape::InnerLeft, Half::Top, true, Facing::South, ) => 10795,
                ( Shape::InnerLeft, Half::Top, false, Facing::South, ) => 10796,
                ( Shape::InnerRight, Half::Top, true, Facing::South, ) => 10797,
                ( Shape::InnerRight, Half::Top, false, Facing::South, ) => 10798,
                ( Shape::OuterLeft, Half::Top, true, Facing::South, ) => 10799,
                ( Shape::OuterLeft, Half::Top, false, Facing::South, ) => 10800,
                ( Shape::OuterRight, Half::Top, true, Facing::South, ) => 10801,
                ( Shape::OuterRight, Half::Top, false, Facing::South, ) => 10802,
                ( Shape::Straight, Half::Bottom, true, Facing::South, ) => 10803,
                ( Shape::Straight, Half::Bottom, false, Facing::South, ) => 10804,
                ( Shape::InnerLeft, Half::Bottom, true, Facing::South, ) => 10805,
                ( Shape::InnerLeft, Half::Bottom, false, Facing::South, ) => 10806,
                ( Shape::InnerRight, Half::Bottom, true, Facing::South, ) => 10807,
                ( Shape::InnerRight, Half::Bottom, false, Facing::South, ) => 10808,
                ( Shape::OuterLeft, Half::Bottom, true, Facing::South, ) => 10809,
                ( Shape::OuterLeft, Half::Bottom, false, Facing::South, ) => 10810,
                ( Shape::OuterRight, Half::Bottom, true, Facing::South, ) => 10811,
                ( Shape::OuterRight, Half::Bottom, false, Facing::South, ) => 10812,
                ( Shape::Straight, Half::Top, true, Facing::West, ) => 10813,
                ( Shape::Straight, Half::Top, false, Facing::West, ) => 10814,
                ( Shape::InnerLeft, Half::Top, true, Facing::West, ) => 10815,
                ( Shape::InnerLeft, Half::Top, false, Facing::West, ) => 10816,
                ( Shape::InnerRight, Half::Top, true, Facing::West, ) => 10817,
                ( Shape::InnerRight, Half::Top, false, Facing::West, ) => 10818,
                ( Shape::OuterLeft, Half::Top, true, Facing::West, ) => 10819,
                ( Shape::OuterLeft, Half::Top, false, Facing::West, ) => 10820,
                ( Shape::OuterRight, Half::Top, true, Facing::West, ) => 10821,
                ( Shape::OuterRight, Half::Top, false, Facing::West, ) => 10822,
                ( Shape::Straight, Half::Bottom, true, Facing::West, ) => 10823,
                ( Shape::Straight, Half::Bottom, false, Facing::West, ) => 10824,
                ( Shape::InnerLeft, Half::Bottom, true, Facing::West, ) => 10825,
                ( Shape::InnerLeft, Half::Bottom, false, Facing::West, ) => 10826,
                ( Shape::InnerRight, Half::Bottom, true, Facing::West, ) => 10827,
                ( Shape::InnerRight, Half::Bottom, false, Facing::West, ) => 10828,
                ( Shape::OuterLeft, Half::Bottom, true, Facing::West, ) => 10829,
                ( Shape::OuterLeft, Half::Bottom, false, Facing::West, ) => 10830,
                ( Shape::OuterRight, Half::Bottom, true, Facing::West, ) => 10831,
                ( Shape::OuterRight, Half::Bottom, false, Facing::West, ) => 10832,
                ( Shape::Straight, Half::Top, true, Facing::East, ) => 10833,
                ( Shape::Straight, Half::Top, false, Facing::East, ) => 10834,
                ( Shape::InnerLeft, Half::Top, true, Facing::East, ) => 10835,
                ( Shape::InnerLeft, Half::Top, false, Facing::East, ) => 10836,
                ( Shape::InnerRight, Half::Top, true, Facing::East, ) => 10837,
                ( Shape::InnerRight, Half::Top, false, Facing::East, ) => 10838,
                ( Shape::OuterLeft, Half::Top, true, Facing::East, ) => 10839,
                ( Shape::OuterLeft, Half::Top, false, Facing::East, ) => 10840,
                ( Shape::OuterRight, Half::Top, true, Facing::East, ) => 10841,
                ( Shape::OuterRight, Half::Top, false, Facing::East, ) => 10842,
                ( Shape::Straight, Half::Bottom, true, Facing::East, ) => 10843,
                ( Shape::Straight, Half::Bottom, false, Facing::East, ) => 10844,
                ( Shape::InnerLeft, Half::Bottom, true, Facing::East, ) => 10845,
                ( Shape::InnerLeft, Half::Bottom, false, Facing::East, ) => 10846,
                ( Shape::InnerRight, Half::Bottom, true, Facing::East, ) => 10847,
                ( Shape::InnerRight, Half::Bottom, false, Facing::East, ) => 10848,
                ( Shape::OuterLeft, Half::Bottom, true, Facing::East, ) => 10849,
                ( Shape::OuterLeft, Half::Bottom, false, Facing::East, ) => 10850,
                ( Shape::OuterRight, Half::Bottom, true, Facing::East, ) => 10851,
                ( Shape::OuterRight, Half::Bottom, false, Facing::East, ) => 10852,
            })
        }
    }

    impl From<CherryStairs> for BlockState {
        #[inline(always)]
        fn from(value : CherryStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryStairs { }

    impl Block for CherryStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            half : Half::Bottom,
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:deepslate_lapis_ore` block.
pub mod deepslate_lapis_ore {
    use super::*;

    /// `minecraft:deepslate_lapis_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateLapisOre;

    impl DeepslateLapisOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(564)
        }
    }

    impl From<DeepslateLapisOre> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateLapisOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateLapisOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateLapisOre { }

    impl Block for DeepslateLapisOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dried_kelp_block` block.
pub mod dried_kelp_block {
    use super::*;

    /// `minecraft:dried_kelp_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DriedKelpBlock;

    impl DriedKelpBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13810)
        }
    }

    impl From<DriedKelpBlock> for BlockState {
        #[inline(always)]
        fn from(value : DriedKelpBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DriedKelpBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DriedKelpBlock { }

    impl Block for DriedKelpBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:azure_bluet` block.
pub mod azure_bluet {
    use super::*;

    /// `minecraft:azure_bluet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AzureBluet;

    impl AzureBluet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2126)
        }
    }

    impl From<AzureBluet> for BlockState {
        #[inline(always)]
        fn from(value : AzureBluet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AzureBluet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AzureBluet { }

    impl Block for AzureBluet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:detector_rail` block.
pub mod detector_rail {
    use super::*;

    /// `minecraft:detector_rail` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DetectorRail {
        /// `powered` state.
        pub powered : bool,
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `north_south` variant.
        NorthSouth,
        /// `east_west` variant.
        EastWest,
        /// `ascending_east` variant.
        AscendingEast,
        /// `ascending_west` variant.
        AscendingWest,
        /// `ascending_north` variant.
        AscendingNorth,
        /// `ascending_south` variant.
        AscendingSouth,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl DetectorRail {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.shape, self.waterlogged, )) {
                ( true, Shape::NorthSouth, true, ) => 2011,
                ( true, Shape::NorthSouth, false, ) => 2012,
                ( true, Shape::EastWest, true, ) => 2013,
                ( true, Shape::EastWest, false, ) => 2014,
                ( true, Shape::AscendingEast, true, ) => 2015,
                ( true, Shape::AscendingEast, false, ) => 2016,
                ( true, Shape::AscendingWest, true, ) => 2017,
                ( true, Shape::AscendingWest, false, ) => 2018,
                ( true, Shape::AscendingNorth, true, ) => 2019,
                ( true, Shape::AscendingNorth, false, ) => 2020,
                ( true, Shape::AscendingSouth, true, ) => 2021,
                ( true, Shape::AscendingSouth, false, ) => 2022,
                ( false, Shape::NorthSouth, true, ) => 2023,
                ( false, Shape::NorthSouth, false, ) => 2024,
                ( false, Shape::EastWest, true, ) => 2025,
                ( false, Shape::EastWest, false, ) => 2026,
                ( false, Shape::AscendingEast, true, ) => 2027,
                ( false, Shape::AscendingEast, false, ) => 2028,
                ( false, Shape::AscendingWest, true, ) => 2029,
                ( false, Shape::AscendingWest, false, ) => 2030,
                ( false, Shape::AscendingNorth, true, ) => 2031,
                ( false, Shape::AscendingNorth, false, ) => 2032,
                ( false, Shape::AscendingSouth, true, ) => 2033,
                ( false, Shape::AscendingSouth, false, ) => 2034,
            })
        }
    }

    impl From<DetectorRail> for BlockState {
        #[inline(always)]
        fn from(value : DetectorRail) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DetectorRail {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DetectorRail { }

    impl Block for DetectorRail {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            shape : Shape::NorthSouth,
            waterlogged : false,
        };
    }

}

/// `minecraft:beehive` block.
pub mod beehive {
    use super::*;

    /// `minecraft:beehive` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Beehive {
        /// `honey_level` state.
        pub honey_level : HoneyLevel,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `honey_level` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum HoneyLevel {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
    }
    impl crate::Sealed for HoneyLevel { }
    impl BlockProperty for HoneyLevel { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Beehive {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.honey_level, self.facing, )) {
                ( HoneyLevel::N0, Facing::North, ) => 20481,
                ( HoneyLevel::N1, Facing::North, ) => 20482,
                ( HoneyLevel::N2, Facing::North, ) => 20483,
                ( HoneyLevel::N3, Facing::North, ) => 20484,
                ( HoneyLevel::N4, Facing::North, ) => 20485,
                ( HoneyLevel::N5, Facing::North, ) => 20486,
                ( HoneyLevel::N0, Facing::South, ) => 20487,
                ( HoneyLevel::N1, Facing::South, ) => 20488,
                ( HoneyLevel::N2, Facing::South, ) => 20489,
                ( HoneyLevel::N3, Facing::South, ) => 20490,
                ( HoneyLevel::N4, Facing::South, ) => 20491,
                ( HoneyLevel::N5, Facing::South, ) => 20492,
                ( HoneyLevel::N0, Facing::West, ) => 20493,
                ( HoneyLevel::N1, Facing::West, ) => 20494,
                ( HoneyLevel::N2, Facing::West, ) => 20495,
                ( HoneyLevel::N3, Facing::West, ) => 20496,
                ( HoneyLevel::N4, Facing::West, ) => 20497,
                ( HoneyLevel::N5, Facing::West, ) => 20498,
                ( HoneyLevel::N0, Facing::East, ) => 20499,
                ( HoneyLevel::N1, Facing::East, ) => 20500,
                ( HoneyLevel::N2, Facing::East, ) => 20501,
                ( HoneyLevel::N3, Facing::East, ) => 20502,
                ( HoneyLevel::N4, Facing::East, ) => 20503,
                ( HoneyLevel::N5, Facing::East, ) => 20504,
            })
        }
    }

    impl From<Beehive> for BlockState {
        #[inline(always)]
        fn from(value : Beehive) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Beehive {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Beehive { }

    impl Block for Beehive {
        const DEFAULT_STATE : Self = Self {
            honey_level : HoneyLevel::N0,
            facing : Facing::North,
        };
    }

}

/// `minecraft:blue_candle` block.
pub mod blue_candle {
    use super::*;

    /// `minecraft:blue_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueCandle {
        /// `lit` state.
        pub lit : bool,
        /// `candles` state.
        pub candles : Candles,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl BlueCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, self.candles, self.waterlogged, )) {
                ( true, Candles::N1, true, ) => 21977,
                ( true, Candles::N1, false, ) => 21978,
                ( false, Candles::N1, true, ) => 21979,
                ( false, Candles::N1, false, ) => 21980,
                ( true, Candles::N2, true, ) => 21981,
                ( true, Candles::N2, false, ) => 21982,
                ( false, Candles::N2, true, ) => 21983,
                ( false, Candles::N2, false, ) => 21984,
                ( true, Candles::N3, true, ) => 21985,
                ( true, Candles::N3, false, ) => 21986,
                ( false, Candles::N3, true, ) => 21987,
                ( false, Candles::N3, false, ) => 21988,
                ( true, Candles::N4, true, ) => 21989,
                ( true, Candles::N4, false, ) => 21990,
                ( false, Candles::N4, true, ) => 21991,
                ( false, Candles::N4, false, ) => 21992,
            })
        }
    }

    impl From<BlueCandle> for BlockState {
        #[inline(always)]
        fn from(value : BlueCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueCandle { }

    impl Block for BlueCandle {
        const DEFAULT_STATE : Self = Self {
            lit : false,
            candles : Candles::N1,
            waterlogged : false,
        };
    }

}

/// `minecraft:dispenser` block.
pub mod dispenser {
    use super::*;

    /// `minecraft:dispenser` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Dispenser {
        /// `triggered` state.
        pub triggered : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Dispenser {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.triggered, self.facing, )) {
                ( true, Facing::North, ) => 566,
                ( false, Facing::North, ) => 567,
                ( true, Facing::East, ) => 568,
                ( false, Facing::East, ) => 569,
                ( true, Facing::South, ) => 570,
                ( false, Facing::South, ) => 571,
                ( true, Facing::West, ) => 572,
                ( false, Facing::West, ) => 573,
                ( true, Facing::Up, ) => 574,
                ( false, Facing::Up, ) => 575,
                ( true, Facing::Down, ) => 576,
                ( false, Facing::Down, ) => 577,
            })
        }
    }

    impl From<Dispenser> for BlockState {
        #[inline(always)]
        fn from(value : Dispenser) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Dispenser {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Dispenser { }

    impl Block for Dispenser {
        const DEFAULT_STATE : Self = Self {
            triggered : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:note_block` block.
pub mod note_block {
    use super::*;

    /// `minecraft:note_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct NoteBlock {
        /// `note` state.
        pub note : Note,
        /// `instrument` state.
        pub instrument : Instrument,
        /// `powered` state.
        pub powered : bool,
    }

    /// `note` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Note {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
        /// `16` variant.
        N16,
        /// `17` variant.
        N17,
        /// `18` variant.
        N18,
        /// `19` variant.
        N19,
        /// `20` variant.
        N20,
        /// `21` variant.
        N21,
        /// `22` variant.
        N22,
        /// `23` variant.
        N23,
        /// `24` variant.
        N24,
    }
    impl crate::Sealed for Note { }
    impl BlockProperty for Note { }

    /// `instrument` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Instrument {
        /// `harp` variant.
        Harp,
        /// `basedrum` variant.
        Basedrum,
        /// `snare` variant.
        Snare,
        /// `hat` variant.
        Hat,
        /// `bass` variant.
        Bass,
        /// `flute` variant.
        Flute,
        /// `bell` variant.
        Bell,
        /// `guitar` variant.
        Guitar,
        /// `chime` variant.
        Chime,
        /// `xylophone` variant.
        Xylophone,
        /// `iron_xylophone` variant.
        IronXylophone,
        /// `cow_bell` variant.
        CowBell,
        /// `didgeridoo` variant.
        Didgeridoo,
        /// `bit` variant.
        Bit,
        /// `banjo` variant.
        Banjo,
        /// `pling` variant.
        Pling,
        /// `zombie` variant.
        Zombie,
        /// `skeleton` variant.
        Skeleton,
        /// `creeper` variant.
        Creeper,
        /// `dragon` variant.
        Dragon,
        /// `wither_skeleton` variant.
        WitherSkeleton,
        /// `piglin` variant.
        Piglin,
        /// `custom_head` variant.
        CustomHead,
    }
    impl crate::Sealed for Instrument { }
    impl BlockProperty for Instrument { }

    impl NoteBlock {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.note, self.instrument, self.powered, )) {
                ( Note::N0, Instrument::Harp, true, ) => 581,
                ( Note::N0, Instrument::Harp, false, ) => 582,
                ( Note::N1, Instrument::Harp, true, ) => 583,
                ( Note::N1, Instrument::Harp, false, ) => 584,
                ( Note::N2, Instrument::Harp, true, ) => 585,
                ( Note::N2, Instrument::Harp, false, ) => 586,
                ( Note::N3, Instrument::Harp, true, ) => 587,
                ( Note::N3, Instrument::Harp, false, ) => 588,
                ( Note::N4, Instrument::Harp, true, ) => 589,
                ( Note::N4, Instrument::Harp, false, ) => 590,
                ( Note::N5, Instrument::Harp, true, ) => 591,
                ( Note::N5, Instrument::Harp, false, ) => 592,
                ( Note::N6, Instrument::Harp, true, ) => 593,
                ( Note::N6, Instrument::Harp, false, ) => 594,
                ( Note::N7, Instrument::Harp, true, ) => 595,
                ( Note::N7, Instrument::Harp, false, ) => 596,
                ( Note::N8, Instrument::Harp, true, ) => 597,
                ( Note::N8, Instrument::Harp, false, ) => 598,
                ( Note::N9, Instrument::Harp, true, ) => 599,
                ( Note::N9, Instrument::Harp, false, ) => 600,
                ( Note::N10, Instrument::Harp, true, ) => 601,
                ( Note::N10, Instrument::Harp, false, ) => 602,
                ( Note::N11, Instrument::Harp, true, ) => 603,
                ( Note::N11, Instrument::Harp, false, ) => 604,
                ( Note::N12, Instrument::Harp, true, ) => 605,
                ( Note::N12, Instrument::Harp, false, ) => 606,
                ( Note::N13, Instrument::Harp, true, ) => 607,
                ( Note::N13, Instrument::Harp, false, ) => 608,
                ( Note::N14, Instrument::Harp, true, ) => 609,
                ( Note::N14, Instrument::Harp, false, ) => 610,
                ( Note::N15, Instrument::Harp, true, ) => 611,
                ( Note::N15, Instrument::Harp, false, ) => 612,
                ( Note::N16, Instrument::Harp, true, ) => 613,
                ( Note::N16, Instrument::Harp, false, ) => 614,
                ( Note::N17, Instrument::Harp, true, ) => 615,
                ( Note::N17, Instrument::Harp, false, ) => 616,
                ( Note::N18, Instrument::Harp, true, ) => 617,
                ( Note::N18, Instrument::Harp, false, ) => 618,
                ( Note::N19, Instrument::Harp, true, ) => 619,
                ( Note::N19, Instrument::Harp, false, ) => 620,
                ( Note::N20, Instrument::Harp, true, ) => 621,
                ( Note::N20, Instrument::Harp, false, ) => 622,
                ( Note::N21, Instrument::Harp, true, ) => 623,
                ( Note::N21, Instrument::Harp, false, ) => 624,
                ( Note::N22, Instrument::Harp, true, ) => 625,
                ( Note::N22, Instrument::Harp, false, ) => 626,
                ( Note::N23, Instrument::Harp, true, ) => 627,
                ( Note::N23, Instrument::Harp, false, ) => 628,
                ( Note::N24, Instrument::Harp, true, ) => 629,
                ( Note::N24, Instrument::Harp, false, ) => 630,
                ( Note::N0, Instrument::Basedrum, true, ) => 631,
                ( Note::N0, Instrument::Basedrum, false, ) => 632,
                ( Note::N1, Instrument::Basedrum, true, ) => 633,
                ( Note::N1, Instrument::Basedrum, false, ) => 634,
                ( Note::N2, Instrument::Basedrum, true, ) => 635,
                ( Note::N2, Instrument::Basedrum, false, ) => 636,
                ( Note::N3, Instrument::Basedrum, true, ) => 637,
                ( Note::N3, Instrument::Basedrum, false, ) => 638,
                ( Note::N4, Instrument::Basedrum, true, ) => 639,
                ( Note::N4, Instrument::Basedrum, false, ) => 640,
                ( Note::N5, Instrument::Basedrum, true, ) => 641,
                ( Note::N5, Instrument::Basedrum, false, ) => 642,
                ( Note::N6, Instrument::Basedrum, true, ) => 643,
                ( Note::N6, Instrument::Basedrum, false, ) => 644,
                ( Note::N7, Instrument::Basedrum, true, ) => 645,
                ( Note::N7, Instrument::Basedrum, false, ) => 646,
                ( Note::N8, Instrument::Basedrum, true, ) => 647,
                ( Note::N8, Instrument::Basedrum, false, ) => 648,
                ( Note::N9, Instrument::Basedrum, true, ) => 649,
                ( Note::N9, Instrument::Basedrum, false, ) => 650,
                ( Note::N10, Instrument::Basedrum, true, ) => 651,
                ( Note::N10, Instrument::Basedrum, false, ) => 652,
                ( Note::N11, Instrument::Basedrum, true, ) => 653,
                ( Note::N11, Instrument::Basedrum, false, ) => 654,
                ( Note::N12, Instrument::Basedrum, true, ) => 655,
                ( Note::N12, Instrument::Basedrum, false, ) => 656,
                ( Note::N13, Instrument::Basedrum, true, ) => 657,
                ( Note::N13, Instrument::Basedrum, false, ) => 658,
                ( Note::N14, Instrument::Basedrum, true, ) => 659,
                ( Note::N14, Instrument::Basedrum, false, ) => 660,
                ( Note::N15, Instrument::Basedrum, true, ) => 661,
                ( Note::N15, Instrument::Basedrum, false, ) => 662,
                ( Note::N16, Instrument::Basedrum, true, ) => 663,
                ( Note::N16, Instrument::Basedrum, false, ) => 664,
                ( Note::N17, Instrument::Basedrum, true, ) => 665,
                ( Note::N17, Instrument::Basedrum, false, ) => 666,
                ( Note::N18, Instrument::Basedrum, true, ) => 667,
                ( Note::N18, Instrument::Basedrum, false, ) => 668,
                ( Note::N19, Instrument::Basedrum, true, ) => 669,
                ( Note::N19, Instrument::Basedrum, false, ) => 670,
                ( Note::N20, Instrument::Basedrum, true, ) => 671,
                ( Note::N20, Instrument::Basedrum, false, ) => 672,
                ( Note::N21, Instrument::Basedrum, true, ) => 673,
                ( Note::N21, Instrument::Basedrum, false, ) => 674,
                ( Note::N22, Instrument::Basedrum, true, ) => 675,
                ( Note::N22, Instrument::Basedrum, false, ) => 676,
                ( Note::N23, Instrument::Basedrum, true, ) => 677,
                ( Note::N23, Instrument::Basedrum, false, ) => 678,
                ( Note::N24, Instrument::Basedrum, true, ) => 679,
                ( Note::N24, Instrument::Basedrum, false, ) => 680,
                ( Note::N0, Instrument::Snare, true, ) => 681,
                ( Note::N0, Instrument::Snare, false, ) => 682,
                ( Note::N1, Instrument::Snare, true, ) => 683,
                ( Note::N1, Instrument::Snare, false, ) => 684,
                ( Note::N2, Instrument::Snare, true, ) => 685,
                ( Note::N2, Instrument::Snare, false, ) => 686,
                ( Note::N3, Instrument::Snare, true, ) => 687,
                ( Note::N3, Instrument::Snare, false, ) => 688,
                ( Note::N4, Instrument::Snare, true, ) => 689,
                ( Note::N4, Instrument::Snare, false, ) => 690,
                ( Note::N5, Instrument::Snare, true, ) => 691,
                ( Note::N5, Instrument::Snare, false, ) => 692,
                ( Note::N6, Instrument::Snare, true, ) => 693,
                ( Note::N6, Instrument::Snare, false, ) => 694,
                ( Note::N7, Instrument::Snare, true, ) => 695,
                ( Note::N7, Instrument::Snare, false, ) => 696,
                ( Note::N8, Instrument::Snare, true, ) => 697,
                ( Note::N8, Instrument::Snare, false, ) => 698,
                ( Note::N9, Instrument::Snare, true, ) => 699,
                ( Note::N9, Instrument::Snare, false, ) => 700,
                ( Note::N10, Instrument::Snare, true, ) => 701,
                ( Note::N10, Instrument::Snare, false, ) => 702,
                ( Note::N11, Instrument::Snare, true, ) => 703,
                ( Note::N11, Instrument::Snare, false, ) => 704,
                ( Note::N12, Instrument::Snare, true, ) => 705,
                ( Note::N12, Instrument::Snare, false, ) => 706,
                ( Note::N13, Instrument::Snare, true, ) => 707,
                ( Note::N13, Instrument::Snare, false, ) => 708,
                ( Note::N14, Instrument::Snare, true, ) => 709,
                ( Note::N14, Instrument::Snare, false, ) => 710,
                ( Note::N15, Instrument::Snare, true, ) => 711,
                ( Note::N15, Instrument::Snare, false, ) => 712,
                ( Note::N16, Instrument::Snare, true, ) => 713,
                ( Note::N16, Instrument::Snare, false, ) => 714,
                ( Note::N17, Instrument::Snare, true, ) => 715,
                ( Note::N17, Instrument::Snare, false, ) => 716,
                ( Note::N18, Instrument::Snare, true, ) => 717,
                ( Note::N18, Instrument::Snare, false, ) => 718,
                ( Note::N19, Instrument::Snare, true, ) => 719,
                ( Note::N19, Instrument::Snare, false, ) => 720,
                ( Note::N20, Instrument::Snare, true, ) => 721,
                ( Note::N20, Instrument::Snare, false, ) => 722,
                ( Note::N21, Instrument::Snare, true, ) => 723,
                ( Note::N21, Instrument::Snare, false, ) => 724,
                ( Note::N22, Instrument::Snare, true, ) => 725,
                ( Note::N22, Instrument::Snare, false, ) => 726,
                ( Note::N23, Instrument::Snare, true, ) => 727,
                ( Note::N23, Instrument::Snare, false, ) => 728,
                ( Note::N24, Instrument::Snare, true, ) => 729,
                ( Note::N24, Instrument::Snare, false, ) => 730,
                ( Note::N0, Instrument::Hat, true, ) => 731,
                ( Note::N0, Instrument::Hat, false, ) => 732,
                ( Note::N1, Instrument::Hat, true, ) => 733,
                ( Note::N1, Instrument::Hat, false, ) => 734,
                ( Note::N2, Instrument::Hat, true, ) => 735,
                ( Note::N2, Instrument::Hat, false, ) => 736,
                ( Note::N3, Instrument::Hat, true, ) => 737,
                ( Note::N3, Instrument::Hat, false, ) => 738,
                ( Note::N4, Instrument::Hat, true, ) => 739,
                ( Note::N4, Instrument::Hat, false, ) => 740,
                ( Note::N5, Instrument::Hat, true, ) => 741,
                ( Note::N5, Instrument::Hat, false, ) => 742,
                ( Note::N6, Instrument::Hat, true, ) => 743,
                ( Note::N6, Instrument::Hat, false, ) => 744,
                ( Note::N7, Instrument::Hat, true, ) => 745,
                ( Note::N7, Instrument::Hat, false, ) => 746,
                ( Note::N8, Instrument::Hat, true, ) => 747,
                ( Note::N8, Instrument::Hat, false, ) => 748,
                ( Note::N9, Instrument::Hat, true, ) => 749,
                ( Note::N9, Instrument::Hat, false, ) => 750,
                ( Note::N10, Instrument::Hat, true, ) => 751,
                ( Note::N10, Instrument::Hat, false, ) => 752,
                ( Note::N11, Instrument::Hat, true, ) => 753,
                ( Note::N11, Instrument::Hat, false, ) => 754,
                ( Note::N12, Instrument::Hat, true, ) => 755,
                ( Note::N12, Instrument::Hat, false, ) => 756,
                ( Note::N13, Instrument::Hat, true, ) => 757,
                ( Note::N13, Instrument::Hat, false, ) => 758,
                ( Note::N14, Instrument::Hat, true, ) => 759,
                ( Note::N14, Instrument::Hat, false, ) => 760,
                ( Note::N15, Instrument::Hat, true, ) => 761,
                ( Note::N15, Instrument::Hat, false, ) => 762,
                ( Note::N16, Instrument::Hat, true, ) => 763,
                ( Note::N16, Instrument::Hat, false, ) => 764,
                ( Note::N17, Instrument::Hat, true, ) => 765,
                ( Note::N17, Instrument::Hat, false, ) => 766,
                ( Note::N18, Instrument::Hat, true, ) => 767,
                ( Note::N18, Instrument::Hat, false, ) => 768,
                ( Note::N19, Instrument::Hat, true, ) => 769,
                ( Note::N19, Instrument::Hat, false, ) => 770,
                ( Note::N20, Instrument::Hat, true, ) => 771,
                ( Note::N20, Instrument::Hat, false, ) => 772,
                ( Note::N21, Instrument::Hat, true, ) => 773,
                ( Note::N21, Instrument::Hat, false, ) => 774,
                ( Note::N22, Instrument::Hat, true, ) => 775,
                ( Note::N22, Instrument::Hat, false, ) => 776,
                ( Note::N23, Instrument::Hat, true, ) => 777,
                ( Note::N23, Instrument::Hat, false, ) => 778,
                ( Note::N24, Instrument::Hat, true, ) => 779,
                ( Note::N24, Instrument::Hat, false, ) => 780,
                ( Note::N0, Instrument::Bass, true, ) => 781,
                ( Note::N0, Instrument::Bass, false, ) => 782,
                ( Note::N1, Instrument::Bass, true, ) => 783,
                ( Note::N1, Instrument::Bass, false, ) => 784,
                ( Note::N2, Instrument::Bass, true, ) => 785,
                ( Note::N2, Instrument::Bass, false, ) => 786,
                ( Note::N3, Instrument::Bass, true, ) => 787,
                ( Note::N3, Instrument::Bass, false, ) => 788,
                ( Note::N4, Instrument::Bass, true, ) => 789,
                ( Note::N4, Instrument::Bass, false, ) => 790,
                ( Note::N5, Instrument::Bass, true, ) => 791,
                ( Note::N5, Instrument::Bass, false, ) => 792,
                ( Note::N6, Instrument::Bass, true, ) => 793,
                ( Note::N6, Instrument::Bass, false, ) => 794,
                ( Note::N7, Instrument::Bass, true, ) => 795,
                ( Note::N7, Instrument::Bass, false, ) => 796,
                ( Note::N8, Instrument::Bass, true, ) => 797,
                ( Note::N8, Instrument::Bass, false, ) => 798,
                ( Note::N9, Instrument::Bass, true, ) => 799,
                ( Note::N9, Instrument::Bass, false, ) => 800,
                ( Note::N10, Instrument::Bass, true, ) => 801,
                ( Note::N10, Instrument::Bass, false, ) => 802,
                ( Note::N11, Instrument::Bass, true, ) => 803,
                ( Note::N11, Instrument::Bass, false, ) => 804,
                ( Note::N12, Instrument::Bass, true, ) => 805,
                ( Note::N12, Instrument::Bass, false, ) => 806,
                ( Note::N13, Instrument::Bass, true, ) => 807,
                ( Note::N13, Instrument::Bass, false, ) => 808,
                ( Note::N14, Instrument::Bass, true, ) => 809,
                ( Note::N14, Instrument::Bass, false, ) => 810,
                ( Note::N15, Instrument::Bass, true, ) => 811,
                ( Note::N15, Instrument::Bass, false, ) => 812,
                ( Note::N16, Instrument::Bass, true, ) => 813,
                ( Note::N16, Instrument::Bass, false, ) => 814,
                ( Note::N17, Instrument::Bass, true, ) => 815,
                ( Note::N17, Instrument::Bass, false, ) => 816,
                ( Note::N18, Instrument::Bass, true, ) => 817,
                ( Note::N18, Instrument::Bass, false, ) => 818,
                ( Note::N19, Instrument::Bass, true, ) => 819,
                ( Note::N19, Instrument::Bass, false, ) => 820,
                ( Note::N20, Instrument::Bass, true, ) => 821,
                ( Note::N20, Instrument::Bass, false, ) => 822,
                ( Note::N21, Instrument::Bass, true, ) => 823,
                ( Note::N21, Instrument::Bass, false, ) => 824,
                ( Note::N22, Instrument::Bass, true, ) => 825,
                ( Note::N22, Instrument::Bass, false, ) => 826,
                ( Note::N23, Instrument::Bass, true, ) => 827,
                ( Note::N23, Instrument::Bass, false, ) => 828,
                ( Note::N24, Instrument::Bass, true, ) => 829,
                ( Note::N24, Instrument::Bass, false, ) => 830,
                ( Note::N0, Instrument::Flute, true, ) => 831,
                ( Note::N0, Instrument::Flute, false, ) => 832,
                ( Note::N1, Instrument::Flute, true, ) => 833,
                ( Note::N1, Instrument::Flute, false, ) => 834,
                ( Note::N2, Instrument::Flute, true, ) => 835,
                ( Note::N2, Instrument::Flute, false, ) => 836,
                ( Note::N3, Instrument::Flute, true, ) => 837,
                ( Note::N3, Instrument::Flute, false, ) => 838,
                ( Note::N4, Instrument::Flute, true, ) => 839,
                ( Note::N4, Instrument::Flute, false, ) => 840,
                ( Note::N5, Instrument::Flute, true, ) => 841,
                ( Note::N5, Instrument::Flute, false, ) => 842,
                ( Note::N6, Instrument::Flute, true, ) => 843,
                ( Note::N6, Instrument::Flute, false, ) => 844,
                ( Note::N7, Instrument::Flute, true, ) => 845,
                ( Note::N7, Instrument::Flute, false, ) => 846,
                ( Note::N8, Instrument::Flute, true, ) => 847,
                ( Note::N8, Instrument::Flute, false, ) => 848,
                ( Note::N9, Instrument::Flute, true, ) => 849,
                ( Note::N9, Instrument::Flute, false, ) => 850,
                ( Note::N10, Instrument::Flute, true, ) => 851,
                ( Note::N10, Instrument::Flute, false, ) => 852,
                ( Note::N11, Instrument::Flute, true, ) => 853,
                ( Note::N11, Instrument::Flute, false, ) => 854,
                ( Note::N12, Instrument::Flute, true, ) => 855,
                ( Note::N12, Instrument::Flute, false, ) => 856,
                ( Note::N13, Instrument::Flute, true, ) => 857,
                ( Note::N13, Instrument::Flute, false, ) => 858,
                ( Note::N14, Instrument::Flute, true, ) => 859,
                ( Note::N14, Instrument::Flute, false, ) => 860,
                ( Note::N15, Instrument::Flute, true, ) => 861,
                ( Note::N15, Instrument::Flute, false, ) => 862,
                ( Note::N16, Instrument::Flute, true, ) => 863,
                ( Note::N16, Instrument::Flute, false, ) => 864,
                ( Note::N17, Instrument::Flute, true, ) => 865,
                ( Note::N17, Instrument::Flute, false, ) => 866,
                ( Note::N18, Instrument::Flute, true, ) => 867,
                ( Note::N18, Instrument::Flute, false, ) => 868,
                ( Note::N19, Instrument::Flute, true, ) => 869,
                ( Note::N19, Instrument::Flute, false, ) => 870,
                ( Note::N20, Instrument::Flute, true, ) => 871,
                ( Note::N20, Instrument::Flute, false, ) => 872,
                ( Note::N21, Instrument::Flute, true, ) => 873,
                ( Note::N21, Instrument::Flute, false, ) => 874,
                ( Note::N22, Instrument::Flute, true, ) => 875,
                ( Note::N22, Instrument::Flute, false, ) => 876,
                ( Note::N23, Instrument::Flute, true, ) => 877,
                ( Note::N23, Instrument::Flute, false, ) => 878,
                ( Note::N24, Instrument::Flute, true, ) => 879,
                ( Note::N24, Instrument::Flute, false, ) => 880,
                ( Note::N0, Instrument::Bell, true, ) => 881,
                ( Note::N0, Instrument::Bell, false, ) => 882,
                ( Note::N1, Instrument::Bell, true, ) => 883,
                ( Note::N1, Instrument::Bell, false, ) => 884,
                ( Note::N2, Instrument::Bell, true, ) => 885,
                ( Note::N2, Instrument::Bell, false, ) => 886,
                ( Note::N3, Instrument::Bell, true, ) => 887,
                ( Note::N3, Instrument::Bell, false, ) => 888,
                ( Note::N4, Instrument::Bell, true, ) => 889,
                ( Note::N4, Instrument::Bell, false, ) => 890,
                ( Note::N5, Instrument::Bell, true, ) => 891,
                ( Note::N5, Instrument::Bell, false, ) => 892,
                ( Note::N6, Instrument::Bell, true, ) => 893,
                ( Note::N6, Instrument::Bell, false, ) => 894,
                ( Note::N7, Instrument::Bell, true, ) => 895,
                ( Note::N7, Instrument::Bell, false, ) => 896,
                ( Note::N8, Instrument::Bell, true, ) => 897,
                ( Note::N8, Instrument::Bell, false, ) => 898,
                ( Note::N9, Instrument::Bell, true, ) => 899,
                ( Note::N9, Instrument::Bell, false, ) => 900,
                ( Note::N10, Instrument::Bell, true, ) => 901,
                ( Note::N10, Instrument::Bell, false, ) => 902,
                ( Note::N11, Instrument::Bell, true, ) => 903,
                ( Note::N11, Instrument::Bell, false, ) => 904,
                ( Note::N12, Instrument::Bell, true, ) => 905,
                ( Note::N12, Instrument::Bell, false, ) => 906,
                ( Note::N13, Instrument::Bell, true, ) => 907,
                ( Note::N13, Instrument::Bell, false, ) => 908,
                ( Note::N14, Instrument::Bell, true, ) => 909,
                ( Note::N14, Instrument::Bell, false, ) => 910,
                ( Note::N15, Instrument::Bell, true, ) => 911,
                ( Note::N15, Instrument::Bell, false, ) => 912,
                ( Note::N16, Instrument::Bell, true, ) => 913,
                ( Note::N16, Instrument::Bell, false, ) => 914,
                ( Note::N17, Instrument::Bell, true, ) => 915,
                ( Note::N17, Instrument::Bell, false, ) => 916,
                ( Note::N18, Instrument::Bell, true, ) => 917,
                ( Note::N18, Instrument::Bell, false, ) => 918,
                ( Note::N19, Instrument::Bell, true, ) => 919,
                ( Note::N19, Instrument::Bell, false, ) => 920,
                ( Note::N20, Instrument::Bell, true, ) => 921,
                ( Note::N20, Instrument::Bell, false, ) => 922,
                ( Note::N21, Instrument::Bell, true, ) => 923,
                ( Note::N21, Instrument::Bell, false, ) => 924,
                ( Note::N22, Instrument::Bell, true, ) => 925,
                ( Note::N22, Instrument::Bell, false, ) => 926,
                ( Note::N23, Instrument::Bell, true, ) => 927,
                ( Note::N23, Instrument::Bell, false, ) => 928,
                ( Note::N24, Instrument::Bell, true, ) => 929,
                ( Note::N24, Instrument::Bell, false, ) => 930,
                ( Note::N0, Instrument::Guitar, true, ) => 931,
                ( Note::N0, Instrument::Guitar, false, ) => 932,
                ( Note::N1, Instrument::Guitar, true, ) => 933,
                ( Note::N1, Instrument::Guitar, false, ) => 934,
                ( Note::N2, Instrument::Guitar, true, ) => 935,
                ( Note::N2, Instrument::Guitar, false, ) => 936,
                ( Note::N3, Instrument::Guitar, true, ) => 937,
                ( Note::N3, Instrument::Guitar, false, ) => 938,
                ( Note::N4, Instrument::Guitar, true, ) => 939,
                ( Note::N4, Instrument::Guitar, false, ) => 940,
                ( Note::N5, Instrument::Guitar, true, ) => 941,
                ( Note::N5, Instrument::Guitar, false, ) => 942,
                ( Note::N6, Instrument::Guitar, true, ) => 943,
                ( Note::N6, Instrument::Guitar, false, ) => 944,
                ( Note::N7, Instrument::Guitar, true, ) => 945,
                ( Note::N7, Instrument::Guitar, false, ) => 946,
                ( Note::N8, Instrument::Guitar, true, ) => 947,
                ( Note::N8, Instrument::Guitar, false, ) => 948,
                ( Note::N9, Instrument::Guitar, true, ) => 949,
                ( Note::N9, Instrument::Guitar, false, ) => 950,
                ( Note::N10, Instrument::Guitar, true, ) => 951,
                ( Note::N10, Instrument::Guitar, false, ) => 952,
                ( Note::N11, Instrument::Guitar, true, ) => 953,
                ( Note::N11, Instrument::Guitar, false, ) => 954,
                ( Note::N12, Instrument::Guitar, true, ) => 955,
                ( Note::N12, Instrument::Guitar, false, ) => 956,
                ( Note::N13, Instrument::Guitar, true, ) => 957,
                ( Note::N13, Instrument::Guitar, false, ) => 958,
                ( Note::N14, Instrument::Guitar, true, ) => 959,
                ( Note::N14, Instrument::Guitar, false, ) => 960,
                ( Note::N15, Instrument::Guitar, true, ) => 961,
                ( Note::N15, Instrument::Guitar, false, ) => 962,
                ( Note::N16, Instrument::Guitar, true, ) => 963,
                ( Note::N16, Instrument::Guitar, false, ) => 964,
                ( Note::N17, Instrument::Guitar, true, ) => 965,
                ( Note::N17, Instrument::Guitar, false, ) => 966,
                ( Note::N18, Instrument::Guitar, true, ) => 967,
                ( Note::N18, Instrument::Guitar, false, ) => 968,
                ( Note::N19, Instrument::Guitar, true, ) => 969,
                ( Note::N19, Instrument::Guitar, false, ) => 970,
                ( Note::N20, Instrument::Guitar, true, ) => 971,
                ( Note::N20, Instrument::Guitar, false, ) => 972,
                ( Note::N21, Instrument::Guitar, true, ) => 973,
                ( Note::N21, Instrument::Guitar, false, ) => 974,
                ( Note::N22, Instrument::Guitar, true, ) => 975,
                ( Note::N22, Instrument::Guitar, false, ) => 976,
                ( Note::N23, Instrument::Guitar, true, ) => 977,
                ( Note::N23, Instrument::Guitar, false, ) => 978,
                ( Note::N24, Instrument::Guitar, true, ) => 979,
                ( Note::N24, Instrument::Guitar, false, ) => 980,
                ( Note::N0, Instrument::Chime, true, ) => 981,
                ( Note::N0, Instrument::Chime, false, ) => 982,
                ( Note::N1, Instrument::Chime, true, ) => 983,
                ( Note::N1, Instrument::Chime, false, ) => 984,
                ( Note::N2, Instrument::Chime, true, ) => 985,
                ( Note::N2, Instrument::Chime, false, ) => 986,
                ( Note::N3, Instrument::Chime, true, ) => 987,
                ( Note::N3, Instrument::Chime, false, ) => 988,
                ( Note::N4, Instrument::Chime, true, ) => 989,
                ( Note::N4, Instrument::Chime, false, ) => 990,
                ( Note::N5, Instrument::Chime, true, ) => 991,
                ( Note::N5, Instrument::Chime, false, ) => 992,
                ( Note::N6, Instrument::Chime, true, ) => 993,
                ( Note::N6, Instrument::Chime, false, ) => 994,
                ( Note::N7, Instrument::Chime, true, ) => 995,
                ( Note::N7, Instrument::Chime, false, ) => 996,
                ( Note::N8, Instrument::Chime, true, ) => 997,
                ( Note::N8, Instrument::Chime, false, ) => 998,
                ( Note::N9, Instrument::Chime, true, ) => 999,
                ( Note::N9, Instrument::Chime, false, ) => 1000,
                ( Note::N10, Instrument::Chime, true, ) => 1001,
                ( Note::N10, Instrument::Chime, false, ) => 1002,
                ( Note::N11, Instrument::Chime, true, ) => 1003,
                ( Note::N11, Instrument::Chime, false, ) => 1004,
                ( Note::N12, Instrument::Chime, true, ) => 1005,
                ( Note::N12, Instrument::Chime, false, ) => 1006,
                ( Note::N13, Instrument::Chime, true, ) => 1007,
                ( Note::N13, Instrument::Chime, false, ) => 1008,
                ( Note::N14, Instrument::Chime, true, ) => 1009,
                ( Note::N14, Instrument::Chime, false, ) => 1010,
                ( Note::N15, Instrument::Chime, true, ) => 1011,
                ( Note::N15, Instrument::Chime, false, ) => 1012,
                ( Note::N16, Instrument::Chime, true, ) => 1013,
                ( Note::N16, Instrument::Chime, false, ) => 1014,
                ( Note::N17, Instrument::Chime, true, ) => 1015,
                ( Note::N17, Instrument::Chime, false, ) => 1016,
                ( Note::N18, Instrument::Chime, true, ) => 1017,
                ( Note::N18, Instrument::Chime, false, ) => 1018,
                ( Note::N19, Instrument::Chime, true, ) => 1019,
                ( Note::N19, Instrument::Chime, false, ) => 1020,
                ( Note::N20, Instrument::Chime, true, ) => 1021,
                ( Note::N20, Instrument::Chime, false, ) => 1022,
                ( Note::N21, Instrument::Chime, true, ) => 1023,
                ( Note::N21, Instrument::Chime, false, ) => 1024,
                ( Note::N22, Instrument::Chime, true, ) => 1025,
                ( Note::N22, Instrument::Chime, false, ) => 1026,
                ( Note::N23, Instrument::Chime, true, ) => 1027,
                ( Note::N23, Instrument::Chime, false, ) => 1028,
                ( Note::N24, Instrument::Chime, true, ) => 1029,
                ( Note::N24, Instrument::Chime, false, ) => 1030,
                ( Note::N0, Instrument::Xylophone, true, ) => 1031,
                ( Note::N0, Instrument::Xylophone, false, ) => 1032,
                ( Note::N1, Instrument::Xylophone, true, ) => 1033,
                ( Note::N1, Instrument::Xylophone, false, ) => 1034,
                ( Note::N2, Instrument::Xylophone, true, ) => 1035,
                ( Note::N2, Instrument::Xylophone, false, ) => 1036,
                ( Note::N3, Instrument::Xylophone, true, ) => 1037,
                ( Note::N3, Instrument::Xylophone, false, ) => 1038,
                ( Note::N4, Instrument::Xylophone, true, ) => 1039,
                ( Note::N4, Instrument::Xylophone, false, ) => 1040,
                ( Note::N5, Instrument::Xylophone, true, ) => 1041,
                ( Note::N5, Instrument::Xylophone, false, ) => 1042,
                ( Note::N6, Instrument::Xylophone, true, ) => 1043,
                ( Note::N6, Instrument::Xylophone, false, ) => 1044,
                ( Note::N7, Instrument::Xylophone, true, ) => 1045,
                ( Note::N7, Instrument::Xylophone, false, ) => 1046,
                ( Note::N8, Instrument::Xylophone, true, ) => 1047,
                ( Note::N8, Instrument::Xylophone, false, ) => 1048,
                ( Note::N9, Instrument::Xylophone, true, ) => 1049,
                ( Note::N9, Instrument::Xylophone, false, ) => 1050,
                ( Note::N10, Instrument::Xylophone, true, ) => 1051,
                ( Note::N10, Instrument::Xylophone, false, ) => 1052,
                ( Note::N11, Instrument::Xylophone, true, ) => 1053,
                ( Note::N11, Instrument::Xylophone, false, ) => 1054,
                ( Note::N12, Instrument::Xylophone, true, ) => 1055,
                ( Note::N12, Instrument::Xylophone, false, ) => 1056,
                ( Note::N13, Instrument::Xylophone, true, ) => 1057,
                ( Note::N13, Instrument::Xylophone, false, ) => 1058,
                ( Note::N14, Instrument::Xylophone, true, ) => 1059,
                ( Note::N14, Instrument::Xylophone, false, ) => 1060,
                ( Note::N15, Instrument::Xylophone, true, ) => 1061,
                ( Note::N15, Instrument::Xylophone, false, ) => 1062,
                ( Note::N16, Instrument::Xylophone, true, ) => 1063,
                ( Note::N16, Instrument::Xylophone, false, ) => 1064,
                ( Note::N17, Instrument::Xylophone, true, ) => 1065,
                ( Note::N17, Instrument::Xylophone, false, ) => 1066,
                ( Note::N18, Instrument::Xylophone, true, ) => 1067,
                ( Note::N18, Instrument::Xylophone, false, ) => 1068,
                ( Note::N19, Instrument::Xylophone, true, ) => 1069,
                ( Note::N19, Instrument::Xylophone, false, ) => 1070,
                ( Note::N20, Instrument::Xylophone, true, ) => 1071,
                ( Note::N20, Instrument::Xylophone, false, ) => 1072,
                ( Note::N21, Instrument::Xylophone, true, ) => 1073,
                ( Note::N21, Instrument::Xylophone, false, ) => 1074,
                ( Note::N22, Instrument::Xylophone, true, ) => 1075,
                ( Note::N22, Instrument::Xylophone, false, ) => 1076,
                ( Note::N23, Instrument::Xylophone, true, ) => 1077,
                ( Note::N23, Instrument::Xylophone, false, ) => 1078,
                ( Note::N24, Instrument::Xylophone, true, ) => 1079,
                ( Note::N24, Instrument::Xylophone, false, ) => 1080,
                ( Note::N0, Instrument::IronXylophone, true, ) => 1081,
                ( Note::N0, Instrument::IronXylophone, false, ) => 1082,
                ( Note::N1, Instrument::IronXylophone, true, ) => 1083,
                ( Note::N1, Instrument::IronXylophone, false, ) => 1084,
                ( Note::N2, Instrument::IronXylophone, true, ) => 1085,
                ( Note::N2, Instrument::IronXylophone, false, ) => 1086,
                ( Note::N3, Instrument::IronXylophone, true, ) => 1087,
                ( Note::N3, Instrument::IronXylophone, false, ) => 1088,
                ( Note::N4, Instrument::IronXylophone, true, ) => 1089,
                ( Note::N4, Instrument::IronXylophone, false, ) => 1090,
                ( Note::N5, Instrument::IronXylophone, true, ) => 1091,
                ( Note::N5, Instrument::IronXylophone, false, ) => 1092,
                ( Note::N6, Instrument::IronXylophone, true, ) => 1093,
                ( Note::N6, Instrument::IronXylophone, false, ) => 1094,
                ( Note::N7, Instrument::IronXylophone, true, ) => 1095,
                ( Note::N7, Instrument::IronXylophone, false, ) => 1096,
                ( Note::N8, Instrument::IronXylophone, true, ) => 1097,
                ( Note::N8, Instrument::IronXylophone, false, ) => 1098,
                ( Note::N9, Instrument::IronXylophone, true, ) => 1099,
                ( Note::N9, Instrument::IronXylophone, false, ) => 1100,
                ( Note::N10, Instrument::IronXylophone, true, ) => 1101,
                ( Note::N10, Instrument::IronXylophone, false, ) => 1102,
                ( Note::N11, Instrument::IronXylophone, true, ) => 1103,
                ( Note::N11, Instrument::IronXylophone, false, ) => 1104,
                ( Note::N12, Instrument::IronXylophone, true, ) => 1105,
                ( Note::N12, Instrument::IronXylophone, false, ) => 1106,
                ( Note::N13, Instrument::IronXylophone, true, ) => 1107,
                ( Note::N13, Instrument::IronXylophone, false, ) => 1108,
                ( Note::N14, Instrument::IronXylophone, true, ) => 1109,
                ( Note::N14, Instrument::IronXylophone, false, ) => 1110,
                ( Note::N15, Instrument::IronXylophone, true, ) => 1111,
                ( Note::N15, Instrument::IronXylophone, false, ) => 1112,
                ( Note::N16, Instrument::IronXylophone, true, ) => 1113,
                ( Note::N16, Instrument::IronXylophone, false, ) => 1114,
                ( Note::N17, Instrument::IronXylophone, true, ) => 1115,
                ( Note::N17, Instrument::IronXylophone, false, ) => 1116,
                ( Note::N18, Instrument::IronXylophone, true, ) => 1117,
                ( Note::N18, Instrument::IronXylophone, false, ) => 1118,
                ( Note::N19, Instrument::IronXylophone, true, ) => 1119,
                ( Note::N19, Instrument::IronXylophone, false, ) => 1120,
                ( Note::N20, Instrument::IronXylophone, true, ) => 1121,
                ( Note::N20, Instrument::IronXylophone, false, ) => 1122,
                ( Note::N21, Instrument::IronXylophone, true, ) => 1123,
                ( Note::N21, Instrument::IronXylophone, false, ) => 1124,
                ( Note::N22, Instrument::IronXylophone, true, ) => 1125,
                ( Note::N22, Instrument::IronXylophone, false, ) => 1126,
                ( Note::N23, Instrument::IronXylophone, true, ) => 1127,
                ( Note::N23, Instrument::IronXylophone, false, ) => 1128,
                ( Note::N24, Instrument::IronXylophone, true, ) => 1129,
                ( Note::N24, Instrument::IronXylophone, false, ) => 1130,
                ( Note::N0, Instrument::CowBell, true, ) => 1131,
                ( Note::N0, Instrument::CowBell, false, ) => 1132,
                ( Note::N1, Instrument::CowBell, true, ) => 1133,
                ( Note::N1, Instrument::CowBell, false, ) => 1134,
                ( Note::N2, Instrument::CowBell, true, ) => 1135,
                ( Note::N2, Instrument::CowBell, false, ) => 1136,
                ( Note::N3, Instrument::CowBell, true, ) => 1137,
                ( Note::N3, Instrument::CowBell, false, ) => 1138,
                ( Note::N4, Instrument::CowBell, true, ) => 1139,
                ( Note::N4, Instrument::CowBell, false, ) => 1140,
                ( Note::N5, Instrument::CowBell, true, ) => 1141,
                ( Note::N5, Instrument::CowBell, false, ) => 1142,
                ( Note::N6, Instrument::CowBell, true, ) => 1143,
                ( Note::N6, Instrument::CowBell, false, ) => 1144,
                ( Note::N7, Instrument::CowBell, true, ) => 1145,
                ( Note::N7, Instrument::CowBell, false, ) => 1146,
                ( Note::N8, Instrument::CowBell, true, ) => 1147,
                ( Note::N8, Instrument::CowBell, false, ) => 1148,
                ( Note::N9, Instrument::CowBell, true, ) => 1149,
                ( Note::N9, Instrument::CowBell, false, ) => 1150,
                ( Note::N10, Instrument::CowBell, true, ) => 1151,
                ( Note::N10, Instrument::CowBell, false, ) => 1152,
                ( Note::N11, Instrument::CowBell, true, ) => 1153,
                ( Note::N11, Instrument::CowBell, false, ) => 1154,
                ( Note::N12, Instrument::CowBell, true, ) => 1155,
                ( Note::N12, Instrument::CowBell, false, ) => 1156,
                ( Note::N13, Instrument::CowBell, true, ) => 1157,
                ( Note::N13, Instrument::CowBell, false, ) => 1158,
                ( Note::N14, Instrument::CowBell, true, ) => 1159,
                ( Note::N14, Instrument::CowBell, false, ) => 1160,
                ( Note::N15, Instrument::CowBell, true, ) => 1161,
                ( Note::N15, Instrument::CowBell, false, ) => 1162,
                ( Note::N16, Instrument::CowBell, true, ) => 1163,
                ( Note::N16, Instrument::CowBell, false, ) => 1164,
                ( Note::N17, Instrument::CowBell, true, ) => 1165,
                ( Note::N17, Instrument::CowBell, false, ) => 1166,
                ( Note::N18, Instrument::CowBell, true, ) => 1167,
                ( Note::N18, Instrument::CowBell, false, ) => 1168,
                ( Note::N19, Instrument::CowBell, true, ) => 1169,
                ( Note::N19, Instrument::CowBell, false, ) => 1170,
                ( Note::N20, Instrument::CowBell, true, ) => 1171,
                ( Note::N20, Instrument::CowBell, false, ) => 1172,
                ( Note::N21, Instrument::CowBell, true, ) => 1173,
                ( Note::N21, Instrument::CowBell, false, ) => 1174,
                ( Note::N22, Instrument::CowBell, true, ) => 1175,
                ( Note::N22, Instrument::CowBell, false, ) => 1176,
                ( Note::N23, Instrument::CowBell, true, ) => 1177,
                ( Note::N23, Instrument::CowBell, false, ) => 1178,
                ( Note::N24, Instrument::CowBell, true, ) => 1179,
                ( Note::N24, Instrument::CowBell, false, ) => 1180,
                ( Note::N0, Instrument::Didgeridoo, true, ) => 1181,
                ( Note::N0, Instrument::Didgeridoo, false, ) => 1182,
                ( Note::N1, Instrument::Didgeridoo, true, ) => 1183,
                ( Note::N1, Instrument::Didgeridoo, false, ) => 1184,
                ( Note::N2, Instrument::Didgeridoo, true, ) => 1185,
                ( Note::N2, Instrument::Didgeridoo, false, ) => 1186,
                ( Note::N3, Instrument::Didgeridoo, true, ) => 1187,
                ( Note::N3, Instrument::Didgeridoo, false, ) => 1188,
                ( Note::N4, Instrument::Didgeridoo, true, ) => 1189,
                ( Note::N4, Instrument::Didgeridoo, false, ) => 1190,
                ( Note::N5, Instrument::Didgeridoo, true, ) => 1191,
                ( Note::N5, Instrument::Didgeridoo, false, ) => 1192,
                ( Note::N6, Instrument::Didgeridoo, true, ) => 1193,
                ( Note::N6, Instrument::Didgeridoo, false, ) => 1194,
                ( Note::N7, Instrument::Didgeridoo, true, ) => 1195,
                ( Note::N7, Instrument::Didgeridoo, false, ) => 1196,
                ( Note::N8, Instrument::Didgeridoo, true, ) => 1197,
                ( Note::N8, Instrument::Didgeridoo, false, ) => 1198,
                ( Note::N9, Instrument::Didgeridoo, true, ) => 1199,
                ( Note::N9, Instrument::Didgeridoo, false, ) => 1200,
                ( Note::N10, Instrument::Didgeridoo, true, ) => 1201,
                ( Note::N10, Instrument::Didgeridoo, false, ) => 1202,
                ( Note::N11, Instrument::Didgeridoo, true, ) => 1203,
                ( Note::N11, Instrument::Didgeridoo, false, ) => 1204,
                ( Note::N12, Instrument::Didgeridoo, true, ) => 1205,
                ( Note::N12, Instrument::Didgeridoo, false, ) => 1206,
                ( Note::N13, Instrument::Didgeridoo, true, ) => 1207,
                ( Note::N13, Instrument::Didgeridoo, false, ) => 1208,
                ( Note::N14, Instrument::Didgeridoo, true, ) => 1209,
                ( Note::N14, Instrument::Didgeridoo, false, ) => 1210,
                ( Note::N15, Instrument::Didgeridoo, true, ) => 1211,
                ( Note::N15, Instrument::Didgeridoo, false, ) => 1212,
                ( Note::N16, Instrument::Didgeridoo, true, ) => 1213,
                ( Note::N16, Instrument::Didgeridoo, false, ) => 1214,
                ( Note::N17, Instrument::Didgeridoo, true, ) => 1215,
                ( Note::N17, Instrument::Didgeridoo, false, ) => 1216,
                ( Note::N18, Instrument::Didgeridoo, true, ) => 1217,
                ( Note::N18, Instrument::Didgeridoo, false, ) => 1218,
                ( Note::N19, Instrument::Didgeridoo, true, ) => 1219,
                ( Note::N19, Instrument::Didgeridoo, false, ) => 1220,
                ( Note::N20, Instrument::Didgeridoo, true, ) => 1221,
                ( Note::N20, Instrument::Didgeridoo, false, ) => 1222,
                ( Note::N21, Instrument::Didgeridoo, true, ) => 1223,
                ( Note::N21, Instrument::Didgeridoo, false, ) => 1224,
                ( Note::N22, Instrument::Didgeridoo, true, ) => 1225,
                ( Note::N22, Instrument::Didgeridoo, false, ) => 1226,
                ( Note::N23, Instrument::Didgeridoo, true, ) => 1227,
                ( Note::N23, Instrument::Didgeridoo, false, ) => 1228,
                ( Note::N24, Instrument::Didgeridoo, true, ) => 1229,
                ( Note::N24, Instrument::Didgeridoo, false, ) => 1230,
                ( Note::N0, Instrument::Bit, true, ) => 1231,
                ( Note::N0, Instrument::Bit, false, ) => 1232,
                ( Note::N1, Instrument::Bit, true, ) => 1233,
                ( Note::N1, Instrument::Bit, false, ) => 1234,
                ( Note::N2, Instrument::Bit, true, ) => 1235,
                ( Note::N2, Instrument::Bit, false, ) => 1236,
                ( Note::N3, Instrument::Bit, true, ) => 1237,
                ( Note::N3, Instrument::Bit, false, ) => 1238,
                ( Note::N4, Instrument::Bit, true, ) => 1239,
                ( Note::N4, Instrument::Bit, false, ) => 1240,
                ( Note::N5, Instrument::Bit, true, ) => 1241,
                ( Note::N5, Instrument::Bit, false, ) => 1242,
                ( Note::N6, Instrument::Bit, true, ) => 1243,
                ( Note::N6, Instrument::Bit, false, ) => 1244,
                ( Note::N7, Instrument::Bit, true, ) => 1245,
                ( Note::N7, Instrument::Bit, false, ) => 1246,
                ( Note::N8, Instrument::Bit, true, ) => 1247,
                ( Note::N8, Instrument::Bit, false, ) => 1248,
                ( Note::N9, Instrument::Bit, true, ) => 1249,
                ( Note::N9, Instrument::Bit, false, ) => 1250,
                ( Note::N10, Instrument::Bit, true, ) => 1251,
                ( Note::N10, Instrument::Bit, false, ) => 1252,
                ( Note::N11, Instrument::Bit, true, ) => 1253,
                ( Note::N11, Instrument::Bit, false, ) => 1254,
                ( Note::N12, Instrument::Bit, true, ) => 1255,
                ( Note::N12, Instrument::Bit, false, ) => 1256,
                ( Note::N13, Instrument::Bit, true, ) => 1257,
                ( Note::N13, Instrument::Bit, false, ) => 1258,
                ( Note::N14, Instrument::Bit, true, ) => 1259,
                ( Note::N14, Instrument::Bit, false, ) => 1260,
                ( Note::N15, Instrument::Bit, true, ) => 1261,
                ( Note::N15, Instrument::Bit, false, ) => 1262,
                ( Note::N16, Instrument::Bit, true, ) => 1263,
                ( Note::N16, Instrument::Bit, false, ) => 1264,
                ( Note::N17, Instrument::Bit, true, ) => 1265,
                ( Note::N17, Instrument::Bit, false, ) => 1266,
                ( Note::N18, Instrument::Bit, true, ) => 1267,
                ( Note::N18, Instrument::Bit, false, ) => 1268,
                ( Note::N19, Instrument::Bit, true, ) => 1269,
                ( Note::N19, Instrument::Bit, false, ) => 1270,
                ( Note::N20, Instrument::Bit, true, ) => 1271,
                ( Note::N20, Instrument::Bit, false, ) => 1272,
                ( Note::N21, Instrument::Bit, true, ) => 1273,
                ( Note::N21, Instrument::Bit, false, ) => 1274,
                ( Note::N22, Instrument::Bit, true, ) => 1275,
                ( Note::N22, Instrument::Bit, false, ) => 1276,
                ( Note::N23, Instrument::Bit, true, ) => 1277,
                ( Note::N23, Instrument::Bit, false, ) => 1278,
                ( Note::N24, Instrument::Bit, true, ) => 1279,
                ( Note::N24, Instrument::Bit, false, ) => 1280,
                ( Note::N0, Instrument::Banjo, true, ) => 1281,
                ( Note::N0, Instrument::Banjo, false, ) => 1282,
                ( Note::N1, Instrument::Banjo, true, ) => 1283,
                ( Note::N1, Instrument::Banjo, false, ) => 1284,
                ( Note::N2, Instrument::Banjo, true, ) => 1285,
                ( Note::N2, Instrument::Banjo, false, ) => 1286,
                ( Note::N3, Instrument::Banjo, true, ) => 1287,
                ( Note::N3, Instrument::Banjo, false, ) => 1288,
                ( Note::N4, Instrument::Banjo, true, ) => 1289,
                ( Note::N4, Instrument::Banjo, false, ) => 1290,
                ( Note::N5, Instrument::Banjo, true, ) => 1291,
                ( Note::N5, Instrument::Banjo, false, ) => 1292,
                ( Note::N6, Instrument::Banjo, true, ) => 1293,
                ( Note::N6, Instrument::Banjo, false, ) => 1294,
                ( Note::N7, Instrument::Banjo, true, ) => 1295,
                ( Note::N7, Instrument::Banjo, false, ) => 1296,
                ( Note::N8, Instrument::Banjo, true, ) => 1297,
                ( Note::N8, Instrument::Banjo, false, ) => 1298,
                ( Note::N9, Instrument::Banjo, true, ) => 1299,
                ( Note::N9, Instrument::Banjo, false, ) => 1300,
                ( Note::N10, Instrument::Banjo, true, ) => 1301,
                ( Note::N10, Instrument::Banjo, false, ) => 1302,
                ( Note::N11, Instrument::Banjo, true, ) => 1303,
                ( Note::N11, Instrument::Banjo, false, ) => 1304,
                ( Note::N12, Instrument::Banjo, true, ) => 1305,
                ( Note::N12, Instrument::Banjo, false, ) => 1306,
                ( Note::N13, Instrument::Banjo, true, ) => 1307,
                ( Note::N13, Instrument::Banjo, false, ) => 1308,
                ( Note::N14, Instrument::Banjo, true, ) => 1309,
                ( Note::N14, Instrument::Banjo, false, ) => 1310,
                ( Note::N15, Instrument::Banjo, true, ) => 1311,
                ( Note::N15, Instrument::Banjo, false, ) => 1312,
                ( Note::N16, Instrument::Banjo, true, ) => 1313,
                ( Note::N16, Instrument::Banjo, false, ) => 1314,
                ( Note::N17, Instrument::Banjo, true, ) => 1315,
                ( Note::N17, Instrument::Banjo, false, ) => 1316,
                ( Note::N18, Instrument::Banjo, true, ) => 1317,
                ( Note::N18, Instrument::Banjo, false, ) => 1318,
                ( Note::N19, Instrument::Banjo, true, ) => 1319,
                ( Note::N19, Instrument::Banjo, false, ) => 1320,
                ( Note::N20, Instrument::Banjo, true, ) => 1321,
                ( Note::N20, Instrument::Banjo, false, ) => 1322,
                ( Note::N21, Instrument::Banjo, true, ) => 1323,
                ( Note::N21, Instrument::Banjo, false, ) => 1324,
                ( Note::N22, Instrument::Banjo, true, ) => 1325,
                ( Note::N22, Instrument::Banjo, false, ) => 1326,
                ( Note::N23, Instrument::Banjo, true, ) => 1327,
                ( Note::N23, Instrument::Banjo, false, ) => 1328,
                ( Note::N24, Instrument::Banjo, true, ) => 1329,
                ( Note::N24, Instrument::Banjo, false, ) => 1330,
                ( Note::N0, Instrument::Pling, true, ) => 1331,
                ( Note::N0, Instrument::Pling, false, ) => 1332,
                ( Note::N1, Instrument::Pling, true, ) => 1333,
                ( Note::N1, Instrument::Pling, false, ) => 1334,
                ( Note::N2, Instrument::Pling, true, ) => 1335,
                ( Note::N2, Instrument::Pling, false, ) => 1336,
                ( Note::N3, Instrument::Pling, true, ) => 1337,
                ( Note::N3, Instrument::Pling, false, ) => 1338,
                ( Note::N4, Instrument::Pling, true, ) => 1339,
                ( Note::N4, Instrument::Pling, false, ) => 1340,
                ( Note::N5, Instrument::Pling, true, ) => 1341,
                ( Note::N5, Instrument::Pling, false, ) => 1342,
                ( Note::N6, Instrument::Pling, true, ) => 1343,
                ( Note::N6, Instrument::Pling, false, ) => 1344,
                ( Note::N7, Instrument::Pling, true, ) => 1345,
                ( Note::N7, Instrument::Pling, false, ) => 1346,
                ( Note::N8, Instrument::Pling, true, ) => 1347,
                ( Note::N8, Instrument::Pling, false, ) => 1348,
                ( Note::N9, Instrument::Pling, true, ) => 1349,
                ( Note::N9, Instrument::Pling, false, ) => 1350,
                ( Note::N10, Instrument::Pling, true, ) => 1351,
                ( Note::N10, Instrument::Pling, false, ) => 1352,
                ( Note::N11, Instrument::Pling, true, ) => 1353,
                ( Note::N11, Instrument::Pling, false, ) => 1354,
                ( Note::N12, Instrument::Pling, true, ) => 1355,
                ( Note::N12, Instrument::Pling, false, ) => 1356,
                ( Note::N13, Instrument::Pling, true, ) => 1357,
                ( Note::N13, Instrument::Pling, false, ) => 1358,
                ( Note::N14, Instrument::Pling, true, ) => 1359,
                ( Note::N14, Instrument::Pling, false, ) => 1360,
                ( Note::N15, Instrument::Pling, true, ) => 1361,
                ( Note::N15, Instrument::Pling, false, ) => 1362,
                ( Note::N16, Instrument::Pling, true, ) => 1363,
                ( Note::N16, Instrument::Pling, false, ) => 1364,
                ( Note::N17, Instrument::Pling, true, ) => 1365,
                ( Note::N17, Instrument::Pling, false, ) => 1366,
                ( Note::N18, Instrument::Pling, true, ) => 1367,
                ( Note::N18, Instrument::Pling, false, ) => 1368,
                ( Note::N19, Instrument::Pling, true, ) => 1369,
                ( Note::N19, Instrument::Pling, false, ) => 1370,
                ( Note::N20, Instrument::Pling, true, ) => 1371,
                ( Note::N20, Instrument::Pling, false, ) => 1372,
                ( Note::N21, Instrument::Pling, true, ) => 1373,
                ( Note::N21, Instrument::Pling, false, ) => 1374,
                ( Note::N22, Instrument::Pling, true, ) => 1375,
                ( Note::N22, Instrument::Pling, false, ) => 1376,
                ( Note::N23, Instrument::Pling, true, ) => 1377,
                ( Note::N23, Instrument::Pling, false, ) => 1378,
                ( Note::N24, Instrument::Pling, true, ) => 1379,
                ( Note::N24, Instrument::Pling, false, ) => 1380,
                ( Note::N0, Instrument::Zombie, true, ) => 1381,
                ( Note::N0, Instrument::Zombie, false, ) => 1382,
                ( Note::N1, Instrument::Zombie, true, ) => 1383,
                ( Note::N1, Instrument::Zombie, false, ) => 1384,
                ( Note::N2, Instrument::Zombie, true, ) => 1385,
                ( Note::N2, Instrument::Zombie, false, ) => 1386,
                ( Note::N3, Instrument::Zombie, true, ) => 1387,
                ( Note::N3, Instrument::Zombie, false, ) => 1388,
                ( Note::N4, Instrument::Zombie, true, ) => 1389,
                ( Note::N4, Instrument::Zombie, false, ) => 1390,
                ( Note::N5, Instrument::Zombie, true, ) => 1391,
                ( Note::N5, Instrument::Zombie, false, ) => 1392,
                ( Note::N6, Instrument::Zombie, true, ) => 1393,
                ( Note::N6, Instrument::Zombie, false, ) => 1394,
                ( Note::N7, Instrument::Zombie, true, ) => 1395,
                ( Note::N7, Instrument::Zombie, false, ) => 1396,
                ( Note::N8, Instrument::Zombie, true, ) => 1397,
                ( Note::N8, Instrument::Zombie, false, ) => 1398,
                ( Note::N9, Instrument::Zombie, true, ) => 1399,
                ( Note::N9, Instrument::Zombie, false, ) => 1400,
                ( Note::N10, Instrument::Zombie, true, ) => 1401,
                ( Note::N10, Instrument::Zombie, false, ) => 1402,
                ( Note::N11, Instrument::Zombie, true, ) => 1403,
                ( Note::N11, Instrument::Zombie, false, ) => 1404,
                ( Note::N12, Instrument::Zombie, true, ) => 1405,
                ( Note::N12, Instrument::Zombie, false, ) => 1406,
                ( Note::N13, Instrument::Zombie, true, ) => 1407,
                ( Note::N13, Instrument::Zombie, false, ) => 1408,
                ( Note::N14, Instrument::Zombie, true, ) => 1409,
                ( Note::N14, Instrument::Zombie, false, ) => 1410,
                ( Note::N15, Instrument::Zombie, true, ) => 1411,
                ( Note::N15, Instrument::Zombie, false, ) => 1412,
                ( Note::N16, Instrument::Zombie, true, ) => 1413,
                ( Note::N16, Instrument::Zombie, false, ) => 1414,
                ( Note::N17, Instrument::Zombie, true, ) => 1415,
                ( Note::N17, Instrument::Zombie, false, ) => 1416,
                ( Note::N18, Instrument::Zombie, true, ) => 1417,
                ( Note::N18, Instrument::Zombie, false, ) => 1418,
                ( Note::N19, Instrument::Zombie, true, ) => 1419,
                ( Note::N19, Instrument::Zombie, false, ) => 1420,
                ( Note::N20, Instrument::Zombie, true, ) => 1421,
                ( Note::N20, Instrument::Zombie, false, ) => 1422,
                ( Note::N21, Instrument::Zombie, true, ) => 1423,
                ( Note::N21, Instrument::Zombie, false, ) => 1424,
                ( Note::N22, Instrument::Zombie, true, ) => 1425,
                ( Note::N22, Instrument::Zombie, false, ) => 1426,
                ( Note::N23, Instrument::Zombie, true, ) => 1427,
                ( Note::N23, Instrument::Zombie, false, ) => 1428,
                ( Note::N24, Instrument::Zombie, true, ) => 1429,
                ( Note::N24, Instrument::Zombie, false, ) => 1430,
                ( Note::N0, Instrument::Skeleton, true, ) => 1431,
                ( Note::N0, Instrument::Skeleton, false, ) => 1432,
                ( Note::N1, Instrument::Skeleton, true, ) => 1433,
                ( Note::N1, Instrument::Skeleton, false, ) => 1434,
                ( Note::N2, Instrument::Skeleton, true, ) => 1435,
                ( Note::N2, Instrument::Skeleton, false, ) => 1436,
                ( Note::N3, Instrument::Skeleton, true, ) => 1437,
                ( Note::N3, Instrument::Skeleton, false, ) => 1438,
                ( Note::N4, Instrument::Skeleton, true, ) => 1439,
                ( Note::N4, Instrument::Skeleton, false, ) => 1440,
                ( Note::N5, Instrument::Skeleton, true, ) => 1441,
                ( Note::N5, Instrument::Skeleton, false, ) => 1442,
                ( Note::N6, Instrument::Skeleton, true, ) => 1443,
                ( Note::N6, Instrument::Skeleton, false, ) => 1444,
                ( Note::N7, Instrument::Skeleton, true, ) => 1445,
                ( Note::N7, Instrument::Skeleton, false, ) => 1446,
                ( Note::N8, Instrument::Skeleton, true, ) => 1447,
                ( Note::N8, Instrument::Skeleton, false, ) => 1448,
                ( Note::N9, Instrument::Skeleton, true, ) => 1449,
                ( Note::N9, Instrument::Skeleton, false, ) => 1450,
                ( Note::N10, Instrument::Skeleton, true, ) => 1451,
                ( Note::N10, Instrument::Skeleton, false, ) => 1452,
                ( Note::N11, Instrument::Skeleton, true, ) => 1453,
                ( Note::N11, Instrument::Skeleton, false, ) => 1454,
                ( Note::N12, Instrument::Skeleton, true, ) => 1455,
                ( Note::N12, Instrument::Skeleton, false, ) => 1456,
                ( Note::N13, Instrument::Skeleton, true, ) => 1457,
                ( Note::N13, Instrument::Skeleton, false, ) => 1458,
                ( Note::N14, Instrument::Skeleton, true, ) => 1459,
                ( Note::N14, Instrument::Skeleton, false, ) => 1460,
                ( Note::N15, Instrument::Skeleton, true, ) => 1461,
                ( Note::N15, Instrument::Skeleton, false, ) => 1462,
                ( Note::N16, Instrument::Skeleton, true, ) => 1463,
                ( Note::N16, Instrument::Skeleton, false, ) => 1464,
                ( Note::N17, Instrument::Skeleton, true, ) => 1465,
                ( Note::N17, Instrument::Skeleton, false, ) => 1466,
                ( Note::N18, Instrument::Skeleton, true, ) => 1467,
                ( Note::N18, Instrument::Skeleton, false, ) => 1468,
                ( Note::N19, Instrument::Skeleton, true, ) => 1469,
                ( Note::N19, Instrument::Skeleton, false, ) => 1470,
                ( Note::N20, Instrument::Skeleton, true, ) => 1471,
                ( Note::N20, Instrument::Skeleton, false, ) => 1472,
                ( Note::N21, Instrument::Skeleton, true, ) => 1473,
                ( Note::N21, Instrument::Skeleton, false, ) => 1474,
                ( Note::N22, Instrument::Skeleton, true, ) => 1475,
                ( Note::N22, Instrument::Skeleton, false, ) => 1476,
                ( Note::N23, Instrument::Skeleton, true, ) => 1477,
                ( Note::N23, Instrument::Skeleton, false, ) => 1478,
                ( Note::N24, Instrument::Skeleton, true, ) => 1479,
                ( Note::N24, Instrument::Skeleton, false, ) => 1480,
                ( Note::N0, Instrument::Creeper, true, ) => 1481,
                ( Note::N0, Instrument::Creeper, false, ) => 1482,
                ( Note::N1, Instrument::Creeper, true, ) => 1483,
                ( Note::N1, Instrument::Creeper, false, ) => 1484,
                ( Note::N2, Instrument::Creeper, true, ) => 1485,
                ( Note::N2, Instrument::Creeper, false, ) => 1486,
                ( Note::N3, Instrument::Creeper, true, ) => 1487,
                ( Note::N3, Instrument::Creeper, false, ) => 1488,
                ( Note::N4, Instrument::Creeper, true, ) => 1489,
                ( Note::N4, Instrument::Creeper, false, ) => 1490,
                ( Note::N5, Instrument::Creeper, true, ) => 1491,
                ( Note::N5, Instrument::Creeper, false, ) => 1492,
                ( Note::N6, Instrument::Creeper, true, ) => 1493,
                ( Note::N6, Instrument::Creeper, false, ) => 1494,
                ( Note::N7, Instrument::Creeper, true, ) => 1495,
                ( Note::N7, Instrument::Creeper, false, ) => 1496,
                ( Note::N8, Instrument::Creeper, true, ) => 1497,
                ( Note::N8, Instrument::Creeper, false, ) => 1498,
                ( Note::N9, Instrument::Creeper, true, ) => 1499,
                ( Note::N9, Instrument::Creeper, false, ) => 1500,
                ( Note::N10, Instrument::Creeper, true, ) => 1501,
                ( Note::N10, Instrument::Creeper, false, ) => 1502,
                ( Note::N11, Instrument::Creeper, true, ) => 1503,
                ( Note::N11, Instrument::Creeper, false, ) => 1504,
                ( Note::N12, Instrument::Creeper, true, ) => 1505,
                ( Note::N12, Instrument::Creeper, false, ) => 1506,
                ( Note::N13, Instrument::Creeper, true, ) => 1507,
                ( Note::N13, Instrument::Creeper, false, ) => 1508,
                ( Note::N14, Instrument::Creeper, true, ) => 1509,
                ( Note::N14, Instrument::Creeper, false, ) => 1510,
                ( Note::N15, Instrument::Creeper, true, ) => 1511,
                ( Note::N15, Instrument::Creeper, false, ) => 1512,
                ( Note::N16, Instrument::Creeper, true, ) => 1513,
                ( Note::N16, Instrument::Creeper, false, ) => 1514,
                ( Note::N17, Instrument::Creeper, true, ) => 1515,
                ( Note::N17, Instrument::Creeper, false, ) => 1516,
                ( Note::N18, Instrument::Creeper, true, ) => 1517,
                ( Note::N18, Instrument::Creeper, false, ) => 1518,
                ( Note::N19, Instrument::Creeper, true, ) => 1519,
                ( Note::N19, Instrument::Creeper, false, ) => 1520,
                ( Note::N20, Instrument::Creeper, true, ) => 1521,
                ( Note::N20, Instrument::Creeper, false, ) => 1522,
                ( Note::N21, Instrument::Creeper, true, ) => 1523,
                ( Note::N21, Instrument::Creeper, false, ) => 1524,
                ( Note::N22, Instrument::Creeper, true, ) => 1525,
                ( Note::N22, Instrument::Creeper, false, ) => 1526,
                ( Note::N23, Instrument::Creeper, true, ) => 1527,
                ( Note::N23, Instrument::Creeper, false, ) => 1528,
                ( Note::N24, Instrument::Creeper, true, ) => 1529,
                ( Note::N24, Instrument::Creeper, false, ) => 1530,
                ( Note::N0, Instrument::Dragon, true, ) => 1531,
                ( Note::N0, Instrument::Dragon, false, ) => 1532,
                ( Note::N1, Instrument::Dragon, true, ) => 1533,
                ( Note::N1, Instrument::Dragon, false, ) => 1534,
                ( Note::N2, Instrument::Dragon, true, ) => 1535,
                ( Note::N2, Instrument::Dragon, false, ) => 1536,
                ( Note::N3, Instrument::Dragon, true, ) => 1537,
                ( Note::N3, Instrument::Dragon, false, ) => 1538,
                ( Note::N4, Instrument::Dragon, true, ) => 1539,
                ( Note::N4, Instrument::Dragon, false, ) => 1540,
                ( Note::N5, Instrument::Dragon, true, ) => 1541,
                ( Note::N5, Instrument::Dragon, false, ) => 1542,
                ( Note::N6, Instrument::Dragon, true, ) => 1543,
                ( Note::N6, Instrument::Dragon, false, ) => 1544,
                ( Note::N7, Instrument::Dragon, true, ) => 1545,
                ( Note::N7, Instrument::Dragon, false, ) => 1546,
                ( Note::N8, Instrument::Dragon, true, ) => 1547,
                ( Note::N8, Instrument::Dragon, false, ) => 1548,
                ( Note::N9, Instrument::Dragon, true, ) => 1549,
                ( Note::N9, Instrument::Dragon, false, ) => 1550,
                ( Note::N10, Instrument::Dragon, true, ) => 1551,
                ( Note::N10, Instrument::Dragon, false, ) => 1552,
                ( Note::N11, Instrument::Dragon, true, ) => 1553,
                ( Note::N11, Instrument::Dragon, false, ) => 1554,
                ( Note::N12, Instrument::Dragon, true, ) => 1555,
                ( Note::N12, Instrument::Dragon, false, ) => 1556,
                ( Note::N13, Instrument::Dragon, true, ) => 1557,
                ( Note::N13, Instrument::Dragon, false, ) => 1558,
                ( Note::N14, Instrument::Dragon, true, ) => 1559,
                ( Note::N14, Instrument::Dragon, false, ) => 1560,
                ( Note::N15, Instrument::Dragon, true, ) => 1561,
                ( Note::N15, Instrument::Dragon, false, ) => 1562,
                ( Note::N16, Instrument::Dragon, true, ) => 1563,
                ( Note::N16, Instrument::Dragon, false, ) => 1564,
                ( Note::N17, Instrument::Dragon, true, ) => 1565,
                ( Note::N17, Instrument::Dragon, false, ) => 1566,
                ( Note::N18, Instrument::Dragon, true, ) => 1567,
                ( Note::N18, Instrument::Dragon, false, ) => 1568,
                ( Note::N19, Instrument::Dragon, true, ) => 1569,
                ( Note::N19, Instrument::Dragon, false, ) => 1570,
                ( Note::N20, Instrument::Dragon, true, ) => 1571,
                ( Note::N20, Instrument::Dragon, false, ) => 1572,
                ( Note::N21, Instrument::Dragon, true, ) => 1573,
                ( Note::N21, Instrument::Dragon, false, ) => 1574,
                ( Note::N22, Instrument::Dragon, true, ) => 1575,
                ( Note::N22, Instrument::Dragon, false, ) => 1576,
                ( Note::N23, Instrument::Dragon, true, ) => 1577,
                ( Note::N23, Instrument::Dragon, false, ) => 1578,
                ( Note::N24, Instrument::Dragon, true, ) => 1579,
                ( Note::N24, Instrument::Dragon, false, ) => 1580,
                ( Note::N0, Instrument::WitherSkeleton, true, ) => 1581,
                ( Note::N0, Instrument::WitherSkeleton, false, ) => 1582,
                ( Note::N1, Instrument::WitherSkeleton, true, ) => 1583,
                ( Note::N1, Instrument::WitherSkeleton, false, ) => 1584,
                ( Note::N2, Instrument::WitherSkeleton, true, ) => 1585,
                ( Note::N2, Instrument::WitherSkeleton, false, ) => 1586,
                ( Note::N3, Instrument::WitherSkeleton, true, ) => 1587,
                ( Note::N3, Instrument::WitherSkeleton, false, ) => 1588,
                ( Note::N4, Instrument::WitherSkeleton, true, ) => 1589,
                ( Note::N4, Instrument::WitherSkeleton, false, ) => 1590,
                ( Note::N5, Instrument::WitherSkeleton, true, ) => 1591,
                ( Note::N5, Instrument::WitherSkeleton, false, ) => 1592,
                ( Note::N6, Instrument::WitherSkeleton, true, ) => 1593,
                ( Note::N6, Instrument::WitherSkeleton, false, ) => 1594,
                ( Note::N7, Instrument::WitherSkeleton, true, ) => 1595,
                ( Note::N7, Instrument::WitherSkeleton, false, ) => 1596,
                ( Note::N8, Instrument::WitherSkeleton, true, ) => 1597,
                ( Note::N8, Instrument::WitherSkeleton, false, ) => 1598,
                ( Note::N9, Instrument::WitherSkeleton, true, ) => 1599,
                ( Note::N9, Instrument::WitherSkeleton, false, ) => 1600,
                ( Note::N10, Instrument::WitherSkeleton, true, ) => 1601,
                ( Note::N10, Instrument::WitherSkeleton, false, ) => 1602,
                ( Note::N11, Instrument::WitherSkeleton, true, ) => 1603,
                ( Note::N11, Instrument::WitherSkeleton, false, ) => 1604,
                ( Note::N12, Instrument::WitherSkeleton, true, ) => 1605,
                ( Note::N12, Instrument::WitherSkeleton, false, ) => 1606,
                ( Note::N13, Instrument::WitherSkeleton, true, ) => 1607,
                ( Note::N13, Instrument::WitherSkeleton, false, ) => 1608,
                ( Note::N14, Instrument::WitherSkeleton, true, ) => 1609,
                ( Note::N14, Instrument::WitherSkeleton, false, ) => 1610,
                ( Note::N15, Instrument::WitherSkeleton, true, ) => 1611,
                ( Note::N15, Instrument::WitherSkeleton, false, ) => 1612,
                ( Note::N16, Instrument::WitherSkeleton, true, ) => 1613,
                ( Note::N16, Instrument::WitherSkeleton, false, ) => 1614,
                ( Note::N17, Instrument::WitherSkeleton, true, ) => 1615,
                ( Note::N17, Instrument::WitherSkeleton, false, ) => 1616,
                ( Note::N18, Instrument::WitherSkeleton, true, ) => 1617,
                ( Note::N18, Instrument::WitherSkeleton, false, ) => 1618,
                ( Note::N19, Instrument::WitherSkeleton, true, ) => 1619,
                ( Note::N19, Instrument::WitherSkeleton, false, ) => 1620,
                ( Note::N20, Instrument::WitherSkeleton, true, ) => 1621,
                ( Note::N20, Instrument::WitherSkeleton, false, ) => 1622,
                ( Note::N21, Instrument::WitherSkeleton, true, ) => 1623,
                ( Note::N21, Instrument::WitherSkeleton, false, ) => 1624,
                ( Note::N22, Instrument::WitherSkeleton, true, ) => 1625,
                ( Note::N22, Instrument::WitherSkeleton, false, ) => 1626,
                ( Note::N23, Instrument::WitherSkeleton, true, ) => 1627,
                ( Note::N23, Instrument::WitherSkeleton, false, ) => 1628,
                ( Note::N24, Instrument::WitherSkeleton, true, ) => 1629,
                ( Note::N24, Instrument::WitherSkeleton, false, ) => 1630,
                ( Note::N0, Instrument::Piglin, true, ) => 1631,
                ( Note::N0, Instrument::Piglin, false, ) => 1632,
                ( Note::N1, Instrument::Piglin, true, ) => 1633,
                ( Note::N1, Instrument::Piglin, false, ) => 1634,
                ( Note::N2, Instrument::Piglin, true, ) => 1635,
                ( Note::N2, Instrument::Piglin, false, ) => 1636,
                ( Note::N3, Instrument::Piglin, true, ) => 1637,
                ( Note::N3, Instrument::Piglin, false, ) => 1638,
                ( Note::N4, Instrument::Piglin, true, ) => 1639,
                ( Note::N4, Instrument::Piglin, false, ) => 1640,
                ( Note::N5, Instrument::Piglin, true, ) => 1641,
                ( Note::N5, Instrument::Piglin, false, ) => 1642,
                ( Note::N6, Instrument::Piglin, true, ) => 1643,
                ( Note::N6, Instrument::Piglin, false, ) => 1644,
                ( Note::N7, Instrument::Piglin, true, ) => 1645,
                ( Note::N7, Instrument::Piglin, false, ) => 1646,
                ( Note::N8, Instrument::Piglin, true, ) => 1647,
                ( Note::N8, Instrument::Piglin, false, ) => 1648,
                ( Note::N9, Instrument::Piglin, true, ) => 1649,
                ( Note::N9, Instrument::Piglin, false, ) => 1650,
                ( Note::N10, Instrument::Piglin, true, ) => 1651,
                ( Note::N10, Instrument::Piglin, false, ) => 1652,
                ( Note::N11, Instrument::Piglin, true, ) => 1653,
                ( Note::N11, Instrument::Piglin, false, ) => 1654,
                ( Note::N12, Instrument::Piglin, true, ) => 1655,
                ( Note::N12, Instrument::Piglin, false, ) => 1656,
                ( Note::N13, Instrument::Piglin, true, ) => 1657,
                ( Note::N13, Instrument::Piglin, false, ) => 1658,
                ( Note::N14, Instrument::Piglin, true, ) => 1659,
                ( Note::N14, Instrument::Piglin, false, ) => 1660,
                ( Note::N15, Instrument::Piglin, true, ) => 1661,
                ( Note::N15, Instrument::Piglin, false, ) => 1662,
                ( Note::N16, Instrument::Piglin, true, ) => 1663,
                ( Note::N16, Instrument::Piglin, false, ) => 1664,
                ( Note::N17, Instrument::Piglin, true, ) => 1665,
                ( Note::N17, Instrument::Piglin, false, ) => 1666,
                ( Note::N18, Instrument::Piglin, true, ) => 1667,
                ( Note::N18, Instrument::Piglin, false, ) => 1668,
                ( Note::N19, Instrument::Piglin, true, ) => 1669,
                ( Note::N19, Instrument::Piglin, false, ) => 1670,
                ( Note::N20, Instrument::Piglin, true, ) => 1671,
                ( Note::N20, Instrument::Piglin, false, ) => 1672,
                ( Note::N21, Instrument::Piglin, true, ) => 1673,
                ( Note::N21, Instrument::Piglin, false, ) => 1674,
                ( Note::N22, Instrument::Piglin, true, ) => 1675,
                ( Note::N22, Instrument::Piglin, false, ) => 1676,
                ( Note::N23, Instrument::Piglin, true, ) => 1677,
                ( Note::N23, Instrument::Piglin, false, ) => 1678,
                ( Note::N24, Instrument::Piglin, true, ) => 1679,
                ( Note::N24, Instrument::Piglin, false, ) => 1680,
                ( Note::N0, Instrument::CustomHead, true, ) => 1681,
                ( Note::N0, Instrument::CustomHead, false, ) => 1682,
                ( Note::N1, Instrument::CustomHead, true, ) => 1683,
                ( Note::N1, Instrument::CustomHead, false, ) => 1684,
                ( Note::N2, Instrument::CustomHead, true, ) => 1685,
                ( Note::N2, Instrument::CustomHead, false, ) => 1686,
                ( Note::N3, Instrument::CustomHead, true, ) => 1687,
                ( Note::N3, Instrument::CustomHead, false, ) => 1688,
                ( Note::N4, Instrument::CustomHead, true, ) => 1689,
                ( Note::N4, Instrument::CustomHead, false, ) => 1690,
                ( Note::N5, Instrument::CustomHead, true, ) => 1691,
                ( Note::N5, Instrument::CustomHead, false, ) => 1692,
                ( Note::N6, Instrument::CustomHead, true, ) => 1693,
                ( Note::N6, Instrument::CustomHead, false, ) => 1694,
                ( Note::N7, Instrument::CustomHead, true, ) => 1695,
                ( Note::N7, Instrument::CustomHead, false, ) => 1696,
                ( Note::N8, Instrument::CustomHead, true, ) => 1697,
                ( Note::N8, Instrument::CustomHead, false, ) => 1698,
                ( Note::N9, Instrument::CustomHead, true, ) => 1699,
                ( Note::N9, Instrument::CustomHead, false, ) => 1700,
                ( Note::N10, Instrument::CustomHead, true, ) => 1701,
                ( Note::N10, Instrument::CustomHead, false, ) => 1702,
                ( Note::N11, Instrument::CustomHead, true, ) => 1703,
                ( Note::N11, Instrument::CustomHead, false, ) => 1704,
                ( Note::N12, Instrument::CustomHead, true, ) => 1705,
                ( Note::N12, Instrument::CustomHead, false, ) => 1706,
                ( Note::N13, Instrument::CustomHead, true, ) => 1707,
                ( Note::N13, Instrument::CustomHead, false, ) => 1708,
                ( Note::N14, Instrument::CustomHead, true, ) => 1709,
                ( Note::N14, Instrument::CustomHead, false, ) => 1710,
                ( Note::N15, Instrument::CustomHead, true, ) => 1711,
                ( Note::N15, Instrument::CustomHead, false, ) => 1712,
                ( Note::N16, Instrument::CustomHead, true, ) => 1713,
                ( Note::N16, Instrument::CustomHead, false, ) => 1714,
                ( Note::N17, Instrument::CustomHead, true, ) => 1715,
                ( Note::N17, Instrument::CustomHead, false, ) => 1716,
                ( Note::N18, Instrument::CustomHead, true, ) => 1717,
                ( Note::N18, Instrument::CustomHead, false, ) => 1718,
                ( Note::N19, Instrument::CustomHead, true, ) => 1719,
                ( Note::N19, Instrument::CustomHead, false, ) => 1720,
                ( Note::N20, Instrument::CustomHead, true, ) => 1721,
                ( Note::N20, Instrument::CustomHead, false, ) => 1722,
                ( Note::N21, Instrument::CustomHead, true, ) => 1723,
                ( Note::N21, Instrument::CustomHead, false, ) => 1724,
                ( Note::N22, Instrument::CustomHead, true, ) => 1725,
                ( Note::N22, Instrument::CustomHead, false, ) => 1726,
                ( Note::N23, Instrument::CustomHead, true, ) => 1727,
                ( Note::N23, Instrument::CustomHead, false, ) => 1728,
                ( Note::N24, Instrument::CustomHead, true, ) => 1729,
                ( Note::N24, Instrument::CustomHead, false, ) => 1730,
            })
        }
    }

    impl From<NoteBlock> for BlockState {
        #[inline(always)]
        fn from(value : NoteBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for NoteBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for NoteBlock { }

    impl Block for NoteBlock {
        const DEFAULT_STATE : Self = Self {
            note : Note::N0,
            instrument : Instrument::Harp,
            powered : false,
        };
    }

}

/// `minecraft:podzol` block.
pub mod podzol {
    use super::*;

    /// `minecraft:podzol` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Podzol {
        /// `snowy` state.
        pub snowy : bool,
    }

    impl Podzol {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.snowy, )) {
                ( true, ) => 12,
                ( false, ) => 13,
            })
        }
    }

    impl From<Podzol> for BlockState {
        #[inline(always)]
        fn from(value : Podzol) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Podzol {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Podzol { }

    impl Block for Podzol {
        const DEFAULT_STATE : Self = Self {
            snowy : false,
        };
    }

}

/// `minecraft:bookshelf` block.
pub mod bookshelf {
    use super::*;

    /// `minecraft:bookshelf` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Bookshelf;

    impl Bookshelf {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2142)
        }
    }

    impl From<Bookshelf> for BlockState {
        #[inline(always)]
        fn from(value : Bookshelf) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Bookshelf {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Bookshelf { }

    impl Block for Bookshelf {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:purpur_block` block.
pub mod purpur_block {
    use super::*;

    /// `minecraft:purpur_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpurBlock;

    impl PurpurBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13433)
        }
    }

    impl From<PurpurBlock> for BlockState {
        #[inline(always)]
        fn from(value : PurpurBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpurBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpurBlock { }

    impl Block for PurpurBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:purpur_stairs` block.
pub mod purpur_stairs {
    use super::*;

    /// `minecraft:purpur_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpurStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl PurpurStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, self.shape, self.half, )) {
                ( true, Facing::North, Shape::Straight, Half::Top, ) => 13437,
                ( false, Facing::North, Shape::Straight, Half::Top, ) => 13438,
                ( true, Facing::North, Shape::InnerLeft, Half::Top, ) => 13439,
                ( false, Facing::North, Shape::InnerLeft, Half::Top, ) => 13440,
                ( true, Facing::North, Shape::InnerRight, Half::Top, ) => 13441,
                ( false, Facing::North, Shape::InnerRight, Half::Top, ) => 13442,
                ( true, Facing::North, Shape::OuterLeft, Half::Top, ) => 13443,
                ( false, Facing::North, Shape::OuterLeft, Half::Top, ) => 13444,
                ( true, Facing::North, Shape::OuterRight, Half::Top, ) => 13445,
                ( false, Facing::North, Shape::OuterRight, Half::Top, ) => 13446,
                ( true, Facing::North, Shape::Straight, Half::Bottom, ) => 13447,
                ( false, Facing::North, Shape::Straight, Half::Bottom, ) => 13448,
                ( true, Facing::North, Shape::InnerLeft, Half::Bottom, ) => 13449,
                ( false, Facing::North, Shape::InnerLeft, Half::Bottom, ) => 13450,
                ( true, Facing::North, Shape::InnerRight, Half::Bottom, ) => 13451,
                ( false, Facing::North, Shape::InnerRight, Half::Bottom, ) => 13452,
                ( true, Facing::North, Shape::OuterLeft, Half::Bottom, ) => 13453,
                ( false, Facing::North, Shape::OuterLeft, Half::Bottom, ) => 13454,
                ( true, Facing::North, Shape::OuterRight, Half::Bottom, ) => 13455,
                ( false, Facing::North, Shape::OuterRight, Half::Bottom, ) => 13456,
                ( true, Facing::South, Shape::Straight, Half::Top, ) => 13457,
                ( false, Facing::South, Shape::Straight, Half::Top, ) => 13458,
                ( true, Facing::South, Shape::InnerLeft, Half::Top, ) => 13459,
                ( false, Facing::South, Shape::InnerLeft, Half::Top, ) => 13460,
                ( true, Facing::South, Shape::InnerRight, Half::Top, ) => 13461,
                ( false, Facing::South, Shape::InnerRight, Half::Top, ) => 13462,
                ( true, Facing::South, Shape::OuterLeft, Half::Top, ) => 13463,
                ( false, Facing::South, Shape::OuterLeft, Half::Top, ) => 13464,
                ( true, Facing::South, Shape::OuterRight, Half::Top, ) => 13465,
                ( false, Facing::South, Shape::OuterRight, Half::Top, ) => 13466,
                ( true, Facing::South, Shape::Straight, Half::Bottom, ) => 13467,
                ( false, Facing::South, Shape::Straight, Half::Bottom, ) => 13468,
                ( true, Facing::South, Shape::InnerLeft, Half::Bottom, ) => 13469,
                ( false, Facing::South, Shape::InnerLeft, Half::Bottom, ) => 13470,
                ( true, Facing::South, Shape::InnerRight, Half::Bottom, ) => 13471,
                ( false, Facing::South, Shape::InnerRight, Half::Bottom, ) => 13472,
                ( true, Facing::South, Shape::OuterLeft, Half::Bottom, ) => 13473,
                ( false, Facing::South, Shape::OuterLeft, Half::Bottom, ) => 13474,
                ( true, Facing::South, Shape::OuterRight, Half::Bottom, ) => 13475,
                ( false, Facing::South, Shape::OuterRight, Half::Bottom, ) => 13476,
                ( true, Facing::West, Shape::Straight, Half::Top, ) => 13477,
                ( false, Facing::West, Shape::Straight, Half::Top, ) => 13478,
                ( true, Facing::West, Shape::InnerLeft, Half::Top, ) => 13479,
                ( false, Facing::West, Shape::InnerLeft, Half::Top, ) => 13480,
                ( true, Facing::West, Shape::InnerRight, Half::Top, ) => 13481,
                ( false, Facing::West, Shape::InnerRight, Half::Top, ) => 13482,
                ( true, Facing::West, Shape::OuterLeft, Half::Top, ) => 13483,
                ( false, Facing::West, Shape::OuterLeft, Half::Top, ) => 13484,
                ( true, Facing::West, Shape::OuterRight, Half::Top, ) => 13485,
                ( false, Facing::West, Shape::OuterRight, Half::Top, ) => 13486,
                ( true, Facing::West, Shape::Straight, Half::Bottom, ) => 13487,
                ( false, Facing::West, Shape::Straight, Half::Bottom, ) => 13488,
                ( true, Facing::West, Shape::InnerLeft, Half::Bottom, ) => 13489,
                ( false, Facing::West, Shape::InnerLeft, Half::Bottom, ) => 13490,
                ( true, Facing::West, Shape::InnerRight, Half::Bottom, ) => 13491,
                ( false, Facing::West, Shape::InnerRight, Half::Bottom, ) => 13492,
                ( true, Facing::West, Shape::OuterLeft, Half::Bottom, ) => 13493,
                ( false, Facing::West, Shape::OuterLeft, Half::Bottom, ) => 13494,
                ( true, Facing::West, Shape::OuterRight, Half::Bottom, ) => 13495,
                ( false, Facing::West, Shape::OuterRight, Half::Bottom, ) => 13496,
                ( true, Facing::East, Shape::Straight, Half::Top, ) => 13497,
                ( false, Facing::East, Shape::Straight, Half::Top, ) => 13498,
                ( true, Facing::East, Shape::InnerLeft, Half::Top, ) => 13499,
                ( false, Facing::East, Shape::InnerLeft, Half::Top, ) => 13500,
                ( true, Facing::East, Shape::InnerRight, Half::Top, ) => 13501,
                ( false, Facing::East, Shape::InnerRight, Half::Top, ) => 13502,
                ( true, Facing::East, Shape::OuterLeft, Half::Top, ) => 13503,
                ( false, Facing::East, Shape::OuterLeft, Half::Top, ) => 13504,
                ( true, Facing::East, Shape::OuterRight, Half::Top, ) => 13505,
                ( false, Facing::East, Shape::OuterRight, Half::Top, ) => 13506,
                ( true, Facing::East, Shape::Straight, Half::Bottom, ) => 13507,
                ( false, Facing::East, Shape::Straight, Half::Bottom, ) => 13508,
                ( true, Facing::East, Shape::InnerLeft, Half::Bottom, ) => 13509,
                ( false, Facing::East, Shape::InnerLeft, Half::Bottom, ) => 13510,
                ( true, Facing::East, Shape::InnerRight, Half::Bottom, ) => 13511,
                ( false, Facing::East, Shape::InnerRight, Half::Bottom, ) => 13512,
                ( true, Facing::East, Shape::OuterLeft, Half::Bottom, ) => 13513,
                ( false, Facing::East, Shape::OuterLeft, Half::Bottom, ) => 13514,
                ( true, Facing::East, Shape::OuterRight, Half::Bottom, ) => 13515,
                ( false, Facing::East, Shape::OuterRight, Half::Bottom, ) => 13516,
            })
        }
    }

    impl From<PurpurStairs> for BlockState {
        #[inline(always)]
        fn from(value : PurpurStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpurStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpurStairs { }

    impl Block for PurpurStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
            shape : Shape::Straight,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:potted_wither_rose` block.
pub mod potted_wither_rose {
    use super::*;

    /// `minecraft:potted_wither_rose` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedWitherRose;

    impl PottedWitherRose {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9375)
        }
    }

    impl From<PottedWitherRose> for BlockState {
        #[inline(always)]
        fn from(value : PottedWitherRose) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedWitherRose {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedWitherRose { }

    impl Block for PottedWitherRose {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:blackstone_wall` block.
pub mod blackstone_wall {
    use super::*;

    /// `minecraft:blackstone_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackstoneWall {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `south` state.
        pub south : South,
        /// `up` state.
        pub up : bool,
        /// `north` state.
        pub north : North,
        /// `west` state.
        pub west : West,
        /// `east` state.
        pub east : East,
    }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    impl BlackstoneWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.south, self.up, self.north, self.west, self.east, )) {
                ( true, South::None, true, North::None, West::None, East::None, ) => 20601,
                ( true, South::None, true, North::None, West::Low, East::None, ) => 20602,
                ( true, South::None, true, North::None, West::Tall, East::None, ) => 20603,
                ( false, South::None, true, North::None, West::None, East::None, ) => 20604,
                ( false, South::None, true, North::None, West::Low, East::None, ) => 20605,
                ( false, South::None, true, North::None, West::Tall, East::None, ) => 20606,
                ( true, South::None, false, North::None, West::None, East::None, ) => 20607,
                ( true, South::None, false, North::None, West::Low, East::None, ) => 20608,
                ( true, South::None, false, North::None, West::Tall, East::None, ) => 20609,
                ( false, South::None, false, North::None, West::None, East::None, ) => 20610,
                ( false, South::None, false, North::None, West::Low, East::None, ) => 20611,
                ( false, South::None, false, North::None, West::Tall, East::None, ) => 20612,
                ( true, South::Low, true, North::None, West::None, East::None, ) => 20613,
                ( true, South::Low, true, North::None, West::Low, East::None, ) => 20614,
                ( true, South::Low, true, North::None, West::Tall, East::None, ) => 20615,
                ( false, South::Low, true, North::None, West::None, East::None, ) => 20616,
                ( false, South::Low, true, North::None, West::Low, East::None, ) => 20617,
                ( false, South::Low, true, North::None, West::Tall, East::None, ) => 20618,
                ( true, South::Low, false, North::None, West::None, East::None, ) => 20619,
                ( true, South::Low, false, North::None, West::Low, East::None, ) => 20620,
                ( true, South::Low, false, North::None, West::Tall, East::None, ) => 20621,
                ( false, South::Low, false, North::None, West::None, East::None, ) => 20622,
                ( false, South::Low, false, North::None, West::Low, East::None, ) => 20623,
                ( false, South::Low, false, North::None, West::Tall, East::None, ) => 20624,
                ( true, South::Tall, true, North::None, West::None, East::None, ) => 20625,
                ( true, South::Tall, true, North::None, West::Low, East::None, ) => 20626,
                ( true, South::Tall, true, North::None, West::Tall, East::None, ) => 20627,
                ( false, South::Tall, true, North::None, West::None, East::None, ) => 20628,
                ( false, South::Tall, true, North::None, West::Low, East::None, ) => 20629,
                ( false, South::Tall, true, North::None, West::Tall, East::None, ) => 20630,
                ( true, South::Tall, false, North::None, West::None, East::None, ) => 20631,
                ( true, South::Tall, false, North::None, West::Low, East::None, ) => 20632,
                ( true, South::Tall, false, North::None, West::Tall, East::None, ) => 20633,
                ( false, South::Tall, false, North::None, West::None, East::None, ) => 20634,
                ( false, South::Tall, false, North::None, West::Low, East::None, ) => 20635,
                ( false, South::Tall, false, North::None, West::Tall, East::None, ) => 20636,
                ( true, South::None, true, North::Low, West::None, East::None, ) => 20637,
                ( true, South::None, true, North::Low, West::Low, East::None, ) => 20638,
                ( true, South::None, true, North::Low, West::Tall, East::None, ) => 20639,
                ( false, South::None, true, North::Low, West::None, East::None, ) => 20640,
                ( false, South::None, true, North::Low, West::Low, East::None, ) => 20641,
                ( false, South::None, true, North::Low, West::Tall, East::None, ) => 20642,
                ( true, South::None, false, North::Low, West::None, East::None, ) => 20643,
                ( true, South::None, false, North::Low, West::Low, East::None, ) => 20644,
                ( true, South::None, false, North::Low, West::Tall, East::None, ) => 20645,
                ( false, South::None, false, North::Low, West::None, East::None, ) => 20646,
                ( false, South::None, false, North::Low, West::Low, East::None, ) => 20647,
                ( false, South::None, false, North::Low, West::Tall, East::None, ) => 20648,
                ( true, South::Low, true, North::Low, West::None, East::None, ) => 20649,
                ( true, South::Low, true, North::Low, West::Low, East::None, ) => 20650,
                ( true, South::Low, true, North::Low, West::Tall, East::None, ) => 20651,
                ( false, South::Low, true, North::Low, West::None, East::None, ) => 20652,
                ( false, South::Low, true, North::Low, West::Low, East::None, ) => 20653,
                ( false, South::Low, true, North::Low, West::Tall, East::None, ) => 20654,
                ( true, South::Low, false, North::Low, West::None, East::None, ) => 20655,
                ( true, South::Low, false, North::Low, West::Low, East::None, ) => 20656,
                ( true, South::Low, false, North::Low, West::Tall, East::None, ) => 20657,
                ( false, South::Low, false, North::Low, West::None, East::None, ) => 20658,
                ( false, South::Low, false, North::Low, West::Low, East::None, ) => 20659,
                ( false, South::Low, false, North::Low, West::Tall, East::None, ) => 20660,
                ( true, South::Tall, true, North::Low, West::None, East::None, ) => 20661,
                ( true, South::Tall, true, North::Low, West::Low, East::None, ) => 20662,
                ( true, South::Tall, true, North::Low, West::Tall, East::None, ) => 20663,
                ( false, South::Tall, true, North::Low, West::None, East::None, ) => 20664,
                ( false, South::Tall, true, North::Low, West::Low, East::None, ) => 20665,
                ( false, South::Tall, true, North::Low, West::Tall, East::None, ) => 20666,
                ( true, South::Tall, false, North::Low, West::None, East::None, ) => 20667,
                ( true, South::Tall, false, North::Low, West::Low, East::None, ) => 20668,
                ( true, South::Tall, false, North::Low, West::Tall, East::None, ) => 20669,
                ( false, South::Tall, false, North::Low, West::None, East::None, ) => 20670,
                ( false, South::Tall, false, North::Low, West::Low, East::None, ) => 20671,
                ( false, South::Tall, false, North::Low, West::Tall, East::None, ) => 20672,
                ( true, South::None, true, North::Tall, West::None, East::None, ) => 20673,
                ( true, South::None, true, North::Tall, West::Low, East::None, ) => 20674,
                ( true, South::None, true, North::Tall, West::Tall, East::None, ) => 20675,
                ( false, South::None, true, North::Tall, West::None, East::None, ) => 20676,
                ( false, South::None, true, North::Tall, West::Low, East::None, ) => 20677,
                ( false, South::None, true, North::Tall, West::Tall, East::None, ) => 20678,
                ( true, South::None, false, North::Tall, West::None, East::None, ) => 20679,
                ( true, South::None, false, North::Tall, West::Low, East::None, ) => 20680,
                ( true, South::None, false, North::Tall, West::Tall, East::None, ) => 20681,
                ( false, South::None, false, North::Tall, West::None, East::None, ) => 20682,
                ( false, South::None, false, North::Tall, West::Low, East::None, ) => 20683,
                ( false, South::None, false, North::Tall, West::Tall, East::None, ) => 20684,
                ( true, South::Low, true, North::Tall, West::None, East::None, ) => 20685,
                ( true, South::Low, true, North::Tall, West::Low, East::None, ) => 20686,
                ( true, South::Low, true, North::Tall, West::Tall, East::None, ) => 20687,
                ( false, South::Low, true, North::Tall, West::None, East::None, ) => 20688,
                ( false, South::Low, true, North::Tall, West::Low, East::None, ) => 20689,
                ( false, South::Low, true, North::Tall, West::Tall, East::None, ) => 20690,
                ( true, South::Low, false, North::Tall, West::None, East::None, ) => 20691,
                ( true, South::Low, false, North::Tall, West::Low, East::None, ) => 20692,
                ( true, South::Low, false, North::Tall, West::Tall, East::None, ) => 20693,
                ( false, South::Low, false, North::Tall, West::None, East::None, ) => 20694,
                ( false, South::Low, false, North::Tall, West::Low, East::None, ) => 20695,
                ( false, South::Low, false, North::Tall, West::Tall, East::None, ) => 20696,
                ( true, South::Tall, true, North::Tall, West::None, East::None, ) => 20697,
                ( true, South::Tall, true, North::Tall, West::Low, East::None, ) => 20698,
                ( true, South::Tall, true, North::Tall, West::Tall, East::None, ) => 20699,
                ( false, South::Tall, true, North::Tall, West::None, East::None, ) => 20700,
                ( false, South::Tall, true, North::Tall, West::Low, East::None, ) => 20701,
                ( false, South::Tall, true, North::Tall, West::Tall, East::None, ) => 20702,
                ( true, South::Tall, false, North::Tall, West::None, East::None, ) => 20703,
                ( true, South::Tall, false, North::Tall, West::Low, East::None, ) => 20704,
                ( true, South::Tall, false, North::Tall, West::Tall, East::None, ) => 20705,
                ( false, South::Tall, false, North::Tall, West::None, East::None, ) => 20706,
                ( false, South::Tall, false, North::Tall, West::Low, East::None, ) => 20707,
                ( false, South::Tall, false, North::Tall, West::Tall, East::None, ) => 20708,
                ( true, South::None, true, North::None, West::None, East::Low, ) => 20709,
                ( true, South::None, true, North::None, West::Low, East::Low, ) => 20710,
                ( true, South::None, true, North::None, West::Tall, East::Low, ) => 20711,
                ( false, South::None, true, North::None, West::None, East::Low, ) => 20712,
                ( false, South::None, true, North::None, West::Low, East::Low, ) => 20713,
                ( false, South::None, true, North::None, West::Tall, East::Low, ) => 20714,
                ( true, South::None, false, North::None, West::None, East::Low, ) => 20715,
                ( true, South::None, false, North::None, West::Low, East::Low, ) => 20716,
                ( true, South::None, false, North::None, West::Tall, East::Low, ) => 20717,
                ( false, South::None, false, North::None, West::None, East::Low, ) => 20718,
                ( false, South::None, false, North::None, West::Low, East::Low, ) => 20719,
                ( false, South::None, false, North::None, West::Tall, East::Low, ) => 20720,
                ( true, South::Low, true, North::None, West::None, East::Low, ) => 20721,
                ( true, South::Low, true, North::None, West::Low, East::Low, ) => 20722,
                ( true, South::Low, true, North::None, West::Tall, East::Low, ) => 20723,
                ( false, South::Low, true, North::None, West::None, East::Low, ) => 20724,
                ( false, South::Low, true, North::None, West::Low, East::Low, ) => 20725,
                ( false, South::Low, true, North::None, West::Tall, East::Low, ) => 20726,
                ( true, South::Low, false, North::None, West::None, East::Low, ) => 20727,
                ( true, South::Low, false, North::None, West::Low, East::Low, ) => 20728,
                ( true, South::Low, false, North::None, West::Tall, East::Low, ) => 20729,
                ( false, South::Low, false, North::None, West::None, East::Low, ) => 20730,
                ( false, South::Low, false, North::None, West::Low, East::Low, ) => 20731,
                ( false, South::Low, false, North::None, West::Tall, East::Low, ) => 20732,
                ( true, South::Tall, true, North::None, West::None, East::Low, ) => 20733,
                ( true, South::Tall, true, North::None, West::Low, East::Low, ) => 20734,
                ( true, South::Tall, true, North::None, West::Tall, East::Low, ) => 20735,
                ( false, South::Tall, true, North::None, West::None, East::Low, ) => 20736,
                ( false, South::Tall, true, North::None, West::Low, East::Low, ) => 20737,
                ( false, South::Tall, true, North::None, West::Tall, East::Low, ) => 20738,
                ( true, South::Tall, false, North::None, West::None, East::Low, ) => 20739,
                ( true, South::Tall, false, North::None, West::Low, East::Low, ) => 20740,
                ( true, South::Tall, false, North::None, West::Tall, East::Low, ) => 20741,
                ( false, South::Tall, false, North::None, West::None, East::Low, ) => 20742,
                ( false, South::Tall, false, North::None, West::Low, East::Low, ) => 20743,
                ( false, South::Tall, false, North::None, West::Tall, East::Low, ) => 20744,
                ( true, South::None, true, North::Low, West::None, East::Low, ) => 20745,
                ( true, South::None, true, North::Low, West::Low, East::Low, ) => 20746,
                ( true, South::None, true, North::Low, West::Tall, East::Low, ) => 20747,
                ( false, South::None, true, North::Low, West::None, East::Low, ) => 20748,
                ( false, South::None, true, North::Low, West::Low, East::Low, ) => 20749,
                ( false, South::None, true, North::Low, West::Tall, East::Low, ) => 20750,
                ( true, South::None, false, North::Low, West::None, East::Low, ) => 20751,
                ( true, South::None, false, North::Low, West::Low, East::Low, ) => 20752,
                ( true, South::None, false, North::Low, West::Tall, East::Low, ) => 20753,
                ( false, South::None, false, North::Low, West::None, East::Low, ) => 20754,
                ( false, South::None, false, North::Low, West::Low, East::Low, ) => 20755,
                ( false, South::None, false, North::Low, West::Tall, East::Low, ) => 20756,
                ( true, South::Low, true, North::Low, West::None, East::Low, ) => 20757,
                ( true, South::Low, true, North::Low, West::Low, East::Low, ) => 20758,
                ( true, South::Low, true, North::Low, West::Tall, East::Low, ) => 20759,
                ( false, South::Low, true, North::Low, West::None, East::Low, ) => 20760,
                ( false, South::Low, true, North::Low, West::Low, East::Low, ) => 20761,
                ( false, South::Low, true, North::Low, West::Tall, East::Low, ) => 20762,
                ( true, South::Low, false, North::Low, West::None, East::Low, ) => 20763,
                ( true, South::Low, false, North::Low, West::Low, East::Low, ) => 20764,
                ( true, South::Low, false, North::Low, West::Tall, East::Low, ) => 20765,
                ( false, South::Low, false, North::Low, West::None, East::Low, ) => 20766,
                ( false, South::Low, false, North::Low, West::Low, East::Low, ) => 20767,
                ( false, South::Low, false, North::Low, West::Tall, East::Low, ) => 20768,
                ( true, South::Tall, true, North::Low, West::None, East::Low, ) => 20769,
                ( true, South::Tall, true, North::Low, West::Low, East::Low, ) => 20770,
                ( true, South::Tall, true, North::Low, West::Tall, East::Low, ) => 20771,
                ( false, South::Tall, true, North::Low, West::None, East::Low, ) => 20772,
                ( false, South::Tall, true, North::Low, West::Low, East::Low, ) => 20773,
                ( false, South::Tall, true, North::Low, West::Tall, East::Low, ) => 20774,
                ( true, South::Tall, false, North::Low, West::None, East::Low, ) => 20775,
                ( true, South::Tall, false, North::Low, West::Low, East::Low, ) => 20776,
                ( true, South::Tall, false, North::Low, West::Tall, East::Low, ) => 20777,
                ( false, South::Tall, false, North::Low, West::None, East::Low, ) => 20778,
                ( false, South::Tall, false, North::Low, West::Low, East::Low, ) => 20779,
                ( false, South::Tall, false, North::Low, West::Tall, East::Low, ) => 20780,
                ( true, South::None, true, North::Tall, West::None, East::Low, ) => 20781,
                ( true, South::None, true, North::Tall, West::Low, East::Low, ) => 20782,
                ( true, South::None, true, North::Tall, West::Tall, East::Low, ) => 20783,
                ( false, South::None, true, North::Tall, West::None, East::Low, ) => 20784,
                ( false, South::None, true, North::Tall, West::Low, East::Low, ) => 20785,
                ( false, South::None, true, North::Tall, West::Tall, East::Low, ) => 20786,
                ( true, South::None, false, North::Tall, West::None, East::Low, ) => 20787,
                ( true, South::None, false, North::Tall, West::Low, East::Low, ) => 20788,
                ( true, South::None, false, North::Tall, West::Tall, East::Low, ) => 20789,
                ( false, South::None, false, North::Tall, West::None, East::Low, ) => 20790,
                ( false, South::None, false, North::Tall, West::Low, East::Low, ) => 20791,
                ( false, South::None, false, North::Tall, West::Tall, East::Low, ) => 20792,
                ( true, South::Low, true, North::Tall, West::None, East::Low, ) => 20793,
                ( true, South::Low, true, North::Tall, West::Low, East::Low, ) => 20794,
                ( true, South::Low, true, North::Tall, West::Tall, East::Low, ) => 20795,
                ( false, South::Low, true, North::Tall, West::None, East::Low, ) => 20796,
                ( false, South::Low, true, North::Tall, West::Low, East::Low, ) => 20797,
                ( false, South::Low, true, North::Tall, West::Tall, East::Low, ) => 20798,
                ( true, South::Low, false, North::Tall, West::None, East::Low, ) => 20799,
                ( true, South::Low, false, North::Tall, West::Low, East::Low, ) => 20800,
                ( true, South::Low, false, North::Tall, West::Tall, East::Low, ) => 20801,
                ( false, South::Low, false, North::Tall, West::None, East::Low, ) => 20802,
                ( false, South::Low, false, North::Tall, West::Low, East::Low, ) => 20803,
                ( false, South::Low, false, North::Tall, West::Tall, East::Low, ) => 20804,
                ( true, South::Tall, true, North::Tall, West::None, East::Low, ) => 20805,
                ( true, South::Tall, true, North::Tall, West::Low, East::Low, ) => 20806,
                ( true, South::Tall, true, North::Tall, West::Tall, East::Low, ) => 20807,
                ( false, South::Tall, true, North::Tall, West::None, East::Low, ) => 20808,
                ( false, South::Tall, true, North::Tall, West::Low, East::Low, ) => 20809,
                ( false, South::Tall, true, North::Tall, West::Tall, East::Low, ) => 20810,
                ( true, South::Tall, false, North::Tall, West::None, East::Low, ) => 20811,
                ( true, South::Tall, false, North::Tall, West::Low, East::Low, ) => 20812,
                ( true, South::Tall, false, North::Tall, West::Tall, East::Low, ) => 20813,
                ( false, South::Tall, false, North::Tall, West::None, East::Low, ) => 20814,
                ( false, South::Tall, false, North::Tall, West::Low, East::Low, ) => 20815,
                ( false, South::Tall, false, North::Tall, West::Tall, East::Low, ) => 20816,
                ( true, South::None, true, North::None, West::None, East::Tall, ) => 20817,
                ( true, South::None, true, North::None, West::Low, East::Tall, ) => 20818,
                ( true, South::None, true, North::None, West::Tall, East::Tall, ) => 20819,
                ( false, South::None, true, North::None, West::None, East::Tall, ) => 20820,
                ( false, South::None, true, North::None, West::Low, East::Tall, ) => 20821,
                ( false, South::None, true, North::None, West::Tall, East::Tall, ) => 20822,
                ( true, South::None, false, North::None, West::None, East::Tall, ) => 20823,
                ( true, South::None, false, North::None, West::Low, East::Tall, ) => 20824,
                ( true, South::None, false, North::None, West::Tall, East::Tall, ) => 20825,
                ( false, South::None, false, North::None, West::None, East::Tall, ) => 20826,
                ( false, South::None, false, North::None, West::Low, East::Tall, ) => 20827,
                ( false, South::None, false, North::None, West::Tall, East::Tall, ) => 20828,
                ( true, South::Low, true, North::None, West::None, East::Tall, ) => 20829,
                ( true, South::Low, true, North::None, West::Low, East::Tall, ) => 20830,
                ( true, South::Low, true, North::None, West::Tall, East::Tall, ) => 20831,
                ( false, South::Low, true, North::None, West::None, East::Tall, ) => 20832,
                ( false, South::Low, true, North::None, West::Low, East::Tall, ) => 20833,
                ( false, South::Low, true, North::None, West::Tall, East::Tall, ) => 20834,
                ( true, South::Low, false, North::None, West::None, East::Tall, ) => 20835,
                ( true, South::Low, false, North::None, West::Low, East::Tall, ) => 20836,
                ( true, South::Low, false, North::None, West::Tall, East::Tall, ) => 20837,
                ( false, South::Low, false, North::None, West::None, East::Tall, ) => 20838,
                ( false, South::Low, false, North::None, West::Low, East::Tall, ) => 20839,
                ( false, South::Low, false, North::None, West::Tall, East::Tall, ) => 20840,
                ( true, South::Tall, true, North::None, West::None, East::Tall, ) => 20841,
                ( true, South::Tall, true, North::None, West::Low, East::Tall, ) => 20842,
                ( true, South::Tall, true, North::None, West::Tall, East::Tall, ) => 20843,
                ( false, South::Tall, true, North::None, West::None, East::Tall, ) => 20844,
                ( false, South::Tall, true, North::None, West::Low, East::Tall, ) => 20845,
                ( false, South::Tall, true, North::None, West::Tall, East::Tall, ) => 20846,
                ( true, South::Tall, false, North::None, West::None, East::Tall, ) => 20847,
                ( true, South::Tall, false, North::None, West::Low, East::Tall, ) => 20848,
                ( true, South::Tall, false, North::None, West::Tall, East::Tall, ) => 20849,
                ( false, South::Tall, false, North::None, West::None, East::Tall, ) => 20850,
                ( false, South::Tall, false, North::None, West::Low, East::Tall, ) => 20851,
                ( false, South::Tall, false, North::None, West::Tall, East::Tall, ) => 20852,
                ( true, South::None, true, North::Low, West::None, East::Tall, ) => 20853,
                ( true, South::None, true, North::Low, West::Low, East::Tall, ) => 20854,
                ( true, South::None, true, North::Low, West::Tall, East::Tall, ) => 20855,
                ( false, South::None, true, North::Low, West::None, East::Tall, ) => 20856,
                ( false, South::None, true, North::Low, West::Low, East::Tall, ) => 20857,
                ( false, South::None, true, North::Low, West::Tall, East::Tall, ) => 20858,
                ( true, South::None, false, North::Low, West::None, East::Tall, ) => 20859,
                ( true, South::None, false, North::Low, West::Low, East::Tall, ) => 20860,
                ( true, South::None, false, North::Low, West::Tall, East::Tall, ) => 20861,
                ( false, South::None, false, North::Low, West::None, East::Tall, ) => 20862,
                ( false, South::None, false, North::Low, West::Low, East::Tall, ) => 20863,
                ( false, South::None, false, North::Low, West::Tall, East::Tall, ) => 20864,
                ( true, South::Low, true, North::Low, West::None, East::Tall, ) => 20865,
                ( true, South::Low, true, North::Low, West::Low, East::Tall, ) => 20866,
                ( true, South::Low, true, North::Low, West::Tall, East::Tall, ) => 20867,
                ( false, South::Low, true, North::Low, West::None, East::Tall, ) => 20868,
                ( false, South::Low, true, North::Low, West::Low, East::Tall, ) => 20869,
                ( false, South::Low, true, North::Low, West::Tall, East::Tall, ) => 20870,
                ( true, South::Low, false, North::Low, West::None, East::Tall, ) => 20871,
                ( true, South::Low, false, North::Low, West::Low, East::Tall, ) => 20872,
                ( true, South::Low, false, North::Low, West::Tall, East::Tall, ) => 20873,
                ( false, South::Low, false, North::Low, West::None, East::Tall, ) => 20874,
                ( false, South::Low, false, North::Low, West::Low, East::Tall, ) => 20875,
                ( false, South::Low, false, North::Low, West::Tall, East::Tall, ) => 20876,
                ( true, South::Tall, true, North::Low, West::None, East::Tall, ) => 20877,
                ( true, South::Tall, true, North::Low, West::Low, East::Tall, ) => 20878,
                ( true, South::Tall, true, North::Low, West::Tall, East::Tall, ) => 20879,
                ( false, South::Tall, true, North::Low, West::None, East::Tall, ) => 20880,
                ( false, South::Tall, true, North::Low, West::Low, East::Tall, ) => 20881,
                ( false, South::Tall, true, North::Low, West::Tall, East::Tall, ) => 20882,
                ( true, South::Tall, false, North::Low, West::None, East::Tall, ) => 20883,
                ( true, South::Tall, false, North::Low, West::Low, East::Tall, ) => 20884,
                ( true, South::Tall, false, North::Low, West::Tall, East::Tall, ) => 20885,
                ( false, South::Tall, false, North::Low, West::None, East::Tall, ) => 20886,
                ( false, South::Tall, false, North::Low, West::Low, East::Tall, ) => 20887,
                ( false, South::Tall, false, North::Low, West::Tall, East::Tall, ) => 20888,
                ( true, South::None, true, North::Tall, West::None, East::Tall, ) => 20889,
                ( true, South::None, true, North::Tall, West::Low, East::Tall, ) => 20890,
                ( true, South::None, true, North::Tall, West::Tall, East::Tall, ) => 20891,
                ( false, South::None, true, North::Tall, West::None, East::Tall, ) => 20892,
                ( false, South::None, true, North::Tall, West::Low, East::Tall, ) => 20893,
                ( false, South::None, true, North::Tall, West::Tall, East::Tall, ) => 20894,
                ( true, South::None, false, North::Tall, West::None, East::Tall, ) => 20895,
                ( true, South::None, false, North::Tall, West::Low, East::Tall, ) => 20896,
                ( true, South::None, false, North::Tall, West::Tall, East::Tall, ) => 20897,
                ( false, South::None, false, North::Tall, West::None, East::Tall, ) => 20898,
                ( false, South::None, false, North::Tall, West::Low, East::Tall, ) => 20899,
                ( false, South::None, false, North::Tall, West::Tall, East::Tall, ) => 20900,
                ( true, South::Low, true, North::Tall, West::None, East::Tall, ) => 20901,
                ( true, South::Low, true, North::Tall, West::Low, East::Tall, ) => 20902,
                ( true, South::Low, true, North::Tall, West::Tall, East::Tall, ) => 20903,
                ( false, South::Low, true, North::Tall, West::None, East::Tall, ) => 20904,
                ( false, South::Low, true, North::Tall, West::Low, East::Tall, ) => 20905,
                ( false, South::Low, true, North::Tall, West::Tall, East::Tall, ) => 20906,
                ( true, South::Low, false, North::Tall, West::None, East::Tall, ) => 20907,
                ( true, South::Low, false, North::Tall, West::Low, East::Tall, ) => 20908,
                ( true, South::Low, false, North::Tall, West::Tall, East::Tall, ) => 20909,
                ( false, South::Low, false, North::Tall, West::None, East::Tall, ) => 20910,
                ( false, South::Low, false, North::Tall, West::Low, East::Tall, ) => 20911,
                ( false, South::Low, false, North::Tall, West::Tall, East::Tall, ) => 20912,
                ( true, South::Tall, true, North::Tall, West::None, East::Tall, ) => 20913,
                ( true, South::Tall, true, North::Tall, West::Low, East::Tall, ) => 20914,
                ( true, South::Tall, true, North::Tall, West::Tall, East::Tall, ) => 20915,
                ( false, South::Tall, true, North::Tall, West::None, East::Tall, ) => 20916,
                ( false, South::Tall, true, North::Tall, West::Low, East::Tall, ) => 20917,
                ( false, South::Tall, true, North::Tall, West::Tall, East::Tall, ) => 20918,
                ( true, South::Tall, false, North::Tall, West::None, East::Tall, ) => 20919,
                ( true, South::Tall, false, North::Tall, West::Low, East::Tall, ) => 20920,
                ( true, South::Tall, false, North::Tall, West::Tall, East::Tall, ) => 20921,
                ( false, South::Tall, false, North::Tall, West::None, East::Tall, ) => 20922,
                ( false, South::Tall, false, North::Tall, West::Low, East::Tall, ) => 20923,
                ( false, South::Tall, false, North::Tall, West::Tall, East::Tall, ) => 20924,
            })
        }
    }

    impl From<BlackstoneWall> for BlockState {
        #[inline(always)]
        fn from(value : BlackstoneWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackstoneWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackstoneWall { }

    impl Block for BlackstoneWall {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            south : South::None,
            up : true,
            north : North::None,
            west : West::None,
            east : East::None,
        };
    }

}

/// `minecraft:redstone_wall_torch` block.
pub mod redstone_wall_torch {
    use super::*;

    /// `minecraft:redstone_wall_torch` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedstoneWallTorch {
        /// `facing` state.
        pub facing : Facing,
        /// `lit` state.
        pub lit : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl RedstoneWallTorch {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.lit, )) {
                ( Facing::North, true, ) => 5918,
                ( Facing::North, false, ) => 5919,
                ( Facing::South, true, ) => 5920,
                ( Facing::South, false, ) => 5921,
                ( Facing::West, true, ) => 5922,
                ( Facing::West, false, ) => 5923,
                ( Facing::East, true, ) => 5924,
                ( Facing::East, false, ) => 5925,
            })
        }
    }

    impl From<RedstoneWallTorch> for BlockState {
        #[inline(always)]
        fn from(value : RedstoneWallTorch) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedstoneWallTorch {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedstoneWallTorch { }

    impl Block for RedstoneWallTorch {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            lit : true,
        };
    }

}

/// `minecraft:copper_block` block.
pub mod copper_block {
    use super::*;

    /// `minecraft:copper_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CopperBlock;

    impl CopperBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(23998)
        }
    }

    impl From<CopperBlock> for BlockState {
        #[inline(always)]
        fn from(value : CopperBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CopperBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CopperBlock { }

    impl Block for CopperBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:wheat` block.
pub mod wheat {
    use super::*;

    /// `minecraft:wheat` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Wheat {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl Wheat {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 4342,
                ( Age::N1, ) => 4343,
                ( Age::N2, ) => 4344,
                ( Age::N3, ) => 4345,
                ( Age::N4, ) => 4346,
                ( Age::N5, ) => 4347,
                ( Age::N6, ) => 4348,
                ( Age::N7, ) => 4349,
            })
        }
    }

    impl From<Wheat> for BlockState {
        #[inline(always)]
        fn from(value : Wheat) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Wheat {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Wheat { }

    impl Block for Wheat {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:gray_terracotta` block.
pub mod gray_terracotta {
    use super::*;

    /// `minecraft:gray_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayTerracotta;

    impl GrayTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10172)
        }
    }

    impl From<GrayTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : GrayTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayTerracotta { }

    impl Block for GrayTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:small_amethyst_bud` block.
pub mod small_amethyst_bud {
    use super::*;

    /// `minecraft:small_amethyst_bud` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmallAmethystBud {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl SmallAmethystBud {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 22129,
                ( Facing::North, false, ) => 22130,
                ( Facing::East, true, ) => 22131,
                ( Facing::East, false, ) => 22132,
                ( Facing::South, true, ) => 22133,
                ( Facing::South, false, ) => 22134,
                ( Facing::West, true, ) => 22135,
                ( Facing::West, false, ) => 22136,
                ( Facing::Up, true, ) => 22137,
                ( Facing::Up, false, ) => 22138,
                ( Facing::Down, true, ) => 22139,
                ( Facing::Down, false, ) => 22140,
            })
        }
    }

    impl From<SmallAmethystBud> for BlockState {
        #[inline(always)]
        fn from(value : SmallAmethystBud) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmallAmethystBud {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmallAmethystBud { }

    impl Block for SmallAmethystBud {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
            waterlogged : false,
        };
    }

}

/// `minecraft:white_candle_cake` block.
pub mod white_candle_cake {
    use super::*;

    /// `minecraft:white_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl WhiteCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22059,
                ( false, ) => 22060,
            })
        }
    }

    impl From<WhiteCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : WhiteCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteCandleCake { }

    impl Block for WhiteCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:cut_red_sandstone_slab` block.
pub mod cut_red_sandstone_slab {
    use super::*;

    /// `minecraft:cut_red_sandstone_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CutRedSandstoneSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl CutRedSandstoneSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 12189,
                ( Kind::Top, false, ) => 12190,
                ( Kind::Bottom, true, ) => 12191,
                ( Kind::Bottom, false, ) => 12192,
                ( Kind::Double, true, ) => 12193,
                ( Kind::Double, false, ) => 12194,
            })
        }
    }

    impl From<CutRedSandstoneSlab> for BlockState {
        #[inline(always)]
        fn from(value : CutRedSandstoneSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CutRedSandstoneSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CutRedSandstoneSlab { }

    impl Block for CutRedSandstoneSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:cyan_wool` block.
pub mod cyan_wool {
    use super::*;

    /// `minecraft:cyan_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanWool;

    impl CyanWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2102)
        }
    }

    impl From<CyanWool> for BlockState {
        #[inline(always)]
        fn from(value : CyanWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanWool { }

    impl Block for CyanWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:jungle_hanging_sign` block.
pub mod jungle_hanging_sign {
    use super::*;

    /// `minecraft:jungle_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleHangingSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `attached` state.
        pub attached : bool,
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl JungleHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.attached, self.rotation, )) {
                ( true, true, Rotation::N0, ) => 5258,
                ( false, true, Rotation::N0, ) => 5259,
                ( true, true, Rotation::N1, ) => 5260,
                ( false, true, Rotation::N1, ) => 5261,
                ( true, true, Rotation::N2, ) => 5262,
                ( false, true, Rotation::N2, ) => 5263,
                ( true, true, Rotation::N3, ) => 5264,
                ( false, true, Rotation::N3, ) => 5265,
                ( true, true, Rotation::N4, ) => 5266,
                ( false, true, Rotation::N4, ) => 5267,
                ( true, true, Rotation::N5, ) => 5268,
                ( false, true, Rotation::N5, ) => 5269,
                ( true, true, Rotation::N6, ) => 5270,
                ( false, true, Rotation::N6, ) => 5271,
                ( true, true, Rotation::N7, ) => 5272,
                ( false, true, Rotation::N7, ) => 5273,
                ( true, true, Rotation::N8, ) => 5274,
                ( false, true, Rotation::N8, ) => 5275,
                ( true, true, Rotation::N9, ) => 5276,
                ( false, true, Rotation::N9, ) => 5277,
                ( true, true, Rotation::N10, ) => 5278,
                ( false, true, Rotation::N10, ) => 5279,
                ( true, true, Rotation::N11, ) => 5280,
                ( false, true, Rotation::N11, ) => 5281,
                ( true, true, Rotation::N12, ) => 5282,
                ( false, true, Rotation::N12, ) => 5283,
                ( true, true, Rotation::N13, ) => 5284,
                ( false, true, Rotation::N13, ) => 5285,
                ( true, true, Rotation::N14, ) => 5286,
                ( false, true, Rotation::N14, ) => 5287,
                ( true, true, Rotation::N15, ) => 5288,
                ( false, true, Rotation::N15, ) => 5289,
                ( true, false, Rotation::N0, ) => 5290,
                ( false, false, Rotation::N0, ) => 5291,
                ( true, false, Rotation::N1, ) => 5292,
                ( false, false, Rotation::N1, ) => 5293,
                ( true, false, Rotation::N2, ) => 5294,
                ( false, false, Rotation::N2, ) => 5295,
                ( true, false, Rotation::N3, ) => 5296,
                ( false, false, Rotation::N3, ) => 5297,
                ( true, false, Rotation::N4, ) => 5298,
                ( false, false, Rotation::N4, ) => 5299,
                ( true, false, Rotation::N5, ) => 5300,
                ( false, false, Rotation::N5, ) => 5301,
                ( true, false, Rotation::N6, ) => 5302,
                ( false, false, Rotation::N6, ) => 5303,
                ( true, false, Rotation::N7, ) => 5304,
                ( false, false, Rotation::N7, ) => 5305,
                ( true, false, Rotation::N8, ) => 5306,
                ( false, false, Rotation::N8, ) => 5307,
                ( true, false, Rotation::N9, ) => 5308,
                ( false, false, Rotation::N9, ) => 5309,
                ( true, false, Rotation::N10, ) => 5310,
                ( false, false, Rotation::N10, ) => 5311,
                ( true, false, Rotation::N11, ) => 5312,
                ( false, false, Rotation::N11, ) => 5313,
                ( true, false, Rotation::N12, ) => 5314,
                ( false, false, Rotation::N12, ) => 5315,
                ( true, false, Rotation::N13, ) => 5316,
                ( false, false, Rotation::N13, ) => 5317,
                ( true, false, Rotation::N14, ) => 5318,
                ( false, false, Rotation::N14, ) => 5319,
                ( true, false, Rotation::N15, ) => 5320,
                ( false, false, Rotation::N15, ) => 5321,
            })
        }
    }

    impl From<JungleHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : JungleHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleHangingSign { }

    impl Block for JungleHangingSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            attached : false,
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:purple_candle` block.
pub mod purple_candle {
    use super::*;

    /// `minecraft:purple_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleCandle {
        /// `candles` state.
        pub candles : Candles,
        /// `lit` state.
        pub lit : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl PurpleCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.candles, self.lit, self.waterlogged, )) {
                ( Candles::N1, true, true, ) => 21961,
                ( Candles::N1, true, false, ) => 21962,
                ( Candles::N1, false, true, ) => 21963,
                ( Candles::N1, false, false, ) => 21964,
                ( Candles::N2, true, true, ) => 21965,
                ( Candles::N2, true, false, ) => 21966,
                ( Candles::N2, false, true, ) => 21967,
                ( Candles::N2, false, false, ) => 21968,
                ( Candles::N3, true, true, ) => 21969,
                ( Candles::N3, true, false, ) => 21970,
                ( Candles::N3, false, true, ) => 21971,
                ( Candles::N3, false, false, ) => 21972,
                ( Candles::N4, true, true, ) => 21973,
                ( Candles::N4, true, false, ) => 21974,
                ( Candles::N4, false, true, ) => 21975,
                ( Candles::N4, false, false, ) => 21976,
            })
        }
    }

    impl From<PurpleCandle> for BlockState {
        #[inline(always)]
        fn from(value : PurpleCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleCandle { }

    impl Block for PurpleCandle {
        const DEFAULT_STATE : Self = Self {
            candles : Candles::N1,
            lit : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:copper_ore` block.
pub mod copper_ore {
    use super::*;

    /// `minecraft:copper_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CopperOre;

    impl CopperOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24002)
        }
    }

    impl From<CopperOre> for BlockState {
        #[inline(always)]
        fn from(value : CopperOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CopperOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CopperOre { }

    impl Block for CopperOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dripstone_block` block.
pub mod dripstone_block {
    use super::*;

    /// `minecraft:dripstone_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DripstoneBlock;

    impl DripstoneBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(25828)
        }
    }

    impl From<DripstoneBlock> for BlockState {
        #[inline(always)]
        fn from(value : DripstoneBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DripstoneBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DripstoneBlock { }

    impl Block for DripstoneBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:target` block.
pub mod target {
    use super::*;

    /// `minecraft:target` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Target {
        /// `power` state.
        pub power : Power,
    }

    /// `power` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Power {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Power { }
    impl BlockProperty for Power { }

    impl Target {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.power, )) {
                ( Power::N0, ) => 20441,
                ( Power::N1, ) => 20442,
                ( Power::N2, ) => 20443,
                ( Power::N3, ) => 20444,
                ( Power::N4, ) => 20445,
                ( Power::N5, ) => 20446,
                ( Power::N6, ) => 20447,
                ( Power::N7, ) => 20448,
                ( Power::N8, ) => 20449,
                ( Power::N9, ) => 20450,
                ( Power::N10, ) => 20451,
                ( Power::N11, ) => 20452,
                ( Power::N12, ) => 20453,
                ( Power::N13, ) => 20454,
                ( Power::N14, ) => 20455,
                ( Power::N15, ) => 20456,
            })
        }
    }

    impl From<Target> for BlockState {
        #[inline(always)]
        fn from(value : Target) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Target {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Target { }

    impl Block for Target {
        const DEFAULT_STATE : Self = Self {
            power : Power::N0,
        };
    }

}

/// `minecraft:big_dripleaf` block.
pub mod big_dripleaf {
    use super::*;

    /// `minecraft:big_dripleaf` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BigDripleaf {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `tilt` state.
        pub tilt : Tilt,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `tilt` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Tilt {
        /// `none` variant.
        None,
        /// `unstable` variant.
        Unstable,
        /// `partial` variant.
        Partial,
        /// `full` variant.
        Full,
    }
    impl crate::Sealed for Tilt { }
    impl BlockProperty for Tilt { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BigDripleaf {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.tilt, self.facing, )) {
                ( true, Tilt::None, Facing::North, ) => 25936,
                ( false, Tilt::None, Facing::North, ) => 25937,
                ( true, Tilt::Unstable, Facing::North, ) => 25938,
                ( false, Tilt::Unstable, Facing::North, ) => 25939,
                ( true, Tilt::Partial, Facing::North, ) => 25940,
                ( false, Tilt::Partial, Facing::North, ) => 25941,
                ( true, Tilt::Full, Facing::North, ) => 25942,
                ( false, Tilt::Full, Facing::North, ) => 25943,
                ( true, Tilt::None, Facing::South, ) => 25944,
                ( false, Tilt::None, Facing::South, ) => 25945,
                ( true, Tilt::Unstable, Facing::South, ) => 25946,
                ( false, Tilt::Unstable, Facing::South, ) => 25947,
                ( true, Tilt::Partial, Facing::South, ) => 25948,
                ( false, Tilt::Partial, Facing::South, ) => 25949,
                ( true, Tilt::Full, Facing::South, ) => 25950,
                ( false, Tilt::Full, Facing::South, ) => 25951,
                ( true, Tilt::None, Facing::West, ) => 25952,
                ( false, Tilt::None, Facing::West, ) => 25953,
                ( true, Tilt::Unstable, Facing::West, ) => 25954,
                ( false, Tilt::Unstable, Facing::West, ) => 25955,
                ( true, Tilt::Partial, Facing::West, ) => 25956,
                ( false, Tilt::Partial, Facing::West, ) => 25957,
                ( true, Tilt::Full, Facing::West, ) => 25958,
                ( false, Tilt::Full, Facing::West, ) => 25959,
                ( true, Tilt::None, Facing::East, ) => 25960,
                ( false, Tilt::None, Facing::East, ) => 25961,
                ( true, Tilt::Unstable, Facing::East, ) => 25962,
                ( false, Tilt::Unstable, Facing::East, ) => 25963,
                ( true, Tilt::Partial, Facing::East, ) => 25964,
                ( false, Tilt::Partial, Facing::East, ) => 25965,
                ( true, Tilt::Full, Facing::East, ) => 25966,
                ( false, Tilt::Full, Facing::East, ) => 25967,
            })
        }
    }

    impl From<BigDripleaf> for BlockState {
        #[inline(always)]
        fn from(value : BigDripleaf) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BigDripleaf {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BigDripleaf { }

    impl Block for BigDripleaf {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            tilt : Tilt::None,
            facing : Facing::North,
        };
    }

}

/// `minecraft:cave_air` block.
pub mod cave_air {
    use super::*;

    /// `minecraft:cave_air` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CaveAir;

    impl CaveAir {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(14014)
        }
    }

    impl From<CaveAir> for BlockState {
        #[inline(always)]
        fn from(value : CaveAir) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CaveAir {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CaveAir { }

    impl Block for CaveAir {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:oak_sign` block.
pub mod oak_sign {
    use super::*;

    /// `minecraft:oak_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakSign {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl OakSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.waterlogged, )) {
                ( Rotation::N0, true, ) => 4366,
                ( Rotation::N0, false, ) => 4367,
                ( Rotation::N1, true, ) => 4368,
                ( Rotation::N1, false, ) => 4369,
                ( Rotation::N2, true, ) => 4370,
                ( Rotation::N2, false, ) => 4371,
                ( Rotation::N3, true, ) => 4372,
                ( Rotation::N3, false, ) => 4373,
                ( Rotation::N4, true, ) => 4374,
                ( Rotation::N4, false, ) => 4375,
                ( Rotation::N5, true, ) => 4376,
                ( Rotation::N5, false, ) => 4377,
                ( Rotation::N6, true, ) => 4378,
                ( Rotation::N6, false, ) => 4379,
                ( Rotation::N7, true, ) => 4380,
                ( Rotation::N7, false, ) => 4381,
                ( Rotation::N8, true, ) => 4382,
                ( Rotation::N8, false, ) => 4383,
                ( Rotation::N9, true, ) => 4384,
                ( Rotation::N9, false, ) => 4385,
                ( Rotation::N10, true, ) => 4386,
                ( Rotation::N10, false, ) => 4387,
                ( Rotation::N11, true, ) => 4388,
                ( Rotation::N11, false, ) => 4389,
                ( Rotation::N12, true, ) => 4390,
                ( Rotation::N12, false, ) => 4391,
                ( Rotation::N13, true, ) => 4392,
                ( Rotation::N13, false, ) => 4393,
                ( Rotation::N14, true, ) => 4394,
                ( Rotation::N14, false, ) => 4395,
                ( Rotation::N15, true, ) => 4396,
                ( Rotation::N15, false, ) => 4397,
            })
        }
    }

    impl From<OakSign> for BlockState {
        #[inline(always)]
        fn from(value : OakSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakSign { }

    impl Block for OakSign {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            waterlogged : false,
        };
    }

}

/// `minecraft:waxed_copper_door` block.
pub mod waxed_copper_door {
    use super::*;

    /// `minecraft:waxed_copper_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedCopperDoor {
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
        /// `hinge` state.
        pub hinge : Hinge,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    impl WaxedCopperDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.half, self.open, self.powered, self.hinge, )) {
                ( Facing::North, Half::Upper, true, true, Hinge::Left, ) => 24968,
                ( Facing::North, Half::Upper, true, false, Hinge::Left, ) => 24969,
                ( Facing::North, Half::Upper, false, true, Hinge::Left, ) => 24970,
                ( Facing::North, Half::Upper, false, false, Hinge::Left, ) => 24971,
                ( Facing::North, Half::Upper, true, true, Hinge::Right, ) => 24972,
                ( Facing::North, Half::Upper, true, false, Hinge::Right, ) => 24973,
                ( Facing::North, Half::Upper, false, true, Hinge::Right, ) => 24974,
                ( Facing::North, Half::Upper, false, false, Hinge::Right, ) => 24975,
                ( Facing::North, Half::Lower, true, true, Hinge::Left, ) => 24976,
                ( Facing::North, Half::Lower, true, false, Hinge::Left, ) => 24977,
                ( Facing::North, Half::Lower, false, true, Hinge::Left, ) => 24978,
                ( Facing::North, Half::Lower, false, false, Hinge::Left, ) => 24979,
                ( Facing::North, Half::Lower, true, true, Hinge::Right, ) => 24980,
                ( Facing::North, Half::Lower, true, false, Hinge::Right, ) => 24981,
                ( Facing::North, Half::Lower, false, true, Hinge::Right, ) => 24982,
                ( Facing::North, Half::Lower, false, false, Hinge::Right, ) => 24983,
                ( Facing::South, Half::Upper, true, true, Hinge::Left, ) => 24984,
                ( Facing::South, Half::Upper, true, false, Hinge::Left, ) => 24985,
                ( Facing::South, Half::Upper, false, true, Hinge::Left, ) => 24986,
                ( Facing::South, Half::Upper, false, false, Hinge::Left, ) => 24987,
                ( Facing::South, Half::Upper, true, true, Hinge::Right, ) => 24988,
                ( Facing::South, Half::Upper, true, false, Hinge::Right, ) => 24989,
                ( Facing::South, Half::Upper, false, true, Hinge::Right, ) => 24990,
                ( Facing::South, Half::Upper, false, false, Hinge::Right, ) => 24991,
                ( Facing::South, Half::Lower, true, true, Hinge::Left, ) => 24992,
                ( Facing::South, Half::Lower, true, false, Hinge::Left, ) => 24993,
                ( Facing::South, Half::Lower, false, true, Hinge::Left, ) => 24994,
                ( Facing::South, Half::Lower, false, false, Hinge::Left, ) => 24995,
                ( Facing::South, Half::Lower, true, true, Hinge::Right, ) => 24996,
                ( Facing::South, Half::Lower, true, false, Hinge::Right, ) => 24997,
                ( Facing::South, Half::Lower, false, true, Hinge::Right, ) => 24998,
                ( Facing::South, Half::Lower, false, false, Hinge::Right, ) => 24999,
                ( Facing::West, Half::Upper, true, true, Hinge::Left, ) => 25000,
                ( Facing::West, Half::Upper, true, false, Hinge::Left, ) => 25001,
                ( Facing::West, Half::Upper, false, true, Hinge::Left, ) => 25002,
                ( Facing::West, Half::Upper, false, false, Hinge::Left, ) => 25003,
                ( Facing::West, Half::Upper, true, true, Hinge::Right, ) => 25004,
                ( Facing::West, Half::Upper, true, false, Hinge::Right, ) => 25005,
                ( Facing::West, Half::Upper, false, true, Hinge::Right, ) => 25006,
                ( Facing::West, Half::Upper, false, false, Hinge::Right, ) => 25007,
                ( Facing::West, Half::Lower, true, true, Hinge::Left, ) => 25008,
                ( Facing::West, Half::Lower, true, false, Hinge::Left, ) => 25009,
                ( Facing::West, Half::Lower, false, true, Hinge::Left, ) => 25010,
                ( Facing::West, Half::Lower, false, false, Hinge::Left, ) => 25011,
                ( Facing::West, Half::Lower, true, true, Hinge::Right, ) => 25012,
                ( Facing::West, Half::Lower, true, false, Hinge::Right, ) => 25013,
                ( Facing::West, Half::Lower, false, true, Hinge::Right, ) => 25014,
                ( Facing::West, Half::Lower, false, false, Hinge::Right, ) => 25015,
                ( Facing::East, Half::Upper, true, true, Hinge::Left, ) => 25016,
                ( Facing::East, Half::Upper, true, false, Hinge::Left, ) => 25017,
                ( Facing::East, Half::Upper, false, true, Hinge::Left, ) => 25018,
                ( Facing::East, Half::Upper, false, false, Hinge::Left, ) => 25019,
                ( Facing::East, Half::Upper, true, true, Hinge::Right, ) => 25020,
                ( Facing::East, Half::Upper, true, false, Hinge::Right, ) => 25021,
                ( Facing::East, Half::Upper, false, true, Hinge::Right, ) => 25022,
                ( Facing::East, Half::Upper, false, false, Hinge::Right, ) => 25023,
                ( Facing::East, Half::Lower, true, true, Hinge::Left, ) => 25024,
                ( Facing::East, Half::Lower, true, false, Hinge::Left, ) => 25025,
                ( Facing::East, Half::Lower, false, true, Hinge::Left, ) => 25026,
                ( Facing::East, Half::Lower, false, false, Hinge::Left, ) => 25027,
                ( Facing::East, Half::Lower, true, true, Hinge::Right, ) => 25028,
                ( Facing::East, Half::Lower, true, false, Hinge::Right, ) => 25029,
                ( Facing::East, Half::Lower, false, true, Hinge::Right, ) => 25030,
                ( Facing::East, Half::Lower, false, false, Hinge::Right, ) => 25031,
            })
        }
    }

    impl From<WaxedCopperDoor> for BlockState {
        #[inline(always)]
        fn from(value : WaxedCopperDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedCopperDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedCopperDoor { }

    impl Block for WaxedCopperDoor {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            half : Half::Lower,
            open : false,
            powered : false,
            hinge : Hinge::Left,
        };
    }

}

/// `minecraft:purple_banner` block.
pub mod purple_banner {
    use super::*;

    /// `minecraft:purple_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl PurpleBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11808,
                ( Rotation::N1, ) => 11809,
                ( Rotation::N2, ) => 11810,
                ( Rotation::N3, ) => 11811,
                ( Rotation::N4, ) => 11812,
                ( Rotation::N5, ) => 11813,
                ( Rotation::N6, ) => 11814,
                ( Rotation::N7, ) => 11815,
                ( Rotation::N8, ) => 11816,
                ( Rotation::N9, ) => 11817,
                ( Rotation::N10, ) => 11818,
                ( Rotation::N11, ) => 11819,
                ( Rotation::N12, ) => 11820,
                ( Rotation::N13, ) => 11821,
                ( Rotation::N14, ) => 11822,
                ( Rotation::N15, ) => 11823,
            })
        }
    }

    impl From<PurpleBanner> for BlockState {
        #[inline(always)]
        fn from(value : PurpleBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleBanner { }

    impl Block for PurpleBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:dark_oak_button` block.
pub mod dark_oak_button {
    use super::*;

    /// `minecraft:dark_oak_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakButton {
        /// `face` state.
        pub face : Face,
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
    }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DarkOakButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.face, self.facing, self.powered, )) {
                ( Face::Floor, Facing::North, true, ) => 9540,
                ( Face::Floor, Facing::North, false, ) => 9541,
                ( Face::Floor, Facing::South, true, ) => 9542,
                ( Face::Floor, Facing::South, false, ) => 9543,
                ( Face::Floor, Facing::West, true, ) => 9544,
                ( Face::Floor, Facing::West, false, ) => 9545,
                ( Face::Floor, Facing::East, true, ) => 9546,
                ( Face::Floor, Facing::East, false, ) => 9547,
                ( Face::Wall, Facing::North, true, ) => 9548,
                ( Face::Wall, Facing::North, false, ) => 9549,
                ( Face::Wall, Facing::South, true, ) => 9550,
                ( Face::Wall, Facing::South, false, ) => 9551,
                ( Face::Wall, Facing::West, true, ) => 9552,
                ( Face::Wall, Facing::West, false, ) => 9553,
                ( Face::Wall, Facing::East, true, ) => 9554,
                ( Face::Wall, Facing::East, false, ) => 9555,
                ( Face::Ceiling, Facing::North, true, ) => 9556,
                ( Face::Ceiling, Facing::North, false, ) => 9557,
                ( Face::Ceiling, Facing::South, true, ) => 9558,
                ( Face::Ceiling, Facing::South, false, ) => 9559,
                ( Face::Ceiling, Facing::West, true, ) => 9560,
                ( Face::Ceiling, Facing::West, false, ) => 9561,
                ( Face::Ceiling, Facing::East, true, ) => 9562,
                ( Face::Ceiling, Facing::East, false, ) => 9563,
            })
        }
    }

    impl From<DarkOakButton> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakButton { }

    impl Block for DarkOakButton {
        const DEFAULT_STATE : Self = Self {
            face : Face::Wall,
            facing : Facing::North,
            powered : false,
        };
    }

}

/// `minecraft:warped_slab` block.
pub mod warped_slab {
    use super::*;

    /// `minecraft:warped_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl WarpedSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 19729,
                ( false, Kind::Top, ) => 19730,
                ( true, Kind::Bottom, ) => 19731,
                ( false, Kind::Bottom, ) => 19732,
                ( true, Kind::Double, ) => 19733,
                ( false, Kind::Double, ) => 19734,
            })
        }
    }

    impl From<WarpedSlab> for BlockState {
        #[inline(always)]
        fn from(value : WarpedSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedSlab { }

    impl Block for WarpedSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:mossy_cobblestone_stairs` block.
pub mod mossy_cobblestone_stairs {
    use super::*;

    /// `minecraft:mossy_cobblestone_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MossyCobblestoneStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl MossyCobblestoneStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.shape, self.waterlogged, self.half, )) {
                ( Facing::North, Shape::Straight, true, Half::Top, ) => 14337,
                ( Facing::North, Shape::Straight, false, Half::Top, ) => 14338,
                ( Facing::North, Shape::InnerLeft, true, Half::Top, ) => 14339,
                ( Facing::North, Shape::InnerLeft, false, Half::Top, ) => 14340,
                ( Facing::North, Shape::InnerRight, true, Half::Top, ) => 14341,
                ( Facing::North, Shape::InnerRight, false, Half::Top, ) => 14342,
                ( Facing::North, Shape::OuterLeft, true, Half::Top, ) => 14343,
                ( Facing::North, Shape::OuterLeft, false, Half::Top, ) => 14344,
                ( Facing::North, Shape::OuterRight, true, Half::Top, ) => 14345,
                ( Facing::North, Shape::OuterRight, false, Half::Top, ) => 14346,
                ( Facing::North, Shape::Straight, true, Half::Bottom, ) => 14347,
                ( Facing::North, Shape::Straight, false, Half::Bottom, ) => 14348,
                ( Facing::North, Shape::InnerLeft, true, Half::Bottom, ) => 14349,
                ( Facing::North, Shape::InnerLeft, false, Half::Bottom, ) => 14350,
                ( Facing::North, Shape::InnerRight, true, Half::Bottom, ) => 14351,
                ( Facing::North, Shape::InnerRight, false, Half::Bottom, ) => 14352,
                ( Facing::North, Shape::OuterLeft, true, Half::Bottom, ) => 14353,
                ( Facing::North, Shape::OuterLeft, false, Half::Bottom, ) => 14354,
                ( Facing::North, Shape::OuterRight, true, Half::Bottom, ) => 14355,
                ( Facing::North, Shape::OuterRight, false, Half::Bottom, ) => 14356,
                ( Facing::South, Shape::Straight, true, Half::Top, ) => 14357,
                ( Facing::South, Shape::Straight, false, Half::Top, ) => 14358,
                ( Facing::South, Shape::InnerLeft, true, Half::Top, ) => 14359,
                ( Facing::South, Shape::InnerLeft, false, Half::Top, ) => 14360,
                ( Facing::South, Shape::InnerRight, true, Half::Top, ) => 14361,
                ( Facing::South, Shape::InnerRight, false, Half::Top, ) => 14362,
                ( Facing::South, Shape::OuterLeft, true, Half::Top, ) => 14363,
                ( Facing::South, Shape::OuterLeft, false, Half::Top, ) => 14364,
                ( Facing::South, Shape::OuterRight, true, Half::Top, ) => 14365,
                ( Facing::South, Shape::OuterRight, false, Half::Top, ) => 14366,
                ( Facing::South, Shape::Straight, true, Half::Bottom, ) => 14367,
                ( Facing::South, Shape::Straight, false, Half::Bottom, ) => 14368,
                ( Facing::South, Shape::InnerLeft, true, Half::Bottom, ) => 14369,
                ( Facing::South, Shape::InnerLeft, false, Half::Bottom, ) => 14370,
                ( Facing::South, Shape::InnerRight, true, Half::Bottom, ) => 14371,
                ( Facing::South, Shape::InnerRight, false, Half::Bottom, ) => 14372,
                ( Facing::South, Shape::OuterLeft, true, Half::Bottom, ) => 14373,
                ( Facing::South, Shape::OuterLeft, false, Half::Bottom, ) => 14374,
                ( Facing::South, Shape::OuterRight, true, Half::Bottom, ) => 14375,
                ( Facing::South, Shape::OuterRight, false, Half::Bottom, ) => 14376,
                ( Facing::West, Shape::Straight, true, Half::Top, ) => 14377,
                ( Facing::West, Shape::Straight, false, Half::Top, ) => 14378,
                ( Facing::West, Shape::InnerLeft, true, Half::Top, ) => 14379,
                ( Facing::West, Shape::InnerLeft, false, Half::Top, ) => 14380,
                ( Facing::West, Shape::InnerRight, true, Half::Top, ) => 14381,
                ( Facing::West, Shape::InnerRight, false, Half::Top, ) => 14382,
                ( Facing::West, Shape::OuterLeft, true, Half::Top, ) => 14383,
                ( Facing::West, Shape::OuterLeft, false, Half::Top, ) => 14384,
                ( Facing::West, Shape::OuterRight, true, Half::Top, ) => 14385,
                ( Facing::West, Shape::OuterRight, false, Half::Top, ) => 14386,
                ( Facing::West, Shape::Straight, true, Half::Bottom, ) => 14387,
                ( Facing::West, Shape::Straight, false, Half::Bottom, ) => 14388,
                ( Facing::West, Shape::InnerLeft, true, Half::Bottom, ) => 14389,
                ( Facing::West, Shape::InnerLeft, false, Half::Bottom, ) => 14390,
                ( Facing::West, Shape::InnerRight, true, Half::Bottom, ) => 14391,
                ( Facing::West, Shape::InnerRight, false, Half::Bottom, ) => 14392,
                ( Facing::West, Shape::OuterLeft, true, Half::Bottom, ) => 14393,
                ( Facing::West, Shape::OuterLeft, false, Half::Bottom, ) => 14394,
                ( Facing::West, Shape::OuterRight, true, Half::Bottom, ) => 14395,
                ( Facing::West, Shape::OuterRight, false, Half::Bottom, ) => 14396,
                ( Facing::East, Shape::Straight, true, Half::Top, ) => 14397,
                ( Facing::East, Shape::Straight, false, Half::Top, ) => 14398,
                ( Facing::East, Shape::InnerLeft, true, Half::Top, ) => 14399,
                ( Facing::East, Shape::InnerLeft, false, Half::Top, ) => 14400,
                ( Facing::East, Shape::InnerRight, true, Half::Top, ) => 14401,
                ( Facing::East, Shape::InnerRight, false, Half::Top, ) => 14402,
                ( Facing::East, Shape::OuterLeft, true, Half::Top, ) => 14403,
                ( Facing::East, Shape::OuterLeft, false, Half::Top, ) => 14404,
                ( Facing::East, Shape::OuterRight, true, Half::Top, ) => 14405,
                ( Facing::East, Shape::OuterRight, false, Half::Top, ) => 14406,
                ( Facing::East, Shape::Straight, true, Half::Bottom, ) => 14407,
                ( Facing::East, Shape::Straight, false, Half::Bottom, ) => 14408,
                ( Facing::East, Shape::InnerLeft, true, Half::Bottom, ) => 14409,
                ( Facing::East, Shape::InnerLeft, false, Half::Bottom, ) => 14410,
                ( Facing::East, Shape::InnerRight, true, Half::Bottom, ) => 14411,
                ( Facing::East, Shape::InnerRight, false, Half::Bottom, ) => 14412,
                ( Facing::East, Shape::OuterLeft, true, Half::Bottom, ) => 14413,
                ( Facing::East, Shape::OuterLeft, false, Half::Bottom, ) => 14414,
                ( Facing::East, Shape::OuterRight, true, Half::Bottom, ) => 14415,
                ( Facing::East, Shape::OuterRight, false, Half::Bottom, ) => 14416,
            })
        }
    }

    impl From<MossyCobblestoneStairs> for BlockState {
        #[inline(always)]
        fn from(value : MossyCobblestoneStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MossyCobblestoneStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MossyCobblestoneStairs { }

    impl Block for MossyCobblestoneStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            shape : Shape::Straight,
            waterlogged : false,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:bubble_coral_block` block.
pub mod bubble_coral_block {
    use super::*;

    /// `minecraft:bubble_coral_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BubbleCoralBlock;

    impl BubbleCoralBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13865)
        }
    }

    impl From<BubbleCoralBlock> for BlockState {
        #[inline(always)]
        fn from(value : BubbleCoralBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BubbleCoralBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BubbleCoralBlock { }

    impl Block for BubbleCoralBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:diorite` block.
pub mod diorite {
    use super::*;

    /// `minecraft:diorite` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Diorite;

    impl Diorite {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(4)
        }
    }

    impl From<Diorite> for BlockState {
        #[inline(always)]
        fn from(value : Diorite) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Diorite {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Diorite { }

    impl Block for Diorite {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:jigsaw` block.
pub mod jigsaw {
    use super::*;

    /// `minecraft:jigsaw` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Jigsaw {
        /// `orientation` state.
        pub orientation : Orientation,
    }

    /// `orientation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Orientation {
        /// `down_east` variant.
        DownEast,
        /// `down_north` variant.
        DownNorth,
        /// `down_south` variant.
        DownSouth,
        /// `down_west` variant.
        DownWest,
        /// `up_east` variant.
        UpEast,
        /// `up_north` variant.
        UpNorth,
        /// `up_south` variant.
        UpSouth,
        /// `up_west` variant.
        UpWest,
        /// `west_up` variant.
        WestUp,
        /// `east_up` variant.
        EastUp,
        /// `north_up` variant.
        NorthUp,
        /// `south_up` variant.
        SouthUp,
    }
    impl crate::Sealed for Orientation { }
    impl BlockProperty for Orientation { }

    impl Jigsaw {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.orientation, )) {
                ( Orientation::DownEast, ) => 20415,
                ( Orientation::DownNorth, ) => 20416,
                ( Orientation::DownSouth, ) => 20417,
                ( Orientation::DownWest, ) => 20418,
                ( Orientation::UpEast, ) => 20419,
                ( Orientation::UpNorth, ) => 20420,
                ( Orientation::UpSouth, ) => 20421,
                ( Orientation::UpWest, ) => 20422,
                ( Orientation::WestUp, ) => 20423,
                ( Orientation::EastUp, ) => 20424,
                ( Orientation::NorthUp, ) => 20425,
                ( Orientation::SouthUp, ) => 20426,
            })
        }
    }

    impl From<Jigsaw> for BlockState {
        #[inline(always)]
        fn from(value : Jigsaw) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Jigsaw {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Jigsaw { }

    impl Block for Jigsaw {
        const DEFAULT_STATE : Self = Self {
            orientation : Orientation::NorthUp,
        };
    }

}

/// `minecraft:smooth_quartz_stairs` block.
pub mod smooth_quartz_stairs {
    use super::*;

    /// `minecraft:smooth_quartz_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmoothQuartzStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl SmoothQuartzStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.shape, self.waterlogged, self.half, )) {
                ( Facing::North, Shape::Straight, true, Half::Top, ) => 14657,
                ( Facing::North, Shape::Straight, false, Half::Top, ) => 14658,
                ( Facing::North, Shape::InnerLeft, true, Half::Top, ) => 14659,
                ( Facing::North, Shape::InnerLeft, false, Half::Top, ) => 14660,
                ( Facing::North, Shape::InnerRight, true, Half::Top, ) => 14661,
                ( Facing::North, Shape::InnerRight, false, Half::Top, ) => 14662,
                ( Facing::North, Shape::OuterLeft, true, Half::Top, ) => 14663,
                ( Facing::North, Shape::OuterLeft, false, Half::Top, ) => 14664,
                ( Facing::North, Shape::OuterRight, true, Half::Top, ) => 14665,
                ( Facing::North, Shape::OuterRight, false, Half::Top, ) => 14666,
                ( Facing::North, Shape::Straight, true, Half::Bottom, ) => 14667,
                ( Facing::North, Shape::Straight, false, Half::Bottom, ) => 14668,
                ( Facing::North, Shape::InnerLeft, true, Half::Bottom, ) => 14669,
                ( Facing::North, Shape::InnerLeft, false, Half::Bottom, ) => 14670,
                ( Facing::North, Shape::InnerRight, true, Half::Bottom, ) => 14671,
                ( Facing::North, Shape::InnerRight, false, Half::Bottom, ) => 14672,
                ( Facing::North, Shape::OuterLeft, true, Half::Bottom, ) => 14673,
                ( Facing::North, Shape::OuterLeft, false, Half::Bottom, ) => 14674,
                ( Facing::North, Shape::OuterRight, true, Half::Bottom, ) => 14675,
                ( Facing::North, Shape::OuterRight, false, Half::Bottom, ) => 14676,
                ( Facing::South, Shape::Straight, true, Half::Top, ) => 14677,
                ( Facing::South, Shape::Straight, false, Half::Top, ) => 14678,
                ( Facing::South, Shape::InnerLeft, true, Half::Top, ) => 14679,
                ( Facing::South, Shape::InnerLeft, false, Half::Top, ) => 14680,
                ( Facing::South, Shape::InnerRight, true, Half::Top, ) => 14681,
                ( Facing::South, Shape::InnerRight, false, Half::Top, ) => 14682,
                ( Facing::South, Shape::OuterLeft, true, Half::Top, ) => 14683,
                ( Facing::South, Shape::OuterLeft, false, Half::Top, ) => 14684,
                ( Facing::South, Shape::OuterRight, true, Half::Top, ) => 14685,
                ( Facing::South, Shape::OuterRight, false, Half::Top, ) => 14686,
                ( Facing::South, Shape::Straight, true, Half::Bottom, ) => 14687,
                ( Facing::South, Shape::Straight, false, Half::Bottom, ) => 14688,
                ( Facing::South, Shape::InnerLeft, true, Half::Bottom, ) => 14689,
                ( Facing::South, Shape::InnerLeft, false, Half::Bottom, ) => 14690,
                ( Facing::South, Shape::InnerRight, true, Half::Bottom, ) => 14691,
                ( Facing::South, Shape::InnerRight, false, Half::Bottom, ) => 14692,
                ( Facing::South, Shape::OuterLeft, true, Half::Bottom, ) => 14693,
                ( Facing::South, Shape::OuterLeft, false, Half::Bottom, ) => 14694,
                ( Facing::South, Shape::OuterRight, true, Half::Bottom, ) => 14695,
                ( Facing::South, Shape::OuterRight, false, Half::Bottom, ) => 14696,
                ( Facing::West, Shape::Straight, true, Half::Top, ) => 14697,
                ( Facing::West, Shape::Straight, false, Half::Top, ) => 14698,
                ( Facing::West, Shape::InnerLeft, true, Half::Top, ) => 14699,
                ( Facing::West, Shape::InnerLeft, false, Half::Top, ) => 14700,
                ( Facing::West, Shape::InnerRight, true, Half::Top, ) => 14701,
                ( Facing::West, Shape::InnerRight, false, Half::Top, ) => 14702,
                ( Facing::West, Shape::OuterLeft, true, Half::Top, ) => 14703,
                ( Facing::West, Shape::OuterLeft, false, Half::Top, ) => 14704,
                ( Facing::West, Shape::OuterRight, true, Half::Top, ) => 14705,
                ( Facing::West, Shape::OuterRight, false, Half::Top, ) => 14706,
                ( Facing::West, Shape::Straight, true, Half::Bottom, ) => 14707,
                ( Facing::West, Shape::Straight, false, Half::Bottom, ) => 14708,
                ( Facing::West, Shape::InnerLeft, true, Half::Bottom, ) => 14709,
                ( Facing::West, Shape::InnerLeft, false, Half::Bottom, ) => 14710,
                ( Facing::West, Shape::InnerRight, true, Half::Bottom, ) => 14711,
                ( Facing::West, Shape::InnerRight, false, Half::Bottom, ) => 14712,
                ( Facing::West, Shape::OuterLeft, true, Half::Bottom, ) => 14713,
                ( Facing::West, Shape::OuterLeft, false, Half::Bottom, ) => 14714,
                ( Facing::West, Shape::OuterRight, true, Half::Bottom, ) => 14715,
                ( Facing::West, Shape::OuterRight, false, Half::Bottom, ) => 14716,
                ( Facing::East, Shape::Straight, true, Half::Top, ) => 14717,
                ( Facing::East, Shape::Straight, false, Half::Top, ) => 14718,
                ( Facing::East, Shape::InnerLeft, true, Half::Top, ) => 14719,
                ( Facing::East, Shape::InnerLeft, false, Half::Top, ) => 14720,
                ( Facing::East, Shape::InnerRight, true, Half::Top, ) => 14721,
                ( Facing::East, Shape::InnerRight, false, Half::Top, ) => 14722,
                ( Facing::East, Shape::OuterLeft, true, Half::Top, ) => 14723,
                ( Facing::East, Shape::OuterLeft, false, Half::Top, ) => 14724,
                ( Facing::East, Shape::OuterRight, true, Half::Top, ) => 14725,
                ( Facing::East, Shape::OuterRight, false, Half::Top, ) => 14726,
                ( Facing::East, Shape::Straight, true, Half::Bottom, ) => 14727,
                ( Facing::East, Shape::Straight, false, Half::Bottom, ) => 14728,
                ( Facing::East, Shape::InnerLeft, true, Half::Bottom, ) => 14729,
                ( Facing::East, Shape::InnerLeft, false, Half::Bottom, ) => 14730,
                ( Facing::East, Shape::InnerRight, true, Half::Bottom, ) => 14731,
                ( Facing::East, Shape::InnerRight, false, Half::Bottom, ) => 14732,
                ( Facing::East, Shape::OuterLeft, true, Half::Bottom, ) => 14733,
                ( Facing::East, Shape::OuterLeft, false, Half::Bottom, ) => 14734,
                ( Facing::East, Shape::OuterRight, true, Half::Bottom, ) => 14735,
                ( Facing::East, Shape::OuterRight, false, Half::Bottom, ) => 14736,
            })
        }
    }

    impl From<SmoothQuartzStairs> for BlockState {
        #[inline(always)]
        fn from(value : SmoothQuartzStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmoothQuartzStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmoothQuartzStairs { }

    impl Block for SmoothQuartzStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            shape : Shape::Straight,
            waterlogged : false,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:blue_wool` block.
pub mod blue_wool {
    use super::*;

    /// `minecraft:blue_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueWool;

    impl BlueWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2104)
        }
    }

    impl From<BlueWool> for BlockState {
        #[inline(always)]
        fn from(value : BlueWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueWool { }

    impl Block for BlueWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:pink_stained_glass` block.
pub mod pink_stained_glass {
    use super::*;

    /// `minecraft:pink_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkStainedGlass;

    impl PinkStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6130)
        }
    }

    impl From<PinkStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : PinkStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkStainedGlass { }

    impl Block for PinkStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:muddy_mangrove_roots` block.
pub mod muddy_mangrove_roots {
    use super::*;

    /// `minecraft:muddy_mangrove_roots` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MuddyMangroveRoots {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl MuddyMangroveRoots {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 165,
                ( Axis::Y, ) => 166,
                ( Axis::Z, ) => 167,
            })
        }
    }

    impl From<MuddyMangroveRoots> for BlockState {
        #[inline(always)]
        fn from(value : MuddyMangroveRoots) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MuddyMangroveRoots {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MuddyMangroveRoots { }

    impl Block for MuddyMangroveRoots {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:dark_oak_wall_sign` block.
pub mod dark_oak_wall_sign {
    use super::*;

    /// `minecraft:dark_oak_wall_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakWallSign {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DarkOakWallSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 4906,
                ( Facing::North, false, ) => 4907,
                ( Facing::South, true, ) => 4908,
                ( Facing::South, false, ) => 4909,
                ( Facing::West, true, ) => 4910,
                ( Facing::West, false, ) => 4911,
                ( Facing::East, true, ) => 4912,
                ( Facing::East, false, ) => 4913,
            })
        }
    }

    impl From<DarkOakWallSign> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakWallSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakWallSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakWallSign { }

    impl Block for DarkOakWallSign {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:prismarine_bricks` block.
pub mod prismarine_bricks {
    use super::*;

    /// `minecraft:prismarine_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PrismarineBricks;

    impl PrismarineBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11353)
        }
    }

    impl From<PrismarineBricks> for BlockState {
        #[inline(always)]
        fn from(value : PrismarineBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PrismarineBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PrismarineBricks { }

    impl Block for PrismarineBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:nether_portal` block.
pub mod nether_portal {
    use super::*;

    /// `minecraft:nether_portal` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct NetherPortal {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl NetherPortal {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 6043,
                ( Axis::Z, ) => 6044,
            })
        }
    }

    impl From<NetherPortal> for BlockState {
        #[inline(always)]
        fn from(value : NetherPortal) -> Self {
            value.to_block_state()
        }
    }

    impl Default for NetherPortal {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for NetherPortal { }

    impl Block for NetherPortal {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::X,
        };
    }

}

/// `minecraft:cobblestone_stairs` block.
pub mod cobblestone_stairs {
    use super::*;

    /// `minecraft:cobblestone_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CobblestoneStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CobblestoneStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.half, self.waterlogged, self.facing, )) {
                ( Shape::Straight, Half::Top, true, Facing::North, ) => 4778,
                ( Shape::Straight, Half::Top, false, Facing::North, ) => 4779,
                ( Shape::InnerLeft, Half::Top, true, Facing::North, ) => 4780,
                ( Shape::InnerLeft, Half::Top, false, Facing::North, ) => 4781,
                ( Shape::InnerRight, Half::Top, true, Facing::North, ) => 4782,
                ( Shape::InnerRight, Half::Top, false, Facing::North, ) => 4783,
                ( Shape::OuterLeft, Half::Top, true, Facing::North, ) => 4784,
                ( Shape::OuterLeft, Half::Top, false, Facing::North, ) => 4785,
                ( Shape::OuterRight, Half::Top, true, Facing::North, ) => 4786,
                ( Shape::OuterRight, Half::Top, false, Facing::North, ) => 4787,
                ( Shape::Straight, Half::Bottom, true, Facing::North, ) => 4788,
                ( Shape::Straight, Half::Bottom, false, Facing::North, ) => 4789,
                ( Shape::InnerLeft, Half::Bottom, true, Facing::North, ) => 4790,
                ( Shape::InnerLeft, Half::Bottom, false, Facing::North, ) => 4791,
                ( Shape::InnerRight, Half::Bottom, true, Facing::North, ) => 4792,
                ( Shape::InnerRight, Half::Bottom, false, Facing::North, ) => 4793,
                ( Shape::OuterLeft, Half::Bottom, true, Facing::North, ) => 4794,
                ( Shape::OuterLeft, Half::Bottom, false, Facing::North, ) => 4795,
                ( Shape::OuterRight, Half::Bottom, true, Facing::North, ) => 4796,
                ( Shape::OuterRight, Half::Bottom, false, Facing::North, ) => 4797,
                ( Shape::Straight, Half::Top, true, Facing::South, ) => 4798,
                ( Shape::Straight, Half::Top, false, Facing::South, ) => 4799,
                ( Shape::InnerLeft, Half::Top, true, Facing::South, ) => 4800,
                ( Shape::InnerLeft, Half::Top, false, Facing::South, ) => 4801,
                ( Shape::InnerRight, Half::Top, true, Facing::South, ) => 4802,
                ( Shape::InnerRight, Half::Top, false, Facing::South, ) => 4803,
                ( Shape::OuterLeft, Half::Top, true, Facing::South, ) => 4804,
                ( Shape::OuterLeft, Half::Top, false, Facing::South, ) => 4805,
                ( Shape::OuterRight, Half::Top, true, Facing::South, ) => 4806,
                ( Shape::OuterRight, Half::Top, false, Facing::South, ) => 4807,
                ( Shape::Straight, Half::Bottom, true, Facing::South, ) => 4808,
                ( Shape::Straight, Half::Bottom, false, Facing::South, ) => 4809,
                ( Shape::InnerLeft, Half::Bottom, true, Facing::South, ) => 4810,
                ( Shape::InnerLeft, Half::Bottom, false, Facing::South, ) => 4811,
                ( Shape::InnerRight, Half::Bottom, true, Facing::South, ) => 4812,
                ( Shape::InnerRight, Half::Bottom, false, Facing::South, ) => 4813,
                ( Shape::OuterLeft, Half::Bottom, true, Facing::South, ) => 4814,
                ( Shape::OuterLeft, Half::Bottom, false, Facing::South, ) => 4815,
                ( Shape::OuterRight, Half::Bottom, true, Facing::South, ) => 4816,
                ( Shape::OuterRight, Half::Bottom, false, Facing::South, ) => 4817,
                ( Shape::Straight, Half::Top, true, Facing::West, ) => 4818,
                ( Shape::Straight, Half::Top, false, Facing::West, ) => 4819,
                ( Shape::InnerLeft, Half::Top, true, Facing::West, ) => 4820,
                ( Shape::InnerLeft, Half::Top, false, Facing::West, ) => 4821,
                ( Shape::InnerRight, Half::Top, true, Facing::West, ) => 4822,
                ( Shape::InnerRight, Half::Top, false, Facing::West, ) => 4823,
                ( Shape::OuterLeft, Half::Top, true, Facing::West, ) => 4824,
                ( Shape::OuterLeft, Half::Top, false, Facing::West, ) => 4825,
                ( Shape::OuterRight, Half::Top, true, Facing::West, ) => 4826,
                ( Shape::OuterRight, Half::Top, false, Facing::West, ) => 4827,
                ( Shape::Straight, Half::Bottom, true, Facing::West, ) => 4828,
                ( Shape::Straight, Half::Bottom, false, Facing::West, ) => 4829,
                ( Shape::InnerLeft, Half::Bottom, true, Facing::West, ) => 4830,
                ( Shape::InnerLeft, Half::Bottom, false, Facing::West, ) => 4831,
                ( Shape::InnerRight, Half::Bottom, true, Facing::West, ) => 4832,
                ( Shape::InnerRight, Half::Bottom, false, Facing::West, ) => 4833,
                ( Shape::OuterLeft, Half::Bottom, true, Facing::West, ) => 4834,
                ( Shape::OuterLeft, Half::Bottom, false, Facing::West, ) => 4835,
                ( Shape::OuterRight, Half::Bottom, true, Facing::West, ) => 4836,
                ( Shape::OuterRight, Half::Bottom, false, Facing::West, ) => 4837,
                ( Shape::Straight, Half::Top, true, Facing::East, ) => 4838,
                ( Shape::Straight, Half::Top, false, Facing::East, ) => 4839,
                ( Shape::InnerLeft, Half::Top, true, Facing::East, ) => 4840,
                ( Shape::InnerLeft, Half::Top, false, Facing::East, ) => 4841,
                ( Shape::InnerRight, Half::Top, true, Facing::East, ) => 4842,
                ( Shape::InnerRight, Half::Top, false, Facing::East, ) => 4843,
                ( Shape::OuterLeft, Half::Top, true, Facing::East, ) => 4844,
                ( Shape::OuterLeft, Half::Top, false, Facing::East, ) => 4845,
                ( Shape::OuterRight, Half::Top, true, Facing::East, ) => 4846,
                ( Shape::OuterRight, Half::Top, false, Facing::East, ) => 4847,
                ( Shape::Straight, Half::Bottom, true, Facing::East, ) => 4848,
                ( Shape::Straight, Half::Bottom, false, Facing::East, ) => 4849,
                ( Shape::InnerLeft, Half::Bottom, true, Facing::East, ) => 4850,
                ( Shape::InnerLeft, Half::Bottom, false, Facing::East, ) => 4851,
                ( Shape::InnerRight, Half::Bottom, true, Facing::East, ) => 4852,
                ( Shape::InnerRight, Half::Bottom, false, Facing::East, ) => 4853,
                ( Shape::OuterLeft, Half::Bottom, true, Facing::East, ) => 4854,
                ( Shape::OuterLeft, Half::Bottom, false, Facing::East, ) => 4855,
                ( Shape::OuterRight, Half::Bottom, true, Facing::East, ) => 4856,
                ( Shape::OuterRight, Half::Bottom, false, Facing::East, ) => 4857,
            })
        }
    }

    impl From<CobblestoneStairs> for BlockState {
        #[inline(always)]
        fn from(value : CobblestoneStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CobblestoneStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CobblestoneStairs { }

    impl Block for CobblestoneStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            half : Half::Bottom,
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:dark_oak_slab` block.
pub mod dark_oak_slab {
    use super::*;

    /// `minecraft:dark_oak_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl DarkOakSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 12087,
                ( Kind::Top, false, ) => 12088,
                ( Kind::Bottom, true, ) => 12089,
                ( Kind::Bottom, false, ) => 12090,
                ( Kind::Double, true, ) => 12091,
                ( Kind::Double, false, ) => 12092,
            })
        }
    }

    impl From<DarkOakSlab> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakSlab { }

    impl Block for DarkOakSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:weeping_vines` block.
pub mod weeping_vines {
    use super::*;

    /// `minecraft:weeping_vines` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WeepingVines {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
        /// `16` variant.
        N16,
        /// `17` variant.
        N17,
        /// `18` variant.
        N18,
        /// `19` variant.
        N19,
        /// `20` variant.
        N20,
        /// `21` variant.
        N21,
        /// `22` variant.
        N22,
        /// `23` variant.
        N23,
        /// `24` variant.
        N24,
        /// `25` variant.
        N25,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl WeepingVines {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 19666,
                ( Age::N1, ) => 19667,
                ( Age::N2, ) => 19668,
                ( Age::N3, ) => 19669,
                ( Age::N4, ) => 19670,
                ( Age::N5, ) => 19671,
                ( Age::N6, ) => 19672,
                ( Age::N7, ) => 19673,
                ( Age::N8, ) => 19674,
                ( Age::N9, ) => 19675,
                ( Age::N10, ) => 19676,
                ( Age::N11, ) => 19677,
                ( Age::N12, ) => 19678,
                ( Age::N13, ) => 19679,
                ( Age::N14, ) => 19680,
                ( Age::N15, ) => 19681,
                ( Age::N16, ) => 19682,
                ( Age::N17, ) => 19683,
                ( Age::N18, ) => 19684,
                ( Age::N19, ) => 19685,
                ( Age::N20, ) => 19686,
                ( Age::N21, ) => 19687,
                ( Age::N22, ) => 19688,
                ( Age::N23, ) => 19689,
                ( Age::N24, ) => 19690,
                ( Age::N25, ) => 19691,
            })
        }
    }

    impl From<WeepingVines> for BlockState {
        #[inline(always)]
        fn from(value : WeepingVines) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WeepingVines {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WeepingVines { }

    impl Block for WeepingVines {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:lapis_block` block.
pub mod lapis_block {
    use super::*;

    /// `minecraft:lapis_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LapisBlock;

    impl LapisBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(565)
        }
    }

    impl From<LapisBlock> for BlockState {
        #[inline(always)]
        fn from(value : LapisBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LapisBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LapisBlock { }

    impl Block for LapisBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stripped_spruce_log` block.
pub mod stripped_spruce_log {
    use super::*;

    /// `minecraft:stripped_spruce_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedSpruceLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedSpruceLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 171,
                ( Axis::Y, ) => 172,
                ( Axis::Z, ) => 173,
            })
        }
    }

    impl From<StrippedSpruceLog> for BlockState {
        #[inline(always)]
        fn from(value : StrippedSpruceLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedSpruceLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedSpruceLog { }

    impl Block for StrippedSpruceLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:blue_ice` block.
pub mod blue_ice {
    use super::*;

    /// `minecraft:blue_ice` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueIce;

    impl BlueIce {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13996)
        }
    }

    impl From<BlueIce> for BlockState {
        #[inline(always)]
        fn from(value : BlueIce) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueIce {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueIce { }

    impl Block for BlueIce {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:blue_concrete_powder` block.
pub mod blue_concrete_powder {
    use super::*;

    /// `minecraft:blue_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlueConcretePowder;

    impl BlueConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13778)
        }
    }

    impl From<BlueConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : BlueConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlueConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlueConcretePowder { }

    impl Block for BlueConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_exposed_copper_trapdoor` block.
pub mod waxed_exposed_copper_trapdoor {
    use super::*;

    /// `minecraft:waxed_exposed_copper_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedExposedCopperTrapdoor {
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `open` state.
        pub open : bool,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl WaxedExposedCopperTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.facing, self.waterlogged, self.open, self.half, )) {
                ( true, Facing::North, true, true, Half::Top, ) => 25544,
                ( true, Facing::North, false, true, Half::Top, ) => 25545,
                ( false, Facing::North, true, true, Half::Top, ) => 25546,
                ( false, Facing::North, false, true, Half::Top, ) => 25547,
                ( true, Facing::North, true, false, Half::Top, ) => 25548,
                ( true, Facing::North, false, false, Half::Top, ) => 25549,
                ( false, Facing::North, true, false, Half::Top, ) => 25550,
                ( false, Facing::North, false, false, Half::Top, ) => 25551,
                ( true, Facing::North, true, true, Half::Bottom, ) => 25552,
                ( true, Facing::North, false, true, Half::Bottom, ) => 25553,
                ( false, Facing::North, true, true, Half::Bottom, ) => 25554,
                ( false, Facing::North, false, true, Half::Bottom, ) => 25555,
                ( true, Facing::North, true, false, Half::Bottom, ) => 25556,
                ( true, Facing::North, false, false, Half::Bottom, ) => 25557,
                ( false, Facing::North, true, false, Half::Bottom, ) => 25558,
                ( false, Facing::North, false, false, Half::Bottom, ) => 25559,
                ( true, Facing::South, true, true, Half::Top, ) => 25560,
                ( true, Facing::South, false, true, Half::Top, ) => 25561,
                ( false, Facing::South, true, true, Half::Top, ) => 25562,
                ( false, Facing::South, false, true, Half::Top, ) => 25563,
                ( true, Facing::South, true, false, Half::Top, ) => 25564,
                ( true, Facing::South, false, false, Half::Top, ) => 25565,
                ( false, Facing::South, true, false, Half::Top, ) => 25566,
                ( false, Facing::South, false, false, Half::Top, ) => 25567,
                ( true, Facing::South, true, true, Half::Bottom, ) => 25568,
                ( true, Facing::South, false, true, Half::Bottom, ) => 25569,
                ( false, Facing::South, true, true, Half::Bottom, ) => 25570,
                ( false, Facing::South, false, true, Half::Bottom, ) => 25571,
                ( true, Facing::South, true, false, Half::Bottom, ) => 25572,
                ( true, Facing::South, false, false, Half::Bottom, ) => 25573,
                ( false, Facing::South, true, false, Half::Bottom, ) => 25574,
                ( false, Facing::South, false, false, Half::Bottom, ) => 25575,
                ( true, Facing::West, true, true, Half::Top, ) => 25576,
                ( true, Facing::West, false, true, Half::Top, ) => 25577,
                ( false, Facing::West, true, true, Half::Top, ) => 25578,
                ( false, Facing::West, false, true, Half::Top, ) => 25579,
                ( true, Facing::West, true, false, Half::Top, ) => 25580,
                ( true, Facing::West, false, false, Half::Top, ) => 25581,
                ( false, Facing::West, true, false, Half::Top, ) => 25582,
                ( false, Facing::West, false, false, Half::Top, ) => 25583,
                ( true, Facing::West, true, true, Half::Bottom, ) => 25584,
                ( true, Facing::West, false, true, Half::Bottom, ) => 25585,
                ( false, Facing::West, true, true, Half::Bottom, ) => 25586,
                ( false, Facing::West, false, true, Half::Bottom, ) => 25587,
                ( true, Facing::West, true, false, Half::Bottom, ) => 25588,
                ( true, Facing::West, false, false, Half::Bottom, ) => 25589,
                ( false, Facing::West, true, false, Half::Bottom, ) => 25590,
                ( false, Facing::West, false, false, Half::Bottom, ) => 25591,
                ( true, Facing::East, true, true, Half::Top, ) => 25592,
                ( true, Facing::East, false, true, Half::Top, ) => 25593,
                ( false, Facing::East, true, true, Half::Top, ) => 25594,
                ( false, Facing::East, false, true, Half::Top, ) => 25595,
                ( true, Facing::East, true, false, Half::Top, ) => 25596,
                ( true, Facing::East, false, false, Half::Top, ) => 25597,
                ( false, Facing::East, true, false, Half::Top, ) => 25598,
                ( false, Facing::East, false, false, Half::Top, ) => 25599,
                ( true, Facing::East, true, true, Half::Bottom, ) => 25600,
                ( true, Facing::East, false, true, Half::Bottom, ) => 25601,
                ( false, Facing::East, true, true, Half::Bottom, ) => 25602,
                ( false, Facing::East, false, true, Half::Bottom, ) => 25603,
                ( true, Facing::East, true, false, Half::Bottom, ) => 25604,
                ( true, Facing::East, false, false, Half::Bottom, ) => 25605,
                ( false, Facing::East, true, false, Half::Bottom, ) => 25606,
                ( false, Facing::East, false, false, Half::Bottom, ) => 25607,
            })
        }
    }

    impl From<WaxedExposedCopperTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : WaxedExposedCopperTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedExposedCopperTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedExposedCopperTrapdoor { }

    impl Block for WaxedExposedCopperTrapdoor {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            facing : Facing::North,
            waterlogged : false,
            open : false,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:green_wool` block.
pub mod green_wool {
    use super::*;

    /// `minecraft:green_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenWool;

    impl GreenWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2106)
        }
    }

    impl From<GreenWool> for BlockState {
        #[inline(always)]
        fn from(value : GreenWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenWool { }

    impl Block for GreenWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:bubble_column` block.
pub mod bubble_column {
    use super::*;

    /// `minecraft:bubble_column` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BubbleColumn {
        /// `drag` state.
        pub drag : bool,
    }

    impl BubbleColumn {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.drag, )) {
                ( true, ) => 14015,
                ( false, ) => 14016,
            })
        }
    }

    impl From<BubbleColumn> for BlockState {
        #[inline(always)]
        fn from(value : BubbleColumn) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BubbleColumn {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BubbleColumn { }

    impl Block for BubbleColumn {
        const DEFAULT_STATE : Self = Self {
            drag : true,
        };
    }

}

/// `minecraft:crimson_fence_gate` block.
pub mod crimson_fence_gate {
    use super::*;

    /// `minecraft:crimson_fence_gate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonFenceGate {
        /// `facing` state.
        pub facing : Facing,
        /// `in_wall` state.
        pub in_wall : bool,
        /// `powered` state.
        pub powered : bool,
        /// `open` state.
        pub open : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CrimsonFenceGate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.in_wall, self.powered, self.open, )) {
                ( Facing::North, true, true, true, ) => 19931,
                ( Facing::North, true, false, true, ) => 19932,
                ( Facing::North, true, true, false, ) => 19933,
                ( Facing::North, true, false, false, ) => 19934,
                ( Facing::North, false, true, true, ) => 19935,
                ( Facing::North, false, false, true, ) => 19936,
                ( Facing::North, false, true, false, ) => 19937,
                ( Facing::North, false, false, false, ) => 19938,
                ( Facing::South, true, true, true, ) => 19939,
                ( Facing::South, true, false, true, ) => 19940,
                ( Facing::South, true, true, false, ) => 19941,
                ( Facing::South, true, false, false, ) => 19942,
                ( Facing::South, false, true, true, ) => 19943,
                ( Facing::South, false, false, true, ) => 19944,
                ( Facing::South, false, true, false, ) => 19945,
                ( Facing::South, false, false, false, ) => 19946,
                ( Facing::West, true, true, true, ) => 19947,
                ( Facing::West, true, false, true, ) => 19948,
                ( Facing::West, true, true, false, ) => 19949,
                ( Facing::West, true, false, false, ) => 19950,
                ( Facing::West, false, true, true, ) => 19951,
                ( Facing::West, false, false, true, ) => 19952,
                ( Facing::West, false, true, false, ) => 19953,
                ( Facing::West, false, false, false, ) => 19954,
                ( Facing::East, true, true, true, ) => 19955,
                ( Facing::East, true, false, true, ) => 19956,
                ( Facing::East, true, true, false, ) => 19957,
                ( Facing::East, true, false, false, ) => 19958,
                ( Facing::East, false, true, true, ) => 19959,
                ( Facing::East, false, false, true, ) => 19960,
                ( Facing::East, false, true, false, ) => 19961,
                ( Facing::East, false, false, false, ) => 19962,
            })
        }
    }

    impl From<CrimsonFenceGate> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonFenceGate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonFenceGate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonFenceGate { }

    impl Block for CrimsonFenceGate {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            in_wall : false,
            powered : false,
            open : false,
        };
    }

}

/// `minecraft:brain_coral_wall_fan` block.
pub mod brain_coral_wall_fan {
    use super::*;

    /// `minecraft:brain_coral_wall_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrainCoralWallFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BrainCoralWallFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 13956,
                ( false, Facing::North, ) => 13957,
                ( true, Facing::South, ) => 13958,
                ( false, Facing::South, ) => 13959,
                ( true, Facing::West, ) => 13960,
                ( false, Facing::West, ) => 13961,
                ( true, Facing::East, ) => 13962,
                ( false, Facing::East, ) => 13963,
            })
        }
    }

    impl From<BrainCoralWallFan> for BlockState {
        #[inline(always)]
        fn from(value : BrainCoralWallFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrainCoralWallFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrainCoralWallFan { }

    impl Block for BrainCoralWallFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
            facing : Facing::North,
        };
    }

}

/// `minecraft:dark_oak_sign` block.
pub mod dark_oak_sign {
    use super::*;

    /// `minecraft:dark_oak_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakSign {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl DarkOakSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.waterlogged, )) {
                ( Rotation::N0, true, ) => 4558,
                ( Rotation::N0, false, ) => 4559,
                ( Rotation::N1, true, ) => 4560,
                ( Rotation::N1, false, ) => 4561,
                ( Rotation::N2, true, ) => 4562,
                ( Rotation::N2, false, ) => 4563,
                ( Rotation::N3, true, ) => 4564,
                ( Rotation::N3, false, ) => 4565,
                ( Rotation::N4, true, ) => 4566,
                ( Rotation::N4, false, ) => 4567,
                ( Rotation::N5, true, ) => 4568,
                ( Rotation::N5, false, ) => 4569,
                ( Rotation::N6, true, ) => 4570,
                ( Rotation::N6, false, ) => 4571,
                ( Rotation::N7, true, ) => 4572,
                ( Rotation::N7, false, ) => 4573,
                ( Rotation::N8, true, ) => 4574,
                ( Rotation::N8, false, ) => 4575,
                ( Rotation::N9, true, ) => 4576,
                ( Rotation::N9, false, ) => 4577,
                ( Rotation::N10, true, ) => 4578,
                ( Rotation::N10, false, ) => 4579,
                ( Rotation::N11, true, ) => 4580,
                ( Rotation::N11, false, ) => 4581,
                ( Rotation::N12, true, ) => 4582,
                ( Rotation::N12, false, ) => 4583,
                ( Rotation::N13, true, ) => 4584,
                ( Rotation::N13, false, ) => 4585,
                ( Rotation::N14, true, ) => 4586,
                ( Rotation::N14, false, ) => 4587,
                ( Rotation::N15, true, ) => 4588,
                ( Rotation::N15, false, ) => 4589,
            })
        }
    }

    impl From<DarkOakSign> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakSign { }

    impl Block for DarkOakSign {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            waterlogged : false,
        };
    }

}

/// `minecraft:crimson_wall_hanging_sign` block.
pub mod crimson_wall_hanging_sign {
    use super::*;

    /// `minecraft:crimson_wall_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonWallHangingSign {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CrimsonWallHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 5778,
                ( Facing::North, false, ) => 5779,
                ( Facing::South, true, ) => 5780,
                ( Facing::South, false, ) => 5781,
                ( Facing::West, true, ) => 5782,
                ( Facing::West, false, ) => 5783,
                ( Facing::East, true, ) => 5784,
                ( Facing::East, false, ) => 5785,
            })
        }
    }

    impl From<CrimsonWallHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonWallHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonWallHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonWallHangingSign { }

    impl Block for CrimsonWallHangingSign {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:magenta_wall_banner` block.
pub mod magenta_wall_banner {
    use super::*;

    /// `minecraft:magenta_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl MagentaWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11912,
                ( Facing::South, ) => 11913,
                ( Facing::West, ) => 11914,
                ( Facing::East, ) => 11915,
            })
        }
    }

    impl From<MagentaWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : MagentaWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaWallBanner { }

    impl Block for MagentaWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:pointed_dripstone` block.
pub mod pointed_dripstone {
    use super::*;

    /// `minecraft:pointed_dripstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PointedDripstone {
        /// `vertical_direction` state.
        pub vertical_direction : VerticalDirection,
        /// `thickness` state.
        pub thickness : Thickness,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `vertical_direction` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum VerticalDirection {
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for VerticalDirection { }
    impl BlockProperty for VerticalDirection { }

    /// `thickness` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Thickness {
        /// `tip_merge` variant.
        TipMerge,
        /// `tip` variant.
        Tip,
        /// `frustum` variant.
        Frustum,
        /// `middle` variant.
        Middle,
        /// `base` variant.
        Base,
    }
    impl crate::Sealed for Thickness { }
    impl BlockProperty for Thickness { }

    impl PointedDripstone {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.vertical_direction, self.thickness, self.waterlogged, )) {
                ( VerticalDirection::Up, Thickness::TipMerge, true, ) => 25808,
                ( VerticalDirection::Up, Thickness::TipMerge, false, ) => 25809,
                ( VerticalDirection::Down, Thickness::TipMerge, true, ) => 25810,
                ( VerticalDirection::Down, Thickness::TipMerge, false, ) => 25811,
                ( VerticalDirection::Up, Thickness::Tip, true, ) => 25812,
                ( VerticalDirection::Up, Thickness::Tip, false, ) => 25813,
                ( VerticalDirection::Down, Thickness::Tip, true, ) => 25814,
                ( VerticalDirection::Down, Thickness::Tip, false, ) => 25815,
                ( VerticalDirection::Up, Thickness::Frustum, true, ) => 25816,
                ( VerticalDirection::Up, Thickness::Frustum, false, ) => 25817,
                ( VerticalDirection::Down, Thickness::Frustum, true, ) => 25818,
                ( VerticalDirection::Down, Thickness::Frustum, false, ) => 25819,
                ( VerticalDirection::Up, Thickness::Middle, true, ) => 25820,
                ( VerticalDirection::Up, Thickness::Middle, false, ) => 25821,
                ( VerticalDirection::Down, Thickness::Middle, true, ) => 25822,
                ( VerticalDirection::Down, Thickness::Middle, false, ) => 25823,
                ( VerticalDirection::Up, Thickness::Base, true, ) => 25824,
                ( VerticalDirection::Up, Thickness::Base, false, ) => 25825,
                ( VerticalDirection::Down, Thickness::Base, true, ) => 25826,
                ( VerticalDirection::Down, Thickness::Base, false, ) => 25827,
            })
        }
    }

    impl From<PointedDripstone> for BlockState {
        #[inline(always)]
        fn from(value : PointedDripstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PointedDripstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PointedDripstone { }

    impl Block for PointedDripstone {
        const DEFAULT_STATE : Self = Self {
            vertical_direction : VerticalDirection::Up,
            thickness : Thickness::Tip,
            waterlogged : false,
        };
    }

}

/// `minecraft:resin_brick_slab` block.
pub mod resin_brick_slab {
    use super::*;

    /// `minecraft:resin_brick_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ResinBrickSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl ResinBrickSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 7725,
                ( Kind::Top, false, ) => 7726,
                ( Kind::Bottom, true, ) => 7727,
                ( Kind::Bottom, false, ) => 7728,
                ( Kind::Double, true, ) => 7729,
                ( Kind::Double, false, ) => 7730,
            })
        }
    }

    impl From<ResinBrickSlab> for BlockState {
        #[inline(always)]
        fn from(value : ResinBrickSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ResinBrickSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ResinBrickSlab { }

    impl Block for ResinBrickSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:void_air` block.
pub mod void_air {
    use super::*;

    /// `minecraft:void_air` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct VoidAir;

    impl VoidAir {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(14013)
        }
    }

    impl From<VoidAir> for BlockState {
        #[inline(always)]
        fn from(value : VoidAir) -> Self {
            value.to_block_state()
        }
    }

    impl Default for VoidAir {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for VoidAir { }

    impl Block for VoidAir {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:chiseled_quartz_block` block.
pub mod chiseled_quartz_block {
    use super::*;

    /// `minecraft:chiseled_quartz_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChiseledQuartzBlock;

    impl ChiseledQuartzBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10045)
        }
    }

    impl From<ChiseledQuartzBlock> for BlockState {
        #[inline(always)]
        fn from(value : ChiseledQuartzBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChiseledQuartzBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChiseledQuartzBlock { }

    impl Block for ChiseledQuartzBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:acacia_wood` block.
pub mod acacia_wood {
    use super::*;

    /// `minecraft:acacia_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl AcaciaWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 213,
                ( Axis::Y, ) => 214,
                ( Axis::Z, ) => 215,
            })
        }
    }

    impl From<AcaciaWood> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaWood { }

    impl Block for AcaciaWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:black_banner` block.
pub mod black_banner {
    use super::*;

    /// `minecraft:black_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl BlackBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11888,
                ( Rotation::N1, ) => 11889,
                ( Rotation::N2, ) => 11890,
                ( Rotation::N3, ) => 11891,
                ( Rotation::N4, ) => 11892,
                ( Rotation::N5, ) => 11893,
                ( Rotation::N6, ) => 11894,
                ( Rotation::N7, ) => 11895,
                ( Rotation::N8, ) => 11896,
                ( Rotation::N9, ) => 11897,
                ( Rotation::N10, ) => 11898,
                ( Rotation::N11, ) => 11899,
                ( Rotation::N12, ) => 11900,
                ( Rotation::N13, ) => 11901,
                ( Rotation::N14, ) => 11902,
                ( Rotation::N15, ) => 11903,
            })
        }
    }

    impl From<BlackBanner> for BlockState {
        #[inline(always)]
        fn from(value : BlackBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackBanner { }

    impl Block for BlackBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:amethyst_cluster` block.
pub mod amethyst_cluster {
    use super::*;

    /// `minecraft:amethyst_cluster` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AmethystCluster {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl AmethystCluster {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 22093,
                ( Facing::North, false, ) => 22094,
                ( Facing::East, true, ) => 22095,
                ( Facing::East, false, ) => 22096,
                ( Facing::South, true, ) => 22097,
                ( Facing::South, false, ) => 22098,
                ( Facing::West, true, ) => 22099,
                ( Facing::West, false, ) => 22100,
                ( Facing::Up, true, ) => 22101,
                ( Facing::Up, false, ) => 22102,
                ( Facing::Down, true, ) => 22103,
                ( Facing::Down, false, ) => 22104,
            })
        }
    }

    impl From<AmethystCluster> for BlockState {
        #[inline(always)]
        fn from(value : AmethystCluster) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AmethystCluster {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AmethystCluster { }

    impl Block for AmethystCluster {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
            waterlogged : false,
        };
    }

}

/// `minecraft:soul_torch` block.
pub mod soul_torch {
    use super::*;

    /// `minecraft:soul_torch` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SoulTorch;

    impl SoulTorch {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6037)
        }
    }

    impl From<SoulTorch> for BlockState {
        #[inline(always)]
        fn from(value : SoulTorch) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SoulTorch {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SoulTorch { }

    impl Block for SoulTorch {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:magenta_candle` block.
pub mod magenta_candle {
    use super::*;

    /// `minecraft:magenta_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaCandle {
        /// `lit` state.
        pub lit : bool,
        /// `candles` state.
        pub candles : Candles,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl MagentaCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, self.candles, self.waterlogged, )) {
                ( true, Candles::N1, true, ) => 21833,
                ( true, Candles::N1, false, ) => 21834,
                ( false, Candles::N1, true, ) => 21835,
                ( false, Candles::N1, false, ) => 21836,
                ( true, Candles::N2, true, ) => 21837,
                ( true, Candles::N2, false, ) => 21838,
                ( false, Candles::N2, true, ) => 21839,
                ( false, Candles::N2, false, ) => 21840,
                ( true, Candles::N3, true, ) => 21841,
                ( true, Candles::N3, false, ) => 21842,
                ( false, Candles::N3, true, ) => 21843,
                ( false, Candles::N3, false, ) => 21844,
                ( true, Candles::N4, true, ) => 21845,
                ( true, Candles::N4, false, ) => 21846,
                ( false, Candles::N4, true, ) => 21847,
                ( false, Candles::N4, false, ) => 21848,
            })
        }
    }

    impl From<MagentaCandle> for BlockState {
        #[inline(always)]
        fn from(value : MagentaCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaCandle { }

    impl Block for MagentaCandle {
        const DEFAULT_STATE : Self = Self {
            lit : false,
            candles : Candles::N1,
            waterlogged : false,
        };
    }

}

/// `minecraft:pale_moss_block` block.
pub mod pale_moss_block {
    use super::*;

    /// `minecraft:pale_moss_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleMossBlock;

    impl PaleMossBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27776)
        }
    }

    impl From<PaleMossBlock> for BlockState {
        #[inline(always)]
        fn from(value : PaleMossBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleMossBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleMossBlock { }

    impl Block for PaleMossBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:sponge` block.
pub mod sponge {
    use super::*;

    /// `minecraft:sponge` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Sponge;

    impl Sponge {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(560)
        }
    }

    impl From<Sponge> for BlockState {
        #[inline(always)]
        fn from(value : Sponge) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Sponge {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Sponge { }

    impl Block for Sponge {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:gray_shulker_box` block.
pub mod gray_shulker_box {
    use super::*;

    /// `minecraft:gray_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GrayShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl GrayShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13633,
                ( Facing::East, ) => 13634,
                ( Facing::South, ) => 13635,
                ( Facing::West, ) => 13636,
                ( Facing::Up, ) => 13637,
                ( Facing::Down, ) => 13638,
            })
        }
    }

    impl From<GrayShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : GrayShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GrayShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GrayShulkerBox { }

    impl Block for GrayShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:peony` block.
pub mod peony {
    use super::*;

    /// `minecraft:peony` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Peony {
        /// `half` state.
        pub half : Half,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl Peony {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, )) {
                ( Half::Upper, ) => 11642,
                ( Half::Lower, ) => 11643,
            })
        }
    }

    impl From<Peony> for BlockState {
        #[inline(always)]
        fn from(value : Peony) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Peony {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Peony { }

    impl Block for Peony {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
        };
    }

}

/// `minecraft:ladder` block.
pub mod ladder {
    use super::*;

    /// `minecraft:ladder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Ladder {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Ladder {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 4750,
                ( Facing::North, false, ) => 4751,
                ( Facing::South, true, ) => 4752,
                ( Facing::South, false, ) => 4753,
                ( Facing::West, true, ) => 4754,
                ( Facing::West, false, ) => 4755,
                ( Facing::East, true, ) => 4756,
                ( Facing::East, false, ) => 4757,
            })
        }
    }

    impl From<Ladder> for BlockState {
        #[inline(always)]
        fn from(value : Ladder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Ladder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Ladder { }

    impl Block for Ladder {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:brown_banner` block.
pub mod brown_banner {
    use super::*;

    /// `minecraft:brown_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl BrownBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11840,
                ( Rotation::N1, ) => 11841,
                ( Rotation::N2, ) => 11842,
                ( Rotation::N3, ) => 11843,
                ( Rotation::N4, ) => 11844,
                ( Rotation::N5, ) => 11845,
                ( Rotation::N6, ) => 11846,
                ( Rotation::N7, ) => 11847,
                ( Rotation::N8, ) => 11848,
                ( Rotation::N9, ) => 11849,
                ( Rotation::N10, ) => 11850,
                ( Rotation::N11, ) => 11851,
                ( Rotation::N12, ) => 11852,
                ( Rotation::N13, ) => 11853,
                ( Rotation::N14, ) => 11854,
                ( Rotation::N15, ) => 11855,
            })
        }
    }

    impl From<BrownBanner> for BlockState {
        #[inline(always)]
        fn from(value : BrownBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownBanner { }

    impl Block for BrownBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:birch_pressure_plate` block.
pub mod birch_pressure_plate {
    use super::*;

    /// `minecraft:birch_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchPressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl BirchPressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 5896,
                ( false, ) => 5897,
            })
        }
    }

    impl From<BirchPressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : BirchPressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchPressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchPressurePlate { }

    impl Block for BirchPressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:light_gray_carpet` block.
pub mod light_gray_carpet {
    use super::*;

    /// `minecraft:light_gray_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayCarpet;

    impl LightGrayCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11625)
        }
    }

    impl From<LightGrayCarpet> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayCarpet { }

    impl Block for LightGrayCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:bricks` block.
pub mod bricks {
    use super::*;

    /// `minecraft:bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Bricks;

    impl Bricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2139)
        }
    }

    impl From<Bricks> for BlockState {
        #[inline(always)]
        fn from(value : Bricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Bricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Bricks { }

    impl Block for Bricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dirt` block.
pub mod dirt {
    use super::*;

    /// `minecraft:dirt` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Dirt;

    impl Dirt {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10)
        }
    }

    impl From<Dirt> for BlockState {
        #[inline(always)]
        fn from(value : Dirt) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Dirt {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Dirt { }

    impl Block for Dirt {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:magenta_stained_glass_pane` block.
pub mod magenta_stained_glass_pane {
    use super::*;

    /// `minecraft:magenta_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaStainedGlassPane {
        /// `north` state.
        pub north : bool,
        /// `west` state.
        pub west : bool,
        /// `east` state.
        pub east : bool,
        /// `south` state.
        pub south : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl MagentaStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.west, self.east, self.south, self.waterlogged, )) {
                ( true, true, true, true, true, ) => 10245,
                ( true, false, true, true, true, ) => 10246,
                ( true, true, true, true, false, ) => 10247,
                ( true, false, true, true, false, ) => 10248,
                ( true, true, true, false, true, ) => 10249,
                ( true, false, true, false, true, ) => 10250,
                ( true, true, true, false, false, ) => 10251,
                ( true, false, true, false, false, ) => 10252,
                ( false, true, true, true, true, ) => 10253,
                ( false, false, true, true, true, ) => 10254,
                ( false, true, true, true, false, ) => 10255,
                ( false, false, true, true, false, ) => 10256,
                ( false, true, true, false, true, ) => 10257,
                ( false, false, true, false, true, ) => 10258,
                ( false, true, true, false, false, ) => 10259,
                ( false, false, true, false, false, ) => 10260,
                ( true, true, false, true, true, ) => 10261,
                ( true, false, false, true, true, ) => 10262,
                ( true, true, false, true, false, ) => 10263,
                ( true, false, false, true, false, ) => 10264,
                ( true, true, false, false, true, ) => 10265,
                ( true, false, false, false, true, ) => 10266,
                ( true, true, false, false, false, ) => 10267,
                ( true, false, false, false, false, ) => 10268,
                ( false, true, false, true, true, ) => 10269,
                ( false, false, false, true, true, ) => 10270,
                ( false, true, false, true, false, ) => 10271,
                ( false, false, false, true, false, ) => 10272,
                ( false, true, false, false, true, ) => 10273,
                ( false, false, false, false, true, ) => 10274,
                ( false, true, false, false, false, ) => 10275,
                ( false, false, false, false, false, ) => 10276,
            })
        }
    }

    impl From<MagentaStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : MagentaStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaStainedGlassPane { }

    impl Block for MagentaStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            north : false,
            west : false,
            east : false,
            south : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:heavy_weighted_pressure_plate` block.
pub mod heavy_weighted_pressure_plate {
    use super::*;

    /// `minecraft:heavy_weighted_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct HeavyWeightedPressurePlate {
        /// `power` state.
        pub power : Power,
    }

    /// `power` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Power {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Power { }
    impl BlockProperty for Power { }

    impl HeavyWeightedPressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.power, )) {
                ( Power::N0, ) => 9968,
                ( Power::N1, ) => 9969,
                ( Power::N2, ) => 9970,
                ( Power::N3, ) => 9971,
                ( Power::N4, ) => 9972,
                ( Power::N5, ) => 9973,
                ( Power::N6, ) => 9974,
                ( Power::N7, ) => 9975,
                ( Power::N8, ) => 9976,
                ( Power::N9, ) => 9977,
                ( Power::N10, ) => 9978,
                ( Power::N11, ) => 9979,
                ( Power::N12, ) => 9980,
                ( Power::N13, ) => 9981,
                ( Power::N14, ) => 9982,
                ( Power::N15, ) => 9983,
            })
        }
    }

    impl From<HeavyWeightedPressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : HeavyWeightedPressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for HeavyWeightedPressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for HeavyWeightedPressurePlate { }

    impl Block for HeavyWeightedPressurePlate {
        const DEFAULT_STATE : Self = Self {
            power : Power::N0,
        };
    }

}

/// `minecraft:purple_bed` block.
pub mod purple_bed {
    use super::*;

    /// `minecraft:purple_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleBed {
        /// `facing` state.
        pub facing : Facing,
        /// `occupied` state.
        pub occupied : bool,
        /// `part` state.
        pub part : Part,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    impl PurpleBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.occupied, self.part, )) {
                ( Facing::North, true, Part::Head, ) => 1891,
                ( Facing::North, true, Part::Foot, ) => 1892,
                ( Facing::North, false, Part::Head, ) => 1893,
                ( Facing::North, false, Part::Foot, ) => 1894,
                ( Facing::South, true, Part::Head, ) => 1895,
                ( Facing::South, true, Part::Foot, ) => 1896,
                ( Facing::South, false, Part::Head, ) => 1897,
                ( Facing::South, false, Part::Foot, ) => 1898,
                ( Facing::West, true, Part::Head, ) => 1899,
                ( Facing::West, true, Part::Foot, ) => 1900,
                ( Facing::West, false, Part::Head, ) => 1901,
                ( Facing::West, false, Part::Foot, ) => 1902,
                ( Facing::East, true, Part::Head, ) => 1903,
                ( Facing::East, true, Part::Foot, ) => 1904,
                ( Facing::East, false, Part::Head, ) => 1905,
                ( Facing::East, false, Part::Foot, ) => 1906,
            })
        }
    }

    impl From<PurpleBed> for BlockState {
        #[inline(always)]
        fn from(value : PurpleBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleBed { }

    impl Block for PurpleBed {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            occupied : false,
            part : Part::Foot,
        };
    }

}

/// `minecraft:soul_sand` block.
pub mod soul_sand {
    use super::*;

    /// `minecraft:soul_sand` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SoulSand;

    impl SoulSand {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6029)
        }
    }

    impl From<SoulSand> for BlockState {
        #[inline(always)]
        fn from(value : SoulSand) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SoulSand {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SoulSand { }

    impl Block for SoulSand {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:potted_acacia_sapling` block.
pub mod potted_acacia_sapling {
    use super::*;

    /// `minecraft:potted_acacia_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedAcaciaSapling;

    impl PottedAcaciaSapling {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9357)
        }
    }

    impl From<PottedAcaciaSapling> for BlockState {
        #[inline(always)]
        fn from(value : PottedAcaciaSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedAcaciaSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedAcaciaSapling { }

    impl Block for PottedAcaciaSapling {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:pale_oak_hanging_sign` block.
pub mod pale_oak_hanging_sign {
    use super::*;

    /// `minecraft:pale_oak_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakHangingSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `rotation` state.
        pub rotation : Rotation,
        /// `attached` state.
        pub attached : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl PaleOakHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.rotation, self.attached, )) {
                ( true, Rotation::N0, true, ) => 5386,
                ( false, Rotation::N0, true, ) => 5387,
                ( true, Rotation::N1, true, ) => 5388,
                ( false, Rotation::N1, true, ) => 5389,
                ( true, Rotation::N2, true, ) => 5390,
                ( false, Rotation::N2, true, ) => 5391,
                ( true, Rotation::N3, true, ) => 5392,
                ( false, Rotation::N3, true, ) => 5393,
                ( true, Rotation::N4, true, ) => 5394,
                ( false, Rotation::N4, true, ) => 5395,
                ( true, Rotation::N5, true, ) => 5396,
                ( false, Rotation::N5, true, ) => 5397,
                ( true, Rotation::N6, true, ) => 5398,
                ( false, Rotation::N6, true, ) => 5399,
                ( true, Rotation::N7, true, ) => 5400,
                ( false, Rotation::N7, true, ) => 5401,
                ( true, Rotation::N8, true, ) => 5402,
                ( false, Rotation::N8, true, ) => 5403,
                ( true, Rotation::N9, true, ) => 5404,
                ( false, Rotation::N9, true, ) => 5405,
                ( true, Rotation::N10, true, ) => 5406,
                ( false, Rotation::N10, true, ) => 5407,
                ( true, Rotation::N11, true, ) => 5408,
                ( false, Rotation::N11, true, ) => 5409,
                ( true, Rotation::N12, true, ) => 5410,
                ( false, Rotation::N12, true, ) => 5411,
                ( true, Rotation::N13, true, ) => 5412,
                ( false, Rotation::N13, true, ) => 5413,
                ( true, Rotation::N14, true, ) => 5414,
                ( false, Rotation::N14, true, ) => 5415,
                ( true, Rotation::N15, true, ) => 5416,
                ( false, Rotation::N15, true, ) => 5417,
                ( true, Rotation::N0, false, ) => 5418,
                ( false, Rotation::N0, false, ) => 5419,
                ( true, Rotation::N1, false, ) => 5420,
                ( false, Rotation::N1, false, ) => 5421,
                ( true, Rotation::N2, false, ) => 5422,
                ( false, Rotation::N2, false, ) => 5423,
                ( true, Rotation::N3, false, ) => 5424,
                ( false, Rotation::N3, false, ) => 5425,
                ( true, Rotation::N4, false, ) => 5426,
                ( false, Rotation::N4, false, ) => 5427,
                ( true, Rotation::N5, false, ) => 5428,
                ( false, Rotation::N5, false, ) => 5429,
                ( true, Rotation::N6, false, ) => 5430,
                ( false, Rotation::N6, false, ) => 5431,
                ( true, Rotation::N7, false, ) => 5432,
                ( false, Rotation::N7, false, ) => 5433,
                ( true, Rotation::N8, false, ) => 5434,
                ( false, Rotation::N8, false, ) => 5435,
                ( true, Rotation::N9, false, ) => 5436,
                ( false, Rotation::N9, false, ) => 5437,
                ( true, Rotation::N10, false, ) => 5438,
                ( false, Rotation::N10, false, ) => 5439,
                ( true, Rotation::N11, false, ) => 5440,
                ( false, Rotation::N11, false, ) => 5441,
                ( true, Rotation::N12, false, ) => 5442,
                ( false, Rotation::N12, false, ) => 5443,
                ( true, Rotation::N13, false, ) => 5444,
                ( false, Rotation::N13, false, ) => 5445,
                ( true, Rotation::N14, false, ) => 5446,
                ( false, Rotation::N14, false, ) => 5447,
                ( true, Rotation::N15, false, ) => 5448,
                ( false, Rotation::N15, false, ) => 5449,
            })
        }
    }

    impl From<PaleOakHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakHangingSign { }

    impl Block for PaleOakHangingSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            rotation : Rotation::N0,
            attached : false,
        };
    }

}

/// `minecraft:pale_oak_sign` block.
pub mod pale_oak_sign {
    use super::*;

    /// `minecraft:pale_oak_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl PaleOakSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.rotation, )) {
                ( true, Rotation::N0, ) => 4590,
                ( false, Rotation::N0, ) => 4591,
                ( true, Rotation::N1, ) => 4592,
                ( false, Rotation::N1, ) => 4593,
                ( true, Rotation::N2, ) => 4594,
                ( false, Rotation::N2, ) => 4595,
                ( true, Rotation::N3, ) => 4596,
                ( false, Rotation::N3, ) => 4597,
                ( true, Rotation::N4, ) => 4598,
                ( false, Rotation::N4, ) => 4599,
                ( true, Rotation::N5, ) => 4600,
                ( false, Rotation::N5, ) => 4601,
                ( true, Rotation::N6, ) => 4602,
                ( false, Rotation::N6, ) => 4603,
                ( true, Rotation::N7, ) => 4604,
                ( false, Rotation::N7, ) => 4605,
                ( true, Rotation::N8, ) => 4606,
                ( false, Rotation::N8, ) => 4607,
                ( true, Rotation::N9, ) => 4608,
                ( false, Rotation::N9, ) => 4609,
                ( true, Rotation::N10, ) => 4610,
                ( false, Rotation::N10, ) => 4611,
                ( true, Rotation::N11, ) => 4612,
                ( false, Rotation::N11, ) => 4613,
                ( true, Rotation::N12, ) => 4614,
                ( false, Rotation::N12, ) => 4615,
                ( true, Rotation::N13, ) => 4616,
                ( false, Rotation::N13, ) => 4617,
                ( true, Rotation::N14, ) => 4618,
                ( false, Rotation::N14, ) => 4619,
                ( true, Rotation::N15, ) => 4620,
                ( false, Rotation::N15, ) => 4621,
            })
        }
    }

    impl From<PaleOakSign> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakSign { }

    impl Block for PaleOakSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:tuff_stairs` block.
pub mod tuff_stairs {
    use super::*;

    /// `minecraft:tuff_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TuffStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl TuffStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.shape, self.facing, self.half, )) {
                ( true, Shape::Straight, Facing::North, Half::Top, ) => 22148,
                ( false, Shape::Straight, Facing::North, Half::Top, ) => 22149,
                ( true, Shape::InnerLeft, Facing::North, Half::Top, ) => 22150,
                ( false, Shape::InnerLeft, Facing::North, Half::Top, ) => 22151,
                ( true, Shape::InnerRight, Facing::North, Half::Top, ) => 22152,
                ( false, Shape::InnerRight, Facing::North, Half::Top, ) => 22153,
                ( true, Shape::OuterLeft, Facing::North, Half::Top, ) => 22154,
                ( false, Shape::OuterLeft, Facing::North, Half::Top, ) => 22155,
                ( true, Shape::OuterRight, Facing::North, Half::Top, ) => 22156,
                ( false, Shape::OuterRight, Facing::North, Half::Top, ) => 22157,
                ( true, Shape::Straight, Facing::North, Half::Bottom, ) => 22158,
                ( false, Shape::Straight, Facing::North, Half::Bottom, ) => 22159,
                ( true, Shape::InnerLeft, Facing::North, Half::Bottom, ) => 22160,
                ( false, Shape::InnerLeft, Facing::North, Half::Bottom, ) => 22161,
                ( true, Shape::InnerRight, Facing::North, Half::Bottom, ) => 22162,
                ( false, Shape::InnerRight, Facing::North, Half::Bottom, ) => 22163,
                ( true, Shape::OuterLeft, Facing::North, Half::Bottom, ) => 22164,
                ( false, Shape::OuterLeft, Facing::North, Half::Bottom, ) => 22165,
                ( true, Shape::OuterRight, Facing::North, Half::Bottom, ) => 22166,
                ( false, Shape::OuterRight, Facing::North, Half::Bottom, ) => 22167,
                ( true, Shape::Straight, Facing::South, Half::Top, ) => 22168,
                ( false, Shape::Straight, Facing::South, Half::Top, ) => 22169,
                ( true, Shape::InnerLeft, Facing::South, Half::Top, ) => 22170,
                ( false, Shape::InnerLeft, Facing::South, Half::Top, ) => 22171,
                ( true, Shape::InnerRight, Facing::South, Half::Top, ) => 22172,
                ( false, Shape::InnerRight, Facing::South, Half::Top, ) => 22173,
                ( true, Shape::OuterLeft, Facing::South, Half::Top, ) => 22174,
                ( false, Shape::OuterLeft, Facing::South, Half::Top, ) => 22175,
                ( true, Shape::OuterRight, Facing::South, Half::Top, ) => 22176,
                ( false, Shape::OuterRight, Facing::South, Half::Top, ) => 22177,
                ( true, Shape::Straight, Facing::South, Half::Bottom, ) => 22178,
                ( false, Shape::Straight, Facing::South, Half::Bottom, ) => 22179,
                ( true, Shape::InnerLeft, Facing::South, Half::Bottom, ) => 22180,
                ( false, Shape::InnerLeft, Facing::South, Half::Bottom, ) => 22181,
                ( true, Shape::InnerRight, Facing::South, Half::Bottom, ) => 22182,
                ( false, Shape::InnerRight, Facing::South, Half::Bottom, ) => 22183,
                ( true, Shape::OuterLeft, Facing::South, Half::Bottom, ) => 22184,
                ( false, Shape::OuterLeft, Facing::South, Half::Bottom, ) => 22185,
                ( true, Shape::OuterRight, Facing::South, Half::Bottom, ) => 22186,
                ( false, Shape::OuterRight, Facing::South, Half::Bottom, ) => 22187,
                ( true, Shape::Straight, Facing::West, Half::Top, ) => 22188,
                ( false, Shape::Straight, Facing::West, Half::Top, ) => 22189,
                ( true, Shape::InnerLeft, Facing::West, Half::Top, ) => 22190,
                ( false, Shape::InnerLeft, Facing::West, Half::Top, ) => 22191,
                ( true, Shape::InnerRight, Facing::West, Half::Top, ) => 22192,
                ( false, Shape::InnerRight, Facing::West, Half::Top, ) => 22193,
                ( true, Shape::OuterLeft, Facing::West, Half::Top, ) => 22194,
                ( false, Shape::OuterLeft, Facing::West, Half::Top, ) => 22195,
                ( true, Shape::OuterRight, Facing::West, Half::Top, ) => 22196,
                ( false, Shape::OuterRight, Facing::West, Half::Top, ) => 22197,
                ( true, Shape::Straight, Facing::West, Half::Bottom, ) => 22198,
                ( false, Shape::Straight, Facing::West, Half::Bottom, ) => 22199,
                ( true, Shape::InnerLeft, Facing::West, Half::Bottom, ) => 22200,
                ( false, Shape::InnerLeft, Facing::West, Half::Bottom, ) => 22201,
                ( true, Shape::InnerRight, Facing::West, Half::Bottom, ) => 22202,
                ( false, Shape::InnerRight, Facing::West, Half::Bottom, ) => 22203,
                ( true, Shape::OuterLeft, Facing::West, Half::Bottom, ) => 22204,
                ( false, Shape::OuterLeft, Facing::West, Half::Bottom, ) => 22205,
                ( true, Shape::OuterRight, Facing::West, Half::Bottom, ) => 22206,
                ( false, Shape::OuterRight, Facing::West, Half::Bottom, ) => 22207,
                ( true, Shape::Straight, Facing::East, Half::Top, ) => 22208,
                ( false, Shape::Straight, Facing::East, Half::Top, ) => 22209,
                ( true, Shape::InnerLeft, Facing::East, Half::Top, ) => 22210,
                ( false, Shape::InnerLeft, Facing::East, Half::Top, ) => 22211,
                ( true, Shape::InnerRight, Facing::East, Half::Top, ) => 22212,
                ( false, Shape::InnerRight, Facing::East, Half::Top, ) => 22213,
                ( true, Shape::OuterLeft, Facing::East, Half::Top, ) => 22214,
                ( false, Shape::OuterLeft, Facing::East, Half::Top, ) => 22215,
                ( true, Shape::OuterRight, Facing::East, Half::Top, ) => 22216,
                ( false, Shape::OuterRight, Facing::East, Half::Top, ) => 22217,
                ( true, Shape::Straight, Facing::East, Half::Bottom, ) => 22218,
                ( false, Shape::Straight, Facing::East, Half::Bottom, ) => 22219,
                ( true, Shape::InnerLeft, Facing::East, Half::Bottom, ) => 22220,
                ( false, Shape::InnerLeft, Facing::East, Half::Bottom, ) => 22221,
                ( true, Shape::InnerRight, Facing::East, Half::Bottom, ) => 22222,
                ( false, Shape::InnerRight, Facing::East, Half::Bottom, ) => 22223,
                ( true, Shape::OuterLeft, Facing::East, Half::Bottom, ) => 22224,
                ( false, Shape::OuterLeft, Facing::East, Half::Bottom, ) => 22225,
                ( true, Shape::OuterRight, Facing::East, Half::Bottom, ) => 22226,
                ( false, Shape::OuterRight, Facing::East, Half::Bottom, ) => 22227,
            })
        }
    }

    impl From<TuffStairs> for BlockState {
        #[inline(always)]
        fn from(value : TuffStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TuffStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TuffStairs { }

    impl Block for TuffStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            shape : Shape::Straight,
            facing : Facing::North,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:red_concrete` block.
pub mod red_concrete {
    use super::*;

    /// `minecraft:red_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedConcrete;

    impl RedConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13765)
        }
    }

    impl From<RedConcrete> for BlockState {
        #[inline(always)]
        fn from(value : RedConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedConcrete { }

    impl Block for RedConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:weathered_cut_copper` block.
pub mod weathered_cut_copper {
    use super::*;

    /// `minecraft:weathered_cut_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WeatheredCutCopper;

    impl WeatheredCutCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24005)
        }
    }

    impl From<WeatheredCutCopper> for BlockState {
        #[inline(always)]
        fn from(value : WeatheredCutCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WeatheredCutCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WeatheredCutCopper { }

    impl Block for WeatheredCutCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:spawner` block.
pub mod spawner {
    use super::*;

    /// `minecraft:spawner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Spawner;

    impl Spawner {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2919)
        }
    }

    impl From<Spawner> for BlockState {
        #[inline(always)]
        fn from(value : Spawner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Spawner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Spawner { }

    impl Block for Spawner {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:orange_stained_glass` block.
pub mod orange_stained_glass {
    use super::*;

    /// `minecraft:orange_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeStainedGlass;

    impl OrangeStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6125)
        }
    }

    impl From<OrangeStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : OrangeStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeStainedGlass { }

    impl Block for OrangeStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:brown_terracotta` block.
pub mod brown_terracotta {
    use super::*;

    /// `minecraft:brown_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownTerracotta;

    impl BrownTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10177)
        }
    }

    impl From<BrownTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : BrownTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownTerracotta { }

    impl Block for BrownTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dead_brain_coral` block.
pub mod dead_brain_coral {
    use super::*;

    /// `minecraft:dead_brain_coral` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadBrainCoral {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl DeadBrainCoral {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13870,
                ( false, ) => 13871,
            })
        }
    }

    impl From<DeadBrainCoral> for BlockState {
        #[inline(always)]
        fn from(value : DeadBrainCoral) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadBrainCoral {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadBrainCoral { }

    impl Block for DeadBrainCoral {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:granite_wall` block.
pub mod granite_wall {
    use super::*;

    /// `minecraft:granite_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GraniteWall {
        /// `up` state.
        pub up : bool,
        /// `south` state.
        pub south : South,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `east` state.
        pub east : East,
        /// `west` state.
        pub west : West,
        /// `north` state.
        pub north : North,
    }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    impl GraniteWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.up, self.south, self.waterlogged, self.east, self.west, self.north, )) {
                ( true, South::None, true, East::None, West::None, North::None, ) => 16511,
                ( true, South::None, true, East::None, West::Low, North::None, ) => 16512,
                ( true, South::None, true, East::None, West::Tall, North::None, ) => 16513,
                ( true, South::None, false, East::None, West::None, North::None, ) => 16514,
                ( true, South::None, false, East::None, West::Low, North::None, ) => 16515,
                ( true, South::None, false, East::None, West::Tall, North::None, ) => 16516,
                ( false, South::None, true, East::None, West::None, North::None, ) => 16517,
                ( false, South::None, true, East::None, West::Low, North::None, ) => 16518,
                ( false, South::None, true, East::None, West::Tall, North::None, ) => 16519,
                ( false, South::None, false, East::None, West::None, North::None, ) => 16520,
                ( false, South::None, false, East::None, West::Low, North::None, ) => 16521,
                ( false, South::None, false, East::None, West::Tall, North::None, ) => 16522,
                ( true, South::Low, true, East::None, West::None, North::None, ) => 16523,
                ( true, South::Low, true, East::None, West::Low, North::None, ) => 16524,
                ( true, South::Low, true, East::None, West::Tall, North::None, ) => 16525,
                ( true, South::Low, false, East::None, West::None, North::None, ) => 16526,
                ( true, South::Low, false, East::None, West::Low, North::None, ) => 16527,
                ( true, South::Low, false, East::None, West::Tall, North::None, ) => 16528,
                ( false, South::Low, true, East::None, West::None, North::None, ) => 16529,
                ( false, South::Low, true, East::None, West::Low, North::None, ) => 16530,
                ( false, South::Low, true, East::None, West::Tall, North::None, ) => 16531,
                ( false, South::Low, false, East::None, West::None, North::None, ) => 16532,
                ( false, South::Low, false, East::None, West::Low, North::None, ) => 16533,
                ( false, South::Low, false, East::None, West::Tall, North::None, ) => 16534,
                ( true, South::Tall, true, East::None, West::None, North::None, ) => 16535,
                ( true, South::Tall, true, East::None, West::Low, North::None, ) => 16536,
                ( true, South::Tall, true, East::None, West::Tall, North::None, ) => 16537,
                ( true, South::Tall, false, East::None, West::None, North::None, ) => 16538,
                ( true, South::Tall, false, East::None, West::Low, North::None, ) => 16539,
                ( true, South::Tall, false, East::None, West::Tall, North::None, ) => 16540,
                ( false, South::Tall, true, East::None, West::None, North::None, ) => 16541,
                ( false, South::Tall, true, East::None, West::Low, North::None, ) => 16542,
                ( false, South::Tall, true, East::None, West::Tall, North::None, ) => 16543,
                ( false, South::Tall, false, East::None, West::None, North::None, ) => 16544,
                ( false, South::Tall, false, East::None, West::Low, North::None, ) => 16545,
                ( false, South::Tall, false, East::None, West::Tall, North::None, ) => 16546,
                ( true, South::None, true, East::None, West::None, North::Low, ) => 16547,
                ( true, South::None, true, East::None, West::Low, North::Low, ) => 16548,
                ( true, South::None, true, East::None, West::Tall, North::Low, ) => 16549,
                ( true, South::None, false, East::None, West::None, North::Low, ) => 16550,
                ( true, South::None, false, East::None, West::Low, North::Low, ) => 16551,
                ( true, South::None, false, East::None, West::Tall, North::Low, ) => 16552,
                ( false, South::None, true, East::None, West::None, North::Low, ) => 16553,
                ( false, South::None, true, East::None, West::Low, North::Low, ) => 16554,
                ( false, South::None, true, East::None, West::Tall, North::Low, ) => 16555,
                ( false, South::None, false, East::None, West::None, North::Low, ) => 16556,
                ( false, South::None, false, East::None, West::Low, North::Low, ) => 16557,
                ( false, South::None, false, East::None, West::Tall, North::Low, ) => 16558,
                ( true, South::Low, true, East::None, West::None, North::Low, ) => 16559,
                ( true, South::Low, true, East::None, West::Low, North::Low, ) => 16560,
                ( true, South::Low, true, East::None, West::Tall, North::Low, ) => 16561,
                ( true, South::Low, false, East::None, West::None, North::Low, ) => 16562,
                ( true, South::Low, false, East::None, West::Low, North::Low, ) => 16563,
                ( true, South::Low, false, East::None, West::Tall, North::Low, ) => 16564,
                ( false, South::Low, true, East::None, West::None, North::Low, ) => 16565,
                ( false, South::Low, true, East::None, West::Low, North::Low, ) => 16566,
                ( false, South::Low, true, East::None, West::Tall, North::Low, ) => 16567,
                ( false, South::Low, false, East::None, West::None, North::Low, ) => 16568,
                ( false, South::Low, false, East::None, West::Low, North::Low, ) => 16569,
                ( false, South::Low, false, East::None, West::Tall, North::Low, ) => 16570,
                ( true, South::Tall, true, East::None, West::None, North::Low, ) => 16571,
                ( true, South::Tall, true, East::None, West::Low, North::Low, ) => 16572,
                ( true, South::Tall, true, East::None, West::Tall, North::Low, ) => 16573,
                ( true, South::Tall, false, East::None, West::None, North::Low, ) => 16574,
                ( true, South::Tall, false, East::None, West::Low, North::Low, ) => 16575,
                ( true, South::Tall, false, East::None, West::Tall, North::Low, ) => 16576,
                ( false, South::Tall, true, East::None, West::None, North::Low, ) => 16577,
                ( false, South::Tall, true, East::None, West::Low, North::Low, ) => 16578,
                ( false, South::Tall, true, East::None, West::Tall, North::Low, ) => 16579,
                ( false, South::Tall, false, East::None, West::None, North::Low, ) => 16580,
                ( false, South::Tall, false, East::None, West::Low, North::Low, ) => 16581,
                ( false, South::Tall, false, East::None, West::Tall, North::Low, ) => 16582,
                ( true, South::None, true, East::None, West::None, North::Tall, ) => 16583,
                ( true, South::None, true, East::None, West::Low, North::Tall, ) => 16584,
                ( true, South::None, true, East::None, West::Tall, North::Tall, ) => 16585,
                ( true, South::None, false, East::None, West::None, North::Tall, ) => 16586,
                ( true, South::None, false, East::None, West::Low, North::Tall, ) => 16587,
                ( true, South::None, false, East::None, West::Tall, North::Tall, ) => 16588,
                ( false, South::None, true, East::None, West::None, North::Tall, ) => 16589,
                ( false, South::None, true, East::None, West::Low, North::Tall, ) => 16590,
                ( false, South::None, true, East::None, West::Tall, North::Tall, ) => 16591,
                ( false, South::None, false, East::None, West::None, North::Tall, ) => 16592,
                ( false, South::None, false, East::None, West::Low, North::Tall, ) => 16593,
                ( false, South::None, false, East::None, West::Tall, North::Tall, ) => 16594,
                ( true, South::Low, true, East::None, West::None, North::Tall, ) => 16595,
                ( true, South::Low, true, East::None, West::Low, North::Tall, ) => 16596,
                ( true, South::Low, true, East::None, West::Tall, North::Tall, ) => 16597,
                ( true, South::Low, false, East::None, West::None, North::Tall, ) => 16598,
                ( true, South::Low, false, East::None, West::Low, North::Tall, ) => 16599,
                ( true, South::Low, false, East::None, West::Tall, North::Tall, ) => 16600,
                ( false, South::Low, true, East::None, West::None, North::Tall, ) => 16601,
                ( false, South::Low, true, East::None, West::Low, North::Tall, ) => 16602,
                ( false, South::Low, true, East::None, West::Tall, North::Tall, ) => 16603,
                ( false, South::Low, false, East::None, West::None, North::Tall, ) => 16604,
                ( false, South::Low, false, East::None, West::Low, North::Tall, ) => 16605,
                ( false, South::Low, false, East::None, West::Tall, North::Tall, ) => 16606,
                ( true, South::Tall, true, East::None, West::None, North::Tall, ) => 16607,
                ( true, South::Tall, true, East::None, West::Low, North::Tall, ) => 16608,
                ( true, South::Tall, true, East::None, West::Tall, North::Tall, ) => 16609,
                ( true, South::Tall, false, East::None, West::None, North::Tall, ) => 16610,
                ( true, South::Tall, false, East::None, West::Low, North::Tall, ) => 16611,
                ( true, South::Tall, false, East::None, West::Tall, North::Tall, ) => 16612,
                ( false, South::Tall, true, East::None, West::None, North::Tall, ) => 16613,
                ( false, South::Tall, true, East::None, West::Low, North::Tall, ) => 16614,
                ( false, South::Tall, true, East::None, West::Tall, North::Tall, ) => 16615,
                ( false, South::Tall, false, East::None, West::None, North::Tall, ) => 16616,
                ( false, South::Tall, false, East::None, West::Low, North::Tall, ) => 16617,
                ( false, South::Tall, false, East::None, West::Tall, North::Tall, ) => 16618,
                ( true, South::None, true, East::Low, West::None, North::None, ) => 16619,
                ( true, South::None, true, East::Low, West::Low, North::None, ) => 16620,
                ( true, South::None, true, East::Low, West::Tall, North::None, ) => 16621,
                ( true, South::None, false, East::Low, West::None, North::None, ) => 16622,
                ( true, South::None, false, East::Low, West::Low, North::None, ) => 16623,
                ( true, South::None, false, East::Low, West::Tall, North::None, ) => 16624,
                ( false, South::None, true, East::Low, West::None, North::None, ) => 16625,
                ( false, South::None, true, East::Low, West::Low, North::None, ) => 16626,
                ( false, South::None, true, East::Low, West::Tall, North::None, ) => 16627,
                ( false, South::None, false, East::Low, West::None, North::None, ) => 16628,
                ( false, South::None, false, East::Low, West::Low, North::None, ) => 16629,
                ( false, South::None, false, East::Low, West::Tall, North::None, ) => 16630,
                ( true, South::Low, true, East::Low, West::None, North::None, ) => 16631,
                ( true, South::Low, true, East::Low, West::Low, North::None, ) => 16632,
                ( true, South::Low, true, East::Low, West::Tall, North::None, ) => 16633,
                ( true, South::Low, false, East::Low, West::None, North::None, ) => 16634,
                ( true, South::Low, false, East::Low, West::Low, North::None, ) => 16635,
                ( true, South::Low, false, East::Low, West::Tall, North::None, ) => 16636,
                ( false, South::Low, true, East::Low, West::None, North::None, ) => 16637,
                ( false, South::Low, true, East::Low, West::Low, North::None, ) => 16638,
                ( false, South::Low, true, East::Low, West::Tall, North::None, ) => 16639,
                ( false, South::Low, false, East::Low, West::None, North::None, ) => 16640,
                ( false, South::Low, false, East::Low, West::Low, North::None, ) => 16641,
                ( false, South::Low, false, East::Low, West::Tall, North::None, ) => 16642,
                ( true, South::Tall, true, East::Low, West::None, North::None, ) => 16643,
                ( true, South::Tall, true, East::Low, West::Low, North::None, ) => 16644,
                ( true, South::Tall, true, East::Low, West::Tall, North::None, ) => 16645,
                ( true, South::Tall, false, East::Low, West::None, North::None, ) => 16646,
                ( true, South::Tall, false, East::Low, West::Low, North::None, ) => 16647,
                ( true, South::Tall, false, East::Low, West::Tall, North::None, ) => 16648,
                ( false, South::Tall, true, East::Low, West::None, North::None, ) => 16649,
                ( false, South::Tall, true, East::Low, West::Low, North::None, ) => 16650,
                ( false, South::Tall, true, East::Low, West::Tall, North::None, ) => 16651,
                ( false, South::Tall, false, East::Low, West::None, North::None, ) => 16652,
                ( false, South::Tall, false, East::Low, West::Low, North::None, ) => 16653,
                ( false, South::Tall, false, East::Low, West::Tall, North::None, ) => 16654,
                ( true, South::None, true, East::Low, West::None, North::Low, ) => 16655,
                ( true, South::None, true, East::Low, West::Low, North::Low, ) => 16656,
                ( true, South::None, true, East::Low, West::Tall, North::Low, ) => 16657,
                ( true, South::None, false, East::Low, West::None, North::Low, ) => 16658,
                ( true, South::None, false, East::Low, West::Low, North::Low, ) => 16659,
                ( true, South::None, false, East::Low, West::Tall, North::Low, ) => 16660,
                ( false, South::None, true, East::Low, West::None, North::Low, ) => 16661,
                ( false, South::None, true, East::Low, West::Low, North::Low, ) => 16662,
                ( false, South::None, true, East::Low, West::Tall, North::Low, ) => 16663,
                ( false, South::None, false, East::Low, West::None, North::Low, ) => 16664,
                ( false, South::None, false, East::Low, West::Low, North::Low, ) => 16665,
                ( false, South::None, false, East::Low, West::Tall, North::Low, ) => 16666,
                ( true, South::Low, true, East::Low, West::None, North::Low, ) => 16667,
                ( true, South::Low, true, East::Low, West::Low, North::Low, ) => 16668,
                ( true, South::Low, true, East::Low, West::Tall, North::Low, ) => 16669,
                ( true, South::Low, false, East::Low, West::None, North::Low, ) => 16670,
                ( true, South::Low, false, East::Low, West::Low, North::Low, ) => 16671,
                ( true, South::Low, false, East::Low, West::Tall, North::Low, ) => 16672,
                ( false, South::Low, true, East::Low, West::None, North::Low, ) => 16673,
                ( false, South::Low, true, East::Low, West::Low, North::Low, ) => 16674,
                ( false, South::Low, true, East::Low, West::Tall, North::Low, ) => 16675,
                ( false, South::Low, false, East::Low, West::None, North::Low, ) => 16676,
                ( false, South::Low, false, East::Low, West::Low, North::Low, ) => 16677,
                ( false, South::Low, false, East::Low, West::Tall, North::Low, ) => 16678,
                ( true, South::Tall, true, East::Low, West::None, North::Low, ) => 16679,
                ( true, South::Tall, true, East::Low, West::Low, North::Low, ) => 16680,
                ( true, South::Tall, true, East::Low, West::Tall, North::Low, ) => 16681,
                ( true, South::Tall, false, East::Low, West::None, North::Low, ) => 16682,
                ( true, South::Tall, false, East::Low, West::Low, North::Low, ) => 16683,
                ( true, South::Tall, false, East::Low, West::Tall, North::Low, ) => 16684,
                ( false, South::Tall, true, East::Low, West::None, North::Low, ) => 16685,
                ( false, South::Tall, true, East::Low, West::Low, North::Low, ) => 16686,
                ( false, South::Tall, true, East::Low, West::Tall, North::Low, ) => 16687,
                ( false, South::Tall, false, East::Low, West::None, North::Low, ) => 16688,
                ( false, South::Tall, false, East::Low, West::Low, North::Low, ) => 16689,
                ( false, South::Tall, false, East::Low, West::Tall, North::Low, ) => 16690,
                ( true, South::None, true, East::Low, West::None, North::Tall, ) => 16691,
                ( true, South::None, true, East::Low, West::Low, North::Tall, ) => 16692,
                ( true, South::None, true, East::Low, West::Tall, North::Tall, ) => 16693,
                ( true, South::None, false, East::Low, West::None, North::Tall, ) => 16694,
                ( true, South::None, false, East::Low, West::Low, North::Tall, ) => 16695,
                ( true, South::None, false, East::Low, West::Tall, North::Tall, ) => 16696,
                ( false, South::None, true, East::Low, West::None, North::Tall, ) => 16697,
                ( false, South::None, true, East::Low, West::Low, North::Tall, ) => 16698,
                ( false, South::None, true, East::Low, West::Tall, North::Tall, ) => 16699,
                ( false, South::None, false, East::Low, West::None, North::Tall, ) => 16700,
                ( false, South::None, false, East::Low, West::Low, North::Tall, ) => 16701,
                ( false, South::None, false, East::Low, West::Tall, North::Tall, ) => 16702,
                ( true, South::Low, true, East::Low, West::None, North::Tall, ) => 16703,
                ( true, South::Low, true, East::Low, West::Low, North::Tall, ) => 16704,
                ( true, South::Low, true, East::Low, West::Tall, North::Tall, ) => 16705,
                ( true, South::Low, false, East::Low, West::None, North::Tall, ) => 16706,
                ( true, South::Low, false, East::Low, West::Low, North::Tall, ) => 16707,
                ( true, South::Low, false, East::Low, West::Tall, North::Tall, ) => 16708,
                ( false, South::Low, true, East::Low, West::None, North::Tall, ) => 16709,
                ( false, South::Low, true, East::Low, West::Low, North::Tall, ) => 16710,
                ( false, South::Low, true, East::Low, West::Tall, North::Tall, ) => 16711,
                ( false, South::Low, false, East::Low, West::None, North::Tall, ) => 16712,
                ( false, South::Low, false, East::Low, West::Low, North::Tall, ) => 16713,
                ( false, South::Low, false, East::Low, West::Tall, North::Tall, ) => 16714,
                ( true, South::Tall, true, East::Low, West::None, North::Tall, ) => 16715,
                ( true, South::Tall, true, East::Low, West::Low, North::Tall, ) => 16716,
                ( true, South::Tall, true, East::Low, West::Tall, North::Tall, ) => 16717,
                ( true, South::Tall, false, East::Low, West::None, North::Tall, ) => 16718,
                ( true, South::Tall, false, East::Low, West::Low, North::Tall, ) => 16719,
                ( true, South::Tall, false, East::Low, West::Tall, North::Tall, ) => 16720,
                ( false, South::Tall, true, East::Low, West::None, North::Tall, ) => 16721,
                ( false, South::Tall, true, East::Low, West::Low, North::Tall, ) => 16722,
                ( false, South::Tall, true, East::Low, West::Tall, North::Tall, ) => 16723,
                ( false, South::Tall, false, East::Low, West::None, North::Tall, ) => 16724,
                ( false, South::Tall, false, East::Low, West::Low, North::Tall, ) => 16725,
                ( false, South::Tall, false, East::Low, West::Tall, North::Tall, ) => 16726,
                ( true, South::None, true, East::Tall, West::None, North::None, ) => 16727,
                ( true, South::None, true, East::Tall, West::Low, North::None, ) => 16728,
                ( true, South::None, true, East::Tall, West::Tall, North::None, ) => 16729,
                ( true, South::None, false, East::Tall, West::None, North::None, ) => 16730,
                ( true, South::None, false, East::Tall, West::Low, North::None, ) => 16731,
                ( true, South::None, false, East::Tall, West::Tall, North::None, ) => 16732,
                ( false, South::None, true, East::Tall, West::None, North::None, ) => 16733,
                ( false, South::None, true, East::Tall, West::Low, North::None, ) => 16734,
                ( false, South::None, true, East::Tall, West::Tall, North::None, ) => 16735,
                ( false, South::None, false, East::Tall, West::None, North::None, ) => 16736,
                ( false, South::None, false, East::Tall, West::Low, North::None, ) => 16737,
                ( false, South::None, false, East::Tall, West::Tall, North::None, ) => 16738,
                ( true, South::Low, true, East::Tall, West::None, North::None, ) => 16739,
                ( true, South::Low, true, East::Tall, West::Low, North::None, ) => 16740,
                ( true, South::Low, true, East::Tall, West::Tall, North::None, ) => 16741,
                ( true, South::Low, false, East::Tall, West::None, North::None, ) => 16742,
                ( true, South::Low, false, East::Tall, West::Low, North::None, ) => 16743,
                ( true, South::Low, false, East::Tall, West::Tall, North::None, ) => 16744,
                ( false, South::Low, true, East::Tall, West::None, North::None, ) => 16745,
                ( false, South::Low, true, East::Tall, West::Low, North::None, ) => 16746,
                ( false, South::Low, true, East::Tall, West::Tall, North::None, ) => 16747,
                ( false, South::Low, false, East::Tall, West::None, North::None, ) => 16748,
                ( false, South::Low, false, East::Tall, West::Low, North::None, ) => 16749,
                ( false, South::Low, false, East::Tall, West::Tall, North::None, ) => 16750,
                ( true, South::Tall, true, East::Tall, West::None, North::None, ) => 16751,
                ( true, South::Tall, true, East::Tall, West::Low, North::None, ) => 16752,
                ( true, South::Tall, true, East::Tall, West::Tall, North::None, ) => 16753,
                ( true, South::Tall, false, East::Tall, West::None, North::None, ) => 16754,
                ( true, South::Tall, false, East::Tall, West::Low, North::None, ) => 16755,
                ( true, South::Tall, false, East::Tall, West::Tall, North::None, ) => 16756,
                ( false, South::Tall, true, East::Tall, West::None, North::None, ) => 16757,
                ( false, South::Tall, true, East::Tall, West::Low, North::None, ) => 16758,
                ( false, South::Tall, true, East::Tall, West::Tall, North::None, ) => 16759,
                ( false, South::Tall, false, East::Tall, West::None, North::None, ) => 16760,
                ( false, South::Tall, false, East::Tall, West::Low, North::None, ) => 16761,
                ( false, South::Tall, false, East::Tall, West::Tall, North::None, ) => 16762,
                ( true, South::None, true, East::Tall, West::None, North::Low, ) => 16763,
                ( true, South::None, true, East::Tall, West::Low, North::Low, ) => 16764,
                ( true, South::None, true, East::Tall, West::Tall, North::Low, ) => 16765,
                ( true, South::None, false, East::Tall, West::None, North::Low, ) => 16766,
                ( true, South::None, false, East::Tall, West::Low, North::Low, ) => 16767,
                ( true, South::None, false, East::Tall, West::Tall, North::Low, ) => 16768,
                ( false, South::None, true, East::Tall, West::None, North::Low, ) => 16769,
                ( false, South::None, true, East::Tall, West::Low, North::Low, ) => 16770,
                ( false, South::None, true, East::Tall, West::Tall, North::Low, ) => 16771,
                ( false, South::None, false, East::Tall, West::None, North::Low, ) => 16772,
                ( false, South::None, false, East::Tall, West::Low, North::Low, ) => 16773,
                ( false, South::None, false, East::Tall, West::Tall, North::Low, ) => 16774,
                ( true, South::Low, true, East::Tall, West::None, North::Low, ) => 16775,
                ( true, South::Low, true, East::Tall, West::Low, North::Low, ) => 16776,
                ( true, South::Low, true, East::Tall, West::Tall, North::Low, ) => 16777,
                ( true, South::Low, false, East::Tall, West::None, North::Low, ) => 16778,
                ( true, South::Low, false, East::Tall, West::Low, North::Low, ) => 16779,
                ( true, South::Low, false, East::Tall, West::Tall, North::Low, ) => 16780,
                ( false, South::Low, true, East::Tall, West::None, North::Low, ) => 16781,
                ( false, South::Low, true, East::Tall, West::Low, North::Low, ) => 16782,
                ( false, South::Low, true, East::Tall, West::Tall, North::Low, ) => 16783,
                ( false, South::Low, false, East::Tall, West::None, North::Low, ) => 16784,
                ( false, South::Low, false, East::Tall, West::Low, North::Low, ) => 16785,
                ( false, South::Low, false, East::Tall, West::Tall, North::Low, ) => 16786,
                ( true, South::Tall, true, East::Tall, West::None, North::Low, ) => 16787,
                ( true, South::Tall, true, East::Tall, West::Low, North::Low, ) => 16788,
                ( true, South::Tall, true, East::Tall, West::Tall, North::Low, ) => 16789,
                ( true, South::Tall, false, East::Tall, West::None, North::Low, ) => 16790,
                ( true, South::Tall, false, East::Tall, West::Low, North::Low, ) => 16791,
                ( true, South::Tall, false, East::Tall, West::Tall, North::Low, ) => 16792,
                ( false, South::Tall, true, East::Tall, West::None, North::Low, ) => 16793,
                ( false, South::Tall, true, East::Tall, West::Low, North::Low, ) => 16794,
                ( false, South::Tall, true, East::Tall, West::Tall, North::Low, ) => 16795,
                ( false, South::Tall, false, East::Tall, West::None, North::Low, ) => 16796,
                ( false, South::Tall, false, East::Tall, West::Low, North::Low, ) => 16797,
                ( false, South::Tall, false, East::Tall, West::Tall, North::Low, ) => 16798,
                ( true, South::None, true, East::Tall, West::None, North::Tall, ) => 16799,
                ( true, South::None, true, East::Tall, West::Low, North::Tall, ) => 16800,
                ( true, South::None, true, East::Tall, West::Tall, North::Tall, ) => 16801,
                ( true, South::None, false, East::Tall, West::None, North::Tall, ) => 16802,
                ( true, South::None, false, East::Tall, West::Low, North::Tall, ) => 16803,
                ( true, South::None, false, East::Tall, West::Tall, North::Tall, ) => 16804,
                ( false, South::None, true, East::Tall, West::None, North::Tall, ) => 16805,
                ( false, South::None, true, East::Tall, West::Low, North::Tall, ) => 16806,
                ( false, South::None, true, East::Tall, West::Tall, North::Tall, ) => 16807,
                ( false, South::None, false, East::Tall, West::None, North::Tall, ) => 16808,
                ( false, South::None, false, East::Tall, West::Low, North::Tall, ) => 16809,
                ( false, South::None, false, East::Tall, West::Tall, North::Tall, ) => 16810,
                ( true, South::Low, true, East::Tall, West::None, North::Tall, ) => 16811,
                ( true, South::Low, true, East::Tall, West::Low, North::Tall, ) => 16812,
                ( true, South::Low, true, East::Tall, West::Tall, North::Tall, ) => 16813,
                ( true, South::Low, false, East::Tall, West::None, North::Tall, ) => 16814,
                ( true, South::Low, false, East::Tall, West::Low, North::Tall, ) => 16815,
                ( true, South::Low, false, East::Tall, West::Tall, North::Tall, ) => 16816,
                ( false, South::Low, true, East::Tall, West::None, North::Tall, ) => 16817,
                ( false, South::Low, true, East::Tall, West::Low, North::Tall, ) => 16818,
                ( false, South::Low, true, East::Tall, West::Tall, North::Tall, ) => 16819,
                ( false, South::Low, false, East::Tall, West::None, North::Tall, ) => 16820,
                ( false, South::Low, false, East::Tall, West::Low, North::Tall, ) => 16821,
                ( false, South::Low, false, East::Tall, West::Tall, North::Tall, ) => 16822,
                ( true, South::Tall, true, East::Tall, West::None, North::Tall, ) => 16823,
                ( true, South::Tall, true, East::Tall, West::Low, North::Tall, ) => 16824,
                ( true, South::Tall, true, East::Tall, West::Tall, North::Tall, ) => 16825,
                ( true, South::Tall, false, East::Tall, West::None, North::Tall, ) => 16826,
                ( true, South::Tall, false, East::Tall, West::Low, North::Tall, ) => 16827,
                ( true, South::Tall, false, East::Tall, West::Tall, North::Tall, ) => 16828,
                ( false, South::Tall, true, East::Tall, West::None, North::Tall, ) => 16829,
                ( false, South::Tall, true, East::Tall, West::Low, North::Tall, ) => 16830,
                ( false, South::Tall, true, East::Tall, West::Tall, North::Tall, ) => 16831,
                ( false, South::Tall, false, East::Tall, West::None, North::Tall, ) => 16832,
                ( false, South::Tall, false, East::Tall, West::Low, North::Tall, ) => 16833,
                ( false, South::Tall, false, East::Tall, West::Tall, North::Tall, ) => 16834,
            })
        }
    }

    impl From<GraniteWall> for BlockState {
        #[inline(always)]
        fn from(value : GraniteWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GraniteWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GraniteWall { }

    impl Block for GraniteWall {
        const DEFAULT_STATE : Self = Self {
            up : true,
            south : South::None,
            waterlogged : false,
            east : East::None,
            west : West::None,
            north : North::None,
        };
    }

}

/// `minecraft:polished_granite_stairs` block.
pub mod polished_granite_stairs {
    use super::*;

    /// `minecraft:polished_granite_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedGraniteStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl PolishedGraniteStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.facing, self.half, self.waterlogged, )) {
                ( Shape::Straight, Facing::North, Half::Top, true, ) => 14017,
                ( Shape::Straight, Facing::North, Half::Top, false, ) => 14018,
                ( Shape::InnerLeft, Facing::North, Half::Top, true, ) => 14019,
                ( Shape::InnerLeft, Facing::North, Half::Top, false, ) => 14020,
                ( Shape::InnerRight, Facing::North, Half::Top, true, ) => 14021,
                ( Shape::InnerRight, Facing::North, Half::Top, false, ) => 14022,
                ( Shape::OuterLeft, Facing::North, Half::Top, true, ) => 14023,
                ( Shape::OuterLeft, Facing::North, Half::Top, false, ) => 14024,
                ( Shape::OuterRight, Facing::North, Half::Top, true, ) => 14025,
                ( Shape::OuterRight, Facing::North, Half::Top, false, ) => 14026,
                ( Shape::Straight, Facing::North, Half::Bottom, true, ) => 14027,
                ( Shape::Straight, Facing::North, Half::Bottom, false, ) => 14028,
                ( Shape::InnerLeft, Facing::North, Half::Bottom, true, ) => 14029,
                ( Shape::InnerLeft, Facing::North, Half::Bottom, false, ) => 14030,
                ( Shape::InnerRight, Facing::North, Half::Bottom, true, ) => 14031,
                ( Shape::InnerRight, Facing::North, Half::Bottom, false, ) => 14032,
                ( Shape::OuterLeft, Facing::North, Half::Bottom, true, ) => 14033,
                ( Shape::OuterLeft, Facing::North, Half::Bottom, false, ) => 14034,
                ( Shape::OuterRight, Facing::North, Half::Bottom, true, ) => 14035,
                ( Shape::OuterRight, Facing::North, Half::Bottom, false, ) => 14036,
                ( Shape::Straight, Facing::South, Half::Top, true, ) => 14037,
                ( Shape::Straight, Facing::South, Half::Top, false, ) => 14038,
                ( Shape::InnerLeft, Facing::South, Half::Top, true, ) => 14039,
                ( Shape::InnerLeft, Facing::South, Half::Top, false, ) => 14040,
                ( Shape::InnerRight, Facing::South, Half::Top, true, ) => 14041,
                ( Shape::InnerRight, Facing::South, Half::Top, false, ) => 14042,
                ( Shape::OuterLeft, Facing::South, Half::Top, true, ) => 14043,
                ( Shape::OuterLeft, Facing::South, Half::Top, false, ) => 14044,
                ( Shape::OuterRight, Facing::South, Half::Top, true, ) => 14045,
                ( Shape::OuterRight, Facing::South, Half::Top, false, ) => 14046,
                ( Shape::Straight, Facing::South, Half::Bottom, true, ) => 14047,
                ( Shape::Straight, Facing::South, Half::Bottom, false, ) => 14048,
                ( Shape::InnerLeft, Facing::South, Half::Bottom, true, ) => 14049,
                ( Shape::InnerLeft, Facing::South, Half::Bottom, false, ) => 14050,
                ( Shape::InnerRight, Facing::South, Half::Bottom, true, ) => 14051,
                ( Shape::InnerRight, Facing::South, Half::Bottom, false, ) => 14052,
                ( Shape::OuterLeft, Facing::South, Half::Bottom, true, ) => 14053,
                ( Shape::OuterLeft, Facing::South, Half::Bottom, false, ) => 14054,
                ( Shape::OuterRight, Facing::South, Half::Bottom, true, ) => 14055,
                ( Shape::OuterRight, Facing::South, Half::Bottom, false, ) => 14056,
                ( Shape::Straight, Facing::West, Half::Top, true, ) => 14057,
                ( Shape::Straight, Facing::West, Half::Top, false, ) => 14058,
                ( Shape::InnerLeft, Facing::West, Half::Top, true, ) => 14059,
                ( Shape::InnerLeft, Facing::West, Half::Top, false, ) => 14060,
                ( Shape::InnerRight, Facing::West, Half::Top, true, ) => 14061,
                ( Shape::InnerRight, Facing::West, Half::Top, false, ) => 14062,
                ( Shape::OuterLeft, Facing::West, Half::Top, true, ) => 14063,
                ( Shape::OuterLeft, Facing::West, Half::Top, false, ) => 14064,
                ( Shape::OuterRight, Facing::West, Half::Top, true, ) => 14065,
                ( Shape::OuterRight, Facing::West, Half::Top, false, ) => 14066,
                ( Shape::Straight, Facing::West, Half::Bottom, true, ) => 14067,
                ( Shape::Straight, Facing::West, Half::Bottom, false, ) => 14068,
                ( Shape::InnerLeft, Facing::West, Half::Bottom, true, ) => 14069,
                ( Shape::InnerLeft, Facing::West, Half::Bottom, false, ) => 14070,
                ( Shape::InnerRight, Facing::West, Half::Bottom, true, ) => 14071,
                ( Shape::InnerRight, Facing::West, Half::Bottom, false, ) => 14072,
                ( Shape::OuterLeft, Facing::West, Half::Bottom, true, ) => 14073,
                ( Shape::OuterLeft, Facing::West, Half::Bottom, false, ) => 14074,
                ( Shape::OuterRight, Facing::West, Half::Bottom, true, ) => 14075,
                ( Shape::OuterRight, Facing::West, Half::Bottom, false, ) => 14076,
                ( Shape::Straight, Facing::East, Half::Top, true, ) => 14077,
                ( Shape::Straight, Facing::East, Half::Top, false, ) => 14078,
                ( Shape::InnerLeft, Facing::East, Half::Top, true, ) => 14079,
                ( Shape::InnerLeft, Facing::East, Half::Top, false, ) => 14080,
                ( Shape::InnerRight, Facing::East, Half::Top, true, ) => 14081,
                ( Shape::InnerRight, Facing::East, Half::Top, false, ) => 14082,
                ( Shape::OuterLeft, Facing::East, Half::Top, true, ) => 14083,
                ( Shape::OuterLeft, Facing::East, Half::Top, false, ) => 14084,
                ( Shape::OuterRight, Facing::East, Half::Top, true, ) => 14085,
                ( Shape::OuterRight, Facing::East, Half::Top, false, ) => 14086,
                ( Shape::Straight, Facing::East, Half::Bottom, true, ) => 14087,
                ( Shape::Straight, Facing::East, Half::Bottom, false, ) => 14088,
                ( Shape::InnerLeft, Facing::East, Half::Bottom, true, ) => 14089,
                ( Shape::InnerLeft, Facing::East, Half::Bottom, false, ) => 14090,
                ( Shape::InnerRight, Facing::East, Half::Bottom, true, ) => 14091,
                ( Shape::InnerRight, Facing::East, Half::Bottom, false, ) => 14092,
                ( Shape::OuterLeft, Facing::East, Half::Bottom, true, ) => 14093,
                ( Shape::OuterLeft, Facing::East, Half::Bottom, false, ) => 14094,
                ( Shape::OuterRight, Facing::East, Half::Bottom, true, ) => 14095,
                ( Shape::OuterRight, Facing::East, Half::Bottom, false, ) => 14096,
            })
        }
    }

    impl From<PolishedGraniteStairs> for BlockState {
        #[inline(always)]
        fn from(value : PolishedGraniteStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedGraniteStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedGraniteStairs { }

    impl Block for PolishedGraniteStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            facing : Facing::North,
            half : Half::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:deepslate_redstone_ore` block.
pub mod deepslate_redstone_ore {
    use super::*;

    /// `minecraft:deepslate_redstone_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateRedstoneOre {
        /// `lit` state.
        pub lit : bool,
    }

    impl DeepslateRedstoneOre {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 5914,
                ( false, ) => 5915,
            })
        }
    }

    impl From<DeepslateRedstoneOre> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateRedstoneOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateRedstoneOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateRedstoneOre { }

    impl Block for DeepslateRedstoneOre {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:bamboo_trapdoor` block.
pub mod bamboo_trapdoor {
    use super::*;

    /// `minecraft:bamboo_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooTrapdoor {
        /// `open` state.
        pub open : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl BambooTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.open, self.facing, self.powered, self.waterlogged, self.half, )) {
                ( true, Facing::North, true, true, Half::Top, ) => 6716,
                ( true, Facing::North, true, false, Half::Top, ) => 6717,
                ( true, Facing::North, false, true, Half::Top, ) => 6718,
                ( true, Facing::North, false, false, Half::Top, ) => 6719,
                ( false, Facing::North, true, true, Half::Top, ) => 6720,
                ( false, Facing::North, true, false, Half::Top, ) => 6721,
                ( false, Facing::North, false, true, Half::Top, ) => 6722,
                ( false, Facing::North, false, false, Half::Top, ) => 6723,
                ( true, Facing::North, true, true, Half::Bottom, ) => 6724,
                ( true, Facing::North, true, false, Half::Bottom, ) => 6725,
                ( true, Facing::North, false, true, Half::Bottom, ) => 6726,
                ( true, Facing::North, false, false, Half::Bottom, ) => 6727,
                ( false, Facing::North, true, true, Half::Bottom, ) => 6728,
                ( false, Facing::North, true, false, Half::Bottom, ) => 6729,
                ( false, Facing::North, false, true, Half::Bottom, ) => 6730,
                ( false, Facing::North, false, false, Half::Bottom, ) => 6731,
                ( true, Facing::South, true, true, Half::Top, ) => 6732,
                ( true, Facing::South, true, false, Half::Top, ) => 6733,
                ( true, Facing::South, false, true, Half::Top, ) => 6734,
                ( true, Facing::South, false, false, Half::Top, ) => 6735,
                ( false, Facing::South, true, true, Half::Top, ) => 6736,
                ( false, Facing::South, true, false, Half::Top, ) => 6737,
                ( false, Facing::South, false, true, Half::Top, ) => 6738,
                ( false, Facing::South, false, false, Half::Top, ) => 6739,
                ( true, Facing::South, true, true, Half::Bottom, ) => 6740,
                ( true, Facing::South, true, false, Half::Bottom, ) => 6741,
                ( true, Facing::South, false, true, Half::Bottom, ) => 6742,
                ( true, Facing::South, false, false, Half::Bottom, ) => 6743,
                ( false, Facing::South, true, true, Half::Bottom, ) => 6744,
                ( false, Facing::South, true, false, Half::Bottom, ) => 6745,
                ( false, Facing::South, false, true, Half::Bottom, ) => 6746,
                ( false, Facing::South, false, false, Half::Bottom, ) => 6747,
                ( true, Facing::West, true, true, Half::Top, ) => 6748,
                ( true, Facing::West, true, false, Half::Top, ) => 6749,
                ( true, Facing::West, false, true, Half::Top, ) => 6750,
                ( true, Facing::West, false, false, Half::Top, ) => 6751,
                ( false, Facing::West, true, true, Half::Top, ) => 6752,
                ( false, Facing::West, true, false, Half::Top, ) => 6753,
                ( false, Facing::West, false, true, Half::Top, ) => 6754,
                ( false, Facing::West, false, false, Half::Top, ) => 6755,
                ( true, Facing::West, true, true, Half::Bottom, ) => 6756,
                ( true, Facing::West, true, false, Half::Bottom, ) => 6757,
                ( true, Facing::West, false, true, Half::Bottom, ) => 6758,
                ( true, Facing::West, false, false, Half::Bottom, ) => 6759,
                ( false, Facing::West, true, true, Half::Bottom, ) => 6760,
                ( false, Facing::West, true, false, Half::Bottom, ) => 6761,
                ( false, Facing::West, false, true, Half::Bottom, ) => 6762,
                ( false, Facing::West, false, false, Half::Bottom, ) => 6763,
                ( true, Facing::East, true, true, Half::Top, ) => 6764,
                ( true, Facing::East, true, false, Half::Top, ) => 6765,
                ( true, Facing::East, false, true, Half::Top, ) => 6766,
                ( true, Facing::East, false, false, Half::Top, ) => 6767,
                ( false, Facing::East, true, true, Half::Top, ) => 6768,
                ( false, Facing::East, true, false, Half::Top, ) => 6769,
                ( false, Facing::East, false, true, Half::Top, ) => 6770,
                ( false, Facing::East, false, false, Half::Top, ) => 6771,
                ( true, Facing::East, true, true, Half::Bottom, ) => 6772,
                ( true, Facing::East, true, false, Half::Bottom, ) => 6773,
                ( true, Facing::East, false, true, Half::Bottom, ) => 6774,
                ( true, Facing::East, false, false, Half::Bottom, ) => 6775,
                ( false, Facing::East, true, true, Half::Bottom, ) => 6776,
                ( false, Facing::East, true, false, Half::Bottom, ) => 6777,
                ( false, Facing::East, false, true, Half::Bottom, ) => 6778,
                ( false, Facing::East, false, false, Half::Bottom, ) => 6779,
            })
        }
    }

    impl From<BambooTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : BambooTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooTrapdoor { }

    impl Block for BambooTrapdoor {
        const DEFAULT_STATE : Self = Self {
            open : false,
            facing : Facing::North,
            powered : false,
            waterlogged : false,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:sugar_cane` block.
pub mod sugar_cane {
    use super::*;

    /// `minecraft:sugar_cane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SugarCane {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl SugarCane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 5978,
                ( Age::N1, ) => 5979,
                ( Age::N2, ) => 5980,
                ( Age::N3, ) => 5981,
                ( Age::N4, ) => 5982,
                ( Age::N5, ) => 5983,
                ( Age::N6, ) => 5984,
                ( Age::N7, ) => 5985,
                ( Age::N8, ) => 5986,
                ( Age::N9, ) => 5987,
                ( Age::N10, ) => 5988,
                ( Age::N11, ) => 5989,
                ( Age::N12, ) => 5990,
                ( Age::N13, ) => 5991,
                ( Age::N14, ) => 5992,
                ( Age::N15, ) => 5993,
            })
        }
    }

    impl From<SugarCane> for BlockState {
        #[inline(always)]
        fn from(value : SugarCane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SugarCane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SugarCane { }

    impl Block for SugarCane {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:redstone_lamp` block.
pub mod redstone_lamp {
    use super::*;

    /// `minecraft:redstone_lamp` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedstoneLamp {
        /// `lit` state.
        pub lit : bool,
    }

    impl RedstoneLamp {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 8201,
                ( false, ) => 8202,
            })
        }
    }

    impl From<RedstoneLamp> for BlockState {
        #[inline(always)]
        fn from(value : RedstoneLamp) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedstoneLamp {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedstoneLamp { }

    impl Block for RedstoneLamp {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:pink_shulker_box` block.
pub mod pink_shulker_box {
    use super::*;

    /// `minecraft:pink_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PinkShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13627,
                ( Facing::East, ) => 13628,
                ( Facing::South, ) => 13629,
                ( Facing::West, ) => 13630,
                ( Facing::Up, ) => 13631,
                ( Facing::Down, ) => 13632,
            })
        }
    }

    impl From<PinkShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : PinkShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkShulkerBox { }

    impl Block for PinkShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:piglin_head` block.
pub mod piglin_head {
    use super::*;

    /// `minecraft:piglin_head` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PiglinHead {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `powered` state.
        pub powered : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl PiglinHead {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.powered, )) {
                ( Rotation::N0, true, ) => 9876,
                ( Rotation::N1, true, ) => 9877,
                ( Rotation::N2, true, ) => 9878,
                ( Rotation::N3, true, ) => 9879,
                ( Rotation::N4, true, ) => 9880,
                ( Rotation::N5, true, ) => 9881,
                ( Rotation::N6, true, ) => 9882,
                ( Rotation::N7, true, ) => 9883,
                ( Rotation::N8, true, ) => 9884,
                ( Rotation::N9, true, ) => 9885,
                ( Rotation::N10, true, ) => 9886,
                ( Rotation::N11, true, ) => 9887,
                ( Rotation::N12, true, ) => 9888,
                ( Rotation::N13, true, ) => 9889,
                ( Rotation::N14, true, ) => 9890,
                ( Rotation::N15, true, ) => 9891,
                ( Rotation::N0, false, ) => 9892,
                ( Rotation::N1, false, ) => 9893,
                ( Rotation::N2, false, ) => 9894,
                ( Rotation::N3, false, ) => 9895,
                ( Rotation::N4, false, ) => 9896,
                ( Rotation::N5, false, ) => 9897,
                ( Rotation::N6, false, ) => 9898,
                ( Rotation::N7, false, ) => 9899,
                ( Rotation::N8, false, ) => 9900,
                ( Rotation::N9, false, ) => 9901,
                ( Rotation::N10, false, ) => 9902,
                ( Rotation::N11, false, ) => 9903,
                ( Rotation::N12, false, ) => 9904,
                ( Rotation::N13, false, ) => 9905,
                ( Rotation::N14, false, ) => 9906,
                ( Rotation::N15, false, ) => 9907,
            })
        }
    }

    impl From<PiglinHead> for BlockState {
        #[inline(always)]
        fn from(value : PiglinHead) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PiglinHead {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PiglinHead { }

    impl Block for PiglinHead {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            powered : false,
        };
    }

}

/// `minecraft:seagrass` block.
pub mod seagrass {
    use super::*;

    /// `minecraft:seagrass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Seagrass;

    impl Seagrass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2054)
        }
    }

    impl From<Seagrass> for BlockState {
        #[inline(always)]
        fn from(value : Seagrass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Seagrass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Seagrass { }

    impl Block for Seagrass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cobbled_deepslate_slab` block.
pub mod cobbled_deepslate_slab {
    use super::*;

    /// `minecraft:cobbled_deepslate_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CobbledDeepslateSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl CobbledDeepslateSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 26080,
                ( false, Kind::Top, ) => 26081,
                ( true, Kind::Bottom, ) => 26082,
                ( false, Kind::Bottom, ) => 26083,
                ( true, Kind::Double, ) => 26084,
                ( false, Kind::Double, ) => 26085,
            })
        }
    }

    impl From<CobbledDeepslateSlab> for BlockState {
        #[inline(always)]
        fn from(value : CobbledDeepslateSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CobbledDeepslateSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CobbledDeepslateSlab { }

    impl Block for CobbledDeepslateSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:cave_vines_plant` block.
pub mod cave_vines_plant {
    use super::*;

    /// `minecraft:cave_vines_plant` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CaveVinesPlant {
        /// `berries` state.
        pub berries : bool,
    }

    impl CaveVinesPlant {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.berries, )) {
                ( true, ) => 25881,
                ( false, ) => 25882,
            })
        }
    }

    impl From<CaveVinesPlant> for BlockState {
        #[inline(always)]
        fn from(value : CaveVinesPlant) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CaveVinesPlant {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CaveVinesPlant { }

    impl Block for CaveVinesPlant {
        const DEFAULT_STATE : Self = Self {
            berries : false,
        };
    }

}

/// `minecraft:blackstone_stairs` block.
pub mod blackstone_stairs {
    use super::*;

    /// `minecraft:blackstone_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackstoneStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl BlackstoneStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.facing, self.half, self.waterlogged, )) {
                ( Shape::Straight, Facing::North, Half::Top, true, ) => 20521,
                ( Shape::Straight, Facing::North, Half::Top, false, ) => 20522,
                ( Shape::InnerLeft, Facing::North, Half::Top, true, ) => 20523,
                ( Shape::InnerLeft, Facing::North, Half::Top, false, ) => 20524,
                ( Shape::InnerRight, Facing::North, Half::Top, true, ) => 20525,
                ( Shape::InnerRight, Facing::North, Half::Top, false, ) => 20526,
                ( Shape::OuterLeft, Facing::North, Half::Top, true, ) => 20527,
                ( Shape::OuterLeft, Facing::North, Half::Top, false, ) => 20528,
                ( Shape::OuterRight, Facing::North, Half::Top, true, ) => 20529,
                ( Shape::OuterRight, Facing::North, Half::Top, false, ) => 20530,
                ( Shape::Straight, Facing::North, Half::Bottom, true, ) => 20531,
                ( Shape::Straight, Facing::North, Half::Bottom, false, ) => 20532,
                ( Shape::InnerLeft, Facing::North, Half::Bottom, true, ) => 20533,
                ( Shape::InnerLeft, Facing::North, Half::Bottom, false, ) => 20534,
                ( Shape::InnerRight, Facing::North, Half::Bottom, true, ) => 20535,
                ( Shape::InnerRight, Facing::North, Half::Bottom, false, ) => 20536,
                ( Shape::OuterLeft, Facing::North, Half::Bottom, true, ) => 20537,
                ( Shape::OuterLeft, Facing::North, Half::Bottom, false, ) => 20538,
                ( Shape::OuterRight, Facing::North, Half::Bottom, true, ) => 20539,
                ( Shape::OuterRight, Facing::North, Half::Bottom, false, ) => 20540,
                ( Shape::Straight, Facing::South, Half::Top, true, ) => 20541,
                ( Shape::Straight, Facing::South, Half::Top, false, ) => 20542,
                ( Shape::InnerLeft, Facing::South, Half::Top, true, ) => 20543,
                ( Shape::InnerLeft, Facing::South, Half::Top, false, ) => 20544,
                ( Shape::InnerRight, Facing::South, Half::Top, true, ) => 20545,
                ( Shape::InnerRight, Facing::South, Half::Top, false, ) => 20546,
                ( Shape::OuterLeft, Facing::South, Half::Top, true, ) => 20547,
                ( Shape::OuterLeft, Facing::South, Half::Top, false, ) => 20548,
                ( Shape::OuterRight, Facing::South, Half::Top, true, ) => 20549,
                ( Shape::OuterRight, Facing::South, Half::Top, false, ) => 20550,
                ( Shape::Straight, Facing::South, Half::Bottom, true, ) => 20551,
                ( Shape::Straight, Facing::South, Half::Bottom, false, ) => 20552,
                ( Shape::InnerLeft, Facing::South, Half::Bottom, true, ) => 20553,
                ( Shape::InnerLeft, Facing::South, Half::Bottom, false, ) => 20554,
                ( Shape::InnerRight, Facing::South, Half::Bottom, true, ) => 20555,
                ( Shape::InnerRight, Facing::South, Half::Bottom, false, ) => 20556,
                ( Shape::OuterLeft, Facing::South, Half::Bottom, true, ) => 20557,
                ( Shape::OuterLeft, Facing::South, Half::Bottom, false, ) => 20558,
                ( Shape::OuterRight, Facing::South, Half::Bottom, true, ) => 20559,
                ( Shape::OuterRight, Facing::South, Half::Bottom, false, ) => 20560,
                ( Shape::Straight, Facing::West, Half::Top, true, ) => 20561,
                ( Shape::Straight, Facing::West, Half::Top, false, ) => 20562,
                ( Shape::InnerLeft, Facing::West, Half::Top, true, ) => 20563,
                ( Shape::InnerLeft, Facing::West, Half::Top, false, ) => 20564,
                ( Shape::InnerRight, Facing::West, Half::Top, true, ) => 20565,
                ( Shape::InnerRight, Facing::West, Half::Top, false, ) => 20566,
                ( Shape::OuterLeft, Facing::West, Half::Top, true, ) => 20567,
                ( Shape::OuterLeft, Facing::West, Half::Top, false, ) => 20568,
                ( Shape::OuterRight, Facing::West, Half::Top, true, ) => 20569,
                ( Shape::OuterRight, Facing::West, Half::Top, false, ) => 20570,
                ( Shape::Straight, Facing::West, Half::Bottom, true, ) => 20571,
                ( Shape::Straight, Facing::West, Half::Bottom, false, ) => 20572,
                ( Shape::InnerLeft, Facing::West, Half::Bottom, true, ) => 20573,
                ( Shape::InnerLeft, Facing::West, Half::Bottom, false, ) => 20574,
                ( Shape::InnerRight, Facing::West, Half::Bottom, true, ) => 20575,
                ( Shape::InnerRight, Facing::West, Half::Bottom, false, ) => 20576,
                ( Shape::OuterLeft, Facing::West, Half::Bottom, true, ) => 20577,
                ( Shape::OuterLeft, Facing::West, Half::Bottom, false, ) => 20578,
                ( Shape::OuterRight, Facing::West, Half::Bottom, true, ) => 20579,
                ( Shape::OuterRight, Facing::West, Half::Bottom, false, ) => 20580,
                ( Shape::Straight, Facing::East, Half::Top, true, ) => 20581,
                ( Shape::Straight, Facing::East, Half::Top, false, ) => 20582,
                ( Shape::InnerLeft, Facing::East, Half::Top, true, ) => 20583,
                ( Shape::InnerLeft, Facing::East, Half::Top, false, ) => 20584,
                ( Shape::InnerRight, Facing::East, Half::Top, true, ) => 20585,
                ( Shape::InnerRight, Facing::East, Half::Top, false, ) => 20586,
                ( Shape::OuterLeft, Facing::East, Half::Top, true, ) => 20587,
                ( Shape::OuterLeft, Facing::East, Half::Top, false, ) => 20588,
                ( Shape::OuterRight, Facing::East, Half::Top, true, ) => 20589,
                ( Shape::OuterRight, Facing::East, Half::Top, false, ) => 20590,
                ( Shape::Straight, Facing::East, Half::Bottom, true, ) => 20591,
                ( Shape::Straight, Facing::East, Half::Bottom, false, ) => 20592,
                ( Shape::InnerLeft, Facing::East, Half::Bottom, true, ) => 20593,
                ( Shape::InnerLeft, Facing::East, Half::Bottom, false, ) => 20594,
                ( Shape::InnerRight, Facing::East, Half::Bottom, true, ) => 20595,
                ( Shape::InnerRight, Facing::East, Half::Bottom, false, ) => 20596,
                ( Shape::OuterLeft, Facing::East, Half::Bottom, true, ) => 20597,
                ( Shape::OuterLeft, Facing::East, Half::Bottom, false, ) => 20598,
                ( Shape::OuterRight, Facing::East, Half::Bottom, true, ) => 20599,
                ( Shape::OuterRight, Facing::East, Half::Bottom, false, ) => 20600,
            })
        }
    }

    impl From<BlackstoneStairs> for BlockState {
        #[inline(always)]
        fn from(value : BlackstoneStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackstoneStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackstoneStairs { }

    impl Block for BlackstoneStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            facing : Facing::North,
            half : Half::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:cherry_door` block.
pub mod cherry_door {
    use super::*;

    /// `minecraft:cherry_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryDoor {
        /// `half` state.
        pub half : Half,
        /// `open` state.
        pub open : bool,
        /// `hinge` state.
        pub hinge : Hinge,
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CherryDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.open, self.hinge, self.facing, self.powered, )) {
                ( Half::Upper, true, Hinge::Left, Facing::North, true, ) => 13037,
                ( Half::Upper, true, Hinge::Left, Facing::North, false, ) => 13038,
                ( Half::Upper, false, Hinge::Left, Facing::North, true, ) => 13039,
                ( Half::Upper, false, Hinge::Left, Facing::North, false, ) => 13040,
                ( Half::Upper, true, Hinge::Right, Facing::North, true, ) => 13041,
                ( Half::Upper, true, Hinge::Right, Facing::North, false, ) => 13042,
                ( Half::Upper, false, Hinge::Right, Facing::North, true, ) => 13043,
                ( Half::Upper, false, Hinge::Right, Facing::North, false, ) => 13044,
                ( Half::Lower, true, Hinge::Left, Facing::North, true, ) => 13045,
                ( Half::Lower, true, Hinge::Left, Facing::North, false, ) => 13046,
                ( Half::Lower, false, Hinge::Left, Facing::North, true, ) => 13047,
                ( Half::Lower, false, Hinge::Left, Facing::North, false, ) => 13048,
                ( Half::Lower, true, Hinge::Right, Facing::North, true, ) => 13049,
                ( Half::Lower, true, Hinge::Right, Facing::North, false, ) => 13050,
                ( Half::Lower, false, Hinge::Right, Facing::North, true, ) => 13051,
                ( Half::Lower, false, Hinge::Right, Facing::North, false, ) => 13052,
                ( Half::Upper, true, Hinge::Left, Facing::South, true, ) => 13053,
                ( Half::Upper, true, Hinge::Left, Facing::South, false, ) => 13054,
                ( Half::Upper, false, Hinge::Left, Facing::South, true, ) => 13055,
                ( Half::Upper, false, Hinge::Left, Facing::South, false, ) => 13056,
                ( Half::Upper, true, Hinge::Right, Facing::South, true, ) => 13057,
                ( Half::Upper, true, Hinge::Right, Facing::South, false, ) => 13058,
                ( Half::Upper, false, Hinge::Right, Facing::South, true, ) => 13059,
                ( Half::Upper, false, Hinge::Right, Facing::South, false, ) => 13060,
                ( Half::Lower, true, Hinge::Left, Facing::South, true, ) => 13061,
                ( Half::Lower, true, Hinge::Left, Facing::South, false, ) => 13062,
                ( Half::Lower, false, Hinge::Left, Facing::South, true, ) => 13063,
                ( Half::Lower, false, Hinge::Left, Facing::South, false, ) => 13064,
                ( Half::Lower, true, Hinge::Right, Facing::South, true, ) => 13065,
                ( Half::Lower, true, Hinge::Right, Facing::South, false, ) => 13066,
                ( Half::Lower, false, Hinge::Right, Facing::South, true, ) => 13067,
                ( Half::Lower, false, Hinge::Right, Facing::South, false, ) => 13068,
                ( Half::Upper, true, Hinge::Left, Facing::West, true, ) => 13069,
                ( Half::Upper, true, Hinge::Left, Facing::West, false, ) => 13070,
                ( Half::Upper, false, Hinge::Left, Facing::West, true, ) => 13071,
                ( Half::Upper, false, Hinge::Left, Facing::West, false, ) => 13072,
                ( Half::Upper, true, Hinge::Right, Facing::West, true, ) => 13073,
                ( Half::Upper, true, Hinge::Right, Facing::West, false, ) => 13074,
                ( Half::Upper, false, Hinge::Right, Facing::West, true, ) => 13075,
                ( Half::Upper, false, Hinge::Right, Facing::West, false, ) => 13076,
                ( Half::Lower, true, Hinge::Left, Facing::West, true, ) => 13077,
                ( Half::Lower, true, Hinge::Left, Facing::West, false, ) => 13078,
                ( Half::Lower, false, Hinge::Left, Facing::West, true, ) => 13079,
                ( Half::Lower, false, Hinge::Left, Facing::West, false, ) => 13080,
                ( Half::Lower, true, Hinge::Right, Facing::West, true, ) => 13081,
                ( Half::Lower, true, Hinge::Right, Facing::West, false, ) => 13082,
                ( Half::Lower, false, Hinge::Right, Facing::West, true, ) => 13083,
                ( Half::Lower, false, Hinge::Right, Facing::West, false, ) => 13084,
                ( Half::Upper, true, Hinge::Left, Facing::East, true, ) => 13085,
                ( Half::Upper, true, Hinge::Left, Facing::East, false, ) => 13086,
                ( Half::Upper, false, Hinge::Left, Facing::East, true, ) => 13087,
                ( Half::Upper, false, Hinge::Left, Facing::East, false, ) => 13088,
                ( Half::Upper, true, Hinge::Right, Facing::East, true, ) => 13089,
                ( Half::Upper, true, Hinge::Right, Facing::East, false, ) => 13090,
                ( Half::Upper, false, Hinge::Right, Facing::East, true, ) => 13091,
                ( Half::Upper, false, Hinge::Right, Facing::East, false, ) => 13092,
                ( Half::Lower, true, Hinge::Left, Facing::East, true, ) => 13093,
                ( Half::Lower, true, Hinge::Left, Facing::East, false, ) => 13094,
                ( Half::Lower, false, Hinge::Left, Facing::East, true, ) => 13095,
                ( Half::Lower, false, Hinge::Left, Facing::East, false, ) => 13096,
                ( Half::Lower, true, Hinge::Right, Facing::East, true, ) => 13097,
                ( Half::Lower, true, Hinge::Right, Facing::East, false, ) => 13098,
                ( Half::Lower, false, Hinge::Right, Facing::East, true, ) => 13099,
                ( Half::Lower, false, Hinge::Right, Facing::East, false, ) => 13100,
            })
        }
    }

    impl From<CherryDoor> for BlockState {
        #[inline(always)]
        fn from(value : CherryDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryDoor { }

    impl Block for CherryDoor {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
            open : false,
            hinge : Hinge::Left,
            facing : Facing::North,
            powered : false,
        };
    }

}

/// `minecraft:potted_bamboo` block.
pub mod potted_bamboo {
    use super::*;

    /// `minecraft:potted_bamboo` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedBamboo;

    impl PottedBamboo {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(14012)
        }
    }

    impl From<PottedBamboo> for BlockState {
        #[inline(always)]
        fn from(value : PottedBamboo) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedBamboo {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedBamboo { }

    impl Block for PottedBamboo {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:redstone_block` block.
pub mod redstone_block {
    use super::*;

    /// `minecraft:redstone_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedstoneBlock;

    impl RedstoneBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10032)
        }
    }

    impl From<RedstoneBlock> for BlockState {
        #[inline(always)]
        fn from(value : RedstoneBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedstoneBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedstoneBlock { }

    impl Block for RedstoneBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:black_candle` block.
pub mod black_candle {
    use super::*;

    /// `minecraft:black_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackCandle {
        /// `lit` state.
        pub lit : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `candles` state.
        pub candles : Candles,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl BlackCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, self.waterlogged, self.candles, )) {
                ( true, true, Candles::N1, ) => 22041,
                ( true, false, Candles::N1, ) => 22042,
                ( false, true, Candles::N1, ) => 22043,
                ( false, false, Candles::N1, ) => 22044,
                ( true, true, Candles::N2, ) => 22045,
                ( true, false, Candles::N2, ) => 22046,
                ( false, true, Candles::N2, ) => 22047,
                ( false, false, Candles::N2, ) => 22048,
                ( true, true, Candles::N3, ) => 22049,
                ( true, false, Candles::N3, ) => 22050,
                ( false, true, Candles::N3, ) => 22051,
                ( false, false, Candles::N3, ) => 22052,
                ( true, true, Candles::N4, ) => 22053,
                ( true, false, Candles::N4, ) => 22054,
                ( false, true, Candles::N4, ) => 22055,
                ( false, false, Candles::N4, ) => 22056,
            })
        }
    }

    impl From<BlackCandle> for BlockState {
        #[inline(always)]
        fn from(value : BlackCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackCandle { }

    impl Block for BlackCandle {
        const DEFAULT_STATE : Self = Self {
            lit : false,
            waterlogged : false,
            candles : Candles::N1,
        };
    }

}

/// `minecraft:light_gray_candle_cake` block.
pub mod light_gray_candle_cake {
    use super::*;

    /// `minecraft:light_gray_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl LightGrayCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22075,
                ( false, ) => 22076,
            })
        }
    }

    impl From<LightGrayCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayCandleCake { }

    impl Block for LightGrayCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:mangrove_stairs` block.
pub mod mangrove_stairs {
    use super::*;

    /// `minecraft:mangrove_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl MangroveStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.shape, self.facing, self.half, )) {
                ( true, Shape::Straight, Facing::North, Half::Top, ) => 11013,
                ( false, Shape::Straight, Facing::North, Half::Top, ) => 11014,
                ( true, Shape::InnerLeft, Facing::North, Half::Top, ) => 11015,
                ( false, Shape::InnerLeft, Facing::North, Half::Top, ) => 11016,
                ( true, Shape::InnerRight, Facing::North, Half::Top, ) => 11017,
                ( false, Shape::InnerRight, Facing::North, Half::Top, ) => 11018,
                ( true, Shape::OuterLeft, Facing::North, Half::Top, ) => 11019,
                ( false, Shape::OuterLeft, Facing::North, Half::Top, ) => 11020,
                ( true, Shape::OuterRight, Facing::North, Half::Top, ) => 11021,
                ( false, Shape::OuterRight, Facing::North, Half::Top, ) => 11022,
                ( true, Shape::Straight, Facing::North, Half::Bottom, ) => 11023,
                ( false, Shape::Straight, Facing::North, Half::Bottom, ) => 11024,
                ( true, Shape::InnerLeft, Facing::North, Half::Bottom, ) => 11025,
                ( false, Shape::InnerLeft, Facing::North, Half::Bottom, ) => 11026,
                ( true, Shape::InnerRight, Facing::North, Half::Bottom, ) => 11027,
                ( false, Shape::InnerRight, Facing::North, Half::Bottom, ) => 11028,
                ( true, Shape::OuterLeft, Facing::North, Half::Bottom, ) => 11029,
                ( false, Shape::OuterLeft, Facing::North, Half::Bottom, ) => 11030,
                ( true, Shape::OuterRight, Facing::North, Half::Bottom, ) => 11031,
                ( false, Shape::OuterRight, Facing::North, Half::Bottom, ) => 11032,
                ( true, Shape::Straight, Facing::South, Half::Top, ) => 11033,
                ( false, Shape::Straight, Facing::South, Half::Top, ) => 11034,
                ( true, Shape::InnerLeft, Facing::South, Half::Top, ) => 11035,
                ( false, Shape::InnerLeft, Facing::South, Half::Top, ) => 11036,
                ( true, Shape::InnerRight, Facing::South, Half::Top, ) => 11037,
                ( false, Shape::InnerRight, Facing::South, Half::Top, ) => 11038,
                ( true, Shape::OuterLeft, Facing::South, Half::Top, ) => 11039,
                ( false, Shape::OuterLeft, Facing::South, Half::Top, ) => 11040,
                ( true, Shape::OuterRight, Facing::South, Half::Top, ) => 11041,
                ( false, Shape::OuterRight, Facing::South, Half::Top, ) => 11042,
                ( true, Shape::Straight, Facing::South, Half::Bottom, ) => 11043,
                ( false, Shape::Straight, Facing::South, Half::Bottom, ) => 11044,
                ( true, Shape::InnerLeft, Facing::South, Half::Bottom, ) => 11045,
                ( false, Shape::InnerLeft, Facing::South, Half::Bottom, ) => 11046,
                ( true, Shape::InnerRight, Facing::South, Half::Bottom, ) => 11047,
                ( false, Shape::InnerRight, Facing::South, Half::Bottom, ) => 11048,
                ( true, Shape::OuterLeft, Facing::South, Half::Bottom, ) => 11049,
                ( false, Shape::OuterLeft, Facing::South, Half::Bottom, ) => 11050,
                ( true, Shape::OuterRight, Facing::South, Half::Bottom, ) => 11051,
                ( false, Shape::OuterRight, Facing::South, Half::Bottom, ) => 11052,
                ( true, Shape::Straight, Facing::West, Half::Top, ) => 11053,
                ( false, Shape::Straight, Facing::West, Half::Top, ) => 11054,
                ( true, Shape::InnerLeft, Facing::West, Half::Top, ) => 11055,
                ( false, Shape::InnerLeft, Facing::West, Half::Top, ) => 11056,
                ( true, Shape::InnerRight, Facing::West, Half::Top, ) => 11057,
                ( false, Shape::InnerRight, Facing::West, Half::Top, ) => 11058,
                ( true, Shape::OuterLeft, Facing::West, Half::Top, ) => 11059,
                ( false, Shape::OuterLeft, Facing::West, Half::Top, ) => 11060,
                ( true, Shape::OuterRight, Facing::West, Half::Top, ) => 11061,
                ( false, Shape::OuterRight, Facing::West, Half::Top, ) => 11062,
                ( true, Shape::Straight, Facing::West, Half::Bottom, ) => 11063,
                ( false, Shape::Straight, Facing::West, Half::Bottom, ) => 11064,
                ( true, Shape::InnerLeft, Facing::West, Half::Bottom, ) => 11065,
                ( false, Shape::InnerLeft, Facing::West, Half::Bottom, ) => 11066,
                ( true, Shape::InnerRight, Facing::West, Half::Bottom, ) => 11067,
                ( false, Shape::InnerRight, Facing::West, Half::Bottom, ) => 11068,
                ( true, Shape::OuterLeft, Facing::West, Half::Bottom, ) => 11069,
                ( false, Shape::OuterLeft, Facing::West, Half::Bottom, ) => 11070,
                ( true, Shape::OuterRight, Facing::West, Half::Bottom, ) => 11071,
                ( false, Shape::OuterRight, Facing::West, Half::Bottom, ) => 11072,
                ( true, Shape::Straight, Facing::East, Half::Top, ) => 11073,
                ( false, Shape::Straight, Facing::East, Half::Top, ) => 11074,
                ( true, Shape::InnerLeft, Facing::East, Half::Top, ) => 11075,
                ( false, Shape::InnerLeft, Facing::East, Half::Top, ) => 11076,
                ( true, Shape::InnerRight, Facing::East, Half::Top, ) => 11077,
                ( false, Shape::InnerRight, Facing::East, Half::Top, ) => 11078,
                ( true, Shape::OuterLeft, Facing::East, Half::Top, ) => 11079,
                ( false, Shape::OuterLeft, Facing::East, Half::Top, ) => 11080,
                ( true, Shape::OuterRight, Facing::East, Half::Top, ) => 11081,
                ( false, Shape::OuterRight, Facing::East, Half::Top, ) => 11082,
                ( true, Shape::Straight, Facing::East, Half::Bottom, ) => 11083,
                ( false, Shape::Straight, Facing::East, Half::Bottom, ) => 11084,
                ( true, Shape::InnerLeft, Facing::East, Half::Bottom, ) => 11085,
                ( false, Shape::InnerLeft, Facing::East, Half::Bottom, ) => 11086,
                ( true, Shape::InnerRight, Facing::East, Half::Bottom, ) => 11087,
                ( false, Shape::InnerRight, Facing::East, Half::Bottom, ) => 11088,
                ( true, Shape::OuterLeft, Facing::East, Half::Bottom, ) => 11089,
                ( false, Shape::OuterLeft, Facing::East, Half::Bottom, ) => 11090,
                ( true, Shape::OuterRight, Facing::East, Half::Bottom, ) => 11091,
                ( false, Shape::OuterRight, Facing::East, Half::Bottom, ) => 11092,
            })
        }
    }

    impl From<MangroveStairs> for BlockState {
        #[inline(always)]
        fn from(value : MangroveStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveStairs { }

    impl Block for MangroveStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            shape : Shape::Straight,
            facing : Facing::North,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:mycelium` block.
pub mod mycelium {
    use super::*;

    /// `minecraft:mycelium` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Mycelium {
        /// `snowy` state.
        pub snowy : bool,
    }

    impl Mycelium {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.snowy, )) {
                ( true, ) => 7640,
                ( false, ) => 7641,
            })
        }
    }

    impl From<Mycelium> for BlockState {
        #[inline(always)]
        fn from(value : Mycelium) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Mycelium {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Mycelium { }

    impl Block for Mycelium {
        const DEFAULT_STATE : Self = Self {
            snowy : false,
        };
    }

}

/// `minecraft:green_bed` block.
pub mod green_bed {
    use super::*;

    /// `minecraft:green_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenBed {
        /// `occupied` state.
        pub occupied : bool,
        /// `part` state.
        pub part : Part,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl GreenBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.occupied, self.part, self.facing, )) {
                ( true, Part::Head, Facing::North, ) => 1939,
                ( true, Part::Foot, Facing::North, ) => 1940,
                ( false, Part::Head, Facing::North, ) => 1941,
                ( false, Part::Foot, Facing::North, ) => 1942,
                ( true, Part::Head, Facing::South, ) => 1943,
                ( true, Part::Foot, Facing::South, ) => 1944,
                ( false, Part::Head, Facing::South, ) => 1945,
                ( false, Part::Foot, Facing::South, ) => 1946,
                ( true, Part::Head, Facing::West, ) => 1947,
                ( true, Part::Foot, Facing::West, ) => 1948,
                ( false, Part::Head, Facing::West, ) => 1949,
                ( false, Part::Foot, Facing::West, ) => 1950,
                ( true, Part::Head, Facing::East, ) => 1951,
                ( true, Part::Foot, Facing::East, ) => 1952,
                ( false, Part::Head, Facing::East, ) => 1953,
                ( false, Part::Foot, Facing::East, ) => 1954,
            })
        }
    }

    impl From<GreenBed> for BlockState {
        #[inline(always)]
        fn from(value : GreenBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenBed { }

    impl Block for GreenBed {
        const DEFAULT_STATE : Self = Self {
            occupied : false,
            part : Part::Foot,
            facing : Facing::North,
        };
    }

}

/// `minecraft:light_gray_wool` block.
pub mod light_gray_wool {
    use super::*;

    /// `minecraft:light_gray_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayWool;

    impl LightGrayWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2101)
        }
    }

    impl From<LightGrayWool> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayWool { }

    impl Block for LightGrayWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:red_carpet` block.
pub mod red_carpet {
    use super::*;

    /// `minecraft:red_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedCarpet;

    impl RedCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11631)
        }
    }

    impl From<RedCarpet> for BlockState {
        #[inline(always)]
        fn from(value : RedCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedCarpet { }

    impl Block for RedCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:purple_stained_glass` block.
pub mod purple_stained_glass {
    use super::*;

    /// `minecraft:purple_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleStainedGlass;

    impl PurpleStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6134)
        }
    }

    impl From<PurpleStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : PurpleStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleStainedGlass { }

    impl Block for PurpleStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:fire_coral` block.
pub mod fire_coral {
    use super::*;

    /// `minecraft:fire_coral` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct FireCoral {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl FireCoral {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13884,
                ( false, ) => 13885,
            })
        }
    }

    impl From<FireCoral> for BlockState {
        #[inline(always)]
        fn from(value : FireCoral) -> Self {
            value.to_block_state()
        }
    }

    impl Default for FireCoral {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for FireCoral { }

    impl Block for FireCoral {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:magenta_shulker_box` block.
pub mod magenta_shulker_box {
    use super::*;

    /// `minecraft:magenta_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl MagentaShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13603,
                ( Facing::East, ) => 13604,
                ( Facing::South, ) => 13605,
                ( Facing::West, ) => 13606,
                ( Facing::Up, ) => 13607,
                ( Facing::Down, ) => 13608,
            })
        }
    }

    impl From<MagentaShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : MagentaShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaShulkerBox { }

    impl Block for MagentaShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:resin_brick_wall` block.
pub mod resin_brick_wall {
    use super::*;

    /// `minecraft:resin_brick_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ResinBrickWall {
        /// `east` state.
        pub east : East,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `north` state.
        pub north : North,
        /// `south` state.
        pub south : South,
        /// `up` state.
        pub up : bool,
        /// `west` state.
        pub west : West,
    }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    impl ResinBrickWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.waterlogged, self.north, self.south, self.up, self.west, )) {
                ( East::None, true, North::None, South::None, true, West::None, ) => 7731,
                ( East::None, true, North::None, South::None, true, West::Low, ) => 7732,
                ( East::None, true, North::None, South::None, true, West::Tall, ) => 7733,
                ( East::None, false, North::None, South::None, true, West::None, ) => 7734,
                ( East::None, false, North::None, South::None, true, West::Low, ) => 7735,
                ( East::None, false, North::None, South::None, true, West::Tall, ) => 7736,
                ( East::None, true, North::None, South::None, false, West::None, ) => 7737,
                ( East::None, true, North::None, South::None, false, West::Low, ) => 7738,
                ( East::None, true, North::None, South::None, false, West::Tall, ) => 7739,
                ( East::None, false, North::None, South::None, false, West::None, ) => 7740,
                ( East::None, false, North::None, South::None, false, West::Low, ) => 7741,
                ( East::None, false, North::None, South::None, false, West::Tall, ) => 7742,
                ( East::None, true, North::None, South::Low, true, West::None, ) => 7743,
                ( East::None, true, North::None, South::Low, true, West::Low, ) => 7744,
                ( East::None, true, North::None, South::Low, true, West::Tall, ) => 7745,
                ( East::None, false, North::None, South::Low, true, West::None, ) => 7746,
                ( East::None, false, North::None, South::Low, true, West::Low, ) => 7747,
                ( East::None, false, North::None, South::Low, true, West::Tall, ) => 7748,
                ( East::None, true, North::None, South::Low, false, West::None, ) => 7749,
                ( East::None, true, North::None, South::Low, false, West::Low, ) => 7750,
                ( East::None, true, North::None, South::Low, false, West::Tall, ) => 7751,
                ( East::None, false, North::None, South::Low, false, West::None, ) => 7752,
                ( East::None, false, North::None, South::Low, false, West::Low, ) => 7753,
                ( East::None, false, North::None, South::Low, false, West::Tall, ) => 7754,
                ( East::None, true, North::None, South::Tall, true, West::None, ) => 7755,
                ( East::None, true, North::None, South::Tall, true, West::Low, ) => 7756,
                ( East::None, true, North::None, South::Tall, true, West::Tall, ) => 7757,
                ( East::None, false, North::None, South::Tall, true, West::None, ) => 7758,
                ( East::None, false, North::None, South::Tall, true, West::Low, ) => 7759,
                ( East::None, false, North::None, South::Tall, true, West::Tall, ) => 7760,
                ( East::None, true, North::None, South::Tall, false, West::None, ) => 7761,
                ( East::None, true, North::None, South::Tall, false, West::Low, ) => 7762,
                ( East::None, true, North::None, South::Tall, false, West::Tall, ) => 7763,
                ( East::None, false, North::None, South::Tall, false, West::None, ) => 7764,
                ( East::None, false, North::None, South::Tall, false, West::Low, ) => 7765,
                ( East::None, false, North::None, South::Tall, false, West::Tall, ) => 7766,
                ( East::None, true, North::Low, South::None, true, West::None, ) => 7767,
                ( East::None, true, North::Low, South::None, true, West::Low, ) => 7768,
                ( East::None, true, North::Low, South::None, true, West::Tall, ) => 7769,
                ( East::None, false, North::Low, South::None, true, West::None, ) => 7770,
                ( East::None, false, North::Low, South::None, true, West::Low, ) => 7771,
                ( East::None, false, North::Low, South::None, true, West::Tall, ) => 7772,
                ( East::None, true, North::Low, South::None, false, West::None, ) => 7773,
                ( East::None, true, North::Low, South::None, false, West::Low, ) => 7774,
                ( East::None, true, North::Low, South::None, false, West::Tall, ) => 7775,
                ( East::None, false, North::Low, South::None, false, West::None, ) => 7776,
                ( East::None, false, North::Low, South::None, false, West::Low, ) => 7777,
                ( East::None, false, North::Low, South::None, false, West::Tall, ) => 7778,
                ( East::None, true, North::Low, South::Low, true, West::None, ) => 7779,
                ( East::None, true, North::Low, South::Low, true, West::Low, ) => 7780,
                ( East::None, true, North::Low, South::Low, true, West::Tall, ) => 7781,
                ( East::None, false, North::Low, South::Low, true, West::None, ) => 7782,
                ( East::None, false, North::Low, South::Low, true, West::Low, ) => 7783,
                ( East::None, false, North::Low, South::Low, true, West::Tall, ) => 7784,
                ( East::None, true, North::Low, South::Low, false, West::None, ) => 7785,
                ( East::None, true, North::Low, South::Low, false, West::Low, ) => 7786,
                ( East::None, true, North::Low, South::Low, false, West::Tall, ) => 7787,
                ( East::None, false, North::Low, South::Low, false, West::None, ) => 7788,
                ( East::None, false, North::Low, South::Low, false, West::Low, ) => 7789,
                ( East::None, false, North::Low, South::Low, false, West::Tall, ) => 7790,
                ( East::None, true, North::Low, South::Tall, true, West::None, ) => 7791,
                ( East::None, true, North::Low, South::Tall, true, West::Low, ) => 7792,
                ( East::None, true, North::Low, South::Tall, true, West::Tall, ) => 7793,
                ( East::None, false, North::Low, South::Tall, true, West::None, ) => 7794,
                ( East::None, false, North::Low, South::Tall, true, West::Low, ) => 7795,
                ( East::None, false, North::Low, South::Tall, true, West::Tall, ) => 7796,
                ( East::None, true, North::Low, South::Tall, false, West::None, ) => 7797,
                ( East::None, true, North::Low, South::Tall, false, West::Low, ) => 7798,
                ( East::None, true, North::Low, South::Tall, false, West::Tall, ) => 7799,
                ( East::None, false, North::Low, South::Tall, false, West::None, ) => 7800,
                ( East::None, false, North::Low, South::Tall, false, West::Low, ) => 7801,
                ( East::None, false, North::Low, South::Tall, false, West::Tall, ) => 7802,
                ( East::None, true, North::Tall, South::None, true, West::None, ) => 7803,
                ( East::None, true, North::Tall, South::None, true, West::Low, ) => 7804,
                ( East::None, true, North::Tall, South::None, true, West::Tall, ) => 7805,
                ( East::None, false, North::Tall, South::None, true, West::None, ) => 7806,
                ( East::None, false, North::Tall, South::None, true, West::Low, ) => 7807,
                ( East::None, false, North::Tall, South::None, true, West::Tall, ) => 7808,
                ( East::None, true, North::Tall, South::None, false, West::None, ) => 7809,
                ( East::None, true, North::Tall, South::None, false, West::Low, ) => 7810,
                ( East::None, true, North::Tall, South::None, false, West::Tall, ) => 7811,
                ( East::None, false, North::Tall, South::None, false, West::None, ) => 7812,
                ( East::None, false, North::Tall, South::None, false, West::Low, ) => 7813,
                ( East::None, false, North::Tall, South::None, false, West::Tall, ) => 7814,
                ( East::None, true, North::Tall, South::Low, true, West::None, ) => 7815,
                ( East::None, true, North::Tall, South::Low, true, West::Low, ) => 7816,
                ( East::None, true, North::Tall, South::Low, true, West::Tall, ) => 7817,
                ( East::None, false, North::Tall, South::Low, true, West::None, ) => 7818,
                ( East::None, false, North::Tall, South::Low, true, West::Low, ) => 7819,
                ( East::None, false, North::Tall, South::Low, true, West::Tall, ) => 7820,
                ( East::None, true, North::Tall, South::Low, false, West::None, ) => 7821,
                ( East::None, true, North::Tall, South::Low, false, West::Low, ) => 7822,
                ( East::None, true, North::Tall, South::Low, false, West::Tall, ) => 7823,
                ( East::None, false, North::Tall, South::Low, false, West::None, ) => 7824,
                ( East::None, false, North::Tall, South::Low, false, West::Low, ) => 7825,
                ( East::None, false, North::Tall, South::Low, false, West::Tall, ) => 7826,
                ( East::None, true, North::Tall, South::Tall, true, West::None, ) => 7827,
                ( East::None, true, North::Tall, South::Tall, true, West::Low, ) => 7828,
                ( East::None, true, North::Tall, South::Tall, true, West::Tall, ) => 7829,
                ( East::None, false, North::Tall, South::Tall, true, West::None, ) => 7830,
                ( East::None, false, North::Tall, South::Tall, true, West::Low, ) => 7831,
                ( East::None, false, North::Tall, South::Tall, true, West::Tall, ) => 7832,
                ( East::None, true, North::Tall, South::Tall, false, West::None, ) => 7833,
                ( East::None, true, North::Tall, South::Tall, false, West::Low, ) => 7834,
                ( East::None, true, North::Tall, South::Tall, false, West::Tall, ) => 7835,
                ( East::None, false, North::Tall, South::Tall, false, West::None, ) => 7836,
                ( East::None, false, North::Tall, South::Tall, false, West::Low, ) => 7837,
                ( East::None, false, North::Tall, South::Tall, false, West::Tall, ) => 7838,
                ( East::Low, true, North::None, South::None, true, West::None, ) => 7839,
                ( East::Low, true, North::None, South::None, true, West::Low, ) => 7840,
                ( East::Low, true, North::None, South::None, true, West::Tall, ) => 7841,
                ( East::Low, false, North::None, South::None, true, West::None, ) => 7842,
                ( East::Low, false, North::None, South::None, true, West::Low, ) => 7843,
                ( East::Low, false, North::None, South::None, true, West::Tall, ) => 7844,
                ( East::Low, true, North::None, South::None, false, West::None, ) => 7845,
                ( East::Low, true, North::None, South::None, false, West::Low, ) => 7846,
                ( East::Low, true, North::None, South::None, false, West::Tall, ) => 7847,
                ( East::Low, false, North::None, South::None, false, West::None, ) => 7848,
                ( East::Low, false, North::None, South::None, false, West::Low, ) => 7849,
                ( East::Low, false, North::None, South::None, false, West::Tall, ) => 7850,
                ( East::Low, true, North::None, South::Low, true, West::None, ) => 7851,
                ( East::Low, true, North::None, South::Low, true, West::Low, ) => 7852,
                ( East::Low, true, North::None, South::Low, true, West::Tall, ) => 7853,
                ( East::Low, false, North::None, South::Low, true, West::None, ) => 7854,
                ( East::Low, false, North::None, South::Low, true, West::Low, ) => 7855,
                ( East::Low, false, North::None, South::Low, true, West::Tall, ) => 7856,
                ( East::Low, true, North::None, South::Low, false, West::None, ) => 7857,
                ( East::Low, true, North::None, South::Low, false, West::Low, ) => 7858,
                ( East::Low, true, North::None, South::Low, false, West::Tall, ) => 7859,
                ( East::Low, false, North::None, South::Low, false, West::None, ) => 7860,
                ( East::Low, false, North::None, South::Low, false, West::Low, ) => 7861,
                ( East::Low, false, North::None, South::Low, false, West::Tall, ) => 7862,
                ( East::Low, true, North::None, South::Tall, true, West::None, ) => 7863,
                ( East::Low, true, North::None, South::Tall, true, West::Low, ) => 7864,
                ( East::Low, true, North::None, South::Tall, true, West::Tall, ) => 7865,
                ( East::Low, false, North::None, South::Tall, true, West::None, ) => 7866,
                ( East::Low, false, North::None, South::Tall, true, West::Low, ) => 7867,
                ( East::Low, false, North::None, South::Tall, true, West::Tall, ) => 7868,
                ( East::Low, true, North::None, South::Tall, false, West::None, ) => 7869,
                ( East::Low, true, North::None, South::Tall, false, West::Low, ) => 7870,
                ( East::Low, true, North::None, South::Tall, false, West::Tall, ) => 7871,
                ( East::Low, false, North::None, South::Tall, false, West::None, ) => 7872,
                ( East::Low, false, North::None, South::Tall, false, West::Low, ) => 7873,
                ( East::Low, false, North::None, South::Tall, false, West::Tall, ) => 7874,
                ( East::Low, true, North::Low, South::None, true, West::None, ) => 7875,
                ( East::Low, true, North::Low, South::None, true, West::Low, ) => 7876,
                ( East::Low, true, North::Low, South::None, true, West::Tall, ) => 7877,
                ( East::Low, false, North::Low, South::None, true, West::None, ) => 7878,
                ( East::Low, false, North::Low, South::None, true, West::Low, ) => 7879,
                ( East::Low, false, North::Low, South::None, true, West::Tall, ) => 7880,
                ( East::Low, true, North::Low, South::None, false, West::None, ) => 7881,
                ( East::Low, true, North::Low, South::None, false, West::Low, ) => 7882,
                ( East::Low, true, North::Low, South::None, false, West::Tall, ) => 7883,
                ( East::Low, false, North::Low, South::None, false, West::None, ) => 7884,
                ( East::Low, false, North::Low, South::None, false, West::Low, ) => 7885,
                ( East::Low, false, North::Low, South::None, false, West::Tall, ) => 7886,
                ( East::Low, true, North::Low, South::Low, true, West::None, ) => 7887,
                ( East::Low, true, North::Low, South::Low, true, West::Low, ) => 7888,
                ( East::Low, true, North::Low, South::Low, true, West::Tall, ) => 7889,
                ( East::Low, false, North::Low, South::Low, true, West::None, ) => 7890,
                ( East::Low, false, North::Low, South::Low, true, West::Low, ) => 7891,
                ( East::Low, false, North::Low, South::Low, true, West::Tall, ) => 7892,
                ( East::Low, true, North::Low, South::Low, false, West::None, ) => 7893,
                ( East::Low, true, North::Low, South::Low, false, West::Low, ) => 7894,
                ( East::Low, true, North::Low, South::Low, false, West::Tall, ) => 7895,
                ( East::Low, false, North::Low, South::Low, false, West::None, ) => 7896,
                ( East::Low, false, North::Low, South::Low, false, West::Low, ) => 7897,
                ( East::Low, false, North::Low, South::Low, false, West::Tall, ) => 7898,
                ( East::Low, true, North::Low, South::Tall, true, West::None, ) => 7899,
                ( East::Low, true, North::Low, South::Tall, true, West::Low, ) => 7900,
                ( East::Low, true, North::Low, South::Tall, true, West::Tall, ) => 7901,
                ( East::Low, false, North::Low, South::Tall, true, West::None, ) => 7902,
                ( East::Low, false, North::Low, South::Tall, true, West::Low, ) => 7903,
                ( East::Low, false, North::Low, South::Tall, true, West::Tall, ) => 7904,
                ( East::Low, true, North::Low, South::Tall, false, West::None, ) => 7905,
                ( East::Low, true, North::Low, South::Tall, false, West::Low, ) => 7906,
                ( East::Low, true, North::Low, South::Tall, false, West::Tall, ) => 7907,
                ( East::Low, false, North::Low, South::Tall, false, West::None, ) => 7908,
                ( East::Low, false, North::Low, South::Tall, false, West::Low, ) => 7909,
                ( East::Low, false, North::Low, South::Tall, false, West::Tall, ) => 7910,
                ( East::Low, true, North::Tall, South::None, true, West::None, ) => 7911,
                ( East::Low, true, North::Tall, South::None, true, West::Low, ) => 7912,
                ( East::Low, true, North::Tall, South::None, true, West::Tall, ) => 7913,
                ( East::Low, false, North::Tall, South::None, true, West::None, ) => 7914,
                ( East::Low, false, North::Tall, South::None, true, West::Low, ) => 7915,
                ( East::Low, false, North::Tall, South::None, true, West::Tall, ) => 7916,
                ( East::Low, true, North::Tall, South::None, false, West::None, ) => 7917,
                ( East::Low, true, North::Tall, South::None, false, West::Low, ) => 7918,
                ( East::Low, true, North::Tall, South::None, false, West::Tall, ) => 7919,
                ( East::Low, false, North::Tall, South::None, false, West::None, ) => 7920,
                ( East::Low, false, North::Tall, South::None, false, West::Low, ) => 7921,
                ( East::Low, false, North::Tall, South::None, false, West::Tall, ) => 7922,
                ( East::Low, true, North::Tall, South::Low, true, West::None, ) => 7923,
                ( East::Low, true, North::Tall, South::Low, true, West::Low, ) => 7924,
                ( East::Low, true, North::Tall, South::Low, true, West::Tall, ) => 7925,
                ( East::Low, false, North::Tall, South::Low, true, West::None, ) => 7926,
                ( East::Low, false, North::Tall, South::Low, true, West::Low, ) => 7927,
                ( East::Low, false, North::Tall, South::Low, true, West::Tall, ) => 7928,
                ( East::Low, true, North::Tall, South::Low, false, West::None, ) => 7929,
                ( East::Low, true, North::Tall, South::Low, false, West::Low, ) => 7930,
                ( East::Low, true, North::Tall, South::Low, false, West::Tall, ) => 7931,
                ( East::Low, false, North::Tall, South::Low, false, West::None, ) => 7932,
                ( East::Low, false, North::Tall, South::Low, false, West::Low, ) => 7933,
                ( East::Low, false, North::Tall, South::Low, false, West::Tall, ) => 7934,
                ( East::Low, true, North::Tall, South::Tall, true, West::None, ) => 7935,
                ( East::Low, true, North::Tall, South::Tall, true, West::Low, ) => 7936,
                ( East::Low, true, North::Tall, South::Tall, true, West::Tall, ) => 7937,
                ( East::Low, false, North::Tall, South::Tall, true, West::None, ) => 7938,
                ( East::Low, false, North::Tall, South::Tall, true, West::Low, ) => 7939,
                ( East::Low, false, North::Tall, South::Tall, true, West::Tall, ) => 7940,
                ( East::Low, true, North::Tall, South::Tall, false, West::None, ) => 7941,
                ( East::Low, true, North::Tall, South::Tall, false, West::Low, ) => 7942,
                ( East::Low, true, North::Tall, South::Tall, false, West::Tall, ) => 7943,
                ( East::Low, false, North::Tall, South::Tall, false, West::None, ) => 7944,
                ( East::Low, false, North::Tall, South::Tall, false, West::Low, ) => 7945,
                ( East::Low, false, North::Tall, South::Tall, false, West::Tall, ) => 7946,
                ( East::Tall, true, North::None, South::None, true, West::None, ) => 7947,
                ( East::Tall, true, North::None, South::None, true, West::Low, ) => 7948,
                ( East::Tall, true, North::None, South::None, true, West::Tall, ) => 7949,
                ( East::Tall, false, North::None, South::None, true, West::None, ) => 7950,
                ( East::Tall, false, North::None, South::None, true, West::Low, ) => 7951,
                ( East::Tall, false, North::None, South::None, true, West::Tall, ) => 7952,
                ( East::Tall, true, North::None, South::None, false, West::None, ) => 7953,
                ( East::Tall, true, North::None, South::None, false, West::Low, ) => 7954,
                ( East::Tall, true, North::None, South::None, false, West::Tall, ) => 7955,
                ( East::Tall, false, North::None, South::None, false, West::None, ) => 7956,
                ( East::Tall, false, North::None, South::None, false, West::Low, ) => 7957,
                ( East::Tall, false, North::None, South::None, false, West::Tall, ) => 7958,
                ( East::Tall, true, North::None, South::Low, true, West::None, ) => 7959,
                ( East::Tall, true, North::None, South::Low, true, West::Low, ) => 7960,
                ( East::Tall, true, North::None, South::Low, true, West::Tall, ) => 7961,
                ( East::Tall, false, North::None, South::Low, true, West::None, ) => 7962,
                ( East::Tall, false, North::None, South::Low, true, West::Low, ) => 7963,
                ( East::Tall, false, North::None, South::Low, true, West::Tall, ) => 7964,
                ( East::Tall, true, North::None, South::Low, false, West::None, ) => 7965,
                ( East::Tall, true, North::None, South::Low, false, West::Low, ) => 7966,
                ( East::Tall, true, North::None, South::Low, false, West::Tall, ) => 7967,
                ( East::Tall, false, North::None, South::Low, false, West::None, ) => 7968,
                ( East::Tall, false, North::None, South::Low, false, West::Low, ) => 7969,
                ( East::Tall, false, North::None, South::Low, false, West::Tall, ) => 7970,
                ( East::Tall, true, North::None, South::Tall, true, West::None, ) => 7971,
                ( East::Tall, true, North::None, South::Tall, true, West::Low, ) => 7972,
                ( East::Tall, true, North::None, South::Tall, true, West::Tall, ) => 7973,
                ( East::Tall, false, North::None, South::Tall, true, West::None, ) => 7974,
                ( East::Tall, false, North::None, South::Tall, true, West::Low, ) => 7975,
                ( East::Tall, false, North::None, South::Tall, true, West::Tall, ) => 7976,
                ( East::Tall, true, North::None, South::Tall, false, West::None, ) => 7977,
                ( East::Tall, true, North::None, South::Tall, false, West::Low, ) => 7978,
                ( East::Tall, true, North::None, South::Tall, false, West::Tall, ) => 7979,
                ( East::Tall, false, North::None, South::Tall, false, West::None, ) => 7980,
                ( East::Tall, false, North::None, South::Tall, false, West::Low, ) => 7981,
                ( East::Tall, false, North::None, South::Tall, false, West::Tall, ) => 7982,
                ( East::Tall, true, North::Low, South::None, true, West::None, ) => 7983,
                ( East::Tall, true, North::Low, South::None, true, West::Low, ) => 7984,
                ( East::Tall, true, North::Low, South::None, true, West::Tall, ) => 7985,
                ( East::Tall, false, North::Low, South::None, true, West::None, ) => 7986,
                ( East::Tall, false, North::Low, South::None, true, West::Low, ) => 7987,
                ( East::Tall, false, North::Low, South::None, true, West::Tall, ) => 7988,
                ( East::Tall, true, North::Low, South::None, false, West::None, ) => 7989,
                ( East::Tall, true, North::Low, South::None, false, West::Low, ) => 7990,
                ( East::Tall, true, North::Low, South::None, false, West::Tall, ) => 7991,
                ( East::Tall, false, North::Low, South::None, false, West::None, ) => 7992,
                ( East::Tall, false, North::Low, South::None, false, West::Low, ) => 7993,
                ( East::Tall, false, North::Low, South::None, false, West::Tall, ) => 7994,
                ( East::Tall, true, North::Low, South::Low, true, West::None, ) => 7995,
                ( East::Tall, true, North::Low, South::Low, true, West::Low, ) => 7996,
                ( East::Tall, true, North::Low, South::Low, true, West::Tall, ) => 7997,
                ( East::Tall, false, North::Low, South::Low, true, West::None, ) => 7998,
                ( East::Tall, false, North::Low, South::Low, true, West::Low, ) => 7999,
                ( East::Tall, false, North::Low, South::Low, true, West::Tall, ) => 8000,
                ( East::Tall, true, North::Low, South::Low, false, West::None, ) => 8001,
                ( East::Tall, true, North::Low, South::Low, false, West::Low, ) => 8002,
                ( East::Tall, true, North::Low, South::Low, false, West::Tall, ) => 8003,
                ( East::Tall, false, North::Low, South::Low, false, West::None, ) => 8004,
                ( East::Tall, false, North::Low, South::Low, false, West::Low, ) => 8005,
                ( East::Tall, false, North::Low, South::Low, false, West::Tall, ) => 8006,
                ( East::Tall, true, North::Low, South::Tall, true, West::None, ) => 8007,
                ( East::Tall, true, North::Low, South::Tall, true, West::Low, ) => 8008,
                ( East::Tall, true, North::Low, South::Tall, true, West::Tall, ) => 8009,
                ( East::Tall, false, North::Low, South::Tall, true, West::None, ) => 8010,
                ( East::Tall, false, North::Low, South::Tall, true, West::Low, ) => 8011,
                ( East::Tall, false, North::Low, South::Tall, true, West::Tall, ) => 8012,
                ( East::Tall, true, North::Low, South::Tall, false, West::None, ) => 8013,
                ( East::Tall, true, North::Low, South::Tall, false, West::Low, ) => 8014,
                ( East::Tall, true, North::Low, South::Tall, false, West::Tall, ) => 8015,
                ( East::Tall, false, North::Low, South::Tall, false, West::None, ) => 8016,
                ( East::Tall, false, North::Low, South::Tall, false, West::Low, ) => 8017,
                ( East::Tall, false, North::Low, South::Tall, false, West::Tall, ) => 8018,
                ( East::Tall, true, North::Tall, South::None, true, West::None, ) => 8019,
                ( East::Tall, true, North::Tall, South::None, true, West::Low, ) => 8020,
                ( East::Tall, true, North::Tall, South::None, true, West::Tall, ) => 8021,
                ( East::Tall, false, North::Tall, South::None, true, West::None, ) => 8022,
                ( East::Tall, false, North::Tall, South::None, true, West::Low, ) => 8023,
                ( East::Tall, false, North::Tall, South::None, true, West::Tall, ) => 8024,
                ( East::Tall, true, North::Tall, South::None, false, West::None, ) => 8025,
                ( East::Tall, true, North::Tall, South::None, false, West::Low, ) => 8026,
                ( East::Tall, true, North::Tall, South::None, false, West::Tall, ) => 8027,
                ( East::Tall, false, North::Tall, South::None, false, West::None, ) => 8028,
                ( East::Tall, false, North::Tall, South::None, false, West::Low, ) => 8029,
                ( East::Tall, false, North::Tall, South::None, false, West::Tall, ) => 8030,
                ( East::Tall, true, North::Tall, South::Low, true, West::None, ) => 8031,
                ( East::Tall, true, North::Tall, South::Low, true, West::Low, ) => 8032,
                ( East::Tall, true, North::Tall, South::Low, true, West::Tall, ) => 8033,
                ( East::Tall, false, North::Tall, South::Low, true, West::None, ) => 8034,
                ( East::Tall, false, North::Tall, South::Low, true, West::Low, ) => 8035,
                ( East::Tall, false, North::Tall, South::Low, true, West::Tall, ) => 8036,
                ( East::Tall, true, North::Tall, South::Low, false, West::None, ) => 8037,
                ( East::Tall, true, North::Tall, South::Low, false, West::Low, ) => 8038,
                ( East::Tall, true, North::Tall, South::Low, false, West::Tall, ) => 8039,
                ( East::Tall, false, North::Tall, South::Low, false, West::None, ) => 8040,
                ( East::Tall, false, North::Tall, South::Low, false, West::Low, ) => 8041,
                ( East::Tall, false, North::Tall, South::Low, false, West::Tall, ) => 8042,
                ( East::Tall, true, North::Tall, South::Tall, true, West::None, ) => 8043,
                ( East::Tall, true, North::Tall, South::Tall, true, West::Low, ) => 8044,
                ( East::Tall, true, North::Tall, South::Tall, true, West::Tall, ) => 8045,
                ( East::Tall, false, North::Tall, South::Tall, true, West::None, ) => 8046,
                ( East::Tall, false, North::Tall, South::Tall, true, West::Low, ) => 8047,
                ( East::Tall, false, North::Tall, South::Tall, true, West::Tall, ) => 8048,
                ( East::Tall, true, North::Tall, South::Tall, false, West::None, ) => 8049,
                ( East::Tall, true, North::Tall, South::Tall, false, West::Low, ) => 8050,
                ( East::Tall, true, North::Tall, South::Tall, false, West::Tall, ) => 8051,
                ( East::Tall, false, North::Tall, South::Tall, false, West::None, ) => 8052,
                ( East::Tall, false, North::Tall, South::Tall, false, West::Low, ) => 8053,
                ( East::Tall, false, North::Tall, South::Tall, false, West::Tall, ) => 8054,
            })
        }
    }

    impl From<ResinBrickWall> for BlockState {
        #[inline(always)]
        fn from(value : ResinBrickWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ResinBrickWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ResinBrickWall { }

    impl Block for ResinBrickWall {
        const DEFAULT_STATE : Self = Self {
            east : East::None,
            waterlogged : false,
            north : North::None,
            south : South::None,
            up : true,
            west : West::None,
        };
    }

}

/// `minecraft:tube_coral_block` block.
pub mod tube_coral_block {
    use super::*;

    /// `minecraft:tube_coral_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TubeCoralBlock;

    impl TubeCoralBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13863)
        }
    }

    impl From<TubeCoralBlock> for BlockState {
        #[inline(always)]
        fn from(value : TubeCoralBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TubeCoralBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TubeCoralBlock { }

    impl Block for TubeCoralBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:glass_pane` block.
pub mod glass_pane {
    use super::*;

    /// `minecraft:glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GlassPane {
        /// `east` state.
        pub east : bool,
        /// `south` state.
        pub south : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : bool,
        /// `north` state.
        pub north : bool,
    }

    impl GlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.south, self.waterlogged, self.west, self.north, )) {
                ( true, true, true, true, true, ) => 7022,
                ( true, true, true, false, true, ) => 7023,
                ( true, true, false, true, true, ) => 7024,
                ( true, true, false, false, true, ) => 7025,
                ( true, false, true, true, true, ) => 7026,
                ( true, false, true, false, true, ) => 7027,
                ( true, false, false, true, true, ) => 7028,
                ( true, false, false, false, true, ) => 7029,
                ( true, true, true, true, false, ) => 7030,
                ( true, true, true, false, false, ) => 7031,
                ( true, true, false, true, false, ) => 7032,
                ( true, true, false, false, false, ) => 7033,
                ( true, false, true, true, false, ) => 7034,
                ( true, false, true, false, false, ) => 7035,
                ( true, false, false, true, false, ) => 7036,
                ( true, false, false, false, false, ) => 7037,
                ( false, true, true, true, true, ) => 7038,
                ( false, true, true, false, true, ) => 7039,
                ( false, true, false, true, true, ) => 7040,
                ( false, true, false, false, true, ) => 7041,
                ( false, false, true, true, true, ) => 7042,
                ( false, false, true, false, true, ) => 7043,
                ( false, false, false, true, true, ) => 7044,
                ( false, false, false, false, true, ) => 7045,
                ( false, true, true, true, false, ) => 7046,
                ( false, true, true, false, false, ) => 7047,
                ( false, true, false, true, false, ) => 7048,
                ( false, true, false, false, false, ) => 7049,
                ( false, false, true, true, false, ) => 7050,
                ( false, false, true, false, false, ) => 7051,
                ( false, false, false, true, false, ) => 7052,
                ( false, false, false, false, false, ) => 7053,
            })
        }
    }

    impl From<GlassPane> for BlockState {
        #[inline(always)]
        fn from(value : GlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GlassPane { }

    impl Block for GlassPane {
        const DEFAULT_STATE : Self = Self {
            east : false,
            south : false,
            waterlogged : false,
            west : false,
            north : false,
        };
    }

}

/// `minecraft:crimson_nylium` block.
pub mod crimson_nylium {
    use super::*;

    /// `minecraft:crimson_nylium` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonNylium;

    impl CrimsonNylium {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19663)
        }
    }

    impl From<CrimsonNylium> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonNylium) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonNylium {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonNylium { }

    impl Block for CrimsonNylium {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:end_stone_brick_slab` block.
pub mod end_stone_brick_slab {
    use super::*;

    /// `minecraft:end_stone_brick_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct EndStoneBrickSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl EndStoneBrickSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 15167,
                ( Kind::Top, false, ) => 15168,
                ( Kind::Bottom, true, ) => 15169,
                ( Kind::Bottom, false, ) => 15170,
                ( Kind::Double, true, ) => 15171,
                ( Kind::Double, false, ) => 15172,
            })
        }
    }

    impl From<EndStoneBrickSlab> for BlockState {
        #[inline(always)]
        fn from(value : EndStoneBrickSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for EndStoneBrickSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for EndStoneBrickSlab { }

    impl Block for EndStoneBrickSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:cherry_planks` block.
pub mod cherry_planks {
    use super::*;

    /// `minecraft:cherry_planks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryPlanks;

    impl CherryPlanks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20)
        }
    }

    impl From<CherryPlanks> for BlockState {
        #[inline(always)]
        fn from(value : CherryPlanks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryPlanks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryPlanks { }

    impl Block for CherryPlanks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:fire_coral_block` block.
pub mod fire_coral_block {
    use super::*;

    /// `minecraft:fire_coral_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct FireCoralBlock;

    impl FireCoralBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13866)
        }
    }

    impl From<FireCoralBlock> for BlockState {
        #[inline(always)]
        fn from(value : FireCoralBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for FireCoralBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for FireCoralBlock { }

    impl Block for FireCoralBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:jungle_pressure_plate` block.
pub mod jungle_pressure_plate {
    use super::*;

    /// `minecraft:jungle_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JunglePressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl JunglePressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 5898,
                ( false, ) => 5899,
            })
        }
    }

    impl From<JunglePressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : JunglePressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JunglePressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JunglePressurePlate { }

    impl Block for JunglePressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:acacia_fence` block.
pub mod acacia_fence {
    use super::*;

    /// `minecraft:acacia_fence` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaFence {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `north` state.
        pub north : bool,
        /// `south` state.
        pub south : bool,
        /// `west` state.
        pub west : bool,
        /// `east` state.
        pub east : bool,
    }

    impl AcaciaFence {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.north, self.south, self.west, self.east, )) {
                ( true, true, true, true, true, ) => 12589,
                ( true, true, true, false, true, ) => 12590,
                ( false, true, true, true, true, ) => 12591,
                ( false, true, true, false, true, ) => 12592,
                ( true, true, false, true, true, ) => 12593,
                ( true, true, false, false, true, ) => 12594,
                ( false, true, false, true, true, ) => 12595,
                ( false, true, false, false, true, ) => 12596,
                ( true, false, true, true, true, ) => 12597,
                ( true, false, true, false, true, ) => 12598,
                ( false, false, true, true, true, ) => 12599,
                ( false, false, true, false, true, ) => 12600,
                ( true, false, false, true, true, ) => 12601,
                ( true, false, false, false, true, ) => 12602,
                ( false, false, false, true, true, ) => 12603,
                ( false, false, false, false, true, ) => 12604,
                ( true, true, true, true, false, ) => 12605,
                ( true, true, true, false, false, ) => 12606,
                ( false, true, true, true, false, ) => 12607,
                ( false, true, true, false, false, ) => 12608,
                ( true, true, false, true, false, ) => 12609,
                ( true, true, false, false, false, ) => 12610,
                ( false, true, false, true, false, ) => 12611,
                ( false, true, false, false, false, ) => 12612,
                ( true, false, true, true, false, ) => 12613,
                ( true, false, true, false, false, ) => 12614,
                ( false, false, true, true, false, ) => 12615,
                ( false, false, true, false, false, ) => 12616,
                ( true, false, false, true, false, ) => 12617,
                ( true, false, false, false, false, ) => 12618,
                ( false, false, false, true, false, ) => 12619,
                ( false, false, false, false, false, ) => 12620,
            })
        }
    }

    impl From<AcaciaFence> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaFence) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaFence {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaFence { }

    impl Block for AcaciaFence {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            north : false,
            south : false,
            west : false,
            east : false,
        };
    }

}

/// `minecraft:quartz_block` block.
pub mod quartz_block {
    use super::*;

    /// `minecraft:quartz_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct QuartzBlock;

    impl QuartzBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10044)
        }
    }

    impl From<QuartzBlock> for BlockState {
        #[inline(always)]
        fn from(value : QuartzBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for QuartzBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for QuartzBlock { }

    impl Block for QuartzBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:quartz_bricks` block.
pub mod quartz_bricks {
    use super::*;

    /// `minecraft:quartz_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct QuartzBricks;

    impl QuartzBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(21784)
        }
    }

    impl From<QuartzBricks> for BlockState {
        #[inline(always)]
        fn from(value : QuartzBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for QuartzBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for QuartzBricks { }

    impl Block for QuartzBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:mud` block.
pub mod mud {
    use super::*;

    /// `minecraft:mud` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Mud;

    impl Mud {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(25995)
        }
    }

    impl From<Mud> for BlockState {
        #[inline(always)]
        fn from(value : Mud) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Mud {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Mud { }

    impl Block for Mud {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stone_brick_slab` block.
pub mod stone_brick_slab {
    use super::*;

    /// `minecraft:stone_brick_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StoneBrickSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl StoneBrickSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 12159,
                ( Kind::Top, false, ) => 12160,
                ( Kind::Bottom, true, ) => 12161,
                ( Kind::Bottom, false, ) => 12162,
                ( Kind::Double, true, ) => 12163,
                ( Kind::Double, false, ) => 12164,
            })
        }
    }

    impl From<StoneBrickSlab> for BlockState {
        #[inline(always)]
        fn from(value : StoneBrickSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StoneBrickSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StoneBrickSlab { }

    impl Block for StoneBrickSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:warped_wall_sign` block.
pub mod warped_wall_sign {
    use super::*;

    /// `minecraft:warped_wall_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedWallSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WarpedWallSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 20403,
                ( false, Facing::North, ) => 20404,
                ( true, Facing::South, ) => 20405,
                ( false, Facing::South, ) => 20406,
                ( true, Facing::West, ) => 20407,
                ( false, Facing::West, ) => 20408,
                ( true, Facing::East, ) => 20409,
                ( false, Facing::East, ) => 20410,
            })
        }
    }

    impl From<WarpedWallSign> for BlockState {
        #[inline(always)]
        fn from(value : WarpedWallSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedWallSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedWallSign { }

    impl Block for WarpedWallSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:red_terracotta` block.
pub mod red_terracotta {
    use super::*;

    /// `minecraft:red_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedTerracotta;

    impl RedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10179)
        }
    }

    impl From<RedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : RedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedTerracotta { }

    impl Block for RedTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:rooted_dirt` block.
pub mod rooted_dirt {
    use super::*;

    /// `minecraft:rooted_dirt` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RootedDirt;

    impl RootedDirt {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(25994)
        }
    }

    impl From<RootedDirt> for BlockState {
        #[inline(always)]
        fn from(value : RootedDirt) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RootedDirt {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RootedDirt { }

    impl Block for RootedDirt {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:spruce_wall_sign` block.
pub mod spruce_wall_sign {
    use super::*;

    /// `minecraft:spruce_wall_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceWallSign {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl SpruceWallSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 4866,
                ( Facing::North, false, ) => 4867,
                ( Facing::South, true, ) => 4868,
                ( Facing::South, false, ) => 4869,
                ( Facing::West, true, ) => 4870,
                ( Facing::West, false, ) => 4871,
                ( Facing::East, true, ) => 4872,
                ( Facing::East, false, ) => 4873,
            })
        }
    }

    impl From<SpruceWallSign> for BlockState {
        #[inline(always)]
        fn from(value : SpruceWallSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceWallSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceWallSign { }

    impl Block for SpruceWallSign {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:granite` block.
pub mod granite {
    use super::*;

    /// `minecraft:granite` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Granite;

    impl Granite {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2)
        }
    }

    impl From<Granite> for BlockState {
        #[inline(always)]
        fn from(value : Granite) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Granite {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Granite { }

    impl Block for Granite {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:sandstone_stairs` block.
pub mod sandstone_stairs {
    use super::*;

    /// `minecraft:sandstone_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SandstoneStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl SandstoneStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, self.shape, self.half, )) {
                ( Facing::North, true, Shape::Straight, Half::Top, ) => 8215,
                ( Facing::North, false, Shape::Straight, Half::Top, ) => 8216,
                ( Facing::North, true, Shape::InnerLeft, Half::Top, ) => 8217,
                ( Facing::North, false, Shape::InnerLeft, Half::Top, ) => 8218,
                ( Facing::North, true, Shape::InnerRight, Half::Top, ) => 8219,
                ( Facing::North, false, Shape::InnerRight, Half::Top, ) => 8220,
                ( Facing::North, true, Shape::OuterLeft, Half::Top, ) => 8221,
                ( Facing::North, false, Shape::OuterLeft, Half::Top, ) => 8222,
                ( Facing::North, true, Shape::OuterRight, Half::Top, ) => 8223,
                ( Facing::North, false, Shape::OuterRight, Half::Top, ) => 8224,
                ( Facing::North, true, Shape::Straight, Half::Bottom, ) => 8225,
                ( Facing::North, false, Shape::Straight, Half::Bottom, ) => 8226,
                ( Facing::North, true, Shape::InnerLeft, Half::Bottom, ) => 8227,
                ( Facing::North, false, Shape::InnerLeft, Half::Bottom, ) => 8228,
                ( Facing::North, true, Shape::InnerRight, Half::Bottom, ) => 8229,
                ( Facing::North, false, Shape::InnerRight, Half::Bottom, ) => 8230,
                ( Facing::North, true, Shape::OuterLeft, Half::Bottom, ) => 8231,
                ( Facing::North, false, Shape::OuterLeft, Half::Bottom, ) => 8232,
                ( Facing::North, true, Shape::OuterRight, Half::Bottom, ) => 8233,
                ( Facing::North, false, Shape::OuterRight, Half::Bottom, ) => 8234,
                ( Facing::South, true, Shape::Straight, Half::Top, ) => 8235,
                ( Facing::South, false, Shape::Straight, Half::Top, ) => 8236,
                ( Facing::South, true, Shape::InnerLeft, Half::Top, ) => 8237,
                ( Facing::South, false, Shape::InnerLeft, Half::Top, ) => 8238,
                ( Facing::South, true, Shape::InnerRight, Half::Top, ) => 8239,
                ( Facing::South, false, Shape::InnerRight, Half::Top, ) => 8240,
                ( Facing::South, true, Shape::OuterLeft, Half::Top, ) => 8241,
                ( Facing::South, false, Shape::OuterLeft, Half::Top, ) => 8242,
                ( Facing::South, true, Shape::OuterRight, Half::Top, ) => 8243,
                ( Facing::South, false, Shape::OuterRight, Half::Top, ) => 8244,
                ( Facing::South, true, Shape::Straight, Half::Bottom, ) => 8245,
                ( Facing::South, false, Shape::Straight, Half::Bottom, ) => 8246,
                ( Facing::South, true, Shape::InnerLeft, Half::Bottom, ) => 8247,
                ( Facing::South, false, Shape::InnerLeft, Half::Bottom, ) => 8248,
                ( Facing::South, true, Shape::InnerRight, Half::Bottom, ) => 8249,
                ( Facing::South, false, Shape::InnerRight, Half::Bottom, ) => 8250,
                ( Facing::South, true, Shape::OuterLeft, Half::Bottom, ) => 8251,
                ( Facing::South, false, Shape::OuterLeft, Half::Bottom, ) => 8252,
                ( Facing::South, true, Shape::OuterRight, Half::Bottom, ) => 8253,
                ( Facing::South, false, Shape::OuterRight, Half::Bottom, ) => 8254,
                ( Facing::West, true, Shape::Straight, Half::Top, ) => 8255,
                ( Facing::West, false, Shape::Straight, Half::Top, ) => 8256,
                ( Facing::West, true, Shape::InnerLeft, Half::Top, ) => 8257,
                ( Facing::West, false, Shape::InnerLeft, Half::Top, ) => 8258,
                ( Facing::West, true, Shape::InnerRight, Half::Top, ) => 8259,
                ( Facing::West, false, Shape::InnerRight, Half::Top, ) => 8260,
                ( Facing::West, true, Shape::OuterLeft, Half::Top, ) => 8261,
                ( Facing::West, false, Shape::OuterLeft, Half::Top, ) => 8262,
                ( Facing::West, true, Shape::OuterRight, Half::Top, ) => 8263,
                ( Facing::West, false, Shape::OuterRight, Half::Top, ) => 8264,
                ( Facing::West, true, Shape::Straight, Half::Bottom, ) => 8265,
                ( Facing::West, false, Shape::Straight, Half::Bottom, ) => 8266,
                ( Facing::West, true, Shape::InnerLeft, Half::Bottom, ) => 8267,
                ( Facing::West, false, Shape::InnerLeft, Half::Bottom, ) => 8268,
                ( Facing::West, true, Shape::InnerRight, Half::Bottom, ) => 8269,
                ( Facing::West, false, Shape::InnerRight, Half::Bottom, ) => 8270,
                ( Facing::West, true, Shape::OuterLeft, Half::Bottom, ) => 8271,
                ( Facing::West, false, Shape::OuterLeft, Half::Bottom, ) => 8272,
                ( Facing::West, true, Shape::OuterRight, Half::Bottom, ) => 8273,
                ( Facing::West, false, Shape::OuterRight, Half::Bottom, ) => 8274,
                ( Facing::East, true, Shape::Straight, Half::Top, ) => 8275,
                ( Facing::East, false, Shape::Straight, Half::Top, ) => 8276,
                ( Facing::East, true, Shape::InnerLeft, Half::Top, ) => 8277,
                ( Facing::East, false, Shape::InnerLeft, Half::Top, ) => 8278,
                ( Facing::East, true, Shape::InnerRight, Half::Top, ) => 8279,
                ( Facing::East, false, Shape::InnerRight, Half::Top, ) => 8280,
                ( Facing::East, true, Shape::OuterLeft, Half::Top, ) => 8281,
                ( Facing::East, false, Shape::OuterLeft, Half::Top, ) => 8282,
                ( Facing::East, true, Shape::OuterRight, Half::Top, ) => 8283,
                ( Facing::East, false, Shape::OuterRight, Half::Top, ) => 8284,
                ( Facing::East, true, Shape::Straight, Half::Bottom, ) => 8285,
                ( Facing::East, false, Shape::Straight, Half::Bottom, ) => 8286,
                ( Facing::East, true, Shape::InnerLeft, Half::Bottom, ) => 8287,
                ( Facing::East, false, Shape::InnerLeft, Half::Bottom, ) => 8288,
                ( Facing::East, true, Shape::InnerRight, Half::Bottom, ) => 8289,
                ( Facing::East, false, Shape::InnerRight, Half::Bottom, ) => 8290,
                ( Facing::East, true, Shape::OuterLeft, Half::Bottom, ) => 8291,
                ( Facing::East, false, Shape::OuterLeft, Half::Bottom, ) => 8292,
                ( Facing::East, true, Shape::OuterRight, Half::Bottom, ) => 8293,
                ( Facing::East, false, Shape::OuterRight, Half::Bottom, ) => 8294,
            })
        }
    }

    impl From<SandstoneStairs> for BlockState {
        #[inline(always)]
        fn from(value : SandstoneStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SandstoneStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SandstoneStairs { }

    impl Block for SandstoneStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
            shape : Shape::Straight,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:vine` block.
pub mod vine {
    use super::*;

    /// `minecraft:vine` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Vine {
        /// `west` state.
        pub west : bool,
        /// `east` state.
        pub east : bool,
        /// `north` state.
        pub north : bool,
        /// `south` state.
        pub south : bool,
        /// `up` state.
        pub up : bool,
    }

    impl Vine {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.west, self.east, self.north, self.south, self.up, )) {
                ( true, true, true, true, true, ) => 7080,
                ( false, true, true, true, true, ) => 7081,
                ( true, true, true, true, false, ) => 7082,
                ( false, true, true, true, false, ) => 7083,
                ( true, true, true, false, true, ) => 7084,
                ( false, true, true, false, true, ) => 7085,
                ( true, true, true, false, false, ) => 7086,
                ( false, true, true, false, false, ) => 7087,
                ( true, true, false, true, true, ) => 7088,
                ( false, true, false, true, true, ) => 7089,
                ( true, true, false, true, false, ) => 7090,
                ( false, true, false, true, false, ) => 7091,
                ( true, true, false, false, true, ) => 7092,
                ( false, true, false, false, true, ) => 7093,
                ( true, true, false, false, false, ) => 7094,
                ( false, true, false, false, false, ) => 7095,
                ( true, false, true, true, true, ) => 7096,
                ( false, false, true, true, true, ) => 7097,
                ( true, false, true, true, false, ) => 7098,
                ( false, false, true, true, false, ) => 7099,
                ( true, false, true, false, true, ) => 7100,
                ( false, false, true, false, true, ) => 7101,
                ( true, false, true, false, false, ) => 7102,
                ( false, false, true, false, false, ) => 7103,
                ( true, false, false, true, true, ) => 7104,
                ( false, false, false, true, true, ) => 7105,
                ( true, false, false, true, false, ) => 7106,
                ( false, false, false, true, false, ) => 7107,
                ( true, false, false, false, true, ) => 7108,
                ( false, false, false, false, true, ) => 7109,
                ( true, false, false, false, false, ) => 7110,
                ( false, false, false, false, false, ) => 7111,
            })
        }
    }

    impl From<Vine> for BlockState {
        #[inline(always)]
        fn from(value : Vine) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Vine {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Vine { }

    impl Block for Vine {
        const DEFAULT_STATE : Self = Self {
            west : false,
            east : false,
            north : false,
            south : false,
            up : false,
        };
    }

}

/// `minecraft:pink_wall_banner` block.
pub mod pink_wall_banner {
    use super::*;

    /// `minecraft:pink_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PinkWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PinkWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11928,
                ( Facing::South, ) => 11929,
                ( Facing::West, ) => 11930,
                ( Facing::East, ) => 11931,
            })
        }
    }

    impl From<PinkWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : PinkWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PinkWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PinkWallBanner { }

    impl Block for PinkWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:crimson_fence` block.
pub mod crimson_fence {
    use super::*;

    /// `minecraft:crimson_fence` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonFence {
        /// `east` state.
        pub east : bool,
        /// `north` state.
        pub north : bool,
        /// `south` state.
        pub south : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : bool,
    }

    impl CrimsonFence {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.north, self.south, self.waterlogged, self.west, )) {
                ( true, true, true, true, true, ) => 19739,
                ( true, true, true, true, false, ) => 19740,
                ( true, true, true, false, true, ) => 19741,
                ( true, true, true, false, false, ) => 19742,
                ( true, true, false, true, true, ) => 19743,
                ( true, true, false, true, false, ) => 19744,
                ( true, true, false, false, true, ) => 19745,
                ( true, true, false, false, false, ) => 19746,
                ( true, false, true, true, true, ) => 19747,
                ( true, false, true, true, false, ) => 19748,
                ( true, false, true, false, true, ) => 19749,
                ( true, false, true, false, false, ) => 19750,
                ( true, false, false, true, true, ) => 19751,
                ( true, false, false, true, false, ) => 19752,
                ( true, false, false, false, true, ) => 19753,
                ( true, false, false, false, false, ) => 19754,
                ( false, true, true, true, true, ) => 19755,
                ( false, true, true, true, false, ) => 19756,
                ( false, true, true, false, true, ) => 19757,
                ( false, true, true, false, false, ) => 19758,
                ( false, true, false, true, true, ) => 19759,
                ( false, true, false, true, false, ) => 19760,
                ( false, true, false, false, true, ) => 19761,
                ( false, true, false, false, false, ) => 19762,
                ( false, false, true, true, true, ) => 19763,
                ( false, false, true, true, false, ) => 19764,
                ( false, false, true, false, true, ) => 19765,
                ( false, false, true, false, false, ) => 19766,
                ( false, false, false, true, true, ) => 19767,
                ( false, false, false, true, false, ) => 19768,
                ( false, false, false, false, true, ) => 19769,
                ( false, false, false, false, false, ) => 19770,
            })
        }
    }

    impl From<CrimsonFence> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonFence) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonFence {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonFence { }

    impl Block for CrimsonFence {
        const DEFAULT_STATE : Self = Self {
            east : false,
            north : false,
            south : false,
            waterlogged : false,
            west : false,
        };
    }

}

/// `minecraft:spruce_log` block.
pub mod spruce_log {
    use super::*;

    /// `minecraft:spruce_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl SpruceLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 139,
                ( Axis::Y, ) => 140,
                ( Axis::Z, ) => 141,
            })
        }
    }

    impl From<SpruceLog> for BlockState {
        #[inline(always)]
        fn from(value : SpruceLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceLog { }

    impl Block for SpruceLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:deepslate_tile_wall` block.
pub mod deepslate_tile_wall {
    use super::*;

    /// `minecraft:deepslate_tile_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateTileWall {
        /// `east` state.
        pub east : East,
        /// `up` state.
        pub up : bool,
        /// `west` state.
        pub west : West,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `north` state.
        pub north : North,
        /// `south` state.
        pub south : South,
    }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    impl DeepslateTileWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.up, self.west, self.waterlogged, self.north, self.south, )) {
                ( East::None, true, West::None, true, North::None, South::None, ) => 26908,
                ( East::None, true, West::Low, true, North::None, South::None, ) => 26909,
                ( East::None, true, West::Tall, true, North::None, South::None, ) => 26910,
                ( East::None, true, West::None, false, North::None, South::None, ) => 26911,
                ( East::None, true, West::Low, false, North::None, South::None, ) => 26912,
                ( East::None, true, West::Tall, false, North::None, South::None, ) => 26913,
                ( East::None, false, West::None, true, North::None, South::None, ) => 26914,
                ( East::None, false, West::Low, true, North::None, South::None, ) => 26915,
                ( East::None, false, West::Tall, true, North::None, South::None, ) => 26916,
                ( East::None, false, West::None, false, North::None, South::None, ) => 26917,
                ( East::None, false, West::Low, false, North::None, South::None, ) => 26918,
                ( East::None, false, West::Tall, false, North::None, South::None, ) => 26919,
                ( East::None, true, West::None, true, North::None, South::Low, ) => 26920,
                ( East::None, true, West::Low, true, North::None, South::Low, ) => 26921,
                ( East::None, true, West::Tall, true, North::None, South::Low, ) => 26922,
                ( East::None, true, West::None, false, North::None, South::Low, ) => 26923,
                ( East::None, true, West::Low, false, North::None, South::Low, ) => 26924,
                ( East::None, true, West::Tall, false, North::None, South::Low, ) => 26925,
                ( East::None, false, West::None, true, North::None, South::Low, ) => 26926,
                ( East::None, false, West::Low, true, North::None, South::Low, ) => 26927,
                ( East::None, false, West::Tall, true, North::None, South::Low, ) => 26928,
                ( East::None, false, West::None, false, North::None, South::Low, ) => 26929,
                ( East::None, false, West::Low, false, North::None, South::Low, ) => 26930,
                ( East::None, false, West::Tall, false, North::None, South::Low, ) => 26931,
                ( East::None, true, West::None, true, North::None, South::Tall, ) => 26932,
                ( East::None, true, West::Low, true, North::None, South::Tall, ) => 26933,
                ( East::None, true, West::Tall, true, North::None, South::Tall, ) => 26934,
                ( East::None, true, West::None, false, North::None, South::Tall, ) => 26935,
                ( East::None, true, West::Low, false, North::None, South::Tall, ) => 26936,
                ( East::None, true, West::Tall, false, North::None, South::Tall, ) => 26937,
                ( East::None, false, West::None, true, North::None, South::Tall, ) => 26938,
                ( East::None, false, West::Low, true, North::None, South::Tall, ) => 26939,
                ( East::None, false, West::Tall, true, North::None, South::Tall, ) => 26940,
                ( East::None, false, West::None, false, North::None, South::Tall, ) => 26941,
                ( East::None, false, West::Low, false, North::None, South::Tall, ) => 26942,
                ( East::None, false, West::Tall, false, North::None, South::Tall, ) => 26943,
                ( East::None, true, West::None, true, North::Low, South::None, ) => 26944,
                ( East::None, true, West::Low, true, North::Low, South::None, ) => 26945,
                ( East::None, true, West::Tall, true, North::Low, South::None, ) => 26946,
                ( East::None, true, West::None, false, North::Low, South::None, ) => 26947,
                ( East::None, true, West::Low, false, North::Low, South::None, ) => 26948,
                ( East::None, true, West::Tall, false, North::Low, South::None, ) => 26949,
                ( East::None, false, West::None, true, North::Low, South::None, ) => 26950,
                ( East::None, false, West::Low, true, North::Low, South::None, ) => 26951,
                ( East::None, false, West::Tall, true, North::Low, South::None, ) => 26952,
                ( East::None, false, West::None, false, North::Low, South::None, ) => 26953,
                ( East::None, false, West::Low, false, North::Low, South::None, ) => 26954,
                ( East::None, false, West::Tall, false, North::Low, South::None, ) => 26955,
                ( East::None, true, West::None, true, North::Low, South::Low, ) => 26956,
                ( East::None, true, West::Low, true, North::Low, South::Low, ) => 26957,
                ( East::None, true, West::Tall, true, North::Low, South::Low, ) => 26958,
                ( East::None, true, West::None, false, North::Low, South::Low, ) => 26959,
                ( East::None, true, West::Low, false, North::Low, South::Low, ) => 26960,
                ( East::None, true, West::Tall, false, North::Low, South::Low, ) => 26961,
                ( East::None, false, West::None, true, North::Low, South::Low, ) => 26962,
                ( East::None, false, West::Low, true, North::Low, South::Low, ) => 26963,
                ( East::None, false, West::Tall, true, North::Low, South::Low, ) => 26964,
                ( East::None, false, West::None, false, North::Low, South::Low, ) => 26965,
                ( East::None, false, West::Low, false, North::Low, South::Low, ) => 26966,
                ( East::None, false, West::Tall, false, North::Low, South::Low, ) => 26967,
                ( East::None, true, West::None, true, North::Low, South::Tall, ) => 26968,
                ( East::None, true, West::Low, true, North::Low, South::Tall, ) => 26969,
                ( East::None, true, West::Tall, true, North::Low, South::Tall, ) => 26970,
                ( East::None, true, West::None, false, North::Low, South::Tall, ) => 26971,
                ( East::None, true, West::Low, false, North::Low, South::Tall, ) => 26972,
                ( East::None, true, West::Tall, false, North::Low, South::Tall, ) => 26973,
                ( East::None, false, West::None, true, North::Low, South::Tall, ) => 26974,
                ( East::None, false, West::Low, true, North::Low, South::Tall, ) => 26975,
                ( East::None, false, West::Tall, true, North::Low, South::Tall, ) => 26976,
                ( East::None, false, West::None, false, North::Low, South::Tall, ) => 26977,
                ( East::None, false, West::Low, false, North::Low, South::Tall, ) => 26978,
                ( East::None, false, West::Tall, false, North::Low, South::Tall, ) => 26979,
                ( East::None, true, West::None, true, North::Tall, South::None, ) => 26980,
                ( East::None, true, West::Low, true, North::Tall, South::None, ) => 26981,
                ( East::None, true, West::Tall, true, North::Tall, South::None, ) => 26982,
                ( East::None, true, West::None, false, North::Tall, South::None, ) => 26983,
                ( East::None, true, West::Low, false, North::Tall, South::None, ) => 26984,
                ( East::None, true, West::Tall, false, North::Tall, South::None, ) => 26985,
                ( East::None, false, West::None, true, North::Tall, South::None, ) => 26986,
                ( East::None, false, West::Low, true, North::Tall, South::None, ) => 26987,
                ( East::None, false, West::Tall, true, North::Tall, South::None, ) => 26988,
                ( East::None, false, West::None, false, North::Tall, South::None, ) => 26989,
                ( East::None, false, West::Low, false, North::Tall, South::None, ) => 26990,
                ( East::None, false, West::Tall, false, North::Tall, South::None, ) => 26991,
                ( East::None, true, West::None, true, North::Tall, South::Low, ) => 26992,
                ( East::None, true, West::Low, true, North::Tall, South::Low, ) => 26993,
                ( East::None, true, West::Tall, true, North::Tall, South::Low, ) => 26994,
                ( East::None, true, West::None, false, North::Tall, South::Low, ) => 26995,
                ( East::None, true, West::Low, false, North::Tall, South::Low, ) => 26996,
                ( East::None, true, West::Tall, false, North::Tall, South::Low, ) => 26997,
                ( East::None, false, West::None, true, North::Tall, South::Low, ) => 26998,
                ( East::None, false, West::Low, true, North::Tall, South::Low, ) => 26999,
                ( East::None, false, West::Tall, true, North::Tall, South::Low, ) => 27000,
                ( East::None, false, West::None, false, North::Tall, South::Low, ) => 27001,
                ( East::None, false, West::Low, false, North::Tall, South::Low, ) => 27002,
                ( East::None, false, West::Tall, false, North::Tall, South::Low, ) => 27003,
                ( East::None, true, West::None, true, North::Tall, South::Tall, ) => 27004,
                ( East::None, true, West::Low, true, North::Tall, South::Tall, ) => 27005,
                ( East::None, true, West::Tall, true, North::Tall, South::Tall, ) => 27006,
                ( East::None, true, West::None, false, North::Tall, South::Tall, ) => 27007,
                ( East::None, true, West::Low, false, North::Tall, South::Tall, ) => 27008,
                ( East::None, true, West::Tall, false, North::Tall, South::Tall, ) => 27009,
                ( East::None, false, West::None, true, North::Tall, South::Tall, ) => 27010,
                ( East::None, false, West::Low, true, North::Tall, South::Tall, ) => 27011,
                ( East::None, false, West::Tall, true, North::Tall, South::Tall, ) => 27012,
                ( East::None, false, West::None, false, North::Tall, South::Tall, ) => 27013,
                ( East::None, false, West::Low, false, North::Tall, South::Tall, ) => 27014,
                ( East::None, false, West::Tall, false, North::Tall, South::Tall, ) => 27015,
                ( East::Low, true, West::None, true, North::None, South::None, ) => 27016,
                ( East::Low, true, West::Low, true, North::None, South::None, ) => 27017,
                ( East::Low, true, West::Tall, true, North::None, South::None, ) => 27018,
                ( East::Low, true, West::None, false, North::None, South::None, ) => 27019,
                ( East::Low, true, West::Low, false, North::None, South::None, ) => 27020,
                ( East::Low, true, West::Tall, false, North::None, South::None, ) => 27021,
                ( East::Low, false, West::None, true, North::None, South::None, ) => 27022,
                ( East::Low, false, West::Low, true, North::None, South::None, ) => 27023,
                ( East::Low, false, West::Tall, true, North::None, South::None, ) => 27024,
                ( East::Low, false, West::None, false, North::None, South::None, ) => 27025,
                ( East::Low, false, West::Low, false, North::None, South::None, ) => 27026,
                ( East::Low, false, West::Tall, false, North::None, South::None, ) => 27027,
                ( East::Low, true, West::None, true, North::None, South::Low, ) => 27028,
                ( East::Low, true, West::Low, true, North::None, South::Low, ) => 27029,
                ( East::Low, true, West::Tall, true, North::None, South::Low, ) => 27030,
                ( East::Low, true, West::None, false, North::None, South::Low, ) => 27031,
                ( East::Low, true, West::Low, false, North::None, South::Low, ) => 27032,
                ( East::Low, true, West::Tall, false, North::None, South::Low, ) => 27033,
                ( East::Low, false, West::None, true, North::None, South::Low, ) => 27034,
                ( East::Low, false, West::Low, true, North::None, South::Low, ) => 27035,
                ( East::Low, false, West::Tall, true, North::None, South::Low, ) => 27036,
                ( East::Low, false, West::None, false, North::None, South::Low, ) => 27037,
                ( East::Low, false, West::Low, false, North::None, South::Low, ) => 27038,
                ( East::Low, false, West::Tall, false, North::None, South::Low, ) => 27039,
                ( East::Low, true, West::None, true, North::None, South::Tall, ) => 27040,
                ( East::Low, true, West::Low, true, North::None, South::Tall, ) => 27041,
                ( East::Low, true, West::Tall, true, North::None, South::Tall, ) => 27042,
                ( East::Low, true, West::None, false, North::None, South::Tall, ) => 27043,
                ( East::Low, true, West::Low, false, North::None, South::Tall, ) => 27044,
                ( East::Low, true, West::Tall, false, North::None, South::Tall, ) => 27045,
                ( East::Low, false, West::None, true, North::None, South::Tall, ) => 27046,
                ( East::Low, false, West::Low, true, North::None, South::Tall, ) => 27047,
                ( East::Low, false, West::Tall, true, North::None, South::Tall, ) => 27048,
                ( East::Low, false, West::None, false, North::None, South::Tall, ) => 27049,
                ( East::Low, false, West::Low, false, North::None, South::Tall, ) => 27050,
                ( East::Low, false, West::Tall, false, North::None, South::Tall, ) => 27051,
                ( East::Low, true, West::None, true, North::Low, South::None, ) => 27052,
                ( East::Low, true, West::Low, true, North::Low, South::None, ) => 27053,
                ( East::Low, true, West::Tall, true, North::Low, South::None, ) => 27054,
                ( East::Low, true, West::None, false, North::Low, South::None, ) => 27055,
                ( East::Low, true, West::Low, false, North::Low, South::None, ) => 27056,
                ( East::Low, true, West::Tall, false, North::Low, South::None, ) => 27057,
                ( East::Low, false, West::None, true, North::Low, South::None, ) => 27058,
                ( East::Low, false, West::Low, true, North::Low, South::None, ) => 27059,
                ( East::Low, false, West::Tall, true, North::Low, South::None, ) => 27060,
                ( East::Low, false, West::None, false, North::Low, South::None, ) => 27061,
                ( East::Low, false, West::Low, false, North::Low, South::None, ) => 27062,
                ( East::Low, false, West::Tall, false, North::Low, South::None, ) => 27063,
                ( East::Low, true, West::None, true, North::Low, South::Low, ) => 27064,
                ( East::Low, true, West::Low, true, North::Low, South::Low, ) => 27065,
                ( East::Low, true, West::Tall, true, North::Low, South::Low, ) => 27066,
                ( East::Low, true, West::None, false, North::Low, South::Low, ) => 27067,
                ( East::Low, true, West::Low, false, North::Low, South::Low, ) => 27068,
                ( East::Low, true, West::Tall, false, North::Low, South::Low, ) => 27069,
                ( East::Low, false, West::None, true, North::Low, South::Low, ) => 27070,
                ( East::Low, false, West::Low, true, North::Low, South::Low, ) => 27071,
                ( East::Low, false, West::Tall, true, North::Low, South::Low, ) => 27072,
                ( East::Low, false, West::None, false, North::Low, South::Low, ) => 27073,
                ( East::Low, false, West::Low, false, North::Low, South::Low, ) => 27074,
                ( East::Low, false, West::Tall, false, North::Low, South::Low, ) => 27075,
                ( East::Low, true, West::None, true, North::Low, South::Tall, ) => 27076,
                ( East::Low, true, West::Low, true, North::Low, South::Tall, ) => 27077,
                ( East::Low, true, West::Tall, true, North::Low, South::Tall, ) => 27078,
                ( East::Low, true, West::None, false, North::Low, South::Tall, ) => 27079,
                ( East::Low, true, West::Low, false, North::Low, South::Tall, ) => 27080,
                ( East::Low, true, West::Tall, false, North::Low, South::Tall, ) => 27081,
                ( East::Low, false, West::None, true, North::Low, South::Tall, ) => 27082,
                ( East::Low, false, West::Low, true, North::Low, South::Tall, ) => 27083,
                ( East::Low, false, West::Tall, true, North::Low, South::Tall, ) => 27084,
                ( East::Low, false, West::None, false, North::Low, South::Tall, ) => 27085,
                ( East::Low, false, West::Low, false, North::Low, South::Tall, ) => 27086,
                ( East::Low, false, West::Tall, false, North::Low, South::Tall, ) => 27087,
                ( East::Low, true, West::None, true, North::Tall, South::None, ) => 27088,
                ( East::Low, true, West::Low, true, North::Tall, South::None, ) => 27089,
                ( East::Low, true, West::Tall, true, North::Tall, South::None, ) => 27090,
                ( East::Low, true, West::None, false, North::Tall, South::None, ) => 27091,
                ( East::Low, true, West::Low, false, North::Tall, South::None, ) => 27092,
                ( East::Low, true, West::Tall, false, North::Tall, South::None, ) => 27093,
                ( East::Low, false, West::None, true, North::Tall, South::None, ) => 27094,
                ( East::Low, false, West::Low, true, North::Tall, South::None, ) => 27095,
                ( East::Low, false, West::Tall, true, North::Tall, South::None, ) => 27096,
                ( East::Low, false, West::None, false, North::Tall, South::None, ) => 27097,
                ( East::Low, false, West::Low, false, North::Tall, South::None, ) => 27098,
                ( East::Low, false, West::Tall, false, North::Tall, South::None, ) => 27099,
                ( East::Low, true, West::None, true, North::Tall, South::Low, ) => 27100,
                ( East::Low, true, West::Low, true, North::Tall, South::Low, ) => 27101,
                ( East::Low, true, West::Tall, true, North::Tall, South::Low, ) => 27102,
                ( East::Low, true, West::None, false, North::Tall, South::Low, ) => 27103,
                ( East::Low, true, West::Low, false, North::Tall, South::Low, ) => 27104,
                ( East::Low, true, West::Tall, false, North::Tall, South::Low, ) => 27105,
                ( East::Low, false, West::None, true, North::Tall, South::Low, ) => 27106,
                ( East::Low, false, West::Low, true, North::Tall, South::Low, ) => 27107,
                ( East::Low, false, West::Tall, true, North::Tall, South::Low, ) => 27108,
                ( East::Low, false, West::None, false, North::Tall, South::Low, ) => 27109,
                ( East::Low, false, West::Low, false, North::Tall, South::Low, ) => 27110,
                ( East::Low, false, West::Tall, false, North::Tall, South::Low, ) => 27111,
                ( East::Low, true, West::None, true, North::Tall, South::Tall, ) => 27112,
                ( East::Low, true, West::Low, true, North::Tall, South::Tall, ) => 27113,
                ( East::Low, true, West::Tall, true, North::Tall, South::Tall, ) => 27114,
                ( East::Low, true, West::None, false, North::Tall, South::Tall, ) => 27115,
                ( East::Low, true, West::Low, false, North::Tall, South::Tall, ) => 27116,
                ( East::Low, true, West::Tall, false, North::Tall, South::Tall, ) => 27117,
                ( East::Low, false, West::None, true, North::Tall, South::Tall, ) => 27118,
                ( East::Low, false, West::Low, true, North::Tall, South::Tall, ) => 27119,
                ( East::Low, false, West::Tall, true, North::Tall, South::Tall, ) => 27120,
                ( East::Low, false, West::None, false, North::Tall, South::Tall, ) => 27121,
                ( East::Low, false, West::Low, false, North::Tall, South::Tall, ) => 27122,
                ( East::Low, false, West::Tall, false, North::Tall, South::Tall, ) => 27123,
                ( East::Tall, true, West::None, true, North::None, South::None, ) => 27124,
                ( East::Tall, true, West::Low, true, North::None, South::None, ) => 27125,
                ( East::Tall, true, West::Tall, true, North::None, South::None, ) => 27126,
                ( East::Tall, true, West::None, false, North::None, South::None, ) => 27127,
                ( East::Tall, true, West::Low, false, North::None, South::None, ) => 27128,
                ( East::Tall, true, West::Tall, false, North::None, South::None, ) => 27129,
                ( East::Tall, false, West::None, true, North::None, South::None, ) => 27130,
                ( East::Tall, false, West::Low, true, North::None, South::None, ) => 27131,
                ( East::Tall, false, West::Tall, true, North::None, South::None, ) => 27132,
                ( East::Tall, false, West::None, false, North::None, South::None, ) => 27133,
                ( East::Tall, false, West::Low, false, North::None, South::None, ) => 27134,
                ( East::Tall, false, West::Tall, false, North::None, South::None, ) => 27135,
                ( East::Tall, true, West::None, true, North::None, South::Low, ) => 27136,
                ( East::Tall, true, West::Low, true, North::None, South::Low, ) => 27137,
                ( East::Tall, true, West::Tall, true, North::None, South::Low, ) => 27138,
                ( East::Tall, true, West::None, false, North::None, South::Low, ) => 27139,
                ( East::Tall, true, West::Low, false, North::None, South::Low, ) => 27140,
                ( East::Tall, true, West::Tall, false, North::None, South::Low, ) => 27141,
                ( East::Tall, false, West::None, true, North::None, South::Low, ) => 27142,
                ( East::Tall, false, West::Low, true, North::None, South::Low, ) => 27143,
                ( East::Tall, false, West::Tall, true, North::None, South::Low, ) => 27144,
                ( East::Tall, false, West::None, false, North::None, South::Low, ) => 27145,
                ( East::Tall, false, West::Low, false, North::None, South::Low, ) => 27146,
                ( East::Tall, false, West::Tall, false, North::None, South::Low, ) => 27147,
                ( East::Tall, true, West::None, true, North::None, South::Tall, ) => 27148,
                ( East::Tall, true, West::Low, true, North::None, South::Tall, ) => 27149,
                ( East::Tall, true, West::Tall, true, North::None, South::Tall, ) => 27150,
                ( East::Tall, true, West::None, false, North::None, South::Tall, ) => 27151,
                ( East::Tall, true, West::Low, false, North::None, South::Tall, ) => 27152,
                ( East::Tall, true, West::Tall, false, North::None, South::Tall, ) => 27153,
                ( East::Tall, false, West::None, true, North::None, South::Tall, ) => 27154,
                ( East::Tall, false, West::Low, true, North::None, South::Tall, ) => 27155,
                ( East::Tall, false, West::Tall, true, North::None, South::Tall, ) => 27156,
                ( East::Tall, false, West::None, false, North::None, South::Tall, ) => 27157,
                ( East::Tall, false, West::Low, false, North::None, South::Tall, ) => 27158,
                ( East::Tall, false, West::Tall, false, North::None, South::Tall, ) => 27159,
                ( East::Tall, true, West::None, true, North::Low, South::None, ) => 27160,
                ( East::Tall, true, West::Low, true, North::Low, South::None, ) => 27161,
                ( East::Tall, true, West::Tall, true, North::Low, South::None, ) => 27162,
                ( East::Tall, true, West::None, false, North::Low, South::None, ) => 27163,
                ( East::Tall, true, West::Low, false, North::Low, South::None, ) => 27164,
                ( East::Tall, true, West::Tall, false, North::Low, South::None, ) => 27165,
                ( East::Tall, false, West::None, true, North::Low, South::None, ) => 27166,
                ( East::Tall, false, West::Low, true, North::Low, South::None, ) => 27167,
                ( East::Tall, false, West::Tall, true, North::Low, South::None, ) => 27168,
                ( East::Tall, false, West::None, false, North::Low, South::None, ) => 27169,
                ( East::Tall, false, West::Low, false, North::Low, South::None, ) => 27170,
                ( East::Tall, false, West::Tall, false, North::Low, South::None, ) => 27171,
                ( East::Tall, true, West::None, true, North::Low, South::Low, ) => 27172,
                ( East::Tall, true, West::Low, true, North::Low, South::Low, ) => 27173,
                ( East::Tall, true, West::Tall, true, North::Low, South::Low, ) => 27174,
                ( East::Tall, true, West::None, false, North::Low, South::Low, ) => 27175,
                ( East::Tall, true, West::Low, false, North::Low, South::Low, ) => 27176,
                ( East::Tall, true, West::Tall, false, North::Low, South::Low, ) => 27177,
                ( East::Tall, false, West::None, true, North::Low, South::Low, ) => 27178,
                ( East::Tall, false, West::Low, true, North::Low, South::Low, ) => 27179,
                ( East::Tall, false, West::Tall, true, North::Low, South::Low, ) => 27180,
                ( East::Tall, false, West::None, false, North::Low, South::Low, ) => 27181,
                ( East::Tall, false, West::Low, false, North::Low, South::Low, ) => 27182,
                ( East::Tall, false, West::Tall, false, North::Low, South::Low, ) => 27183,
                ( East::Tall, true, West::None, true, North::Low, South::Tall, ) => 27184,
                ( East::Tall, true, West::Low, true, North::Low, South::Tall, ) => 27185,
                ( East::Tall, true, West::Tall, true, North::Low, South::Tall, ) => 27186,
                ( East::Tall, true, West::None, false, North::Low, South::Tall, ) => 27187,
                ( East::Tall, true, West::Low, false, North::Low, South::Tall, ) => 27188,
                ( East::Tall, true, West::Tall, false, North::Low, South::Tall, ) => 27189,
                ( East::Tall, false, West::None, true, North::Low, South::Tall, ) => 27190,
                ( East::Tall, false, West::Low, true, North::Low, South::Tall, ) => 27191,
                ( East::Tall, false, West::Tall, true, North::Low, South::Tall, ) => 27192,
                ( East::Tall, false, West::None, false, North::Low, South::Tall, ) => 27193,
                ( East::Tall, false, West::Low, false, North::Low, South::Tall, ) => 27194,
                ( East::Tall, false, West::Tall, false, North::Low, South::Tall, ) => 27195,
                ( East::Tall, true, West::None, true, North::Tall, South::None, ) => 27196,
                ( East::Tall, true, West::Low, true, North::Tall, South::None, ) => 27197,
                ( East::Tall, true, West::Tall, true, North::Tall, South::None, ) => 27198,
                ( East::Tall, true, West::None, false, North::Tall, South::None, ) => 27199,
                ( East::Tall, true, West::Low, false, North::Tall, South::None, ) => 27200,
                ( East::Tall, true, West::Tall, false, North::Tall, South::None, ) => 27201,
                ( East::Tall, false, West::None, true, North::Tall, South::None, ) => 27202,
                ( East::Tall, false, West::Low, true, North::Tall, South::None, ) => 27203,
                ( East::Tall, false, West::Tall, true, North::Tall, South::None, ) => 27204,
                ( East::Tall, false, West::None, false, North::Tall, South::None, ) => 27205,
                ( East::Tall, false, West::Low, false, North::Tall, South::None, ) => 27206,
                ( East::Tall, false, West::Tall, false, North::Tall, South::None, ) => 27207,
                ( East::Tall, true, West::None, true, North::Tall, South::Low, ) => 27208,
                ( East::Tall, true, West::Low, true, North::Tall, South::Low, ) => 27209,
                ( East::Tall, true, West::Tall, true, North::Tall, South::Low, ) => 27210,
                ( East::Tall, true, West::None, false, North::Tall, South::Low, ) => 27211,
                ( East::Tall, true, West::Low, false, North::Tall, South::Low, ) => 27212,
                ( East::Tall, true, West::Tall, false, North::Tall, South::Low, ) => 27213,
                ( East::Tall, false, West::None, true, North::Tall, South::Low, ) => 27214,
                ( East::Tall, false, West::Low, true, North::Tall, South::Low, ) => 27215,
                ( East::Tall, false, West::Tall, true, North::Tall, South::Low, ) => 27216,
                ( East::Tall, false, West::None, false, North::Tall, South::Low, ) => 27217,
                ( East::Tall, false, West::Low, false, North::Tall, South::Low, ) => 27218,
                ( East::Tall, false, West::Tall, false, North::Tall, South::Low, ) => 27219,
                ( East::Tall, true, West::None, true, North::Tall, South::Tall, ) => 27220,
                ( East::Tall, true, West::Low, true, North::Tall, South::Tall, ) => 27221,
                ( East::Tall, true, West::Tall, true, North::Tall, South::Tall, ) => 27222,
                ( East::Tall, true, West::None, false, North::Tall, South::Tall, ) => 27223,
                ( East::Tall, true, West::Low, false, North::Tall, South::Tall, ) => 27224,
                ( East::Tall, true, West::Tall, false, North::Tall, South::Tall, ) => 27225,
                ( East::Tall, false, West::None, true, North::Tall, South::Tall, ) => 27226,
                ( East::Tall, false, West::Low, true, North::Tall, South::Tall, ) => 27227,
                ( East::Tall, false, West::Tall, true, North::Tall, South::Tall, ) => 27228,
                ( East::Tall, false, West::None, false, North::Tall, South::Tall, ) => 27229,
                ( East::Tall, false, West::Low, false, North::Tall, South::Tall, ) => 27230,
                ( East::Tall, false, West::Tall, false, North::Tall, South::Tall, ) => 27231,
            })
        }
    }

    impl From<DeepslateTileWall> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateTileWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateTileWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateTileWall { }

    impl Block for DeepslateTileWall {
        const DEFAULT_STATE : Self = Self {
            east : East::None,
            up : true,
            west : West::None,
            waterlogged : false,
            north : North::None,
            south : South::None,
        };
    }

}

/// `minecraft:horn_coral_block` block.
pub mod horn_coral_block {
    use super::*;

    /// `minecraft:horn_coral_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct HornCoralBlock;

    impl HornCoralBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13867)
        }
    }

    impl From<HornCoralBlock> for BlockState {
        #[inline(always)]
        fn from(value : HornCoralBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for HornCoralBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for HornCoralBlock { }

    impl Block for HornCoralBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:end_portal_frame` block.
pub mod end_portal_frame {
    use super::*;

    /// `minecraft:end_portal_frame` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct EndPortalFrame {
        /// `facing` state.
        pub facing : Facing,
        /// `eye` state.
        pub eye : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl EndPortalFrame {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.eye, )) {
                ( Facing::North, true, ) => 8191,
                ( Facing::South, true, ) => 8192,
                ( Facing::West, true, ) => 8193,
                ( Facing::East, true, ) => 8194,
                ( Facing::North, false, ) => 8195,
                ( Facing::South, false, ) => 8196,
                ( Facing::West, false, ) => 8197,
                ( Facing::East, false, ) => 8198,
            })
        }
    }

    impl From<EndPortalFrame> for BlockState {
        #[inline(always)]
        fn from(value : EndPortalFrame) -> Self {
            value.to_block_state()
        }
    }

    impl Default for EndPortalFrame {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for EndPortalFrame { }

    impl Block for EndPortalFrame {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            eye : false,
        };
    }

}

/// `minecraft:cherry_sapling` block.
pub mod cherry_sapling {
    use super::*;

    /// `minecraft:cherry_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherrySapling {
        /// `stage` state.
        pub stage : Stage,
    }

    /// `stage` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Stage {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
    }
    impl crate::Sealed for Stage { }
    impl BlockProperty for Stage { }

    impl CherrySapling {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.stage, )) {
                ( Stage::N0, ) => 39,
                ( Stage::N1, ) => 40,
            })
        }
    }

    impl From<CherrySapling> for BlockState {
        #[inline(always)]
        fn from(value : CherrySapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherrySapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherrySapling { }

    impl Block for CherrySapling {
        const DEFAULT_STATE : Self = Self {
            stage : Stage::N0,
        };
    }

}

/// `minecraft:black_candle_cake` block.
pub mod black_candle_cake {
    use super::*;

    /// `minecraft:black_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl BlackCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22089,
                ( false, ) => 22090,
            })
        }
    }

    impl From<BlackCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : BlackCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackCandleCake { }

    impl Block for BlackCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:jungle_slab` block.
pub mod jungle_slab {
    use super::*;

    /// `minecraft:jungle_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl JungleSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 12069,
                ( false, Kind::Top, ) => 12070,
                ( true, Kind::Bottom, ) => 12071,
                ( false, Kind::Bottom, ) => 12072,
                ( true, Kind::Double, ) => 12073,
                ( false, Kind::Double, ) => 12074,
            })
        }
    }

    impl From<JungleSlab> for BlockState {
        #[inline(always)]
        fn from(value : JungleSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleSlab { }

    impl Block for JungleSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:nether_wart` block.
pub mod nether_wart {
    use super::*;

    /// `minecraft:nether_wart` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct NetherWart {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl NetherWart {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 8169,
                ( Age::N1, ) => 8170,
                ( Age::N2, ) => 8171,
                ( Age::N3, ) => 8172,
            })
        }
    }

    impl From<NetherWart> for BlockState {
        #[inline(always)]
        fn from(value : NetherWart) -> Self {
            value.to_block_state()
        }
    }

    impl Default for NetherWart {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for NetherWart { }

    impl Block for NetherWart {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:birch_wall_sign` block.
pub mod birch_wall_sign {
    use super::*;

    /// `minecraft:birch_wall_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchWallSign {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BirchWallSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 4874,
                ( Facing::North, false, ) => 4875,
                ( Facing::South, true, ) => 4876,
                ( Facing::South, false, ) => 4877,
                ( Facing::West, true, ) => 4878,
                ( Facing::West, false, ) => 4879,
                ( Facing::East, true, ) => 4880,
                ( Facing::East, false, ) => 4881,
            })
        }
    }

    impl From<BirchWallSign> for BlockState {
        #[inline(always)]
        fn from(value : BirchWallSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchWallSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchWallSign { }

    impl Block for BirchWallSign {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:mud_bricks` block.
pub mod mud_bricks {
    use super::*;

    /// `minecraft:mud_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MudBricks;

    impl MudBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6785)
        }
    }

    impl From<MudBricks> for BlockState {
        #[inline(always)]
        fn from(value : MudBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MudBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MudBricks { }

    impl Block for MudBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:shulker_box` block.
pub mod shulker_box {
    use super::*;

    /// `minecraft:shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl ShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13585,
                ( Facing::East, ) => 13586,
                ( Facing::South, ) => 13587,
                ( Facing::West, ) => 13588,
                ( Facing::Up, ) => 13589,
                ( Facing::Down, ) => 13590,
            })
        }
    }

    impl From<ShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : ShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ShulkerBox { }

    impl Block for ShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:tripwire` block.
pub mod tripwire {
    use super::*;

    /// `minecraft:tripwire` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Tripwire {
        /// `west` state.
        pub west : bool,
        /// `disarmed` state.
        pub disarmed : bool,
        /// `north` state.
        pub north : bool,
        /// `attached` state.
        pub attached : bool,
        /// `powered` state.
        pub powered : bool,
        /// `east` state.
        pub east : bool,
        /// `south` state.
        pub south : bool,
    }

    impl Tripwire {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.west, self.disarmed, self.north, self.attached, self.powered, self.east, self.south, )) {
                ( true, true, true, true, true, true, true, ) => 8321,
                ( false, true, true, true, true, true, true, ) => 8322,
                ( true, true, true, true, true, true, false, ) => 8323,
                ( false, true, true, true, true, true, false, ) => 8324,
                ( true, true, true, true, false, true, true, ) => 8325,
                ( false, true, true, true, false, true, true, ) => 8326,
                ( true, true, true, true, false, true, false, ) => 8327,
                ( false, true, true, true, false, true, false, ) => 8328,
                ( true, true, false, true, true, true, true, ) => 8329,
                ( false, true, false, true, true, true, true, ) => 8330,
                ( true, true, false, true, true, true, false, ) => 8331,
                ( false, true, false, true, true, true, false, ) => 8332,
                ( true, true, false, true, false, true, true, ) => 8333,
                ( false, true, false, true, false, true, true, ) => 8334,
                ( true, true, false, true, false, true, false, ) => 8335,
                ( false, true, false, true, false, true, false, ) => 8336,
                ( true, true, true, true, true, false, true, ) => 8337,
                ( false, true, true, true, true, false, true, ) => 8338,
                ( true, true, true, true, true, false, false, ) => 8339,
                ( false, true, true, true, true, false, false, ) => 8340,
                ( true, true, true, true, false, false, true, ) => 8341,
                ( false, true, true, true, false, false, true, ) => 8342,
                ( true, true, true, true, false, false, false, ) => 8343,
                ( false, true, true, true, false, false, false, ) => 8344,
                ( true, true, false, true, true, false, true, ) => 8345,
                ( false, true, false, true, true, false, true, ) => 8346,
                ( true, true, false, true, true, false, false, ) => 8347,
                ( false, true, false, true, true, false, false, ) => 8348,
                ( true, true, false, true, false, false, true, ) => 8349,
                ( false, true, false, true, false, false, true, ) => 8350,
                ( true, true, false, true, false, false, false, ) => 8351,
                ( false, true, false, true, false, false, false, ) => 8352,
                ( true, false, true, true, true, true, true, ) => 8353,
                ( false, false, true, true, true, true, true, ) => 8354,
                ( true, false, true, true, true, true, false, ) => 8355,
                ( false, false, true, true, true, true, false, ) => 8356,
                ( true, false, true, true, false, true, true, ) => 8357,
                ( false, false, true, true, false, true, true, ) => 8358,
                ( true, false, true, true, false, true, false, ) => 8359,
                ( false, false, true, true, false, true, false, ) => 8360,
                ( true, false, false, true, true, true, true, ) => 8361,
                ( false, false, false, true, true, true, true, ) => 8362,
                ( true, false, false, true, true, true, false, ) => 8363,
                ( false, false, false, true, true, true, false, ) => 8364,
                ( true, false, false, true, false, true, true, ) => 8365,
                ( false, false, false, true, false, true, true, ) => 8366,
                ( true, false, false, true, false, true, false, ) => 8367,
                ( false, false, false, true, false, true, false, ) => 8368,
                ( true, false, true, true, true, false, true, ) => 8369,
                ( false, false, true, true, true, false, true, ) => 8370,
                ( true, false, true, true, true, false, false, ) => 8371,
                ( false, false, true, true, true, false, false, ) => 8372,
                ( true, false, true, true, false, false, true, ) => 8373,
                ( false, false, true, true, false, false, true, ) => 8374,
                ( true, false, true, true, false, false, false, ) => 8375,
                ( false, false, true, true, false, false, false, ) => 8376,
                ( true, false, false, true, true, false, true, ) => 8377,
                ( false, false, false, true, true, false, true, ) => 8378,
                ( true, false, false, true, true, false, false, ) => 8379,
                ( false, false, false, true, true, false, false, ) => 8380,
                ( true, false, false, true, false, false, true, ) => 8381,
                ( false, false, false, true, false, false, true, ) => 8382,
                ( true, false, false, true, false, false, false, ) => 8383,
                ( false, false, false, true, false, false, false, ) => 8384,
                ( true, true, true, false, true, true, true, ) => 8385,
                ( false, true, true, false, true, true, true, ) => 8386,
                ( true, true, true, false, true, true, false, ) => 8387,
                ( false, true, true, false, true, true, false, ) => 8388,
                ( true, true, true, false, false, true, true, ) => 8389,
                ( false, true, true, false, false, true, true, ) => 8390,
                ( true, true, true, false, false, true, false, ) => 8391,
                ( false, true, true, false, false, true, false, ) => 8392,
                ( true, true, false, false, true, true, true, ) => 8393,
                ( false, true, false, false, true, true, true, ) => 8394,
                ( true, true, false, false, true, true, false, ) => 8395,
                ( false, true, false, false, true, true, false, ) => 8396,
                ( true, true, false, false, false, true, true, ) => 8397,
                ( false, true, false, false, false, true, true, ) => 8398,
                ( true, true, false, false, false, true, false, ) => 8399,
                ( false, true, false, false, false, true, false, ) => 8400,
                ( true, true, true, false, true, false, true, ) => 8401,
                ( false, true, true, false, true, false, true, ) => 8402,
                ( true, true, true, false, true, false, false, ) => 8403,
                ( false, true, true, false, true, false, false, ) => 8404,
                ( true, true, true, false, false, false, true, ) => 8405,
                ( false, true, true, false, false, false, true, ) => 8406,
                ( true, true, true, false, false, false, false, ) => 8407,
                ( false, true, true, false, false, false, false, ) => 8408,
                ( true, true, false, false, true, false, true, ) => 8409,
                ( false, true, false, false, true, false, true, ) => 8410,
                ( true, true, false, false, true, false, false, ) => 8411,
                ( false, true, false, false, true, false, false, ) => 8412,
                ( true, true, false, false, false, false, true, ) => 8413,
                ( false, true, false, false, false, false, true, ) => 8414,
                ( true, true, false, false, false, false, false, ) => 8415,
                ( false, true, false, false, false, false, false, ) => 8416,
                ( true, false, true, false, true, true, true, ) => 8417,
                ( false, false, true, false, true, true, true, ) => 8418,
                ( true, false, true, false, true, true, false, ) => 8419,
                ( false, false, true, false, true, true, false, ) => 8420,
                ( true, false, true, false, false, true, true, ) => 8421,
                ( false, false, true, false, false, true, true, ) => 8422,
                ( true, false, true, false, false, true, false, ) => 8423,
                ( false, false, true, false, false, true, false, ) => 8424,
                ( true, false, false, false, true, true, true, ) => 8425,
                ( false, false, false, false, true, true, true, ) => 8426,
                ( true, false, false, false, true, true, false, ) => 8427,
                ( false, false, false, false, true, true, false, ) => 8428,
                ( true, false, false, false, false, true, true, ) => 8429,
                ( false, false, false, false, false, true, true, ) => 8430,
                ( true, false, false, false, false, true, false, ) => 8431,
                ( false, false, false, false, false, true, false, ) => 8432,
                ( true, false, true, false, true, false, true, ) => 8433,
                ( false, false, true, false, true, false, true, ) => 8434,
                ( true, false, true, false, true, false, false, ) => 8435,
                ( false, false, true, false, true, false, false, ) => 8436,
                ( true, false, true, false, false, false, true, ) => 8437,
                ( false, false, true, false, false, false, true, ) => 8438,
                ( true, false, true, false, false, false, false, ) => 8439,
                ( false, false, true, false, false, false, false, ) => 8440,
                ( true, false, false, false, true, false, true, ) => 8441,
                ( false, false, false, false, true, false, true, ) => 8442,
                ( true, false, false, false, true, false, false, ) => 8443,
                ( false, false, false, false, true, false, false, ) => 8444,
                ( true, false, false, false, false, false, true, ) => 8445,
                ( false, false, false, false, false, false, true, ) => 8446,
                ( true, false, false, false, false, false, false, ) => 8447,
                ( false, false, false, false, false, false, false, ) => 8448,
            })
        }
    }

    impl From<Tripwire> for BlockState {
        #[inline(always)]
        fn from(value : Tripwire) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Tripwire {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Tripwire { }

    impl Block for Tripwire {
        const DEFAULT_STATE : Self = Self {
            west : false,
            disarmed : false,
            north : false,
            attached : false,
            powered : false,
            east : false,
            south : false,
        };
    }

}

/// `minecraft:redstone_ore` block.
pub mod redstone_ore {
    use super::*;

    /// `minecraft:redstone_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RedstoneOre {
        /// `lit` state.
        pub lit : bool,
    }

    impl RedstoneOre {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 5912,
                ( false, ) => 5913,
            })
        }
    }

    impl From<RedstoneOre> for BlockState {
        #[inline(always)]
        fn from(value : RedstoneOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RedstoneOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RedstoneOre { }

    impl Block for RedstoneOre {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:fern` block.
pub mod fern {
    use super::*;

    /// `minecraft:fern` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Fern;

    impl Fern {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2049)
        }
    }

    impl From<Fern> for BlockState {
        #[inline(always)]
        fn from(value : Fern) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Fern {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Fern { }

    impl Block for Fern {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:lime_terracotta` block.
pub mod lime_terracotta {
    use super::*;

    /// `minecraft:lime_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeTerracotta;

    impl LimeTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10170)
        }
    }

    impl From<LimeTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : LimeTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeTerracotta { }

    impl Block for LimeTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:sticky_piston` block.
pub mod sticky_piston {
    use super::*;

    /// `minecraft:sticky_piston` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StickyPiston {
        /// `extended` state.
        pub extended : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl StickyPiston {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.extended, self.facing, )) {
                ( true, Facing::North, ) => 2035,
                ( true, Facing::East, ) => 2036,
                ( true, Facing::South, ) => 2037,
                ( true, Facing::West, ) => 2038,
                ( true, Facing::Up, ) => 2039,
                ( true, Facing::Down, ) => 2040,
                ( false, Facing::North, ) => 2041,
                ( false, Facing::East, ) => 2042,
                ( false, Facing::South, ) => 2043,
                ( false, Facing::West, ) => 2044,
                ( false, Facing::Up, ) => 2045,
                ( false, Facing::Down, ) => 2046,
            })
        }
    }

    impl From<StickyPiston> for BlockState {
        #[inline(always)]
        fn from(value : StickyPiston) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StickyPiston {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StickyPiston { }

    impl Block for StickyPiston {
        const DEFAULT_STATE : Self = Self {
            extended : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:mangrove_door` block.
pub mod mangrove_door {
    use super::*;

    /// `minecraft:mangrove_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MangroveDoor {
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
        /// `half` state.
        pub half : Half,
        /// `open` state.
        pub open : bool,
        /// `hinge` state.
        pub hinge : Hinge,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    impl MangroveDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.powered, self.half, self.open, self.hinge, )) {
                ( Facing::North, true, Half::Upper, true, Hinge::Left, ) => 13229,
                ( Facing::North, false, Half::Upper, true, Hinge::Left, ) => 13230,
                ( Facing::North, true, Half::Upper, false, Hinge::Left, ) => 13231,
                ( Facing::North, false, Half::Upper, false, Hinge::Left, ) => 13232,
                ( Facing::North, true, Half::Upper, true, Hinge::Right, ) => 13233,
                ( Facing::North, false, Half::Upper, true, Hinge::Right, ) => 13234,
                ( Facing::North, true, Half::Upper, false, Hinge::Right, ) => 13235,
                ( Facing::North, false, Half::Upper, false, Hinge::Right, ) => 13236,
                ( Facing::North, true, Half::Lower, true, Hinge::Left, ) => 13237,
                ( Facing::North, false, Half::Lower, true, Hinge::Left, ) => 13238,
                ( Facing::North, true, Half::Lower, false, Hinge::Left, ) => 13239,
                ( Facing::North, false, Half::Lower, false, Hinge::Left, ) => 13240,
                ( Facing::North, true, Half::Lower, true, Hinge::Right, ) => 13241,
                ( Facing::North, false, Half::Lower, true, Hinge::Right, ) => 13242,
                ( Facing::North, true, Half::Lower, false, Hinge::Right, ) => 13243,
                ( Facing::North, false, Half::Lower, false, Hinge::Right, ) => 13244,
                ( Facing::South, true, Half::Upper, true, Hinge::Left, ) => 13245,
                ( Facing::South, false, Half::Upper, true, Hinge::Left, ) => 13246,
                ( Facing::South, true, Half::Upper, false, Hinge::Left, ) => 13247,
                ( Facing::South, false, Half::Upper, false, Hinge::Left, ) => 13248,
                ( Facing::South, true, Half::Upper, true, Hinge::Right, ) => 13249,
                ( Facing::South, false, Half::Upper, true, Hinge::Right, ) => 13250,
                ( Facing::South, true, Half::Upper, false, Hinge::Right, ) => 13251,
                ( Facing::South, false, Half::Upper, false, Hinge::Right, ) => 13252,
                ( Facing::South, true, Half::Lower, true, Hinge::Left, ) => 13253,
                ( Facing::South, false, Half::Lower, true, Hinge::Left, ) => 13254,
                ( Facing::South, true, Half::Lower, false, Hinge::Left, ) => 13255,
                ( Facing::South, false, Half::Lower, false, Hinge::Left, ) => 13256,
                ( Facing::South, true, Half::Lower, true, Hinge::Right, ) => 13257,
                ( Facing::South, false, Half::Lower, true, Hinge::Right, ) => 13258,
                ( Facing::South, true, Half::Lower, false, Hinge::Right, ) => 13259,
                ( Facing::South, false, Half::Lower, false, Hinge::Right, ) => 13260,
                ( Facing::West, true, Half::Upper, true, Hinge::Left, ) => 13261,
                ( Facing::West, false, Half::Upper, true, Hinge::Left, ) => 13262,
                ( Facing::West, true, Half::Upper, false, Hinge::Left, ) => 13263,
                ( Facing::West, false, Half::Upper, false, Hinge::Left, ) => 13264,
                ( Facing::West, true, Half::Upper, true, Hinge::Right, ) => 13265,
                ( Facing::West, false, Half::Upper, true, Hinge::Right, ) => 13266,
                ( Facing::West, true, Half::Upper, false, Hinge::Right, ) => 13267,
                ( Facing::West, false, Half::Upper, false, Hinge::Right, ) => 13268,
                ( Facing::West, true, Half::Lower, true, Hinge::Left, ) => 13269,
                ( Facing::West, false, Half::Lower, true, Hinge::Left, ) => 13270,
                ( Facing::West, true, Half::Lower, false, Hinge::Left, ) => 13271,
                ( Facing::West, false, Half::Lower, false, Hinge::Left, ) => 13272,
                ( Facing::West, true, Half::Lower, true, Hinge::Right, ) => 13273,
                ( Facing::West, false, Half::Lower, true, Hinge::Right, ) => 13274,
                ( Facing::West, true, Half::Lower, false, Hinge::Right, ) => 13275,
                ( Facing::West, false, Half::Lower, false, Hinge::Right, ) => 13276,
                ( Facing::East, true, Half::Upper, true, Hinge::Left, ) => 13277,
                ( Facing::East, false, Half::Upper, true, Hinge::Left, ) => 13278,
                ( Facing::East, true, Half::Upper, false, Hinge::Left, ) => 13279,
                ( Facing::East, false, Half::Upper, false, Hinge::Left, ) => 13280,
                ( Facing::East, true, Half::Upper, true, Hinge::Right, ) => 13281,
                ( Facing::East, false, Half::Upper, true, Hinge::Right, ) => 13282,
                ( Facing::East, true, Half::Upper, false, Hinge::Right, ) => 13283,
                ( Facing::East, false, Half::Upper, false, Hinge::Right, ) => 13284,
                ( Facing::East, true, Half::Lower, true, Hinge::Left, ) => 13285,
                ( Facing::East, false, Half::Lower, true, Hinge::Left, ) => 13286,
                ( Facing::East, true, Half::Lower, false, Hinge::Left, ) => 13287,
                ( Facing::East, false, Half::Lower, false, Hinge::Left, ) => 13288,
                ( Facing::East, true, Half::Lower, true, Hinge::Right, ) => 13289,
                ( Facing::East, false, Half::Lower, true, Hinge::Right, ) => 13290,
                ( Facing::East, true, Half::Lower, false, Hinge::Right, ) => 13291,
                ( Facing::East, false, Half::Lower, false, Hinge::Right, ) => 13292,
            })
        }
    }

    impl From<MangroveDoor> for BlockState {
        #[inline(always)]
        fn from(value : MangroveDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MangroveDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MangroveDoor { }

    impl Block for MangroveDoor {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            powered : false,
            half : Half::Lower,
            open : false,
            hinge : Hinge::Left,
        };
    }

}

/// `minecraft:lava_cauldron` block.
pub mod lava_cauldron {
    use super::*;

    /// `minecraft:lava_cauldron` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LavaCauldron;

    impl LavaCauldron {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(8186)
        }
    }

    impl From<LavaCauldron> for BlockState {
        #[inline(always)]
        fn from(value : LavaCauldron) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LavaCauldron {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LavaCauldron { }

    impl Block for LavaCauldron {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:smooth_sandstone` block.
pub mod smooth_sandstone {
    use super::*;

    /// `minecraft:smooth_sandstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmoothSandstone;

    impl SmoothSandstone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(12202)
        }
    }

    impl From<SmoothSandstone> for BlockState {
        #[inline(always)]
        fn from(value : SmoothSandstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmoothSandstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmoothSandstone { }

    impl Block for SmoothSandstone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:scaffolding` block.
pub mod scaffolding {
    use super::*;

    /// `minecraft:scaffolding` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Scaffolding {
        /// `distance` state.
        pub distance : Distance,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `bottom` state.
        pub bottom : bool,
    }

    /// `distance` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Distance {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Distance { }
    impl BlockProperty for Distance { }

    impl Scaffolding {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.distance, self.waterlogged, self.bottom, )) {
                ( Distance::N0, true, true, ) => 19427,
                ( Distance::N0, false, true, ) => 19428,
                ( Distance::N1, true, true, ) => 19429,
                ( Distance::N1, false, true, ) => 19430,
                ( Distance::N2, true, true, ) => 19431,
                ( Distance::N2, false, true, ) => 19432,
                ( Distance::N3, true, true, ) => 19433,
                ( Distance::N3, false, true, ) => 19434,
                ( Distance::N4, true, true, ) => 19435,
                ( Distance::N4, false, true, ) => 19436,
                ( Distance::N5, true, true, ) => 19437,
                ( Distance::N5, false, true, ) => 19438,
                ( Distance::N6, true, true, ) => 19439,
                ( Distance::N6, false, true, ) => 19440,
                ( Distance::N7, true, true, ) => 19441,
                ( Distance::N7, false, true, ) => 19442,
                ( Distance::N0, true, false, ) => 19443,
                ( Distance::N0, false, false, ) => 19444,
                ( Distance::N1, true, false, ) => 19445,
                ( Distance::N1, false, false, ) => 19446,
                ( Distance::N2, true, false, ) => 19447,
                ( Distance::N2, false, false, ) => 19448,
                ( Distance::N3, true, false, ) => 19449,
                ( Distance::N3, false, false, ) => 19450,
                ( Distance::N4, true, false, ) => 19451,
                ( Distance::N4, false, false, ) => 19452,
                ( Distance::N5, true, false, ) => 19453,
                ( Distance::N5, false, false, ) => 19454,
                ( Distance::N6, true, false, ) => 19455,
                ( Distance::N6, false, false, ) => 19456,
                ( Distance::N7, true, false, ) => 19457,
                ( Distance::N7, false, false, ) => 19458,
            })
        }
    }

    impl From<Scaffolding> for BlockState {
        #[inline(always)]
        fn from(value : Scaffolding) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Scaffolding {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Scaffolding { }

    impl Block for Scaffolding {
        const DEFAULT_STATE : Self = Self {
            distance : Distance::N7,
            waterlogged : false,
            bottom : false,
        };
    }

}

/// `minecraft:dragon_wall_head` block.
pub mod dragon_wall_head {
    use super::*;

    /// `minecraft:dragon_wall_head` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DragonWallHead {
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DragonWallHead {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.facing, )) {
                ( true, Facing::North, ) => 9868,
                ( false, Facing::North, ) => 9869,
                ( true, Facing::South, ) => 9870,
                ( false, Facing::South, ) => 9871,
                ( true, Facing::West, ) => 9872,
                ( false, Facing::West, ) => 9873,
                ( true, Facing::East, ) => 9874,
                ( false, Facing::East, ) => 9875,
            })
        }
    }

    impl From<DragonWallHead> for BlockState {
        #[inline(always)]
        fn from(value : DragonWallHead) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DragonWallHead {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DragonWallHead { }

    impl Block for DragonWallHead {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:potted_warped_fungus` block.
pub mod potted_warped_fungus {
    use super::*;

    /// `minecraft:potted_warped_fungus` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedWarpedFungus;

    impl PottedWarpedFungus {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20516)
        }
    }

    impl From<PottedWarpedFungus> for BlockState {
        #[inline(always)]
        fn from(value : PottedWarpedFungus) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedWarpedFungus {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedWarpedFungus { }

    impl Block for PottedWarpedFungus {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:infested_stone_bricks` block.
pub mod infested_stone_bricks {
    use super::*;

    /// `minecraft:infested_stone_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct InfestedStoneBricks;

    impl InfestedStoneBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6788)
        }
    }

    impl From<InfestedStoneBricks> for BlockState {
        #[inline(always)]
        fn from(value : InfestedStoneBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for InfestedStoneBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for InfestedStoneBricks { }

    impl Block for InfestedStoneBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:resin_block` block.
pub mod resin_block {
    use super::*;

    /// `minecraft:resin_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ResinBlock;

    impl ResinBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(7643)
        }
    }

    impl From<ResinBlock> for BlockState {
        #[inline(always)]
        fn from(value : ResinBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ResinBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ResinBlock { }

    impl Block for ResinBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_oxidized_cut_copper_slab` block.
pub mod waxed_oxidized_cut_copper_slab {
    use super::*;

    /// `minecraft:waxed_oxidized_cut_copper_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedOxidizedCutCopperSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl WaxedOxidizedCutCopperSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 24688,
                ( false, Kind::Top, ) => 24689,
                ( true, Kind::Bottom, ) => 24690,
                ( false, Kind::Bottom, ) => 24691,
                ( true, Kind::Double, ) => 24692,
                ( false, Kind::Double, ) => 24693,
            })
        }
    }

    impl From<WaxedOxidizedCutCopperSlab> for BlockState {
        #[inline(always)]
        fn from(value : WaxedOxidizedCutCopperSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedOxidizedCutCopperSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedOxidizedCutCopperSlab { }

    impl Block for WaxedOxidizedCutCopperSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:lantern` block.
pub mod lantern {
    use super::*;

    /// `minecraft:lantern` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Lantern {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `hanging` state.
        pub hanging : bool,
    }

    impl Lantern {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.hanging, )) {
                ( true, true, ) => 19558,
                ( false, true, ) => 19559,
                ( true, false, ) => 19560,
                ( false, false, ) => 19561,
            })
        }
    }

    impl From<Lantern> for BlockState {
        #[inline(always)]
        fn from(value : Lantern) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Lantern {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Lantern { }

    impl Block for Lantern {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            hanging : false,
        };
    }

}

/// `minecraft:oak_stairs` block.
pub mod oak_stairs {
    use super::*;

    /// `minecraft:oak_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl OakStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, self.shape, self.half, )) {
                ( true, Facing::North, Shape::Straight, Half::Top, ) => 2938,
                ( false, Facing::North, Shape::Straight, Half::Top, ) => 2939,
                ( true, Facing::North, Shape::InnerLeft, Half::Top, ) => 2940,
                ( false, Facing::North, Shape::InnerLeft, Half::Top, ) => 2941,
                ( true, Facing::North, Shape::InnerRight, Half::Top, ) => 2942,
                ( false, Facing::North, Shape::InnerRight, Half::Top, ) => 2943,
                ( true, Facing::North, Shape::OuterLeft, Half::Top, ) => 2944,
                ( false, Facing::North, Shape::OuterLeft, Half::Top, ) => 2945,
                ( true, Facing::North, Shape::OuterRight, Half::Top, ) => 2946,
                ( false, Facing::North, Shape::OuterRight, Half::Top, ) => 2947,
                ( true, Facing::North, Shape::Straight, Half::Bottom, ) => 2948,
                ( false, Facing::North, Shape::Straight, Half::Bottom, ) => 2949,
                ( true, Facing::North, Shape::InnerLeft, Half::Bottom, ) => 2950,
                ( false, Facing::North, Shape::InnerLeft, Half::Bottom, ) => 2951,
                ( true, Facing::North, Shape::InnerRight, Half::Bottom, ) => 2952,
                ( false, Facing::North, Shape::InnerRight, Half::Bottom, ) => 2953,
                ( true, Facing::North, Shape::OuterLeft, Half::Bottom, ) => 2954,
                ( false, Facing::North, Shape::OuterLeft, Half::Bottom, ) => 2955,
                ( true, Facing::North, Shape::OuterRight, Half::Bottom, ) => 2956,
                ( false, Facing::North, Shape::OuterRight, Half::Bottom, ) => 2957,
                ( true, Facing::South, Shape::Straight, Half::Top, ) => 2958,
                ( false, Facing::South, Shape::Straight, Half::Top, ) => 2959,
                ( true, Facing::South, Shape::InnerLeft, Half::Top, ) => 2960,
                ( false, Facing::South, Shape::InnerLeft, Half::Top, ) => 2961,
                ( true, Facing::South, Shape::InnerRight, Half::Top, ) => 2962,
                ( false, Facing::South, Shape::InnerRight, Half::Top, ) => 2963,
                ( true, Facing::South, Shape::OuterLeft, Half::Top, ) => 2964,
                ( false, Facing::South, Shape::OuterLeft, Half::Top, ) => 2965,
                ( true, Facing::South, Shape::OuterRight, Half::Top, ) => 2966,
                ( false, Facing::South, Shape::OuterRight, Half::Top, ) => 2967,
                ( true, Facing::South, Shape::Straight, Half::Bottom, ) => 2968,
                ( false, Facing::South, Shape::Straight, Half::Bottom, ) => 2969,
                ( true, Facing::South, Shape::InnerLeft, Half::Bottom, ) => 2970,
                ( false, Facing::South, Shape::InnerLeft, Half::Bottom, ) => 2971,
                ( true, Facing::South, Shape::InnerRight, Half::Bottom, ) => 2972,
                ( false, Facing::South, Shape::InnerRight, Half::Bottom, ) => 2973,
                ( true, Facing::South, Shape::OuterLeft, Half::Bottom, ) => 2974,
                ( false, Facing::South, Shape::OuterLeft, Half::Bottom, ) => 2975,
                ( true, Facing::South, Shape::OuterRight, Half::Bottom, ) => 2976,
                ( false, Facing::South, Shape::OuterRight, Half::Bottom, ) => 2977,
                ( true, Facing::West, Shape::Straight, Half::Top, ) => 2978,
                ( false, Facing::West, Shape::Straight, Half::Top, ) => 2979,
                ( true, Facing::West, Shape::InnerLeft, Half::Top, ) => 2980,
                ( false, Facing::West, Shape::InnerLeft, Half::Top, ) => 2981,
                ( true, Facing::West, Shape::InnerRight, Half::Top, ) => 2982,
                ( false, Facing::West, Shape::InnerRight, Half::Top, ) => 2983,
                ( true, Facing::West, Shape::OuterLeft, Half::Top, ) => 2984,
                ( false, Facing::West, Shape::OuterLeft, Half::Top, ) => 2985,
                ( true, Facing::West, Shape::OuterRight, Half::Top, ) => 2986,
                ( false, Facing::West, Shape::OuterRight, Half::Top, ) => 2987,
                ( true, Facing::West, Shape::Straight, Half::Bottom, ) => 2988,
                ( false, Facing::West, Shape::Straight, Half::Bottom, ) => 2989,
                ( true, Facing::West, Shape::InnerLeft, Half::Bottom, ) => 2990,
                ( false, Facing::West, Shape::InnerLeft, Half::Bottom, ) => 2991,
                ( true, Facing::West, Shape::InnerRight, Half::Bottom, ) => 2992,
                ( false, Facing::West, Shape::InnerRight, Half::Bottom, ) => 2993,
                ( true, Facing::West, Shape::OuterLeft, Half::Bottom, ) => 2994,
                ( false, Facing::West, Shape::OuterLeft, Half::Bottom, ) => 2995,
                ( true, Facing::West, Shape::OuterRight, Half::Bottom, ) => 2996,
                ( false, Facing::West, Shape::OuterRight, Half::Bottom, ) => 2997,
                ( true, Facing::East, Shape::Straight, Half::Top, ) => 2998,
                ( false, Facing::East, Shape::Straight, Half::Top, ) => 2999,
                ( true, Facing::East, Shape::InnerLeft, Half::Top, ) => 3000,
                ( false, Facing::East, Shape::InnerLeft, Half::Top, ) => 3001,
                ( true, Facing::East, Shape::InnerRight, Half::Top, ) => 3002,
                ( false, Facing::East, Shape::InnerRight, Half::Top, ) => 3003,
                ( true, Facing::East, Shape::OuterLeft, Half::Top, ) => 3004,
                ( false, Facing::East, Shape::OuterLeft, Half::Top, ) => 3005,
                ( true, Facing::East, Shape::OuterRight, Half::Top, ) => 3006,
                ( false, Facing::East, Shape::OuterRight, Half::Top, ) => 3007,
                ( true, Facing::East, Shape::Straight, Half::Bottom, ) => 3008,
                ( false, Facing::East, Shape::Straight, Half::Bottom, ) => 3009,
                ( true, Facing::East, Shape::InnerLeft, Half::Bottom, ) => 3010,
                ( false, Facing::East, Shape::InnerLeft, Half::Bottom, ) => 3011,
                ( true, Facing::East, Shape::InnerRight, Half::Bottom, ) => 3012,
                ( false, Facing::East, Shape::InnerRight, Half::Bottom, ) => 3013,
                ( true, Facing::East, Shape::OuterLeft, Half::Bottom, ) => 3014,
                ( false, Facing::East, Shape::OuterLeft, Half::Bottom, ) => 3015,
                ( true, Facing::East, Shape::OuterRight, Half::Bottom, ) => 3016,
                ( false, Facing::East, Shape::OuterRight, Half::Bottom, ) => 3017,
            })
        }
    }

    impl From<OakStairs> for BlockState {
        #[inline(always)]
        fn from(value : OakStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakStairs { }

    impl Block for OakStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
            shape : Shape::Straight,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:yellow_candle` block.
pub mod yellow_candle {
    use super::*;

    /// `minecraft:yellow_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowCandle {
        /// `candles` state.
        pub candles : Candles,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `lit` state.
        pub lit : bool,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl YellowCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.candles, self.waterlogged, self.lit, )) {
                ( Candles::N1, true, true, ) => 21865,
                ( Candles::N1, false, true, ) => 21866,
                ( Candles::N1, true, false, ) => 21867,
                ( Candles::N1, false, false, ) => 21868,
                ( Candles::N2, true, true, ) => 21869,
                ( Candles::N2, false, true, ) => 21870,
                ( Candles::N2, true, false, ) => 21871,
                ( Candles::N2, false, false, ) => 21872,
                ( Candles::N3, true, true, ) => 21873,
                ( Candles::N3, false, true, ) => 21874,
                ( Candles::N3, true, false, ) => 21875,
                ( Candles::N3, false, false, ) => 21876,
                ( Candles::N4, true, true, ) => 21877,
                ( Candles::N4, false, true, ) => 21878,
                ( Candles::N4, true, false, ) => 21879,
                ( Candles::N4, false, false, ) => 21880,
            })
        }
    }

    impl From<YellowCandle> for BlockState {
        #[inline(always)]
        fn from(value : YellowCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowCandle { }

    impl Block for YellowCandle {
        const DEFAULT_STATE : Self = Self {
            candles : Candles::N1,
            waterlogged : false,
            lit : false,
        };
    }

}

/// `minecraft:mushroom_stem` block.
pub mod mushroom_stem {
    use super::*;

    /// `minecraft:mushroom_stem` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MushroomStem {
        /// `up` state.
        pub up : bool,
        /// `north` state.
        pub north : bool,
        /// `west` state.
        pub west : bool,
        /// `down` state.
        pub down : bool,
        /// `east` state.
        pub east : bool,
        /// `south` state.
        pub south : bool,
    }

    impl MushroomStem {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.up, self.north, self.west, self.down, self.east, self.south, )) {
                ( true, true, true, true, true, true, ) => 6920,
                ( true, true, false, true, true, true, ) => 6921,
                ( false, true, true, true, true, true, ) => 6922,
                ( false, true, false, true, true, true, ) => 6923,
                ( true, true, true, true, true, false, ) => 6924,
                ( true, true, false, true, true, false, ) => 6925,
                ( false, true, true, true, true, false, ) => 6926,
                ( false, true, false, true, true, false, ) => 6927,
                ( true, false, true, true, true, true, ) => 6928,
                ( true, false, false, true, true, true, ) => 6929,
                ( false, false, true, true, true, true, ) => 6930,
                ( false, false, false, true, true, true, ) => 6931,
                ( true, false, true, true, true, false, ) => 6932,
                ( true, false, false, true, true, false, ) => 6933,
                ( false, false, true, true, true, false, ) => 6934,
                ( false, false, false, true, true, false, ) => 6935,
                ( true, true, true, true, false, true, ) => 6936,
                ( true, true, false, true, false, true, ) => 6937,
                ( false, true, true, true, false, true, ) => 6938,
                ( false, true, false, true, false, true, ) => 6939,
                ( true, true, true, true, false, false, ) => 6940,
                ( true, true, false, true, false, false, ) => 6941,
                ( false, true, true, true, false, false, ) => 6942,
                ( false, true, false, true, false, false, ) => 6943,
                ( true, false, true, true, false, true, ) => 6944,
                ( true, false, false, true, false, true, ) => 6945,
                ( false, false, true, true, false, true, ) => 6946,
                ( false, false, false, true, false, true, ) => 6947,
                ( true, false, true, true, false, false, ) => 6948,
                ( true, false, false, true, false, false, ) => 6949,
                ( false, false, true, true, false, false, ) => 6950,
                ( false, false, false, true, false, false, ) => 6951,
                ( true, true, true, false, true, true, ) => 6952,
                ( true, true, false, false, true, true, ) => 6953,
                ( false, true, true, false, true, true, ) => 6954,
                ( false, true, false, false, true, true, ) => 6955,
                ( true, true, true, false, true, false, ) => 6956,
                ( true, true, false, false, true, false, ) => 6957,
                ( false, true, true, false, true, false, ) => 6958,
                ( false, true, false, false, true, false, ) => 6959,
                ( true, false, true, false, true, true, ) => 6960,
                ( true, false, false, false, true, true, ) => 6961,
                ( false, false, true, false, true, true, ) => 6962,
                ( false, false, false, false, true, true, ) => 6963,
                ( true, false, true, false, true, false, ) => 6964,
                ( true, false, false, false, true, false, ) => 6965,
                ( false, false, true, false, true, false, ) => 6966,
                ( false, false, false, false, true, false, ) => 6967,
                ( true, true, true, false, false, true, ) => 6968,
                ( true, true, false, false, false, true, ) => 6969,
                ( false, true, true, false, false, true, ) => 6970,
                ( false, true, false, false, false, true, ) => 6971,
                ( true, true, true, false, false, false, ) => 6972,
                ( true, true, false, false, false, false, ) => 6973,
                ( false, true, true, false, false, false, ) => 6974,
                ( false, true, false, false, false, false, ) => 6975,
                ( true, false, true, false, false, true, ) => 6976,
                ( true, false, false, false, false, true, ) => 6977,
                ( false, false, true, false, false, true, ) => 6978,
                ( false, false, false, false, false, true, ) => 6979,
                ( true, false, true, false, false, false, ) => 6980,
                ( true, false, false, false, false, false, ) => 6981,
                ( false, false, true, false, false, false, ) => 6982,
                ( false, false, false, false, false, false, ) => 6983,
            })
        }
    }

    impl From<MushroomStem> for BlockState {
        #[inline(always)]
        fn from(value : MushroomStem) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MushroomStem {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MushroomStem { }

    impl Block for MushroomStem {
        const DEFAULT_STATE : Self = Self {
            up : true,
            north : true,
            west : true,
            down : true,
            east : true,
            south : true,
        };
    }

}

/// `minecraft:cherry_leaves` block.
pub mod cherry_leaves {
    use super::*;

    /// `minecraft:cherry_leaves` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryLeaves {
        /// `distance` state.
        pub distance : Distance,
        /// `persistent` state.
        pub persistent : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `distance` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Distance {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Distance { }
    impl BlockProperty for Distance { }

    impl CherryLeaves {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.distance, self.persistent, self.waterlogged, )) {
                ( Distance::N1, true, true, ) => 392,
                ( Distance::N1, true, false, ) => 393,
                ( Distance::N1, false, true, ) => 394,
                ( Distance::N1, false, false, ) => 395,
                ( Distance::N2, true, true, ) => 396,
                ( Distance::N2, true, false, ) => 397,
                ( Distance::N2, false, true, ) => 398,
                ( Distance::N2, false, false, ) => 399,
                ( Distance::N3, true, true, ) => 400,
                ( Distance::N3, true, false, ) => 401,
                ( Distance::N3, false, true, ) => 402,
                ( Distance::N3, false, false, ) => 403,
                ( Distance::N4, true, true, ) => 404,
                ( Distance::N4, true, false, ) => 405,
                ( Distance::N4, false, true, ) => 406,
                ( Distance::N4, false, false, ) => 407,
                ( Distance::N5, true, true, ) => 408,
                ( Distance::N5, true, false, ) => 409,
                ( Distance::N5, false, true, ) => 410,
                ( Distance::N5, false, false, ) => 411,
                ( Distance::N6, true, true, ) => 412,
                ( Distance::N6, true, false, ) => 413,
                ( Distance::N6, false, true, ) => 414,
                ( Distance::N6, false, false, ) => 415,
                ( Distance::N7, true, true, ) => 416,
                ( Distance::N7, true, false, ) => 417,
                ( Distance::N7, false, true, ) => 418,
                ( Distance::N7, false, false, ) => 419,
            })
        }
    }

    impl From<CherryLeaves> for BlockState {
        #[inline(always)]
        fn from(value : CherryLeaves) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryLeaves {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryLeaves { }

    impl Block for CherryLeaves {
        const DEFAULT_STATE : Self = Self {
            distance : Distance::N7,
            persistent : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:bamboo_wall_hanging_sign` block.
pub mod bamboo_wall_hanging_sign {
    use super::*;

    /// `minecraft:bamboo_wall_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooWallHangingSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BambooWallHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, )) {
                ( true, Facing::North, ) => 5794,
                ( false, Facing::North, ) => 5795,
                ( true, Facing::South, ) => 5796,
                ( false, Facing::South, ) => 5797,
                ( true, Facing::West, ) => 5798,
                ( false, Facing::West, ) => 5799,
                ( true, Facing::East, ) => 5800,
                ( false, Facing::East, ) => 5801,
            })
        }
    }

    impl From<BambooWallHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : BambooWallHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooWallHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooWallHangingSign { }

    impl Block for BambooWallHangingSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:spruce_trapdoor` block.
pub mod spruce_trapdoor {
    use super::*;

    /// `minecraft:spruce_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceTrapdoor {
        /// `powered` state.
        pub powered : bool,
        /// `half` state.
        pub half : Half,
        /// `open` state.
        pub open : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl SpruceTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.half, self.open, self.facing, self.waterlogged, )) {
                ( true, Half::Top, true, Facing::North, true, ) => 6204,
                ( true, Half::Top, true, Facing::North, false, ) => 6205,
                ( false, Half::Top, true, Facing::North, true, ) => 6206,
                ( false, Half::Top, true, Facing::North, false, ) => 6207,
                ( true, Half::Top, false, Facing::North, true, ) => 6208,
                ( true, Half::Top, false, Facing::North, false, ) => 6209,
                ( false, Half::Top, false, Facing::North, true, ) => 6210,
                ( false, Half::Top, false, Facing::North, false, ) => 6211,
                ( true, Half::Bottom, true, Facing::North, true, ) => 6212,
                ( true, Half::Bottom, true, Facing::North, false, ) => 6213,
                ( false, Half::Bottom, true, Facing::North, true, ) => 6214,
                ( false, Half::Bottom, true, Facing::North, false, ) => 6215,
                ( true, Half::Bottom, false, Facing::North, true, ) => 6216,
                ( true, Half::Bottom, false, Facing::North, false, ) => 6217,
                ( false, Half::Bottom, false, Facing::North, true, ) => 6218,
                ( false, Half::Bottom, false, Facing::North, false, ) => 6219,
                ( true, Half::Top, true, Facing::South, true, ) => 6220,
                ( true, Half::Top, true, Facing::South, false, ) => 6221,
                ( false, Half::Top, true, Facing::South, true, ) => 6222,
                ( false, Half::Top, true, Facing::South, false, ) => 6223,
                ( true, Half::Top, false, Facing::South, true, ) => 6224,
                ( true, Half::Top, false, Facing::South, false, ) => 6225,
                ( false, Half::Top, false, Facing::South, true, ) => 6226,
                ( false, Half::Top, false, Facing::South, false, ) => 6227,
                ( true, Half::Bottom, true, Facing::South, true, ) => 6228,
                ( true, Half::Bottom, true, Facing::South, false, ) => 6229,
                ( false, Half::Bottom, true, Facing::South, true, ) => 6230,
                ( false, Half::Bottom, true, Facing::South, false, ) => 6231,
                ( true, Half::Bottom, false, Facing::South, true, ) => 6232,
                ( true, Half::Bottom, false, Facing::South, false, ) => 6233,
                ( false, Half::Bottom, false, Facing::South, true, ) => 6234,
                ( false, Half::Bottom, false, Facing::South, false, ) => 6235,
                ( true, Half::Top, true, Facing::West, true, ) => 6236,
                ( true, Half::Top, true, Facing::West, false, ) => 6237,
                ( false, Half::Top, true, Facing::West, true, ) => 6238,
                ( false, Half::Top, true, Facing::West, false, ) => 6239,
                ( true, Half::Top, false, Facing::West, true, ) => 6240,
                ( true, Half::Top, false, Facing::West, false, ) => 6241,
                ( false, Half::Top, false, Facing::West, true, ) => 6242,
                ( false, Half::Top, false, Facing::West, false, ) => 6243,
                ( true, Half::Bottom, true, Facing::West, true, ) => 6244,
                ( true, Half::Bottom, true, Facing::West, false, ) => 6245,
                ( false, Half::Bottom, true, Facing::West, true, ) => 6246,
                ( false, Half::Bottom, true, Facing::West, false, ) => 6247,
                ( true, Half::Bottom, false, Facing::West, true, ) => 6248,
                ( true, Half::Bottom, false, Facing::West, false, ) => 6249,
                ( false, Half::Bottom, false, Facing::West, true, ) => 6250,
                ( false, Half::Bottom, false, Facing::West, false, ) => 6251,
                ( true, Half::Top, true, Facing::East, true, ) => 6252,
                ( true, Half::Top, true, Facing::East, false, ) => 6253,
                ( false, Half::Top, true, Facing::East, true, ) => 6254,
                ( false, Half::Top, true, Facing::East, false, ) => 6255,
                ( true, Half::Top, false, Facing::East, true, ) => 6256,
                ( true, Half::Top, false, Facing::East, false, ) => 6257,
                ( false, Half::Top, false, Facing::East, true, ) => 6258,
                ( false, Half::Top, false, Facing::East, false, ) => 6259,
                ( true, Half::Bottom, true, Facing::East, true, ) => 6260,
                ( true, Half::Bottom, true, Facing::East, false, ) => 6261,
                ( false, Half::Bottom, true, Facing::East, true, ) => 6262,
                ( false, Half::Bottom, true, Facing::East, false, ) => 6263,
                ( true, Half::Bottom, false, Facing::East, true, ) => 6264,
                ( true, Half::Bottom, false, Facing::East, false, ) => 6265,
                ( false, Half::Bottom, false, Facing::East, true, ) => 6266,
                ( false, Half::Bottom, false, Facing::East, false, ) => 6267,
            })
        }
    }

    impl From<SpruceTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : SpruceTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceTrapdoor { }

    impl Block for SpruceTrapdoor {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            half : Half::Bottom,
            open : false,
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:copper_door` block.
pub mod copper_door {
    use super::*;

    /// `minecraft:copper_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CopperDoor {
        /// `hinge` state.
        pub hinge : Hinge,
        /// `half` state.
        pub half : Half,
        /// `powered` state.
        pub powered : bool,
        /// `open` state.
        pub open : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CopperDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.hinge, self.half, self.powered, self.open, self.facing, )) {
                ( Hinge::Left, Half::Upper, true, true, Facing::North, ) => 24712,
                ( Hinge::Left, Half::Upper, false, true, Facing::North, ) => 24713,
                ( Hinge::Left, Half::Upper, true, false, Facing::North, ) => 24714,
                ( Hinge::Left, Half::Upper, false, false, Facing::North, ) => 24715,
                ( Hinge::Right, Half::Upper, true, true, Facing::North, ) => 24716,
                ( Hinge::Right, Half::Upper, false, true, Facing::North, ) => 24717,
                ( Hinge::Right, Half::Upper, true, false, Facing::North, ) => 24718,
                ( Hinge::Right, Half::Upper, false, false, Facing::North, ) => 24719,
                ( Hinge::Left, Half::Lower, true, true, Facing::North, ) => 24720,
                ( Hinge::Left, Half::Lower, false, true, Facing::North, ) => 24721,
                ( Hinge::Left, Half::Lower, true, false, Facing::North, ) => 24722,
                ( Hinge::Left, Half::Lower, false, false, Facing::North, ) => 24723,
                ( Hinge::Right, Half::Lower, true, true, Facing::North, ) => 24724,
                ( Hinge::Right, Half::Lower, false, true, Facing::North, ) => 24725,
                ( Hinge::Right, Half::Lower, true, false, Facing::North, ) => 24726,
                ( Hinge::Right, Half::Lower, false, false, Facing::North, ) => 24727,
                ( Hinge::Left, Half::Upper, true, true, Facing::South, ) => 24728,
                ( Hinge::Left, Half::Upper, false, true, Facing::South, ) => 24729,
                ( Hinge::Left, Half::Upper, true, false, Facing::South, ) => 24730,
                ( Hinge::Left, Half::Upper, false, false, Facing::South, ) => 24731,
                ( Hinge::Right, Half::Upper, true, true, Facing::South, ) => 24732,
                ( Hinge::Right, Half::Upper, false, true, Facing::South, ) => 24733,
                ( Hinge::Right, Half::Upper, true, false, Facing::South, ) => 24734,
                ( Hinge::Right, Half::Upper, false, false, Facing::South, ) => 24735,
                ( Hinge::Left, Half::Lower, true, true, Facing::South, ) => 24736,
                ( Hinge::Left, Half::Lower, false, true, Facing::South, ) => 24737,
                ( Hinge::Left, Half::Lower, true, false, Facing::South, ) => 24738,
                ( Hinge::Left, Half::Lower, false, false, Facing::South, ) => 24739,
                ( Hinge::Right, Half::Lower, true, true, Facing::South, ) => 24740,
                ( Hinge::Right, Half::Lower, false, true, Facing::South, ) => 24741,
                ( Hinge::Right, Half::Lower, true, false, Facing::South, ) => 24742,
                ( Hinge::Right, Half::Lower, false, false, Facing::South, ) => 24743,
                ( Hinge::Left, Half::Upper, true, true, Facing::West, ) => 24744,
                ( Hinge::Left, Half::Upper, false, true, Facing::West, ) => 24745,
                ( Hinge::Left, Half::Upper, true, false, Facing::West, ) => 24746,
                ( Hinge::Left, Half::Upper, false, false, Facing::West, ) => 24747,
                ( Hinge::Right, Half::Upper, true, true, Facing::West, ) => 24748,
                ( Hinge::Right, Half::Upper, false, true, Facing::West, ) => 24749,
                ( Hinge::Right, Half::Upper, true, false, Facing::West, ) => 24750,
                ( Hinge::Right, Half::Upper, false, false, Facing::West, ) => 24751,
                ( Hinge::Left, Half::Lower, true, true, Facing::West, ) => 24752,
                ( Hinge::Left, Half::Lower, false, true, Facing::West, ) => 24753,
                ( Hinge::Left, Half::Lower, true, false, Facing::West, ) => 24754,
                ( Hinge::Left, Half::Lower, false, false, Facing::West, ) => 24755,
                ( Hinge::Right, Half::Lower, true, true, Facing::West, ) => 24756,
                ( Hinge::Right, Half::Lower, false, true, Facing::West, ) => 24757,
                ( Hinge::Right, Half::Lower, true, false, Facing::West, ) => 24758,
                ( Hinge::Right, Half::Lower, false, false, Facing::West, ) => 24759,
                ( Hinge::Left, Half::Upper, true, true, Facing::East, ) => 24760,
                ( Hinge::Left, Half::Upper, false, true, Facing::East, ) => 24761,
                ( Hinge::Left, Half::Upper, true, false, Facing::East, ) => 24762,
                ( Hinge::Left, Half::Upper, false, false, Facing::East, ) => 24763,
                ( Hinge::Right, Half::Upper, true, true, Facing::East, ) => 24764,
                ( Hinge::Right, Half::Upper, false, true, Facing::East, ) => 24765,
                ( Hinge::Right, Half::Upper, true, false, Facing::East, ) => 24766,
                ( Hinge::Right, Half::Upper, false, false, Facing::East, ) => 24767,
                ( Hinge::Left, Half::Lower, true, true, Facing::East, ) => 24768,
                ( Hinge::Left, Half::Lower, false, true, Facing::East, ) => 24769,
                ( Hinge::Left, Half::Lower, true, false, Facing::East, ) => 24770,
                ( Hinge::Left, Half::Lower, false, false, Facing::East, ) => 24771,
                ( Hinge::Right, Half::Lower, true, true, Facing::East, ) => 24772,
                ( Hinge::Right, Half::Lower, false, true, Facing::East, ) => 24773,
                ( Hinge::Right, Half::Lower, true, false, Facing::East, ) => 24774,
                ( Hinge::Right, Half::Lower, false, false, Facing::East, ) => 24775,
            })
        }
    }

    impl From<CopperDoor> for BlockState {
        #[inline(always)]
        fn from(value : CopperDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CopperDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CopperDoor { }

    impl Block for CopperDoor {
        const DEFAULT_STATE : Self = Self {
            hinge : Hinge::Left,
            half : Half::Lower,
            powered : false,
            open : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:cyan_bed` block.
pub mod cyan_bed {
    use super::*;

    /// `minecraft:cyan_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanBed {
        /// `occupied` state.
        pub occupied : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `part` state.
        pub part : Part,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    impl CyanBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.occupied, self.facing, self.part, )) {
                ( true, Facing::North, Part::Head, ) => 1875,
                ( true, Facing::North, Part::Foot, ) => 1876,
                ( false, Facing::North, Part::Head, ) => 1877,
                ( false, Facing::North, Part::Foot, ) => 1878,
                ( true, Facing::South, Part::Head, ) => 1879,
                ( true, Facing::South, Part::Foot, ) => 1880,
                ( false, Facing::South, Part::Head, ) => 1881,
                ( false, Facing::South, Part::Foot, ) => 1882,
                ( true, Facing::West, Part::Head, ) => 1883,
                ( true, Facing::West, Part::Foot, ) => 1884,
                ( false, Facing::West, Part::Head, ) => 1885,
                ( false, Facing::West, Part::Foot, ) => 1886,
                ( true, Facing::East, Part::Head, ) => 1887,
                ( true, Facing::East, Part::Foot, ) => 1888,
                ( false, Facing::East, Part::Head, ) => 1889,
                ( false, Facing::East, Part::Foot, ) => 1890,
            })
        }
    }

    impl From<CyanBed> for BlockState {
        #[inline(always)]
        fn from(value : CyanBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanBed { }

    impl Block for CyanBed {
        const DEFAULT_STATE : Self = Self {
            occupied : false,
            facing : Facing::North,
            part : Part::Foot,
        };
    }

}

/// `minecraft:sweet_berry_bush` block.
pub mod sweet_berry_bush {
    use super::*;

    /// `minecraft:sweet_berry_bush` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SweetBerryBush {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl SweetBerryBush {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 19630,
                ( Age::N1, ) => 19631,
                ( Age::N2, ) => 19632,
                ( Age::N3, ) => 19633,
            })
        }
    }

    impl From<SweetBerryBush> for BlockState {
        #[inline(always)]
        fn from(value : SweetBerryBush) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SweetBerryBush {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SweetBerryBush { }

    impl Block for SweetBerryBush {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:light_blue_banner` block.
pub mod light_blue_banner {
    use super::*;

    /// `minecraft:light_blue_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl LightBlueBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11696,
                ( Rotation::N1, ) => 11697,
                ( Rotation::N2, ) => 11698,
                ( Rotation::N3, ) => 11699,
                ( Rotation::N4, ) => 11700,
                ( Rotation::N5, ) => 11701,
                ( Rotation::N6, ) => 11702,
                ( Rotation::N7, ) => 11703,
                ( Rotation::N8, ) => 11704,
                ( Rotation::N9, ) => 11705,
                ( Rotation::N10, ) => 11706,
                ( Rotation::N11, ) => 11707,
                ( Rotation::N12, ) => 11708,
                ( Rotation::N13, ) => 11709,
                ( Rotation::N14, ) => 11710,
                ( Rotation::N15, ) => 11711,
            })
        }
    }

    impl From<LightBlueBanner> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueBanner { }

    impl Block for LightBlueBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:waxed_oxidized_copper` block.
pub mod waxed_oxidized_copper {
    use super::*;

    /// `minecraft:waxed_oxidized_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedOxidizedCopper;

    impl WaxedOxidizedCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24363)
        }
    }

    impl From<WaxedOxidizedCopper> for BlockState {
        #[inline(always)]
        fn from(value : WaxedOxidizedCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedOxidizedCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedOxidizedCopper { }

    impl Block for WaxedOxidizedCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:potted_allium` block.
pub mod potted_allium {
    use super::*;

    /// `minecraft:potted_allium` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedAllium;

    impl PottedAllium {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9366)
        }
    }

    impl From<PottedAllium> for BlockState {
        #[inline(always)]
        fn from(value : PottedAllium) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedAllium {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedAllium { }

    impl Block for PottedAllium {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cherry_fence_gate` block.
pub mod cherry_fence_gate {
    use super::*;

    /// `minecraft:cherry_fence_gate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherryFenceGate {
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `open` state.
        pub open : bool,
        /// `in_wall` state.
        pub in_wall : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CherryFenceGate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.facing, self.open, self.in_wall, )) {
                ( true, Facing::North, true, true, ) => 12333,
                ( false, Facing::North, true, true, ) => 12334,
                ( true, Facing::North, false, true, ) => 12335,
                ( false, Facing::North, false, true, ) => 12336,
                ( true, Facing::North, true, false, ) => 12337,
                ( false, Facing::North, true, false, ) => 12338,
                ( true, Facing::North, false, false, ) => 12339,
                ( false, Facing::North, false, false, ) => 12340,
                ( true, Facing::South, true, true, ) => 12341,
                ( false, Facing::South, true, true, ) => 12342,
                ( true, Facing::South, false, true, ) => 12343,
                ( false, Facing::South, false, true, ) => 12344,
                ( true, Facing::South, true, false, ) => 12345,
                ( false, Facing::South, true, false, ) => 12346,
                ( true, Facing::South, false, false, ) => 12347,
                ( false, Facing::South, false, false, ) => 12348,
                ( true, Facing::West, true, true, ) => 12349,
                ( false, Facing::West, true, true, ) => 12350,
                ( true, Facing::West, false, true, ) => 12351,
                ( false, Facing::West, false, true, ) => 12352,
                ( true, Facing::West, true, false, ) => 12353,
                ( false, Facing::West, true, false, ) => 12354,
                ( true, Facing::West, false, false, ) => 12355,
                ( false, Facing::West, false, false, ) => 12356,
                ( true, Facing::East, true, true, ) => 12357,
                ( false, Facing::East, true, true, ) => 12358,
                ( true, Facing::East, false, true, ) => 12359,
                ( false, Facing::East, false, true, ) => 12360,
                ( true, Facing::East, true, false, ) => 12361,
                ( false, Facing::East, true, false, ) => 12362,
                ( true, Facing::East, false, false, ) => 12363,
                ( false, Facing::East, false, false, ) => 12364,
            })
        }
    }

    impl From<CherryFenceGate> for BlockState {
        #[inline(always)]
        fn from(value : CherryFenceGate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherryFenceGate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherryFenceGate { }

    impl Block for CherryFenceGate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            facing : Facing::North,
            open : false,
            in_wall : false,
        };
    }

}

/// `minecraft:mossy_stone_brick_wall` block.
pub mod mossy_stone_brick_wall {
    use super::*;

    /// `minecraft:mossy_stone_brick_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MossyStoneBrickWall {
        /// `north` state.
        pub north : North,
        /// `west` state.
        pub west : West,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `south` state.
        pub south : South,
        /// `east` state.
        pub east : East,
        /// `up` state.
        pub up : bool,
    }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    impl MossyStoneBrickWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.west, self.waterlogged, self.south, self.east, self.up, )) {
                ( North::None, West::None, true, South::None, East::None, true, ) => 16187,
                ( North::None, West::Low, true, South::None, East::None, true, ) => 16188,
                ( North::None, West::Tall, true, South::None, East::None, true, ) => 16189,
                ( North::None, West::None, false, South::None, East::None, true, ) => 16190,
                ( North::None, West::Low, false, South::None, East::None, true, ) => 16191,
                ( North::None, West::Tall, false, South::None, East::None, true, ) => 16192,
                ( North::None, West::None, true, South::None, East::None, false, ) => 16193,
                ( North::None, West::Low, true, South::None, East::None, false, ) => 16194,
                ( North::None, West::Tall, true, South::None, East::None, false, ) => 16195,
                ( North::None, West::None, false, South::None, East::None, false, ) => 16196,
                ( North::None, West::Low, false, South::None, East::None, false, ) => 16197,
                ( North::None, West::Tall, false, South::None, East::None, false, ) => 16198,
                ( North::None, West::None, true, South::Low, East::None, true, ) => 16199,
                ( North::None, West::Low, true, South::Low, East::None, true, ) => 16200,
                ( North::None, West::Tall, true, South::Low, East::None, true, ) => 16201,
                ( North::None, West::None, false, South::Low, East::None, true, ) => 16202,
                ( North::None, West::Low, false, South::Low, East::None, true, ) => 16203,
                ( North::None, West::Tall, false, South::Low, East::None, true, ) => 16204,
                ( North::None, West::None, true, South::Low, East::None, false, ) => 16205,
                ( North::None, West::Low, true, South::Low, East::None, false, ) => 16206,
                ( North::None, West::Tall, true, South::Low, East::None, false, ) => 16207,
                ( North::None, West::None, false, South::Low, East::None, false, ) => 16208,
                ( North::None, West::Low, false, South::Low, East::None, false, ) => 16209,
                ( North::None, West::Tall, false, South::Low, East::None, false, ) => 16210,
                ( North::None, West::None, true, South::Tall, East::None, true, ) => 16211,
                ( North::None, West::Low, true, South::Tall, East::None, true, ) => 16212,
                ( North::None, West::Tall, true, South::Tall, East::None, true, ) => 16213,
                ( North::None, West::None, false, South::Tall, East::None, true, ) => 16214,
                ( North::None, West::Low, false, South::Tall, East::None, true, ) => 16215,
                ( North::None, West::Tall, false, South::Tall, East::None, true, ) => 16216,
                ( North::None, West::None, true, South::Tall, East::None, false, ) => 16217,
                ( North::None, West::Low, true, South::Tall, East::None, false, ) => 16218,
                ( North::None, West::Tall, true, South::Tall, East::None, false, ) => 16219,
                ( North::None, West::None, false, South::Tall, East::None, false, ) => 16220,
                ( North::None, West::Low, false, South::Tall, East::None, false, ) => 16221,
                ( North::None, West::Tall, false, South::Tall, East::None, false, ) => 16222,
                ( North::Low, West::None, true, South::None, East::None, true, ) => 16223,
                ( North::Low, West::Low, true, South::None, East::None, true, ) => 16224,
                ( North::Low, West::Tall, true, South::None, East::None, true, ) => 16225,
                ( North::Low, West::None, false, South::None, East::None, true, ) => 16226,
                ( North::Low, West::Low, false, South::None, East::None, true, ) => 16227,
                ( North::Low, West::Tall, false, South::None, East::None, true, ) => 16228,
                ( North::Low, West::None, true, South::None, East::None, false, ) => 16229,
                ( North::Low, West::Low, true, South::None, East::None, false, ) => 16230,
                ( North::Low, West::Tall, true, South::None, East::None, false, ) => 16231,
                ( North::Low, West::None, false, South::None, East::None, false, ) => 16232,
                ( North::Low, West::Low, false, South::None, East::None, false, ) => 16233,
                ( North::Low, West::Tall, false, South::None, East::None, false, ) => 16234,
                ( North::Low, West::None, true, South::Low, East::None, true, ) => 16235,
                ( North::Low, West::Low, true, South::Low, East::None, true, ) => 16236,
                ( North::Low, West::Tall, true, South::Low, East::None, true, ) => 16237,
                ( North::Low, West::None, false, South::Low, East::None, true, ) => 16238,
                ( North::Low, West::Low, false, South::Low, East::None, true, ) => 16239,
                ( North::Low, West::Tall, false, South::Low, East::None, true, ) => 16240,
                ( North::Low, West::None, true, South::Low, East::None, false, ) => 16241,
                ( North::Low, West::Low, true, South::Low, East::None, false, ) => 16242,
                ( North::Low, West::Tall, true, South::Low, East::None, false, ) => 16243,
                ( North::Low, West::None, false, South::Low, East::None, false, ) => 16244,
                ( North::Low, West::Low, false, South::Low, East::None, false, ) => 16245,
                ( North::Low, West::Tall, false, South::Low, East::None, false, ) => 16246,
                ( North::Low, West::None, true, South::Tall, East::None, true, ) => 16247,
                ( North::Low, West::Low, true, South::Tall, East::None, true, ) => 16248,
                ( North::Low, West::Tall, true, South::Tall, East::None, true, ) => 16249,
                ( North::Low, West::None, false, South::Tall, East::None, true, ) => 16250,
                ( North::Low, West::Low, false, South::Tall, East::None, true, ) => 16251,
                ( North::Low, West::Tall, false, South::Tall, East::None, true, ) => 16252,
                ( North::Low, West::None, true, South::Tall, East::None, false, ) => 16253,
                ( North::Low, West::Low, true, South::Tall, East::None, false, ) => 16254,
                ( North::Low, West::Tall, true, South::Tall, East::None, false, ) => 16255,
                ( North::Low, West::None, false, South::Tall, East::None, false, ) => 16256,
                ( North::Low, West::Low, false, South::Tall, East::None, false, ) => 16257,
                ( North::Low, West::Tall, false, South::Tall, East::None, false, ) => 16258,
                ( North::Tall, West::None, true, South::None, East::None, true, ) => 16259,
                ( North::Tall, West::Low, true, South::None, East::None, true, ) => 16260,
                ( North::Tall, West::Tall, true, South::None, East::None, true, ) => 16261,
                ( North::Tall, West::None, false, South::None, East::None, true, ) => 16262,
                ( North::Tall, West::Low, false, South::None, East::None, true, ) => 16263,
                ( North::Tall, West::Tall, false, South::None, East::None, true, ) => 16264,
                ( North::Tall, West::None, true, South::None, East::None, false, ) => 16265,
                ( North::Tall, West::Low, true, South::None, East::None, false, ) => 16266,
                ( North::Tall, West::Tall, true, South::None, East::None, false, ) => 16267,
                ( North::Tall, West::None, false, South::None, East::None, false, ) => 16268,
                ( North::Tall, West::Low, false, South::None, East::None, false, ) => 16269,
                ( North::Tall, West::Tall, false, South::None, East::None, false, ) => 16270,
                ( North::Tall, West::None, true, South::Low, East::None, true, ) => 16271,
                ( North::Tall, West::Low, true, South::Low, East::None, true, ) => 16272,
                ( North::Tall, West::Tall, true, South::Low, East::None, true, ) => 16273,
                ( North::Tall, West::None, false, South::Low, East::None, true, ) => 16274,
                ( North::Tall, West::Low, false, South::Low, East::None, true, ) => 16275,
                ( North::Tall, West::Tall, false, South::Low, East::None, true, ) => 16276,
                ( North::Tall, West::None, true, South::Low, East::None, false, ) => 16277,
                ( North::Tall, West::Low, true, South::Low, East::None, false, ) => 16278,
                ( North::Tall, West::Tall, true, South::Low, East::None, false, ) => 16279,
                ( North::Tall, West::None, false, South::Low, East::None, false, ) => 16280,
                ( North::Tall, West::Low, false, South::Low, East::None, false, ) => 16281,
                ( North::Tall, West::Tall, false, South::Low, East::None, false, ) => 16282,
                ( North::Tall, West::None, true, South::Tall, East::None, true, ) => 16283,
                ( North::Tall, West::Low, true, South::Tall, East::None, true, ) => 16284,
                ( North::Tall, West::Tall, true, South::Tall, East::None, true, ) => 16285,
                ( North::Tall, West::None, false, South::Tall, East::None, true, ) => 16286,
                ( North::Tall, West::Low, false, South::Tall, East::None, true, ) => 16287,
                ( North::Tall, West::Tall, false, South::Tall, East::None, true, ) => 16288,
                ( North::Tall, West::None, true, South::Tall, East::None, false, ) => 16289,
                ( North::Tall, West::Low, true, South::Tall, East::None, false, ) => 16290,
                ( North::Tall, West::Tall, true, South::Tall, East::None, false, ) => 16291,
                ( North::Tall, West::None, false, South::Tall, East::None, false, ) => 16292,
                ( North::Tall, West::Low, false, South::Tall, East::None, false, ) => 16293,
                ( North::Tall, West::Tall, false, South::Tall, East::None, false, ) => 16294,
                ( North::None, West::None, true, South::None, East::Low, true, ) => 16295,
                ( North::None, West::Low, true, South::None, East::Low, true, ) => 16296,
                ( North::None, West::Tall, true, South::None, East::Low, true, ) => 16297,
                ( North::None, West::None, false, South::None, East::Low, true, ) => 16298,
                ( North::None, West::Low, false, South::None, East::Low, true, ) => 16299,
                ( North::None, West::Tall, false, South::None, East::Low, true, ) => 16300,
                ( North::None, West::None, true, South::None, East::Low, false, ) => 16301,
                ( North::None, West::Low, true, South::None, East::Low, false, ) => 16302,
                ( North::None, West::Tall, true, South::None, East::Low, false, ) => 16303,
                ( North::None, West::None, false, South::None, East::Low, false, ) => 16304,
                ( North::None, West::Low, false, South::None, East::Low, false, ) => 16305,
                ( North::None, West::Tall, false, South::None, East::Low, false, ) => 16306,
                ( North::None, West::None, true, South::Low, East::Low, true, ) => 16307,
                ( North::None, West::Low, true, South::Low, East::Low, true, ) => 16308,
                ( North::None, West::Tall, true, South::Low, East::Low, true, ) => 16309,
                ( North::None, West::None, false, South::Low, East::Low, true, ) => 16310,
                ( North::None, West::Low, false, South::Low, East::Low, true, ) => 16311,
                ( North::None, West::Tall, false, South::Low, East::Low, true, ) => 16312,
                ( North::None, West::None, true, South::Low, East::Low, false, ) => 16313,
                ( North::None, West::Low, true, South::Low, East::Low, false, ) => 16314,
                ( North::None, West::Tall, true, South::Low, East::Low, false, ) => 16315,
                ( North::None, West::None, false, South::Low, East::Low, false, ) => 16316,
                ( North::None, West::Low, false, South::Low, East::Low, false, ) => 16317,
                ( North::None, West::Tall, false, South::Low, East::Low, false, ) => 16318,
                ( North::None, West::None, true, South::Tall, East::Low, true, ) => 16319,
                ( North::None, West::Low, true, South::Tall, East::Low, true, ) => 16320,
                ( North::None, West::Tall, true, South::Tall, East::Low, true, ) => 16321,
                ( North::None, West::None, false, South::Tall, East::Low, true, ) => 16322,
                ( North::None, West::Low, false, South::Tall, East::Low, true, ) => 16323,
                ( North::None, West::Tall, false, South::Tall, East::Low, true, ) => 16324,
                ( North::None, West::None, true, South::Tall, East::Low, false, ) => 16325,
                ( North::None, West::Low, true, South::Tall, East::Low, false, ) => 16326,
                ( North::None, West::Tall, true, South::Tall, East::Low, false, ) => 16327,
                ( North::None, West::None, false, South::Tall, East::Low, false, ) => 16328,
                ( North::None, West::Low, false, South::Tall, East::Low, false, ) => 16329,
                ( North::None, West::Tall, false, South::Tall, East::Low, false, ) => 16330,
                ( North::Low, West::None, true, South::None, East::Low, true, ) => 16331,
                ( North::Low, West::Low, true, South::None, East::Low, true, ) => 16332,
                ( North::Low, West::Tall, true, South::None, East::Low, true, ) => 16333,
                ( North::Low, West::None, false, South::None, East::Low, true, ) => 16334,
                ( North::Low, West::Low, false, South::None, East::Low, true, ) => 16335,
                ( North::Low, West::Tall, false, South::None, East::Low, true, ) => 16336,
                ( North::Low, West::None, true, South::None, East::Low, false, ) => 16337,
                ( North::Low, West::Low, true, South::None, East::Low, false, ) => 16338,
                ( North::Low, West::Tall, true, South::None, East::Low, false, ) => 16339,
                ( North::Low, West::None, false, South::None, East::Low, false, ) => 16340,
                ( North::Low, West::Low, false, South::None, East::Low, false, ) => 16341,
                ( North::Low, West::Tall, false, South::None, East::Low, false, ) => 16342,
                ( North::Low, West::None, true, South::Low, East::Low, true, ) => 16343,
                ( North::Low, West::Low, true, South::Low, East::Low, true, ) => 16344,
                ( North::Low, West::Tall, true, South::Low, East::Low, true, ) => 16345,
                ( North::Low, West::None, false, South::Low, East::Low, true, ) => 16346,
                ( North::Low, West::Low, false, South::Low, East::Low, true, ) => 16347,
                ( North::Low, West::Tall, false, South::Low, East::Low, true, ) => 16348,
                ( North::Low, West::None, true, South::Low, East::Low, false, ) => 16349,
                ( North::Low, West::Low, true, South::Low, East::Low, false, ) => 16350,
                ( North::Low, West::Tall, true, South::Low, East::Low, false, ) => 16351,
                ( North::Low, West::None, false, South::Low, East::Low, false, ) => 16352,
                ( North::Low, West::Low, false, South::Low, East::Low, false, ) => 16353,
                ( North::Low, West::Tall, false, South::Low, East::Low, false, ) => 16354,
                ( North::Low, West::None, true, South::Tall, East::Low, true, ) => 16355,
                ( North::Low, West::Low, true, South::Tall, East::Low, true, ) => 16356,
                ( North::Low, West::Tall, true, South::Tall, East::Low, true, ) => 16357,
                ( North::Low, West::None, false, South::Tall, East::Low, true, ) => 16358,
                ( North::Low, West::Low, false, South::Tall, East::Low, true, ) => 16359,
                ( North::Low, West::Tall, false, South::Tall, East::Low, true, ) => 16360,
                ( North::Low, West::None, true, South::Tall, East::Low, false, ) => 16361,
                ( North::Low, West::Low, true, South::Tall, East::Low, false, ) => 16362,
                ( North::Low, West::Tall, true, South::Tall, East::Low, false, ) => 16363,
                ( North::Low, West::None, false, South::Tall, East::Low, false, ) => 16364,
                ( North::Low, West::Low, false, South::Tall, East::Low, false, ) => 16365,
                ( North::Low, West::Tall, false, South::Tall, East::Low, false, ) => 16366,
                ( North::Tall, West::None, true, South::None, East::Low, true, ) => 16367,
                ( North::Tall, West::Low, true, South::None, East::Low, true, ) => 16368,
                ( North::Tall, West::Tall, true, South::None, East::Low, true, ) => 16369,
                ( North::Tall, West::None, false, South::None, East::Low, true, ) => 16370,
                ( North::Tall, West::Low, false, South::None, East::Low, true, ) => 16371,
                ( North::Tall, West::Tall, false, South::None, East::Low, true, ) => 16372,
                ( North::Tall, West::None, true, South::None, East::Low, false, ) => 16373,
                ( North::Tall, West::Low, true, South::None, East::Low, false, ) => 16374,
                ( North::Tall, West::Tall, true, South::None, East::Low, false, ) => 16375,
                ( North::Tall, West::None, false, South::None, East::Low, false, ) => 16376,
                ( North::Tall, West::Low, false, South::None, East::Low, false, ) => 16377,
                ( North::Tall, West::Tall, false, South::None, East::Low, false, ) => 16378,
                ( North::Tall, West::None, true, South::Low, East::Low, true, ) => 16379,
                ( North::Tall, West::Low, true, South::Low, East::Low, true, ) => 16380,
                ( North::Tall, West::Tall, true, South::Low, East::Low, true, ) => 16381,
                ( North::Tall, West::None, false, South::Low, East::Low, true, ) => 16382,
                ( North::Tall, West::Low, false, South::Low, East::Low, true, ) => 16383,
                ( North::Tall, West::Tall, false, South::Low, East::Low, true, ) => 16384,
                ( North::Tall, West::None, true, South::Low, East::Low, false, ) => 16385,
                ( North::Tall, West::Low, true, South::Low, East::Low, false, ) => 16386,
                ( North::Tall, West::Tall, true, South::Low, East::Low, false, ) => 16387,
                ( North::Tall, West::None, false, South::Low, East::Low, false, ) => 16388,
                ( North::Tall, West::Low, false, South::Low, East::Low, false, ) => 16389,
                ( North::Tall, West::Tall, false, South::Low, East::Low, false, ) => 16390,
                ( North::Tall, West::None, true, South::Tall, East::Low, true, ) => 16391,
                ( North::Tall, West::Low, true, South::Tall, East::Low, true, ) => 16392,
                ( North::Tall, West::Tall, true, South::Tall, East::Low, true, ) => 16393,
                ( North::Tall, West::None, false, South::Tall, East::Low, true, ) => 16394,
                ( North::Tall, West::Low, false, South::Tall, East::Low, true, ) => 16395,
                ( North::Tall, West::Tall, false, South::Tall, East::Low, true, ) => 16396,
                ( North::Tall, West::None, true, South::Tall, East::Low, false, ) => 16397,
                ( North::Tall, West::Low, true, South::Tall, East::Low, false, ) => 16398,
                ( North::Tall, West::Tall, true, South::Tall, East::Low, false, ) => 16399,
                ( North::Tall, West::None, false, South::Tall, East::Low, false, ) => 16400,
                ( North::Tall, West::Low, false, South::Tall, East::Low, false, ) => 16401,
                ( North::Tall, West::Tall, false, South::Tall, East::Low, false, ) => 16402,
                ( North::None, West::None, true, South::None, East::Tall, true, ) => 16403,
                ( North::None, West::Low, true, South::None, East::Tall, true, ) => 16404,
                ( North::None, West::Tall, true, South::None, East::Tall, true, ) => 16405,
                ( North::None, West::None, false, South::None, East::Tall, true, ) => 16406,
                ( North::None, West::Low, false, South::None, East::Tall, true, ) => 16407,
                ( North::None, West::Tall, false, South::None, East::Tall, true, ) => 16408,
                ( North::None, West::None, true, South::None, East::Tall, false, ) => 16409,
                ( North::None, West::Low, true, South::None, East::Tall, false, ) => 16410,
                ( North::None, West::Tall, true, South::None, East::Tall, false, ) => 16411,
                ( North::None, West::None, false, South::None, East::Tall, false, ) => 16412,
                ( North::None, West::Low, false, South::None, East::Tall, false, ) => 16413,
                ( North::None, West::Tall, false, South::None, East::Tall, false, ) => 16414,
                ( North::None, West::None, true, South::Low, East::Tall, true, ) => 16415,
                ( North::None, West::Low, true, South::Low, East::Tall, true, ) => 16416,
                ( North::None, West::Tall, true, South::Low, East::Tall, true, ) => 16417,
                ( North::None, West::None, false, South::Low, East::Tall, true, ) => 16418,
                ( North::None, West::Low, false, South::Low, East::Tall, true, ) => 16419,
                ( North::None, West::Tall, false, South::Low, East::Tall, true, ) => 16420,
                ( North::None, West::None, true, South::Low, East::Tall, false, ) => 16421,
                ( North::None, West::Low, true, South::Low, East::Tall, false, ) => 16422,
                ( North::None, West::Tall, true, South::Low, East::Tall, false, ) => 16423,
                ( North::None, West::None, false, South::Low, East::Tall, false, ) => 16424,
                ( North::None, West::Low, false, South::Low, East::Tall, false, ) => 16425,
                ( North::None, West::Tall, false, South::Low, East::Tall, false, ) => 16426,
                ( North::None, West::None, true, South::Tall, East::Tall, true, ) => 16427,
                ( North::None, West::Low, true, South::Tall, East::Tall, true, ) => 16428,
                ( North::None, West::Tall, true, South::Tall, East::Tall, true, ) => 16429,
                ( North::None, West::None, false, South::Tall, East::Tall, true, ) => 16430,
                ( North::None, West::Low, false, South::Tall, East::Tall, true, ) => 16431,
                ( North::None, West::Tall, false, South::Tall, East::Tall, true, ) => 16432,
                ( North::None, West::None, true, South::Tall, East::Tall, false, ) => 16433,
                ( North::None, West::Low, true, South::Tall, East::Tall, false, ) => 16434,
                ( North::None, West::Tall, true, South::Tall, East::Tall, false, ) => 16435,
                ( North::None, West::None, false, South::Tall, East::Tall, false, ) => 16436,
                ( North::None, West::Low, false, South::Tall, East::Tall, false, ) => 16437,
                ( North::None, West::Tall, false, South::Tall, East::Tall, false, ) => 16438,
                ( North::Low, West::None, true, South::None, East::Tall, true, ) => 16439,
                ( North::Low, West::Low, true, South::None, East::Tall, true, ) => 16440,
                ( North::Low, West::Tall, true, South::None, East::Tall, true, ) => 16441,
                ( North::Low, West::None, false, South::None, East::Tall, true, ) => 16442,
                ( North::Low, West::Low, false, South::None, East::Tall, true, ) => 16443,
                ( North::Low, West::Tall, false, South::None, East::Tall, true, ) => 16444,
                ( North::Low, West::None, true, South::None, East::Tall, false, ) => 16445,
                ( North::Low, West::Low, true, South::None, East::Tall, false, ) => 16446,
                ( North::Low, West::Tall, true, South::None, East::Tall, false, ) => 16447,
                ( North::Low, West::None, false, South::None, East::Tall, false, ) => 16448,
                ( North::Low, West::Low, false, South::None, East::Tall, false, ) => 16449,
                ( North::Low, West::Tall, false, South::None, East::Tall, false, ) => 16450,
                ( North::Low, West::None, true, South::Low, East::Tall, true, ) => 16451,
                ( North::Low, West::Low, true, South::Low, East::Tall, true, ) => 16452,
                ( North::Low, West::Tall, true, South::Low, East::Tall, true, ) => 16453,
                ( North::Low, West::None, false, South::Low, East::Tall, true, ) => 16454,
                ( North::Low, West::Low, false, South::Low, East::Tall, true, ) => 16455,
                ( North::Low, West::Tall, false, South::Low, East::Tall, true, ) => 16456,
                ( North::Low, West::None, true, South::Low, East::Tall, false, ) => 16457,
                ( North::Low, West::Low, true, South::Low, East::Tall, false, ) => 16458,
                ( North::Low, West::Tall, true, South::Low, East::Tall, false, ) => 16459,
                ( North::Low, West::None, false, South::Low, East::Tall, false, ) => 16460,
                ( North::Low, West::Low, false, South::Low, East::Tall, false, ) => 16461,
                ( North::Low, West::Tall, false, South::Low, East::Tall, false, ) => 16462,
                ( North::Low, West::None, true, South::Tall, East::Tall, true, ) => 16463,
                ( North::Low, West::Low, true, South::Tall, East::Tall, true, ) => 16464,
                ( North::Low, West::Tall, true, South::Tall, East::Tall, true, ) => 16465,
                ( North::Low, West::None, false, South::Tall, East::Tall, true, ) => 16466,
                ( North::Low, West::Low, false, South::Tall, East::Tall, true, ) => 16467,
                ( North::Low, West::Tall, false, South::Tall, East::Tall, true, ) => 16468,
                ( North::Low, West::None, true, South::Tall, East::Tall, false, ) => 16469,
                ( North::Low, West::Low, true, South::Tall, East::Tall, false, ) => 16470,
                ( North::Low, West::Tall, true, South::Tall, East::Tall, false, ) => 16471,
                ( North::Low, West::None, false, South::Tall, East::Tall, false, ) => 16472,
                ( North::Low, West::Low, false, South::Tall, East::Tall, false, ) => 16473,
                ( North::Low, West::Tall, false, South::Tall, East::Tall, false, ) => 16474,
                ( North::Tall, West::None, true, South::None, East::Tall, true, ) => 16475,
                ( North::Tall, West::Low, true, South::None, East::Tall, true, ) => 16476,
                ( North::Tall, West::Tall, true, South::None, East::Tall, true, ) => 16477,
                ( North::Tall, West::None, false, South::None, East::Tall, true, ) => 16478,
                ( North::Tall, West::Low, false, South::None, East::Tall, true, ) => 16479,
                ( North::Tall, West::Tall, false, South::None, East::Tall, true, ) => 16480,
                ( North::Tall, West::None, true, South::None, East::Tall, false, ) => 16481,
                ( North::Tall, West::Low, true, South::None, East::Tall, false, ) => 16482,
                ( North::Tall, West::Tall, true, South::None, East::Tall, false, ) => 16483,
                ( North::Tall, West::None, false, South::None, East::Tall, false, ) => 16484,
                ( North::Tall, West::Low, false, South::None, East::Tall, false, ) => 16485,
                ( North::Tall, West::Tall, false, South::None, East::Tall, false, ) => 16486,
                ( North::Tall, West::None, true, South::Low, East::Tall, true, ) => 16487,
                ( North::Tall, West::Low, true, South::Low, East::Tall, true, ) => 16488,
                ( North::Tall, West::Tall, true, South::Low, East::Tall, true, ) => 16489,
                ( North::Tall, West::None, false, South::Low, East::Tall, true, ) => 16490,
                ( North::Tall, West::Low, false, South::Low, East::Tall, true, ) => 16491,
                ( North::Tall, West::Tall, false, South::Low, East::Tall, true, ) => 16492,
                ( North::Tall, West::None, true, South::Low, East::Tall, false, ) => 16493,
                ( North::Tall, West::Low, true, South::Low, East::Tall, false, ) => 16494,
                ( North::Tall, West::Tall, true, South::Low, East::Tall, false, ) => 16495,
                ( North::Tall, West::None, false, South::Low, East::Tall, false, ) => 16496,
                ( North::Tall, West::Low, false, South::Low, East::Tall, false, ) => 16497,
                ( North::Tall, West::Tall, false, South::Low, East::Tall, false, ) => 16498,
                ( North::Tall, West::None, true, South::Tall, East::Tall, true, ) => 16499,
                ( North::Tall, West::Low, true, South::Tall, East::Tall, true, ) => 16500,
                ( North::Tall, West::Tall, true, South::Tall, East::Tall, true, ) => 16501,
                ( North::Tall, West::None, false, South::Tall, East::Tall, true, ) => 16502,
                ( North::Tall, West::Low, false, South::Tall, East::Tall, true, ) => 16503,
                ( North::Tall, West::Tall, false, South::Tall, East::Tall, true, ) => 16504,
                ( North::Tall, West::None, true, South::Tall, East::Tall, false, ) => 16505,
                ( North::Tall, West::Low, true, South::Tall, East::Tall, false, ) => 16506,
                ( North::Tall, West::Tall, true, South::Tall, East::Tall, false, ) => 16507,
                ( North::Tall, West::None, false, South::Tall, East::Tall, false, ) => 16508,
                ( North::Tall, West::Low, false, South::Tall, East::Tall, false, ) => 16509,
                ( North::Tall, West::Tall, false, South::Tall, East::Tall, false, ) => 16510,
            })
        }
    }

    impl From<MossyStoneBrickWall> for BlockState {
        #[inline(always)]
        fn from(value : MossyStoneBrickWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MossyStoneBrickWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MossyStoneBrickWall { }

    impl Block for MossyStoneBrickWall {
        const DEFAULT_STATE : Self = Self {
            north : North::None,
            west : West::None,
            waterlogged : false,
            south : South::None,
            east : East::None,
            up : true,
        };
    }

}

/// `minecraft:waxed_exposed_chiseled_copper` block.
pub mod waxed_exposed_chiseled_copper {
    use super::*;

    /// `minecraft:waxed_exposed_chiseled_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedExposedChiseledCopper;

    impl WaxedExposedChiseledCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24014)
        }
    }

    impl From<WaxedExposedChiseledCopper> for BlockState {
        #[inline(always)]
        fn from(value : WaxedExposedChiseledCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedExposedChiseledCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedExposedChiseledCopper { }

    impl Block for WaxedExposedChiseledCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:twisting_vines_plant` block.
pub mod twisting_vines_plant {
    use super::*;

    /// `minecraft:twisting_vines_plant` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TwistingVinesPlant;

    impl TwistingVinesPlant {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19719)
        }
    }

    impl From<TwistingVinesPlant> for BlockState {
        #[inline(always)]
        fn from(value : TwistingVinesPlant) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TwistingVinesPlant {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TwistingVinesPlant { }

    impl Block for TwistingVinesPlant {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cactus` block.
pub mod cactus {
    use super::*;

    /// `minecraft:cactus` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Cactus {
        /// `age` state.
        pub age : Age,
    }

    /// `age` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Age {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Age { }
    impl BlockProperty for Age { }

    impl Cactus {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.age, )) {
                ( Age::N0, ) => 5960,
                ( Age::N1, ) => 5961,
                ( Age::N2, ) => 5962,
                ( Age::N3, ) => 5963,
                ( Age::N4, ) => 5964,
                ( Age::N5, ) => 5965,
                ( Age::N6, ) => 5966,
                ( Age::N7, ) => 5967,
                ( Age::N8, ) => 5968,
                ( Age::N9, ) => 5969,
                ( Age::N10, ) => 5970,
                ( Age::N11, ) => 5971,
                ( Age::N12, ) => 5972,
                ( Age::N13, ) => 5973,
                ( Age::N14, ) => 5974,
                ( Age::N15, ) => 5975,
            })
        }
    }

    impl From<Cactus> for BlockState {
        #[inline(always)]
        fn from(value : Cactus) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Cactus {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Cactus { }

    impl Block for Cactus {
        const DEFAULT_STATE : Self = Self {
            age : Age::N0,
        };
    }

}

/// `minecraft:torch` block.
pub mod torch {
    use super::*;

    /// `minecraft:torch` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Torch;

    impl Torch {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2401)
        }
    }

    impl From<Torch> for BlockState {
        #[inline(always)]
        fn from(value : Torch) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Torch {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Torch { }

    impl Block for Torch {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:birch_fence` block.
pub mod birch_fence {
    use super::*;

    /// `minecraft:birch_fence` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchFence {
        /// `south` state.
        pub south : bool,
        /// `north` state.
        pub north : bool,
        /// `east` state.
        pub east : bool,
        /// `west` state.
        pub west : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl BirchFence {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.south, self.north, self.east, self.west, self.waterlogged, )) {
                ( true, true, true, true, true, ) => 12525,
                ( true, true, true, false, true, ) => 12526,
                ( true, true, true, true, false, ) => 12527,
                ( true, true, true, false, false, ) => 12528,
                ( false, true, true, true, true, ) => 12529,
                ( false, true, true, false, true, ) => 12530,
                ( false, true, true, true, false, ) => 12531,
                ( false, true, true, false, false, ) => 12532,
                ( true, false, true, true, true, ) => 12533,
                ( true, false, true, false, true, ) => 12534,
                ( true, false, true, true, false, ) => 12535,
                ( true, false, true, false, false, ) => 12536,
                ( false, false, true, true, true, ) => 12537,
                ( false, false, true, false, true, ) => 12538,
                ( false, false, true, true, false, ) => 12539,
                ( false, false, true, false, false, ) => 12540,
                ( true, true, false, true, true, ) => 12541,
                ( true, true, false, false, true, ) => 12542,
                ( true, true, false, true, false, ) => 12543,
                ( true, true, false, false, false, ) => 12544,
                ( false, true, false, true, true, ) => 12545,
                ( false, true, false, false, true, ) => 12546,
                ( false, true, false, true, false, ) => 12547,
                ( false, true, false, false, false, ) => 12548,
                ( true, false, false, true, true, ) => 12549,
                ( true, false, false, false, true, ) => 12550,
                ( true, false, false, true, false, ) => 12551,
                ( true, false, false, false, false, ) => 12552,
                ( false, false, false, true, true, ) => 12553,
                ( false, false, false, false, true, ) => 12554,
                ( false, false, false, true, false, ) => 12555,
                ( false, false, false, false, false, ) => 12556,
            })
        }
    }

    impl From<BirchFence> for BlockState {
        #[inline(always)]
        fn from(value : BirchFence) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchFence {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchFence { }

    impl Block for BirchFence {
        const DEFAULT_STATE : Self = Self {
            south : false,
            north : false,
            east : false,
            west : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:resin_bricks` block.
pub mod resin_bricks {
    use super::*;

    /// `minecraft:resin_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ResinBricks;

    impl ResinBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(7644)
        }
    }

    impl From<ResinBricks> for BlockState {
        #[inline(always)]
        fn from(value : ResinBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ResinBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ResinBricks { }

    impl Block for ResinBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:jungle_stairs` block.
pub mod jungle_stairs {
    use super::*;

    /// `minecraft:jungle_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct JungleStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl JungleStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.waterlogged, self.half, self.facing, )) {
                ( Shape::Straight, true, Half::Top, Facing::North, ) => 8610,
                ( Shape::Straight, false, Half::Top, Facing::North, ) => 8611,
                ( Shape::InnerLeft, true, Half::Top, Facing::North, ) => 8612,
                ( Shape::InnerLeft, false, Half::Top, Facing::North, ) => 8613,
                ( Shape::InnerRight, true, Half::Top, Facing::North, ) => 8614,
                ( Shape::InnerRight, false, Half::Top, Facing::North, ) => 8615,
                ( Shape::OuterLeft, true, Half::Top, Facing::North, ) => 8616,
                ( Shape::OuterLeft, false, Half::Top, Facing::North, ) => 8617,
                ( Shape::OuterRight, true, Half::Top, Facing::North, ) => 8618,
                ( Shape::OuterRight, false, Half::Top, Facing::North, ) => 8619,
                ( Shape::Straight, true, Half::Bottom, Facing::North, ) => 8620,
                ( Shape::Straight, false, Half::Bottom, Facing::North, ) => 8621,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::North, ) => 8622,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::North, ) => 8623,
                ( Shape::InnerRight, true, Half::Bottom, Facing::North, ) => 8624,
                ( Shape::InnerRight, false, Half::Bottom, Facing::North, ) => 8625,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::North, ) => 8626,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::North, ) => 8627,
                ( Shape::OuterRight, true, Half::Bottom, Facing::North, ) => 8628,
                ( Shape::OuterRight, false, Half::Bottom, Facing::North, ) => 8629,
                ( Shape::Straight, true, Half::Top, Facing::South, ) => 8630,
                ( Shape::Straight, false, Half::Top, Facing::South, ) => 8631,
                ( Shape::InnerLeft, true, Half::Top, Facing::South, ) => 8632,
                ( Shape::InnerLeft, false, Half::Top, Facing::South, ) => 8633,
                ( Shape::InnerRight, true, Half::Top, Facing::South, ) => 8634,
                ( Shape::InnerRight, false, Half::Top, Facing::South, ) => 8635,
                ( Shape::OuterLeft, true, Half::Top, Facing::South, ) => 8636,
                ( Shape::OuterLeft, false, Half::Top, Facing::South, ) => 8637,
                ( Shape::OuterRight, true, Half::Top, Facing::South, ) => 8638,
                ( Shape::OuterRight, false, Half::Top, Facing::South, ) => 8639,
                ( Shape::Straight, true, Half::Bottom, Facing::South, ) => 8640,
                ( Shape::Straight, false, Half::Bottom, Facing::South, ) => 8641,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::South, ) => 8642,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::South, ) => 8643,
                ( Shape::InnerRight, true, Half::Bottom, Facing::South, ) => 8644,
                ( Shape::InnerRight, false, Half::Bottom, Facing::South, ) => 8645,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::South, ) => 8646,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::South, ) => 8647,
                ( Shape::OuterRight, true, Half::Bottom, Facing::South, ) => 8648,
                ( Shape::OuterRight, false, Half::Bottom, Facing::South, ) => 8649,
                ( Shape::Straight, true, Half::Top, Facing::West, ) => 8650,
                ( Shape::Straight, false, Half::Top, Facing::West, ) => 8651,
                ( Shape::InnerLeft, true, Half::Top, Facing::West, ) => 8652,
                ( Shape::InnerLeft, false, Half::Top, Facing::West, ) => 8653,
                ( Shape::InnerRight, true, Half::Top, Facing::West, ) => 8654,
                ( Shape::InnerRight, false, Half::Top, Facing::West, ) => 8655,
                ( Shape::OuterLeft, true, Half::Top, Facing::West, ) => 8656,
                ( Shape::OuterLeft, false, Half::Top, Facing::West, ) => 8657,
                ( Shape::OuterRight, true, Half::Top, Facing::West, ) => 8658,
                ( Shape::OuterRight, false, Half::Top, Facing::West, ) => 8659,
                ( Shape::Straight, true, Half::Bottom, Facing::West, ) => 8660,
                ( Shape::Straight, false, Half::Bottom, Facing::West, ) => 8661,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::West, ) => 8662,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::West, ) => 8663,
                ( Shape::InnerRight, true, Half::Bottom, Facing::West, ) => 8664,
                ( Shape::InnerRight, false, Half::Bottom, Facing::West, ) => 8665,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::West, ) => 8666,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::West, ) => 8667,
                ( Shape::OuterRight, true, Half::Bottom, Facing::West, ) => 8668,
                ( Shape::OuterRight, false, Half::Bottom, Facing::West, ) => 8669,
                ( Shape::Straight, true, Half::Top, Facing::East, ) => 8670,
                ( Shape::Straight, false, Half::Top, Facing::East, ) => 8671,
                ( Shape::InnerLeft, true, Half::Top, Facing::East, ) => 8672,
                ( Shape::InnerLeft, false, Half::Top, Facing::East, ) => 8673,
                ( Shape::InnerRight, true, Half::Top, Facing::East, ) => 8674,
                ( Shape::InnerRight, false, Half::Top, Facing::East, ) => 8675,
                ( Shape::OuterLeft, true, Half::Top, Facing::East, ) => 8676,
                ( Shape::OuterLeft, false, Half::Top, Facing::East, ) => 8677,
                ( Shape::OuterRight, true, Half::Top, Facing::East, ) => 8678,
                ( Shape::OuterRight, false, Half::Top, Facing::East, ) => 8679,
                ( Shape::Straight, true, Half::Bottom, Facing::East, ) => 8680,
                ( Shape::Straight, false, Half::Bottom, Facing::East, ) => 8681,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::East, ) => 8682,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::East, ) => 8683,
                ( Shape::InnerRight, true, Half::Bottom, Facing::East, ) => 8684,
                ( Shape::InnerRight, false, Half::Bottom, Facing::East, ) => 8685,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::East, ) => 8686,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::East, ) => 8687,
                ( Shape::OuterRight, true, Half::Bottom, Facing::East, ) => 8688,
                ( Shape::OuterRight, false, Half::Bottom, Facing::East, ) => 8689,
            })
        }
    }

    impl From<JungleStairs> for BlockState {
        #[inline(always)]
        fn from(value : JungleStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for JungleStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for JungleStairs { }

    impl Block for JungleStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            waterlogged : false,
            half : Half::Bottom,
            facing : Facing::North,
        };
    }

}

/// `minecraft:spruce_button` block.
pub mod spruce_button {
    use super::*;

    /// `minecraft:spruce_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceButton {
        /// `powered` state.
        pub powered : bool,
        /// `face` state.
        pub face : Face,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl SpruceButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.face, self.facing, )) {
                ( true, Face::Floor, Facing::North, ) => 9420,
                ( false, Face::Floor, Facing::North, ) => 9421,
                ( true, Face::Floor, Facing::South, ) => 9422,
                ( false, Face::Floor, Facing::South, ) => 9423,
                ( true, Face::Floor, Facing::West, ) => 9424,
                ( false, Face::Floor, Facing::West, ) => 9425,
                ( true, Face::Floor, Facing::East, ) => 9426,
                ( false, Face::Floor, Facing::East, ) => 9427,
                ( true, Face::Wall, Facing::North, ) => 9428,
                ( false, Face::Wall, Facing::North, ) => 9429,
                ( true, Face::Wall, Facing::South, ) => 9430,
                ( false, Face::Wall, Facing::South, ) => 9431,
                ( true, Face::Wall, Facing::West, ) => 9432,
                ( false, Face::Wall, Facing::West, ) => 9433,
                ( true, Face::Wall, Facing::East, ) => 9434,
                ( false, Face::Wall, Facing::East, ) => 9435,
                ( true, Face::Ceiling, Facing::North, ) => 9436,
                ( false, Face::Ceiling, Facing::North, ) => 9437,
                ( true, Face::Ceiling, Facing::South, ) => 9438,
                ( false, Face::Ceiling, Facing::South, ) => 9439,
                ( true, Face::Ceiling, Facing::West, ) => 9440,
                ( false, Face::Ceiling, Facing::West, ) => 9441,
                ( true, Face::Ceiling, Facing::East, ) => 9442,
                ( false, Face::Ceiling, Facing::East, ) => 9443,
            })
        }
    }

    impl From<SpruceButton> for BlockState {
        #[inline(always)]
        fn from(value : SpruceButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceButton { }

    impl Block for SpruceButton {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            face : Face::Wall,
            facing : Facing::North,
        };
    }

}

/// `minecraft:bamboo_planks` block.
pub mod bamboo_planks {
    use super::*;

    /// `minecraft:bamboo_planks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooPlanks;

    impl BambooPlanks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27)
        }
    }

    impl From<BambooPlanks> for BlockState {
        #[inline(always)]
        fn from(value : BambooPlanks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooPlanks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooPlanks { }

    impl Block for BambooPlanks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:green_concrete` block.
pub mod green_concrete {
    use super::*;

    /// `minecraft:green_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenConcrete;

    impl GreenConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13764)
        }
    }

    impl From<GreenConcrete> for BlockState {
        #[inline(always)]
        fn from(value : GreenConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenConcrete { }

    impl Block for GreenConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dead_horn_coral_fan` block.
pub mod dead_horn_coral_fan {
    use super::*;

    /// `minecraft:dead_horn_coral_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadHornCoralFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl DeadHornCoralFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13896,
                ( false, ) => 13897,
            })
        }
    }

    impl From<DeadHornCoralFan> for BlockState {
        #[inline(always)]
        fn from(value : DeadHornCoralFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadHornCoralFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadHornCoralFan { }

    impl Block for DeadHornCoralFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:potted_cornflower` block.
pub mod potted_cornflower {
    use super::*;

    /// `minecraft:potted_cornflower` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedCornflower;

    impl PottedCornflower {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9373)
        }
    }

    impl From<PottedCornflower> for BlockState {
        #[inline(always)]
        fn from(value : PottedCornflower) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedCornflower {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedCornflower { }

    impl Block for PottedCornflower {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:oxidized_cut_copper_slab` block.
pub mod oxidized_cut_copper_slab {
    use super::*;

    /// `minecraft:oxidized_cut_copper_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OxidizedCutCopperSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl OxidizedCutCopperSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 24336,
                ( Kind::Top, false, ) => 24337,
                ( Kind::Bottom, true, ) => 24338,
                ( Kind::Bottom, false, ) => 24339,
                ( Kind::Double, true, ) => 24340,
                ( Kind::Double, false, ) => 24341,
            })
        }
    }

    impl From<OxidizedCutCopperSlab> for BlockState {
        #[inline(always)]
        fn from(value : OxidizedCutCopperSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OxidizedCutCopperSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OxidizedCutCopperSlab { }

    impl Block for OxidizedCutCopperSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:yellow_carpet` block.
pub mod yellow_carpet {
    use super::*;

    /// `minecraft:yellow_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowCarpet;

    impl YellowCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11621)
        }
    }

    impl From<YellowCarpet> for BlockState {
        #[inline(always)]
        fn from(value : YellowCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowCarpet { }

    impl Block for YellowCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:large_fern` block.
pub mod large_fern {
    use super::*;

    /// `minecraft:large_fern` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LargeFern {
        /// `half` state.
        pub half : Half,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl LargeFern {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, )) {
                ( Half::Upper, ) => 11646,
                ( Half::Lower, ) => 11647,
            })
        }
    }

    impl From<LargeFern> for BlockState {
        #[inline(always)]
        fn from(value : LargeFern) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LargeFern {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LargeFern { }

    impl Block for LargeFern {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
        };
    }

}

/// `minecraft:dead_fire_coral_fan` block.
pub mod dead_fire_coral_fan {
    use super::*;

    /// `minecraft:dead_fire_coral_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeadFireCoralFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl DeadFireCoralFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13894,
                ( false, ) => 13895,
            })
        }
    }

    impl From<DeadFireCoralFan> for BlockState {
        #[inline(always)]
        fn from(value : DeadFireCoralFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeadFireCoralFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeadFireCoralFan { }

    impl Block for DeadFireCoralFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:potted_pink_tulip` block.
pub mod potted_pink_tulip {
    use super::*;

    /// `minecraft:potted_pink_tulip` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedPinkTulip;

    impl PottedPinkTulip {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9371)
        }
    }

    impl From<PottedPinkTulip> for BlockState {
        #[inline(always)]
        fn from(value : PottedPinkTulip) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedPinkTulip {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedPinkTulip { }

    impl Block for PottedPinkTulip {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:short_grass` block.
pub mod short_grass {
    use super::*;

    /// `minecraft:short_grass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ShortGrass;

    impl ShortGrass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2048)
        }
    }

    impl From<ShortGrass> for BlockState {
        #[inline(always)]
        fn from(value : ShortGrass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ShortGrass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ShortGrass { }

    impl Block for ShortGrass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:soul_wall_torch` block.
pub mod soul_wall_torch {
    use super::*;

    /// `minecraft:soul_wall_torch` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SoulWallTorch {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl SoulWallTorch {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 6038,
                ( Facing::South, ) => 6039,
                ( Facing::West, ) => 6040,
                ( Facing::East, ) => 6041,
            })
        }
    }

    impl From<SoulWallTorch> for BlockState {
        #[inline(always)]
        fn from(value : SoulWallTorch) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SoulWallTorch {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SoulWallTorch { }

    impl Block for SoulWallTorch {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:stripped_crimson_stem` block.
pub mod stripped_crimson_stem {
    use super::*;

    /// `minecraft:stripped_crimson_stem` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedCrimsonStem {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedCrimsonStem {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 19654,
                ( Axis::Y, ) => 19655,
                ( Axis::Z, ) => 19656,
            })
        }
    }

    impl From<StrippedCrimsonStem> for BlockState {
        #[inline(always)]
        fn from(value : StrippedCrimsonStem) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedCrimsonStem {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedCrimsonStem { }

    impl Block for StrippedCrimsonStem {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:tuff_bricks` block.
pub mod tuff_bricks {
    use super::*;

    /// `minecraft:tuff_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TuffBricks;

    impl TuffBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(22964)
        }
    }

    impl From<TuffBricks> for BlockState {
        #[inline(always)]
        fn from(value : TuffBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TuffBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TuffBricks { }

    impl Block for TuffBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:chiseled_deepslate` block.
pub mod chiseled_deepslate {
    use super::*;

    /// `minecraft:chiseled_deepslate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChiseledDeepslate;

    impl ChiseledDeepslate {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27643)
        }
    }

    impl From<ChiseledDeepslate> for BlockState {
        #[inline(always)]
        fn from(value : ChiseledDeepslate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChiseledDeepslate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChiseledDeepslate { }

    impl Block for ChiseledDeepslate {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:warped_fence` block.
pub mod warped_fence {
    use super::*;

    /// `minecraft:warped_fence` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedFence {
        /// `east` state.
        pub east : bool,
        /// `west` state.
        pub west : bool,
        /// `south` state.
        pub south : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `north` state.
        pub north : bool,
    }

    impl WarpedFence {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.west, self.south, self.waterlogged, self.north, )) {
                ( true, true, true, true, true, ) => 19771,
                ( true, false, true, true, true, ) => 19772,
                ( true, true, true, false, true, ) => 19773,
                ( true, false, true, false, true, ) => 19774,
                ( true, true, false, true, true, ) => 19775,
                ( true, false, false, true, true, ) => 19776,
                ( true, true, false, false, true, ) => 19777,
                ( true, false, false, false, true, ) => 19778,
                ( true, true, true, true, false, ) => 19779,
                ( true, false, true, true, false, ) => 19780,
                ( true, true, true, false, false, ) => 19781,
                ( true, false, true, false, false, ) => 19782,
                ( true, true, false, true, false, ) => 19783,
                ( true, false, false, true, false, ) => 19784,
                ( true, true, false, false, false, ) => 19785,
                ( true, false, false, false, false, ) => 19786,
                ( false, true, true, true, true, ) => 19787,
                ( false, false, true, true, true, ) => 19788,
                ( false, true, true, false, true, ) => 19789,
                ( false, false, true, false, true, ) => 19790,
                ( false, true, false, true, true, ) => 19791,
                ( false, false, false, true, true, ) => 19792,
                ( false, true, false, false, true, ) => 19793,
                ( false, false, false, false, true, ) => 19794,
                ( false, true, true, true, false, ) => 19795,
                ( false, false, true, true, false, ) => 19796,
                ( false, true, true, false, false, ) => 19797,
                ( false, false, true, false, false, ) => 19798,
                ( false, true, false, true, false, ) => 19799,
                ( false, false, false, true, false, ) => 19800,
                ( false, true, false, false, false, ) => 19801,
                ( false, false, false, false, false, ) => 19802,
            })
        }
    }

    impl From<WarpedFence> for BlockState {
        #[inline(always)]
        fn from(value : WarpedFence) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedFence {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedFence { }

    impl Block for WarpedFence {
        const DEFAULT_STATE : Self = Self {
            east : false,
            west : false,
            south : false,
            waterlogged : false,
            north : false,
        };
    }

}

/// `minecraft:pale_oak_slab` block.
pub mod pale_oak_slab {
    use super::*;

    /// `minecraft:pale_oak_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl PaleOakSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 12093,
                ( false, Kind::Top, ) => 12094,
                ( true, Kind::Bottom, ) => 12095,
                ( false, Kind::Bottom, ) => 12096,
                ( true, Kind::Double, ) => 12097,
                ( false, Kind::Double, ) => 12098,
            })
        }
    }

    impl From<PaleOakSlab> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakSlab { }

    impl Block for PaleOakSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:dark_oak_planks` block.
pub mod dark_oak_planks {
    use super::*;

    /// `minecraft:dark_oak_planks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakPlanks;

    impl DarkOakPlanks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(21)
        }
    }

    impl From<DarkOakPlanks> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakPlanks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakPlanks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakPlanks { }

    impl Block for DarkOakPlanks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:white_wool` block.
pub mod white_wool {
    use super::*;

    /// `minecraft:white_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteWool;

    impl WhiteWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2093)
        }
    }

    impl From<WhiteWool> for BlockState {
        #[inline(always)]
        fn from(value : WhiteWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteWool { }

    impl Block for WhiteWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:chiseled_tuff_bricks` block.
pub mod chiseled_tuff_bricks {
    use super::*;

    /// `minecraft:chiseled_tuff_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChiseledTuffBricks;

    impl ChiseledTuffBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(23375)
        }
    }

    impl From<ChiseledTuffBricks> for BlockState {
        #[inline(always)]
        fn from(value : ChiseledTuffBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChiseledTuffBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChiseledTuffBricks { }

    impl Block for ChiseledTuffBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stripped_acacia_log` block.
pub mod stripped_acacia_log {
    use super::*;

    /// `minecraft:stripped_acacia_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedAcaciaLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedAcaciaLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 180,
                ( Axis::Y, ) => 181,
                ( Axis::Z, ) => 182,
            })
        }
    }

    impl From<StrippedAcaciaLog> for BlockState {
        #[inline(always)]
        fn from(value : StrippedAcaciaLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedAcaciaLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedAcaciaLog { }

    impl Block for StrippedAcaciaLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:dark_oak_log` block.
pub mod dark_oak_log {
    use super::*;

    /// `minecraft:dark_oak_log` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakLog {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl DarkOakLog {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 154,
                ( Axis::Y, ) => 155,
                ( Axis::Z, ) => 156,
            })
        }
    }

    impl From<DarkOakLog> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakLog) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakLog {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakLog { }

    impl Block for DarkOakLog {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:cyan_candle` block.
pub mod cyan_candle {
    use super::*;

    /// `minecraft:cyan_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanCandle {
        /// `lit` state.
        pub lit : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `candles` state.
        pub candles : Candles,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl CyanCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, self.waterlogged, self.candles, )) {
                ( true, true, Candles::N1, ) => 21945,
                ( true, false, Candles::N1, ) => 21946,
                ( false, true, Candles::N1, ) => 21947,
                ( false, false, Candles::N1, ) => 21948,
                ( true, true, Candles::N2, ) => 21949,
                ( true, false, Candles::N2, ) => 21950,
                ( false, true, Candles::N2, ) => 21951,
                ( false, false, Candles::N2, ) => 21952,
                ( true, true, Candles::N3, ) => 21953,
                ( true, false, Candles::N3, ) => 21954,
                ( false, true, Candles::N3, ) => 21955,
                ( false, false, Candles::N3, ) => 21956,
                ( true, true, Candles::N4, ) => 21957,
                ( true, false, Candles::N4, ) => 21958,
                ( false, true, Candles::N4, ) => 21959,
                ( false, false, Candles::N4, ) => 21960,
            })
        }
    }

    impl From<CyanCandle> for BlockState {
        #[inline(always)]
        fn from(value : CyanCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanCandle { }

    impl Block for CyanCandle {
        const DEFAULT_STATE : Self = Self {
            lit : false,
            waterlogged : false,
            candles : Candles::N1,
        };
    }

}

/// `minecraft:crimson_button` block.
pub mod crimson_button {
    use super::*;

    /// `minecraft:crimson_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonButton {
        /// `face` state.
        pub face : Face,
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CrimsonButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.face, self.powered, self.facing, )) {
                ( Face::Floor, true, Facing::North, ) => 20155,
                ( Face::Floor, false, Facing::North, ) => 20156,
                ( Face::Floor, true, Facing::South, ) => 20157,
                ( Face::Floor, false, Facing::South, ) => 20158,
                ( Face::Floor, true, Facing::West, ) => 20159,
                ( Face::Floor, false, Facing::West, ) => 20160,
                ( Face::Floor, true, Facing::East, ) => 20161,
                ( Face::Floor, false, Facing::East, ) => 20162,
                ( Face::Wall, true, Facing::North, ) => 20163,
                ( Face::Wall, false, Facing::North, ) => 20164,
                ( Face::Wall, true, Facing::South, ) => 20165,
                ( Face::Wall, false, Facing::South, ) => 20166,
                ( Face::Wall, true, Facing::West, ) => 20167,
                ( Face::Wall, false, Facing::West, ) => 20168,
                ( Face::Wall, true, Facing::East, ) => 20169,
                ( Face::Wall, false, Facing::East, ) => 20170,
                ( Face::Ceiling, true, Facing::North, ) => 20171,
                ( Face::Ceiling, false, Facing::North, ) => 20172,
                ( Face::Ceiling, true, Facing::South, ) => 20173,
                ( Face::Ceiling, false, Facing::South, ) => 20174,
                ( Face::Ceiling, true, Facing::West, ) => 20175,
                ( Face::Ceiling, false, Facing::West, ) => 20176,
                ( Face::Ceiling, true, Facing::East, ) => 20177,
                ( Face::Ceiling, false, Facing::East, ) => 20178,
            })
        }
    }

    impl From<CrimsonButton> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonButton { }

    impl Block for CrimsonButton {
        const DEFAULT_STATE : Self = Self {
            face : Face::Wall,
            powered : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:lime_wall_banner` block.
pub mod lime_wall_banner {
    use super::*;

    /// `minecraft:lime_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl LimeWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11924,
                ( Facing::South, ) => 11925,
                ( Facing::West, ) => 11926,
                ( Facing::East, ) => 11927,
            })
        }
    }

    impl From<LimeWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : LimeWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeWallBanner { }

    impl Block for LimeWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:brown_mushroom_block` block.
pub mod brown_mushroom_block {
    use super::*;

    /// `minecraft:brown_mushroom_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownMushroomBlock {
        /// `down` state.
        pub down : bool,
        /// `up` state.
        pub up : bool,
        /// `east` state.
        pub east : bool,
        /// `west` state.
        pub west : bool,
        /// `south` state.
        pub south : bool,
        /// `north` state.
        pub north : bool,
    }

    impl BrownMushroomBlock {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.down, self.up, self.east, self.west, self.south, self.north, )) {
                ( true, true, true, true, true, true, ) => 6792,
                ( true, true, true, false, true, true, ) => 6793,
                ( true, false, true, true, true, true, ) => 6794,
                ( true, false, true, false, true, true, ) => 6795,
                ( true, true, true, true, false, true, ) => 6796,
                ( true, true, true, false, false, true, ) => 6797,
                ( true, false, true, true, false, true, ) => 6798,
                ( true, false, true, false, false, true, ) => 6799,
                ( true, true, true, true, true, false, ) => 6800,
                ( true, true, true, false, true, false, ) => 6801,
                ( true, false, true, true, true, false, ) => 6802,
                ( true, false, true, false, true, false, ) => 6803,
                ( true, true, true, true, false, false, ) => 6804,
                ( true, true, true, false, false, false, ) => 6805,
                ( true, false, true, true, false, false, ) => 6806,
                ( true, false, true, false, false, false, ) => 6807,
                ( true, true, false, true, true, true, ) => 6808,
                ( true, true, false, false, true, true, ) => 6809,
                ( true, false, false, true, true, true, ) => 6810,
                ( true, false, false, false, true, true, ) => 6811,
                ( true, true, false, true, false, true, ) => 6812,
                ( true, true, false, false, false, true, ) => 6813,
                ( true, false, false, true, false, true, ) => 6814,
                ( true, false, false, false, false, true, ) => 6815,
                ( true, true, false, true, true, false, ) => 6816,
                ( true, true, false, false, true, false, ) => 6817,
                ( true, false, false, true, true, false, ) => 6818,
                ( true, false, false, false, true, false, ) => 6819,
                ( true, true, false, true, false, false, ) => 6820,
                ( true, true, false, false, false, false, ) => 6821,
                ( true, false, false, true, false, false, ) => 6822,
                ( true, false, false, false, false, false, ) => 6823,
                ( false, true, true, true, true, true, ) => 6824,
                ( false, true, true, false, true, true, ) => 6825,
                ( false, false, true, true, true, true, ) => 6826,
                ( false, false, true, false, true, true, ) => 6827,
                ( false, true, true, true, false, true, ) => 6828,
                ( false, true, true, false, false, true, ) => 6829,
                ( false, false, true, true, false, true, ) => 6830,
                ( false, false, true, false, false, true, ) => 6831,
                ( false, true, true, true, true, false, ) => 6832,
                ( false, true, true, false, true, false, ) => 6833,
                ( false, false, true, true, true, false, ) => 6834,
                ( false, false, true, false, true, false, ) => 6835,
                ( false, true, true, true, false, false, ) => 6836,
                ( false, true, true, false, false, false, ) => 6837,
                ( false, false, true, true, false, false, ) => 6838,
                ( false, false, true, false, false, false, ) => 6839,
                ( false, true, false, true, true, true, ) => 6840,
                ( false, true, false, false, true, true, ) => 6841,
                ( false, false, false, true, true, true, ) => 6842,
                ( false, false, false, false, true, true, ) => 6843,
                ( false, true, false, true, false, true, ) => 6844,
                ( false, true, false, false, false, true, ) => 6845,
                ( false, false, false, true, false, true, ) => 6846,
                ( false, false, false, false, false, true, ) => 6847,
                ( false, true, false, true, true, false, ) => 6848,
                ( false, true, false, false, true, false, ) => 6849,
                ( false, false, false, true, true, false, ) => 6850,
                ( false, false, false, false, true, false, ) => 6851,
                ( false, true, false, true, false, false, ) => 6852,
                ( false, true, false, false, false, false, ) => 6853,
                ( false, false, false, true, false, false, ) => 6854,
                ( false, false, false, false, false, false, ) => 6855,
            })
        }
    }

    impl From<BrownMushroomBlock> for BlockState {
        #[inline(always)]
        fn from(value : BrownMushroomBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownMushroomBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownMushroomBlock { }

    impl Block for BrownMushroomBlock {
        const DEFAULT_STATE : Self = Self {
            down : true,
            up : true,
            east : true,
            west : true,
            south : true,
            north : true,
        };
    }

}

/// `minecraft:farmland` block.
pub mod farmland {
    use super::*;

    /// `minecraft:farmland` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Farmland {
        /// `moisture` state.
        pub moisture : Moisture,
    }

    /// `moisture` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Moisture {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Moisture { }
    impl BlockProperty for Moisture { }

    impl Farmland {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.moisture, )) {
                ( Moisture::N0, ) => 4350,
                ( Moisture::N1, ) => 4351,
                ( Moisture::N2, ) => 4352,
                ( Moisture::N3, ) => 4353,
                ( Moisture::N4, ) => 4354,
                ( Moisture::N5, ) => 4355,
                ( Moisture::N6, ) => 4356,
                ( Moisture::N7, ) => 4357,
            })
        }
    }

    impl From<Farmland> for BlockState {
        #[inline(always)]
        fn from(value : Farmland) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Farmland {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Farmland { }

    impl Block for Farmland {
        const DEFAULT_STATE : Self = Self {
            moisture : Moisture::N0,
        };
    }

}

/// `minecraft:acacia_fence_gate` block.
pub mod acacia_fence_gate {
    use super::*;

    /// `minecraft:acacia_fence_gate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AcaciaFenceGate {
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
        /// `open` state.
        pub open : bool,
        /// `in_wall` state.
        pub in_wall : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl AcaciaFenceGate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.powered, self.open, self.in_wall, )) {
                ( Facing::North, true, true, true, ) => 12301,
                ( Facing::North, false, true, true, ) => 12302,
                ( Facing::North, true, false, true, ) => 12303,
                ( Facing::North, false, false, true, ) => 12304,
                ( Facing::North, true, true, false, ) => 12305,
                ( Facing::North, false, true, false, ) => 12306,
                ( Facing::North, true, false, false, ) => 12307,
                ( Facing::North, false, false, false, ) => 12308,
                ( Facing::South, true, true, true, ) => 12309,
                ( Facing::South, false, true, true, ) => 12310,
                ( Facing::South, true, false, true, ) => 12311,
                ( Facing::South, false, false, true, ) => 12312,
                ( Facing::South, true, true, false, ) => 12313,
                ( Facing::South, false, true, false, ) => 12314,
                ( Facing::South, true, false, false, ) => 12315,
                ( Facing::South, false, false, false, ) => 12316,
                ( Facing::West, true, true, true, ) => 12317,
                ( Facing::West, false, true, true, ) => 12318,
                ( Facing::West, true, false, true, ) => 12319,
                ( Facing::West, false, false, true, ) => 12320,
                ( Facing::West, true, true, false, ) => 12321,
                ( Facing::West, false, true, false, ) => 12322,
                ( Facing::West, true, false, false, ) => 12323,
                ( Facing::West, false, false, false, ) => 12324,
                ( Facing::East, true, true, true, ) => 12325,
                ( Facing::East, false, true, true, ) => 12326,
                ( Facing::East, true, false, true, ) => 12327,
                ( Facing::East, false, false, true, ) => 12328,
                ( Facing::East, true, true, false, ) => 12329,
                ( Facing::East, false, true, false, ) => 12330,
                ( Facing::East, true, false, false, ) => 12331,
                ( Facing::East, false, false, false, ) => 12332,
            })
        }
    }

    impl From<AcaciaFenceGate> for BlockState {
        #[inline(always)]
        fn from(value : AcaciaFenceGate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AcaciaFenceGate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AcaciaFenceGate { }

    impl Block for AcaciaFenceGate {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            powered : false,
            open : false,
            in_wall : false,
        };
    }

}

/// `minecraft:chain_command_block` block.
pub mod chain_command_block {
    use super::*;

    /// `minecraft:chain_command_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChainCommandBlock {
        /// `facing` state.
        pub facing : Facing,
        /// `conditional` state.
        pub conditional : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl ChainCommandBlock {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.conditional, )) {
                ( Facing::North, true, ) => 13550,
                ( Facing::East, true, ) => 13551,
                ( Facing::South, true, ) => 13552,
                ( Facing::West, true, ) => 13553,
                ( Facing::Up, true, ) => 13554,
                ( Facing::Down, true, ) => 13555,
                ( Facing::North, false, ) => 13556,
                ( Facing::East, false, ) => 13557,
                ( Facing::South, false, ) => 13558,
                ( Facing::West, false, ) => 13559,
                ( Facing::Up, false, ) => 13560,
                ( Facing::Down, false, ) => 13561,
            })
        }
    }

    impl From<ChainCommandBlock> for BlockState {
        #[inline(always)]
        fn from(value : ChainCommandBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChainCommandBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChainCommandBlock { }

    impl Block for ChainCommandBlock {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            conditional : false,
        };
    }

}

/// `minecraft:orange_wall_banner` block.
pub mod orange_wall_banner {
    use super::*;

    /// `minecraft:orange_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl OrangeWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11908,
                ( Facing::South, ) => 11909,
                ( Facing::West, ) => 11910,
                ( Facing::East, ) => 11911,
            })
        }
    }

    impl From<OrangeWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : OrangeWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeWallBanner { }

    impl Block for OrangeWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:light_blue_stained_glass` block.
pub mod light_blue_stained_glass {
    use super::*;

    /// `minecraft:light_blue_stained_glass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueStainedGlass;

    impl LightBlueStainedGlass {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6127)
        }
    }

    impl From<LightBlueStainedGlass> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueStainedGlass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueStainedGlass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueStainedGlass { }

    impl Block for LightBlueStainedGlass {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:sniffer_egg` block.
pub mod sniffer_egg {
    use super::*;

    /// `minecraft:sniffer_egg` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SnifferEgg {
        /// `hatch` state.
        pub hatch : Hatch,
    }

    /// `hatch` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hatch {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
    }
    impl crate::Sealed for Hatch { }
    impl BlockProperty for Hatch { }

    impl SnifferEgg {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.hatch, )) {
                ( Hatch::N0, ) => 13823,
                ( Hatch::N1, ) => 13824,
                ( Hatch::N2, ) => 13825,
            })
        }
    }

    impl From<SnifferEgg> for BlockState {
        #[inline(always)]
        fn from(value : SnifferEgg) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SnifferEgg {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SnifferEgg { }

    impl Block for SnifferEgg {
        const DEFAULT_STATE : Self = Self {
            hatch : Hatch::N0,
        };
    }

}

/// `minecraft:cut_copper_stairs` block.
pub mod cut_copper_stairs {
    use super::*;

    /// `minecraft:cut_copper_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CutCopperStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CutCopperStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.half, self.shape, self.facing, )) {
                ( true, Half::Top, Shape::Straight, Facing::North, ) => 24256,
                ( false, Half::Top, Shape::Straight, Facing::North, ) => 24257,
                ( true, Half::Top, Shape::InnerLeft, Facing::North, ) => 24258,
                ( false, Half::Top, Shape::InnerLeft, Facing::North, ) => 24259,
                ( true, Half::Top, Shape::InnerRight, Facing::North, ) => 24260,
                ( false, Half::Top, Shape::InnerRight, Facing::North, ) => 24261,
                ( true, Half::Top, Shape::OuterLeft, Facing::North, ) => 24262,
                ( false, Half::Top, Shape::OuterLeft, Facing::North, ) => 24263,
                ( true, Half::Top, Shape::OuterRight, Facing::North, ) => 24264,
                ( false, Half::Top, Shape::OuterRight, Facing::North, ) => 24265,
                ( true, Half::Bottom, Shape::Straight, Facing::North, ) => 24266,
                ( false, Half::Bottom, Shape::Straight, Facing::North, ) => 24267,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::North, ) => 24268,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::North, ) => 24269,
                ( true, Half::Bottom, Shape::InnerRight, Facing::North, ) => 24270,
                ( false, Half::Bottom, Shape::InnerRight, Facing::North, ) => 24271,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::North, ) => 24272,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::North, ) => 24273,
                ( true, Half::Bottom, Shape::OuterRight, Facing::North, ) => 24274,
                ( false, Half::Bottom, Shape::OuterRight, Facing::North, ) => 24275,
                ( true, Half::Top, Shape::Straight, Facing::South, ) => 24276,
                ( false, Half::Top, Shape::Straight, Facing::South, ) => 24277,
                ( true, Half::Top, Shape::InnerLeft, Facing::South, ) => 24278,
                ( false, Half::Top, Shape::InnerLeft, Facing::South, ) => 24279,
                ( true, Half::Top, Shape::InnerRight, Facing::South, ) => 24280,
                ( false, Half::Top, Shape::InnerRight, Facing::South, ) => 24281,
                ( true, Half::Top, Shape::OuterLeft, Facing::South, ) => 24282,
                ( false, Half::Top, Shape::OuterLeft, Facing::South, ) => 24283,
                ( true, Half::Top, Shape::OuterRight, Facing::South, ) => 24284,
                ( false, Half::Top, Shape::OuterRight, Facing::South, ) => 24285,
                ( true, Half::Bottom, Shape::Straight, Facing::South, ) => 24286,
                ( false, Half::Bottom, Shape::Straight, Facing::South, ) => 24287,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::South, ) => 24288,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::South, ) => 24289,
                ( true, Half::Bottom, Shape::InnerRight, Facing::South, ) => 24290,
                ( false, Half::Bottom, Shape::InnerRight, Facing::South, ) => 24291,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::South, ) => 24292,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::South, ) => 24293,
                ( true, Half::Bottom, Shape::OuterRight, Facing::South, ) => 24294,
                ( false, Half::Bottom, Shape::OuterRight, Facing::South, ) => 24295,
                ( true, Half::Top, Shape::Straight, Facing::West, ) => 24296,
                ( false, Half::Top, Shape::Straight, Facing::West, ) => 24297,
                ( true, Half::Top, Shape::InnerLeft, Facing::West, ) => 24298,
                ( false, Half::Top, Shape::InnerLeft, Facing::West, ) => 24299,
                ( true, Half::Top, Shape::InnerRight, Facing::West, ) => 24300,
                ( false, Half::Top, Shape::InnerRight, Facing::West, ) => 24301,
                ( true, Half::Top, Shape::OuterLeft, Facing::West, ) => 24302,
                ( false, Half::Top, Shape::OuterLeft, Facing::West, ) => 24303,
                ( true, Half::Top, Shape::OuterRight, Facing::West, ) => 24304,
                ( false, Half::Top, Shape::OuterRight, Facing::West, ) => 24305,
                ( true, Half::Bottom, Shape::Straight, Facing::West, ) => 24306,
                ( false, Half::Bottom, Shape::Straight, Facing::West, ) => 24307,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::West, ) => 24308,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::West, ) => 24309,
                ( true, Half::Bottom, Shape::InnerRight, Facing::West, ) => 24310,
                ( false, Half::Bottom, Shape::InnerRight, Facing::West, ) => 24311,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::West, ) => 24312,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::West, ) => 24313,
                ( true, Half::Bottom, Shape::OuterRight, Facing::West, ) => 24314,
                ( false, Half::Bottom, Shape::OuterRight, Facing::West, ) => 24315,
                ( true, Half::Top, Shape::Straight, Facing::East, ) => 24316,
                ( false, Half::Top, Shape::Straight, Facing::East, ) => 24317,
                ( true, Half::Top, Shape::InnerLeft, Facing::East, ) => 24318,
                ( false, Half::Top, Shape::InnerLeft, Facing::East, ) => 24319,
                ( true, Half::Top, Shape::InnerRight, Facing::East, ) => 24320,
                ( false, Half::Top, Shape::InnerRight, Facing::East, ) => 24321,
                ( true, Half::Top, Shape::OuterLeft, Facing::East, ) => 24322,
                ( false, Half::Top, Shape::OuterLeft, Facing::East, ) => 24323,
                ( true, Half::Top, Shape::OuterRight, Facing::East, ) => 24324,
                ( false, Half::Top, Shape::OuterRight, Facing::East, ) => 24325,
                ( true, Half::Bottom, Shape::Straight, Facing::East, ) => 24326,
                ( false, Half::Bottom, Shape::Straight, Facing::East, ) => 24327,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::East, ) => 24328,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::East, ) => 24329,
                ( true, Half::Bottom, Shape::InnerRight, Facing::East, ) => 24330,
                ( false, Half::Bottom, Shape::InnerRight, Facing::East, ) => 24331,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::East, ) => 24332,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::East, ) => 24333,
                ( true, Half::Bottom, Shape::OuterRight, Facing::East, ) => 24334,
                ( false, Half::Bottom, Shape::OuterRight, Facing::East, ) => 24335,
            })
        }
    }

    impl From<CutCopperStairs> for BlockState {
        #[inline(always)]
        fn from(value : CutCopperStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CutCopperStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CutCopperStairs { }

    impl Block for CutCopperStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            half : Half::Bottom,
            shape : Shape::Straight,
            facing : Facing::North,
        };
    }

}

/// `minecraft:light_blue_concrete` block.
pub mod light_blue_concrete {
    use super::*;

    /// `minecraft:light_blue_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueConcrete;

    impl LightBlueConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13754)
        }
    }

    impl From<LightBlueConcrete> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueConcrete { }

    impl Block for LightBlueConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:hopper` block.
pub mod hopper {
    use super::*;

    /// `minecraft:hopper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Hopper {
        /// `enabled` state.
        pub enabled : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `down` variant.
        Down,
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl Hopper {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.enabled, self.facing, )) {
                ( true, Facing::Down, ) => 10034,
                ( true, Facing::North, ) => 10035,
                ( true, Facing::South, ) => 10036,
                ( true, Facing::West, ) => 10037,
                ( true, Facing::East, ) => 10038,
                ( false, Facing::Down, ) => 10039,
                ( false, Facing::North, ) => 10040,
                ( false, Facing::South, ) => 10041,
                ( false, Facing::West, ) => 10042,
                ( false, Facing::East, ) => 10043,
            })
        }
    }

    impl From<Hopper> for BlockState {
        #[inline(always)]
        fn from(value : Hopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Hopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Hopper { }

    impl Block for Hopper {
        const DEFAULT_STATE : Self = Self {
            enabled : true,
            facing : Facing::Down,
        };
    }

}

/// `minecraft:magenta_concrete_powder` block.
pub mod magenta_concrete_powder {
    use super::*;

    /// `minecraft:magenta_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaConcretePowder;

    impl MagentaConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13769)
        }
    }

    impl From<MagentaConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : MagentaConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaConcretePowder { }

    impl Block for MagentaConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:suspicious_sand` block.
pub mod suspicious_sand {
    use super::*;

    /// `minecraft:suspicious_sand` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SuspiciousSand {
        /// `dusted` state.
        pub dusted : Dusted,
    }

    /// `dusted` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Dusted {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
    }
    impl crate::Sealed for Dusted { }
    impl BlockProperty for Dusted { }

    impl SuspiciousSand {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.dusted, )) {
                ( Dusted::N0, ) => 119,
                ( Dusted::N1, ) => 120,
                ( Dusted::N2, ) => 121,
                ( Dusted::N3, ) => 122,
            })
        }
    }

    impl From<SuspiciousSand> for BlockState {
        #[inline(always)]
        fn from(value : SuspiciousSand) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SuspiciousSand {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SuspiciousSand { }

    impl Block for SuspiciousSand {
        const DEFAULT_STATE : Self = Self {
            dusted : Dusted::N0,
        };
    }

}

/// `minecraft:birch_leaves` block.
pub mod birch_leaves {
    use super::*;

    /// `minecraft:birch_leaves` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchLeaves {
        /// `persistent` state.
        pub persistent : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `distance` state.
        pub distance : Distance,
    }

    /// `distance` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Distance {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
    }
    impl crate::Sealed for Distance { }
    impl BlockProperty for Distance { }

    impl BirchLeaves {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.persistent, self.waterlogged, self.distance, )) {
                ( true, true, Distance::N1, ) => 308,
                ( true, false, Distance::N1, ) => 309,
                ( false, true, Distance::N1, ) => 310,
                ( false, false, Distance::N1, ) => 311,
                ( true, true, Distance::N2, ) => 312,
                ( true, false, Distance::N2, ) => 313,
                ( false, true, Distance::N2, ) => 314,
                ( false, false, Distance::N2, ) => 315,
                ( true, true, Distance::N3, ) => 316,
                ( true, false, Distance::N3, ) => 317,
                ( false, true, Distance::N3, ) => 318,
                ( false, false, Distance::N3, ) => 319,
                ( true, true, Distance::N4, ) => 320,
                ( true, false, Distance::N4, ) => 321,
                ( false, true, Distance::N4, ) => 322,
                ( false, false, Distance::N4, ) => 323,
                ( true, true, Distance::N5, ) => 324,
                ( true, false, Distance::N5, ) => 325,
                ( false, true, Distance::N5, ) => 326,
                ( false, false, Distance::N5, ) => 327,
                ( true, true, Distance::N6, ) => 328,
                ( true, false, Distance::N6, ) => 329,
                ( false, true, Distance::N6, ) => 330,
                ( false, false, Distance::N6, ) => 331,
                ( true, true, Distance::N7, ) => 332,
                ( true, false, Distance::N7, ) => 333,
                ( false, true, Distance::N7, ) => 334,
                ( false, false, Distance::N7, ) => 335,
            })
        }
    }

    impl From<BirchLeaves> for BlockState {
        #[inline(always)]
        fn from(value : BirchLeaves) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchLeaves {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchLeaves { }

    impl Block for BirchLeaves {
        const DEFAULT_STATE : Self = Self {
            persistent : false,
            waterlogged : false,
            distance : Distance::N7,
        };
    }

}

/// `minecraft:purple_candle_cake` block.
pub mod purple_candle_cake {
    use super::*;

    /// `minecraft:purple_candle_cake` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleCandleCake {
        /// `lit` state.
        pub lit : bool,
    }

    impl PurpleCandleCake {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, )) {
                ( true, ) => 22079,
                ( false, ) => 22080,
            })
        }
    }

    impl From<PurpleCandleCake> for BlockState {
        #[inline(always)]
        fn from(value : PurpleCandleCake) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleCandleCake {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleCandleCake { }

    impl Block for PurpleCandleCake {
        const DEFAULT_STATE : Self = Self {
            lit : false,
        };
    }

}

/// `minecraft:tall_seagrass` block.
pub mod tall_seagrass {
    use super::*;

    /// `minecraft:tall_seagrass` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TallSeagrass {
        /// `half` state.
        pub half : Half,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl TallSeagrass {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, )) {
                ( Half::Upper, ) => 2055,
                ( Half::Lower, ) => 2056,
            })
        }
    }

    impl From<TallSeagrass> for BlockState {
        #[inline(always)]
        fn from(value : TallSeagrass) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TallSeagrass {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TallSeagrass { }

    impl Block for TallSeagrass {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
        };
    }

}

/// `minecraft:sunflower` block.
pub mod sunflower {
    use super::*;

    /// `minecraft:sunflower` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Sunflower {
        /// `half` state.
        pub half : Half,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl Sunflower {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, )) {
                ( Half::Upper, ) => 11636,
                ( Half::Lower, ) => 11637,
            })
        }
    }

    impl From<Sunflower> for BlockState {
        #[inline(always)]
        fn from(value : Sunflower) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Sunflower {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Sunflower { }

    impl Block for Sunflower {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
        };
    }

}

/// `minecraft:yellow_shulker_box` block.
pub mod yellow_shulker_box {
    use super::*;

    /// `minecraft:yellow_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct YellowShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl YellowShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13615,
                ( Facing::East, ) => 13616,
                ( Facing::South, ) => 13617,
                ( Facing::West, ) => 13618,
                ( Facing::Up, ) => 13619,
                ( Facing::Down, ) => 13620,
            })
        }
    }

    impl From<YellowShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : YellowShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for YellowShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for YellowShulkerBox { }

    impl Block for YellowShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:carved_pumpkin` block.
pub mod carved_pumpkin {
    use super::*;

    /// `minecraft:carved_pumpkin` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CarvedPumpkin {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CarvedPumpkin {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 6045,
                ( Facing::South, ) => 6046,
                ( Facing::West, ) => 6047,
                ( Facing::East, ) => 6048,
            })
        }
    }

    impl From<CarvedPumpkin> for BlockState {
        #[inline(always)]
        fn from(value : CarvedPumpkin) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CarvedPumpkin {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CarvedPumpkin { }

    impl Block for CarvedPumpkin {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:diorite_stairs` block.
pub mod diorite_stairs {
    use super::*;

    /// `minecraft:diorite_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DioriteStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl DioriteStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.half, self.shape, self.facing, )) {
                ( true, Half::Top, Shape::Straight, Facing::North, ) => 15057,
                ( false, Half::Top, Shape::Straight, Facing::North, ) => 15058,
                ( true, Half::Top, Shape::InnerLeft, Facing::North, ) => 15059,
                ( false, Half::Top, Shape::InnerLeft, Facing::North, ) => 15060,
                ( true, Half::Top, Shape::InnerRight, Facing::North, ) => 15061,
                ( false, Half::Top, Shape::InnerRight, Facing::North, ) => 15062,
                ( true, Half::Top, Shape::OuterLeft, Facing::North, ) => 15063,
                ( false, Half::Top, Shape::OuterLeft, Facing::North, ) => 15064,
                ( true, Half::Top, Shape::OuterRight, Facing::North, ) => 15065,
                ( false, Half::Top, Shape::OuterRight, Facing::North, ) => 15066,
                ( true, Half::Bottom, Shape::Straight, Facing::North, ) => 15067,
                ( false, Half::Bottom, Shape::Straight, Facing::North, ) => 15068,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::North, ) => 15069,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::North, ) => 15070,
                ( true, Half::Bottom, Shape::InnerRight, Facing::North, ) => 15071,
                ( false, Half::Bottom, Shape::InnerRight, Facing::North, ) => 15072,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::North, ) => 15073,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::North, ) => 15074,
                ( true, Half::Bottom, Shape::OuterRight, Facing::North, ) => 15075,
                ( false, Half::Bottom, Shape::OuterRight, Facing::North, ) => 15076,
                ( true, Half::Top, Shape::Straight, Facing::South, ) => 15077,
                ( false, Half::Top, Shape::Straight, Facing::South, ) => 15078,
                ( true, Half::Top, Shape::InnerLeft, Facing::South, ) => 15079,
                ( false, Half::Top, Shape::InnerLeft, Facing::South, ) => 15080,
                ( true, Half::Top, Shape::InnerRight, Facing::South, ) => 15081,
                ( false, Half::Top, Shape::InnerRight, Facing::South, ) => 15082,
                ( true, Half::Top, Shape::OuterLeft, Facing::South, ) => 15083,
                ( false, Half::Top, Shape::OuterLeft, Facing::South, ) => 15084,
                ( true, Half::Top, Shape::OuterRight, Facing::South, ) => 15085,
                ( false, Half::Top, Shape::OuterRight, Facing::South, ) => 15086,
                ( true, Half::Bottom, Shape::Straight, Facing::South, ) => 15087,
                ( false, Half::Bottom, Shape::Straight, Facing::South, ) => 15088,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::South, ) => 15089,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::South, ) => 15090,
                ( true, Half::Bottom, Shape::InnerRight, Facing::South, ) => 15091,
                ( false, Half::Bottom, Shape::InnerRight, Facing::South, ) => 15092,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::South, ) => 15093,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::South, ) => 15094,
                ( true, Half::Bottom, Shape::OuterRight, Facing::South, ) => 15095,
                ( false, Half::Bottom, Shape::OuterRight, Facing::South, ) => 15096,
                ( true, Half::Top, Shape::Straight, Facing::West, ) => 15097,
                ( false, Half::Top, Shape::Straight, Facing::West, ) => 15098,
                ( true, Half::Top, Shape::InnerLeft, Facing::West, ) => 15099,
                ( false, Half::Top, Shape::InnerLeft, Facing::West, ) => 15100,
                ( true, Half::Top, Shape::InnerRight, Facing::West, ) => 15101,
                ( false, Half::Top, Shape::InnerRight, Facing::West, ) => 15102,
                ( true, Half::Top, Shape::OuterLeft, Facing::West, ) => 15103,
                ( false, Half::Top, Shape::OuterLeft, Facing::West, ) => 15104,
                ( true, Half::Top, Shape::OuterRight, Facing::West, ) => 15105,
                ( false, Half::Top, Shape::OuterRight, Facing::West, ) => 15106,
                ( true, Half::Bottom, Shape::Straight, Facing::West, ) => 15107,
                ( false, Half::Bottom, Shape::Straight, Facing::West, ) => 15108,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::West, ) => 15109,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::West, ) => 15110,
                ( true, Half::Bottom, Shape::InnerRight, Facing::West, ) => 15111,
                ( false, Half::Bottom, Shape::InnerRight, Facing::West, ) => 15112,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::West, ) => 15113,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::West, ) => 15114,
                ( true, Half::Bottom, Shape::OuterRight, Facing::West, ) => 15115,
                ( false, Half::Bottom, Shape::OuterRight, Facing::West, ) => 15116,
                ( true, Half::Top, Shape::Straight, Facing::East, ) => 15117,
                ( false, Half::Top, Shape::Straight, Facing::East, ) => 15118,
                ( true, Half::Top, Shape::InnerLeft, Facing::East, ) => 15119,
                ( false, Half::Top, Shape::InnerLeft, Facing::East, ) => 15120,
                ( true, Half::Top, Shape::InnerRight, Facing::East, ) => 15121,
                ( false, Half::Top, Shape::InnerRight, Facing::East, ) => 15122,
                ( true, Half::Top, Shape::OuterLeft, Facing::East, ) => 15123,
                ( false, Half::Top, Shape::OuterLeft, Facing::East, ) => 15124,
                ( true, Half::Top, Shape::OuterRight, Facing::East, ) => 15125,
                ( false, Half::Top, Shape::OuterRight, Facing::East, ) => 15126,
                ( true, Half::Bottom, Shape::Straight, Facing::East, ) => 15127,
                ( false, Half::Bottom, Shape::Straight, Facing::East, ) => 15128,
                ( true, Half::Bottom, Shape::InnerLeft, Facing::East, ) => 15129,
                ( false, Half::Bottom, Shape::InnerLeft, Facing::East, ) => 15130,
                ( true, Half::Bottom, Shape::InnerRight, Facing::East, ) => 15131,
                ( false, Half::Bottom, Shape::InnerRight, Facing::East, ) => 15132,
                ( true, Half::Bottom, Shape::OuterLeft, Facing::East, ) => 15133,
                ( false, Half::Bottom, Shape::OuterLeft, Facing::East, ) => 15134,
                ( true, Half::Bottom, Shape::OuterRight, Facing::East, ) => 15135,
                ( false, Half::Bottom, Shape::OuterRight, Facing::East, ) => 15136,
            })
        }
    }

    impl From<DioriteStairs> for BlockState {
        #[inline(always)]
        fn from(value : DioriteStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DioriteStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DioriteStairs { }

    impl Block for DioriteStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            half : Half::Bottom,
            shape : Shape::Straight,
            facing : Facing::North,
        };
    }

}

/// `minecraft:sea_pickle` block.
pub mod sea_pickle {
    use super::*;

    /// `minecraft:sea_pickle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SeaPickle {
        /// `pickles` state.
        pub pickles : Pickles,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `pickles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Pickles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Pickles { }
    impl BlockProperty for Pickles { }

    impl SeaPickle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.pickles, self.waterlogged, )) {
                ( Pickles::N1, true, ) => 13988,
                ( Pickles::N1, false, ) => 13989,
                ( Pickles::N2, true, ) => 13990,
                ( Pickles::N2, false, ) => 13991,
                ( Pickles::N3, true, ) => 13992,
                ( Pickles::N3, false, ) => 13993,
                ( Pickles::N4, true, ) => 13994,
                ( Pickles::N4, false, ) => 13995,
            })
        }
    }

    impl From<SeaPickle> for BlockState {
        #[inline(always)]
        fn from(value : SeaPickle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SeaPickle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SeaPickle { }

    impl Block for SeaPickle {
        const DEFAULT_STATE : Self = Self {
            pickles : Pickles::N1,
            waterlogged : true,
        };
    }

}

/// `minecraft:birch_sapling` block.
pub mod birch_sapling {
    use super::*;

    /// `minecraft:birch_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchSapling {
        /// `stage` state.
        pub stage : Stage,
    }

    /// `stage` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Stage {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
    }
    impl crate::Sealed for Stage { }
    impl BlockProperty for Stage { }

    impl BirchSapling {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.stage, )) {
                ( Stage::N0, ) => 33,
                ( Stage::N1, ) => 34,
            })
        }
    }

    impl From<BirchSapling> for BlockState {
        #[inline(always)]
        fn from(value : BirchSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchSapling { }

    impl Block for BirchSapling {
        const DEFAULT_STATE : Self = Self {
            stage : Stage::N0,
        };
    }

}

/// `minecraft:mossy_cobblestone` block.
pub mod mossy_cobblestone {
    use super::*;

    /// `minecraft:mossy_cobblestone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MossyCobblestone;

    impl MossyCobblestone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2399)
        }
    }

    impl From<MossyCobblestone> for BlockState {
        #[inline(always)]
        fn from(value : MossyCobblestone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MossyCobblestone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MossyCobblestone { }

    impl Block for MossyCobblestone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:fletching_table` block.
pub mod fletching_table {
    use super::*;

    /// `minecraft:fletching_table` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct FletchingTable;

    impl FletchingTable {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19492)
        }
    }

    impl From<FletchingTable> for BlockState {
        #[inline(always)]
        fn from(value : FletchingTable) -> Self {
            value.to_block_state()
        }
    }

    impl Default for FletchingTable {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for FletchingTable { }

    impl Block for FletchingTable {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:crimson_roots` block.
pub mod crimson_roots {
    use super::*;

    /// `minecraft:crimson_roots` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonRoots;

    impl CrimsonRoots {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19720)
        }
    }

    impl From<CrimsonRoots> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonRoots) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonRoots {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonRoots { }

    impl Block for CrimsonRoots {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:lime_carpet` block.
pub mod lime_carpet {
    use super::*;

    /// `minecraft:lime_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeCarpet;

    impl LimeCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11622)
        }
    }

    impl From<LimeCarpet> for BlockState {
        #[inline(always)]
        fn from(value : LimeCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeCarpet { }

    impl Block for LimeCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:oak_fence` block.
pub mod oak_fence {
    use super::*;

    /// `minecraft:oak_fence` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OakFence {
        /// `south` state.
        pub south : bool,
        /// `east` state.
        pub east : bool,
        /// `north` state.
        pub north : bool,
        /// `west` state.
        pub west : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl OakFence {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.south, self.east, self.north, self.west, self.waterlogged, )) {
                ( true, true, true, true, true, ) => 5996,
                ( true, true, true, false, true, ) => 5997,
                ( true, true, true, true, false, ) => 5998,
                ( true, true, true, false, false, ) => 5999,
                ( false, true, true, true, true, ) => 6000,
                ( false, true, true, false, true, ) => 6001,
                ( false, true, true, true, false, ) => 6002,
                ( false, true, true, false, false, ) => 6003,
                ( true, true, false, true, true, ) => 6004,
                ( true, true, false, false, true, ) => 6005,
                ( true, true, false, true, false, ) => 6006,
                ( true, true, false, false, false, ) => 6007,
                ( false, true, false, true, true, ) => 6008,
                ( false, true, false, false, true, ) => 6009,
                ( false, true, false, true, false, ) => 6010,
                ( false, true, false, false, false, ) => 6011,
                ( true, false, true, true, true, ) => 6012,
                ( true, false, true, false, true, ) => 6013,
                ( true, false, true, true, false, ) => 6014,
                ( true, false, true, false, false, ) => 6015,
                ( false, false, true, true, true, ) => 6016,
                ( false, false, true, false, true, ) => 6017,
                ( false, false, true, true, false, ) => 6018,
                ( false, false, true, false, false, ) => 6019,
                ( true, false, false, true, true, ) => 6020,
                ( true, false, false, false, true, ) => 6021,
                ( true, false, false, true, false, ) => 6022,
                ( true, false, false, false, false, ) => 6023,
                ( false, false, false, true, true, ) => 6024,
                ( false, false, false, false, true, ) => 6025,
                ( false, false, false, true, false, ) => 6026,
                ( false, false, false, false, false, ) => 6027,
            })
        }
    }

    impl From<OakFence> for BlockState {
        #[inline(always)]
        fn from(value : OakFence) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OakFence {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OakFence { }

    impl Block for OakFence {
        const DEFAULT_STATE : Self = Self {
            south : false,
            east : false,
            north : false,
            west : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:light_weighted_pressure_plate` block.
pub mod light_weighted_pressure_plate {
    use super::*;

    /// `minecraft:light_weighted_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightWeightedPressurePlate {
        /// `power` state.
        pub power : Power,
    }

    /// `power` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Power {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Power { }
    impl BlockProperty for Power { }

    impl LightWeightedPressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.power, )) {
                ( Power::N0, ) => 9952,
                ( Power::N1, ) => 9953,
                ( Power::N2, ) => 9954,
                ( Power::N3, ) => 9955,
                ( Power::N4, ) => 9956,
                ( Power::N5, ) => 9957,
                ( Power::N6, ) => 9958,
                ( Power::N7, ) => 9959,
                ( Power::N8, ) => 9960,
                ( Power::N9, ) => 9961,
                ( Power::N10, ) => 9962,
                ( Power::N11, ) => 9963,
                ( Power::N12, ) => 9964,
                ( Power::N13, ) => 9965,
                ( Power::N14, ) => 9966,
                ( Power::N15, ) => 9967,
            })
        }
    }

    impl From<LightWeightedPressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : LightWeightedPressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightWeightedPressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightWeightedPressurePlate { }

    impl Block for LightWeightedPressurePlate {
        const DEFAULT_STATE : Self = Self {
            power : Power::N0,
        };
    }

}

/// `minecraft:cracked_nether_bricks` block.
pub mod cracked_nether_bricks {
    use super::*;

    /// `minecraft:cracked_nether_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrackedNetherBricks;

    impl CrackedNetherBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(21783)
        }
    }

    impl From<CrackedNetherBricks> for BlockState {
        #[inline(always)]
        fn from(value : CrackedNetherBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrackedNetherBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrackedNetherBricks { }

    impl Block for CrackedNetherBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:spruce_stairs` block.
pub mod spruce_stairs {
    use super::*;

    /// `minecraft:spruce_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceStairs {
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl SpruceStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.half, self.waterlogged, self.shape, )) {
                ( Facing::North, Half::Top, true, Shape::Straight, ) => 8450,
                ( Facing::North, Half::Top, false, Shape::Straight, ) => 8451,
                ( Facing::North, Half::Top, true, Shape::InnerLeft, ) => 8452,
                ( Facing::North, Half::Top, false, Shape::InnerLeft, ) => 8453,
                ( Facing::North, Half::Top, true, Shape::InnerRight, ) => 8454,
                ( Facing::North, Half::Top, false, Shape::InnerRight, ) => 8455,
                ( Facing::North, Half::Top, true, Shape::OuterLeft, ) => 8456,
                ( Facing::North, Half::Top, false, Shape::OuterLeft, ) => 8457,
                ( Facing::North, Half::Top, true, Shape::OuterRight, ) => 8458,
                ( Facing::North, Half::Top, false, Shape::OuterRight, ) => 8459,
                ( Facing::North, Half::Bottom, true, Shape::Straight, ) => 8460,
                ( Facing::North, Half::Bottom, false, Shape::Straight, ) => 8461,
                ( Facing::North, Half::Bottom, true, Shape::InnerLeft, ) => 8462,
                ( Facing::North, Half::Bottom, false, Shape::InnerLeft, ) => 8463,
                ( Facing::North, Half::Bottom, true, Shape::InnerRight, ) => 8464,
                ( Facing::North, Half::Bottom, false, Shape::InnerRight, ) => 8465,
                ( Facing::North, Half::Bottom, true, Shape::OuterLeft, ) => 8466,
                ( Facing::North, Half::Bottom, false, Shape::OuterLeft, ) => 8467,
                ( Facing::North, Half::Bottom, true, Shape::OuterRight, ) => 8468,
                ( Facing::North, Half::Bottom, false, Shape::OuterRight, ) => 8469,
                ( Facing::South, Half::Top, true, Shape::Straight, ) => 8470,
                ( Facing::South, Half::Top, false, Shape::Straight, ) => 8471,
                ( Facing::South, Half::Top, true, Shape::InnerLeft, ) => 8472,
                ( Facing::South, Half::Top, false, Shape::InnerLeft, ) => 8473,
                ( Facing::South, Half::Top, true, Shape::InnerRight, ) => 8474,
                ( Facing::South, Half::Top, false, Shape::InnerRight, ) => 8475,
                ( Facing::South, Half::Top, true, Shape::OuterLeft, ) => 8476,
                ( Facing::South, Half::Top, false, Shape::OuterLeft, ) => 8477,
                ( Facing::South, Half::Top, true, Shape::OuterRight, ) => 8478,
                ( Facing::South, Half::Top, false, Shape::OuterRight, ) => 8479,
                ( Facing::South, Half::Bottom, true, Shape::Straight, ) => 8480,
                ( Facing::South, Half::Bottom, false, Shape::Straight, ) => 8481,
                ( Facing::South, Half::Bottom, true, Shape::InnerLeft, ) => 8482,
                ( Facing::South, Half::Bottom, false, Shape::InnerLeft, ) => 8483,
                ( Facing::South, Half::Bottom, true, Shape::InnerRight, ) => 8484,
                ( Facing::South, Half::Bottom, false, Shape::InnerRight, ) => 8485,
                ( Facing::South, Half::Bottom, true, Shape::OuterLeft, ) => 8486,
                ( Facing::South, Half::Bottom, false, Shape::OuterLeft, ) => 8487,
                ( Facing::South, Half::Bottom, true, Shape::OuterRight, ) => 8488,
                ( Facing::South, Half::Bottom, false, Shape::OuterRight, ) => 8489,
                ( Facing::West, Half::Top, true, Shape::Straight, ) => 8490,
                ( Facing::West, Half::Top, false, Shape::Straight, ) => 8491,
                ( Facing::West, Half::Top, true, Shape::InnerLeft, ) => 8492,
                ( Facing::West, Half::Top, false, Shape::InnerLeft, ) => 8493,
                ( Facing::West, Half::Top, true, Shape::InnerRight, ) => 8494,
                ( Facing::West, Half::Top, false, Shape::InnerRight, ) => 8495,
                ( Facing::West, Half::Top, true, Shape::OuterLeft, ) => 8496,
                ( Facing::West, Half::Top, false, Shape::OuterLeft, ) => 8497,
                ( Facing::West, Half::Top, true, Shape::OuterRight, ) => 8498,
                ( Facing::West, Half::Top, false, Shape::OuterRight, ) => 8499,
                ( Facing::West, Half::Bottom, true, Shape::Straight, ) => 8500,
                ( Facing::West, Half::Bottom, false, Shape::Straight, ) => 8501,
                ( Facing::West, Half::Bottom, true, Shape::InnerLeft, ) => 8502,
                ( Facing::West, Half::Bottom, false, Shape::InnerLeft, ) => 8503,
                ( Facing::West, Half::Bottom, true, Shape::InnerRight, ) => 8504,
                ( Facing::West, Half::Bottom, false, Shape::InnerRight, ) => 8505,
                ( Facing::West, Half::Bottom, true, Shape::OuterLeft, ) => 8506,
                ( Facing::West, Half::Bottom, false, Shape::OuterLeft, ) => 8507,
                ( Facing::West, Half::Bottom, true, Shape::OuterRight, ) => 8508,
                ( Facing::West, Half::Bottom, false, Shape::OuterRight, ) => 8509,
                ( Facing::East, Half::Top, true, Shape::Straight, ) => 8510,
                ( Facing::East, Half::Top, false, Shape::Straight, ) => 8511,
                ( Facing::East, Half::Top, true, Shape::InnerLeft, ) => 8512,
                ( Facing::East, Half::Top, false, Shape::InnerLeft, ) => 8513,
                ( Facing::East, Half::Top, true, Shape::InnerRight, ) => 8514,
                ( Facing::East, Half::Top, false, Shape::InnerRight, ) => 8515,
                ( Facing::East, Half::Top, true, Shape::OuterLeft, ) => 8516,
                ( Facing::East, Half::Top, false, Shape::OuterLeft, ) => 8517,
                ( Facing::East, Half::Top, true, Shape::OuterRight, ) => 8518,
                ( Facing::East, Half::Top, false, Shape::OuterRight, ) => 8519,
                ( Facing::East, Half::Bottom, true, Shape::Straight, ) => 8520,
                ( Facing::East, Half::Bottom, false, Shape::Straight, ) => 8521,
                ( Facing::East, Half::Bottom, true, Shape::InnerLeft, ) => 8522,
                ( Facing::East, Half::Bottom, false, Shape::InnerLeft, ) => 8523,
                ( Facing::East, Half::Bottom, true, Shape::InnerRight, ) => 8524,
                ( Facing::East, Half::Bottom, false, Shape::InnerRight, ) => 8525,
                ( Facing::East, Half::Bottom, true, Shape::OuterLeft, ) => 8526,
                ( Facing::East, Half::Bottom, false, Shape::OuterLeft, ) => 8527,
                ( Facing::East, Half::Bottom, true, Shape::OuterRight, ) => 8528,
                ( Facing::East, Half::Bottom, false, Shape::OuterRight, ) => 8529,
            })
        }
    }

    impl From<SpruceStairs> for BlockState {
        #[inline(always)]
        fn from(value : SpruceStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceStairs { }

    impl Block for SpruceStairs {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            half : Half::Bottom,
            waterlogged : false,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:weathered_chiseled_copper` block.
pub mod weathered_chiseled_copper {
    use super::*;

    /// `minecraft:weathered_chiseled_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WeatheredChiseledCopper;

    impl WeatheredChiseledCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24009)
        }
    }

    impl From<WeatheredChiseledCopper> for BlockState {
        #[inline(always)]
        fn from(value : WeatheredChiseledCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WeatheredChiseledCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WeatheredChiseledCopper { }

    impl Block for WeatheredChiseledCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:copper_trapdoor` block.
pub mod copper_trapdoor {
    use super::*;

    /// `minecraft:copper_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CopperTrapdoor {
        /// `half` state.
        pub half : Half,
        /// `powered` state.
        pub powered : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `open` state.
        pub open : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CopperTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.powered, self.waterlogged, self.facing, self.open, )) {
                ( Half::Top, true, true, Facing::North, true, ) => 25224,
                ( Half::Top, true, false, Facing::North, true, ) => 25225,
                ( Half::Top, false, true, Facing::North, true, ) => 25226,
                ( Half::Top, false, false, Facing::North, true, ) => 25227,
                ( Half::Top, true, true, Facing::North, false, ) => 25228,
                ( Half::Top, true, false, Facing::North, false, ) => 25229,
                ( Half::Top, false, true, Facing::North, false, ) => 25230,
                ( Half::Top, false, false, Facing::North, false, ) => 25231,
                ( Half::Bottom, true, true, Facing::North, true, ) => 25232,
                ( Half::Bottom, true, false, Facing::North, true, ) => 25233,
                ( Half::Bottom, false, true, Facing::North, true, ) => 25234,
                ( Half::Bottom, false, false, Facing::North, true, ) => 25235,
                ( Half::Bottom, true, true, Facing::North, false, ) => 25236,
                ( Half::Bottom, true, false, Facing::North, false, ) => 25237,
                ( Half::Bottom, false, true, Facing::North, false, ) => 25238,
                ( Half::Bottom, false, false, Facing::North, false, ) => 25239,
                ( Half::Top, true, true, Facing::South, true, ) => 25240,
                ( Half::Top, true, false, Facing::South, true, ) => 25241,
                ( Half::Top, false, true, Facing::South, true, ) => 25242,
                ( Half::Top, false, false, Facing::South, true, ) => 25243,
                ( Half::Top, true, true, Facing::South, false, ) => 25244,
                ( Half::Top, true, false, Facing::South, false, ) => 25245,
                ( Half::Top, false, true, Facing::South, false, ) => 25246,
                ( Half::Top, false, false, Facing::South, false, ) => 25247,
                ( Half::Bottom, true, true, Facing::South, true, ) => 25248,
                ( Half::Bottom, true, false, Facing::South, true, ) => 25249,
                ( Half::Bottom, false, true, Facing::South, true, ) => 25250,
                ( Half::Bottom, false, false, Facing::South, true, ) => 25251,
                ( Half::Bottom, true, true, Facing::South, false, ) => 25252,
                ( Half::Bottom, true, false, Facing::South, false, ) => 25253,
                ( Half::Bottom, false, true, Facing::South, false, ) => 25254,
                ( Half::Bottom, false, false, Facing::South, false, ) => 25255,
                ( Half::Top, true, true, Facing::West, true, ) => 25256,
                ( Half::Top, true, false, Facing::West, true, ) => 25257,
                ( Half::Top, false, true, Facing::West, true, ) => 25258,
                ( Half::Top, false, false, Facing::West, true, ) => 25259,
                ( Half::Top, true, true, Facing::West, false, ) => 25260,
                ( Half::Top, true, false, Facing::West, false, ) => 25261,
                ( Half::Top, false, true, Facing::West, false, ) => 25262,
                ( Half::Top, false, false, Facing::West, false, ) => 25263,
                ( Half::Bottom, true, true, Facing::West, true, ) => 25264,
                ( Half::Bottom, true, false, Facing::West, true, ) => 25265,
                ( Half::Bottom, false, true, Facing::West, true, ) => 25266,
                ( Half::Bottom, false, false, Facing::West, true, ) => 25267,
                ( Half::Bottom, true, true, Facing::West, false, ) => 25268,
                ( Half::Bottom, true, false, Facing::West, false, ) => 25269,
                ( Half::Bottom, false, true, Facing::West, false, ) => 25270,
                ( Half::Bottom, false, false, Facing::West, false, ) => 25271,
                ( Half::Top, true, true, Facing::East, true, ) => 25272,
                ( Half::Top, true, false, Facing::East, true, ) => 25273,
                ( Half::Top, false, true, Facing::East, true, ) => 25274,
                ( Half::Top, false, false, Facing::East, true, ) => 25275,
                ( Half::Top, true, true, Facing::East, false, ) => 25276,
                ( Half::Top, true, false, Facing::East, false, ) => 25277,
                ( Half::Top, false, true, Facing::East, false, ) => 25278,
                ( Half::Top, false, false, Facing::East, false, ) => 25279,
                ( Half::Bottom, true, true, Facing::East, true, ) => 25280,
                ( Half::Bottom, true, false, Facing::East, true, ) => 25281,
                ( Half::Bottom, false, true, Facing::East, true, ) => 25282,
                ( Half::Bottom, false, false, Facing::East, true, ) => 25283,
                ( Half::Bottom, true, true, Facing::East, false, ) => 25284,
                ( Half::Bottom, true, false, Facing::East, false, ) => 25285,
                ( Half::Bottom, false, true, Facing::East, false, ) => 25286,
                ( Half::Bottom, false, false, Facing::East, false, ) => 25287,
            })
        }
    }

    impl From<CopperTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : CopperTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CopperTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CopperTrapdoor { }

    impl Block for CopperTrapdoor {
        const DEFAULT_STATE : Self = Self {
            half : Half::Bottom,
            powered : false,
            waterlogged : false,
            facing : Facing::North,
            open : false,
        };
    }

}

/// `minecraft:cactus_flower` block.
pub mod cactus_flower {
    use super::*;

    /// `minecraft:cactus_flower` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CactusFlower;

    impl CactusFlower {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(5976)
        }
    }

    impl From<CactusFlower> for BlockState {
        #[inline(always)]
        fn from(value : CactusFlower) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CactusFlower {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CactusFlower { }

    impl Block for CactusFlower {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:light_blue_concrete_powder` block.
pub mod light_blue_concrete_powder {
    use super::*;

    /// `minecraft:light_blue_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueConcretePowder;

    impl LightBlueConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13770)
        }
    }

    impl From<LightBlueConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueConcretePowder { }

    impl Block for LightBlueConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:magenta_concrete` block.
pub mod magenta_concrete {
    use super::*;

    /// `minecraft:magenta_concrete` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaConcrete;

    impl MagentaConcrete {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13753)
        }
    }

    impl From<MagentaConcrete> for BlockState {
        #[inline(always)]
        fn from(value : MagentaConcrete) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaConcrete {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaConcrete { }

    impl Block for MagentaConcrete {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:medium_amethyst_bud` block.
pub mod medium_amethyst_bud {
    use super::*;

    /// `minecraft:medium_amethyst_bud` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MediumAmethystBud {
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl MediumAmethystBud {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.waterlogged, )) {
                ( Facing::North, true, ) => 22117,
                ( Facing::North, false, ) => 22118,
                ( Facing::East, true, ) => 22119,
                ( Facing::East, false, ) => 22120,
                ( Facing::South, true, ) => 22121,
                ( Facing::South, false, ) => 22122,
                ( Facing::West, true, ) => 22123,
                ( Facing::West, false, ) => 22124,
                ( Facing::Up, true, ) => 22125,
                ( Facing::Up, false, ) => 22126,
                ( Facing::Down, true, ) => 22127,
                ( Facing::Down, false, ) => 22128,
            })
        }
    }

    impl From<MediumAmethystBud> for BlockState {
        #[inline(always)]
        fn from(value : MediumAmethystBud) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MediumAmethystBud {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MediumAmethystBud { }

    impl Block for MediumAmethystBud {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
            waterlogged : false,
        };
    }

}

/// `minecraft:pale_oak_stairs` block.
pub mod pale_oak_stairs {
    use super::*;

    /// `minecraft:pale_oak_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PaleOakStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PaleOakStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.waterlogged, self.half, self.facing, )) {
                ( Shape::Straight, true, Half::Top, Facing::North, ) => 10933,
                ( Shape::Straight, false, Half::Top, Facing::North, ) => 10934,
                ( Shape::InnerLeft, true, Half::Top, Facing::North, ) => 10935,
                ( Shape::InnerLeft, false, Half::Top, Facing::North, ) => 10936,
                ( Shape::InnerRight, true, Half::Top, Facing::North, ) => 10937,
                ( Shape::InnerRight, false, Half::Top, Facing::North, ) => 10938,
                ( Shape::OuterLeft, true, Half::Top, Facing::North, ) => 10939,
                ( Shape::OuterLeft, false, Half::Top, Facing::North, ) => 10940,
                ( Shape::OuterRight, true, Half::Top, Facing::North, ) => 10941,
                ( Shape::OuterRight, false, Half::Top, Facing::North, ) => 10942,
                ( Shape::Straight, true, Half::Bottom, Facing::North, ) => 10943,
                ( Shape::Straight, false, Half::Bottom, Facing::North, ) => 10944,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::North, ) => 10945,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::North, ) => 10946,
                ( Shape::InnerRight, true, Half::Bottom, Facing::North, ) => 10947,
                ( Shape::InnerRight, false, Half::Bottom, Facing::North, ) => 10948,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::North, ) => 10949,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::North, ) => 10950,
                ( Shape::OuterRight, true, Half::Bottom, Facing::North, ) => 10951,
                ( Shape::OuterRight, false, Half::Bottom, Facing::North, ) => 10952,
                ( Shape::Straight, true, Half::Top, Facing::South, ) => 10953,
                ( Shape::Straight, false, Half::Top, Facing::South, ) => 10954,
                ( Shape::InnerLeft, true, Half::Top, Facing::South, ) => 10955,
                ( Shape::InnerLeft, false, Half::Top, Facing::South, ) => 10956,
                ( Shape::InnerRight, true, Half::Top, Facing::South, ) => 10957,
                ( Shape::InnerRight, false, Half::Top, Facing::South, ) => 10958,
                ( Shape::OuterLeft, true, Half::Top, Facing::South, ) => 10959,
                ( Shape::OuterLeft, false, Half::Top, Facing::South, ) => 10960,
                ( Shape::OuterRight, true, Half::Top, Facing::South, ) => 10961,
                ( Shape::OuterRight, false, Half::Top, Facing::South, ) => 10962,
                ( Shape::Straight, true, Half::Bottom, Facing::South, ) => 10963,
                ( Shape::Straight, false, Half::Bottom, Facing::South, ) => 10964,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::South, ) => 10965,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::South, ) => 10966,
                ( Shape::InnerRight, true, Half::Bottom, Facing::South, ) => 10967,
                ( Shape::InnerRight, false, Half::Bottom, Facing::South, ) => 10968,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::South, ) => 10969,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::South, ) => 10970,
                ( Shape::OuterRight, true, Half::Bottom, Facing::South, ) => 10971,
                ( Shape::OuterRight, false, Half::Bottom, Facing::South, ) => 10972,
                ( Shape::Straight, true, Half::Top, Facing::West, ) => 10973,
                ( Shape::Straight, false, Half::Top, Facing::West, ) => 10974,
                ( Shape::InnerLeft, true, Half::Top, Facing::West, ) => 10975,
                ( Shape::InnerLeft, false, Half::Top, Facing::West, ) => 10976,
                ( Shape::InnerRight, true, Half::Top, Facing::West, ) => 10977,
                ( Shape::InnerRight, false, Half::Top, Facing::West, ) => 10978,
                ( Shape::OuterLeft, true, Half::Top, Facing::West, ) => 10979,
                ( Shape::OuterLeft, false, Half::Top, Facing::West, ) => 10980,
                ( Shape::OuterRight, true, Half::Top, Facing::West, ) => 10981,
                ( Shape::OuterRight, false, Half::Top, Facing::West, ) => 10982,
                ( Shape::Straight, true, Half::Bottom, Facing::West, ) => 10983,
                ( Shape::Straight, false, Half::Bottom, Facing::West, ) => 10984,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::West, ) => 10985,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::West, ) => 10986,
                ( Shape::InnerRight, true, Half::Bottom, Facing::West, ) => 10987,
                ( Shape::InnerRight, false, Half::Bottom, Facing::West, ) => 10988,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::West, ) => 10989,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::West, ) => 10990,
                ( Shape::OuterRight, true, Half::Bottom, Facing::West, ) => 10991,
                ( Shape::OuterRight, false, Half::Bottom, Facing::West, ) => 10992,
                ( Shape::Straight, true, Half::Top, Facing::East, ) => 10993,
                ( Shape::Straight, false, Half::Top, Facing::East, ) => 10994,
                ( Shape::InnerLeft, true, Half::Top, Facing::East, ) => 10995,
                ( Shape::InnerLeft, false, Half::Top, Facing::East, ) => 10996,
                ( Shape::InnerRight, true, Half::Top, Facing::East, ) => 10997,
                ( Shape::InnerRight, false, Half::Top, Facing::East, ) => 10998,
                ( Shape::OuterLeft, true, Half::Top, Facing::East, ) => 10999,
                ( Shape::OuterLeft, false, Half::Top, Facing::East, ) => 11000,
                ( Shape::OuterRight, true, Half::Top, Facing::East, ) => 11001,
                ( Shape::OuterRight, false, Half::Top, Facing::East, ) => 11002,
                ( Shape::Straight, true, Half::Bottom, Facing::East, ) => 11003,
                ( Shape::Straight, false, Half::Bottom, Facing::East, ) => 11004,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::East, ) => 11005,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::East, ) => 11006,
                ( Shape::InnerRight, true, Half::Bottom, Facing::East, ) => 11007,
                ( Shape::InnerRight, false, Half::Bottom, Facing::East, ) => 11008,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::East, ) => 11009,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::East, ) => 11010,
                ( Shape::OuterRight, true, Half::Bottom, Facing::East, ) => 11011,
                ( Shape::OuterRight, false, Half::Bottom, Facing::East, ) => 11012,
            })
        }
    }

    impl From<PaleOakStairs> for BlockState {
        #[inline(always)]
        fn from(value : PaleOakStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PaleOakStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PaleOakStairs { }

    impl Block for PaleOakStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            waterlogged : false,
            half : Half::Bottom,
            facing : Facing::North,
        };
    }

}

/// `minecraft:chiseled_polished_blackstone` block.
pub mod chiseled_polished_blackstone {
    use super::*;

    /// `minecraft:chiseled_polished_blackstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChiseledPolishedBlackstone;

    impl ChiseledPolishedBlackstone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20934)
        }
    }

    impl From<ChiseledPolishedBlackstone> for BlockState {
        #[inline(always)]
        fn from(value : ChiseledPolishedBlackstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChiseledPolishedBlackstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChiseledPolishedBlackstone { }

    impl Block for ChiseledPolishedBlackstone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dark_oak_fence` block.
pub mod dark_oak_fence {
    use super::*;

    /// `minecraft:dark_oak_fence` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakFence {
        /// `east` state.
        pub east : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `west` state.
        pub west : bool,
        /// `south` state.
        pub south : bool,
        /// `north` state.
        pub north : bool,
    }

    impl DarkOakFence {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.east, self.waterlogged, self.west, self.south, self.north, )) {
                ( true, true, true, true, true, ) => 12653,
                ( true, true, false, true, true, ) => 12654,
                ( true, false, true, true, true, ) => 12655,
                ( true, false, false, true, true, ) => 12656,
                ( true, true, true, false, true, ) => 12657,
                ( true, true, false, false, true, ) => 12658,
                ( true, false, true, false, true, ) => 12659,
                ( true, false, false, false, true, ) => 12660,
                ( true, true, true, true, false, ) => 12661,
                ( true, true, false, true, false, ) => 12662,
                ( true, false, true, true, false, ) => 12663,
                ( true, false, false, true, false, ) => 12664,
                ( true, true, true, false, false, ) => 12665,
                ( true, true, false, false, false, ) => 12666,
                ( true, false, true, false, false, ) => 12667,
                ( true, false, false, false, false, ) => 12668,
                ( false, true, true, true, true, ) => 12669,
                ( false, true, false, true, true, ) => 12670,
                ( false, false, true, true, true, ) => 12671,
                ( false, false, false, true, true, ) => 12672,
                ( false, true, true, false, true, ) => 12673,
                ( false, true, false, false, true, ) => 12674,
                ( false, false, true, false, true, ) => 12675,
                ( false, false, false, false, true, ) => 12676,
                ( false, true, true, true, false, ) => 12677,
                ( false, true, false, true, false, ) => 12678,
                ( false, false, true, true, false, ) => 12679,
                ( false, false, false, true, false, ) => 12680,
                ( false, true, true, false, false, ) => 12681,
                ( false, true, false, false, false, ) => 12682,
                ( false, false, true, false, false, ) => 12683,
                ( false, false, false, false, false, ) => 12684,
            })
        }
    }

    impl From<DarkOakFence> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakFence) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakFence {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakFence { }

    impl Block for DarkOakFence {
        const DEFAULT_STATE : Self = Self {
            east : false,
            waterlogged : false,
            west : false,
            south : false,
            north : false,
        };
    }

}

/// `minecraft:nether_brick_wall` block.
pub mod nether_brick_wall {
    use super::*;

    /// `minecraft:nether_brick_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct NetherBrickWall {
        /// `north` state.
        pub north : North,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `up` state.
        pub up : bool,
        /// `east` state.
        pub east : East,
        /// `south` state.
        pub south : South,
        /// `west` state.
        pub west : West,
    }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    impl NetherBrickWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.waterlogged, self.up, self.east, self.south, self.west, )) {
                ( North::None, true, true, East::None, South::None, West::None, ) => 17483,
                ( North::None, true, true, East::None, South::None, West::Low, ) => 17484,
                ( North::None, true, true, East::None, South::None, West::Tall, ) => 17485,
                ( North::None, false, true, East::None, South::None, West::None, ) => 17486,
                ( North::None, false, true, East::None, South::None, West::Low, ) => 17487,
                ( North::None, false, true, East::None, South::None, West::Tall, ) => 17488,
                ( North::None, true, false, East::None, South::None, West::None, ) => 17489,
                ( North::None, true, false, East::None, South::None, West::Low, ) => 17490,
                ( North::None, true, false, East::None, South::None, West::Tall, ) => 17491,
                ( North::None, false, false, East::None, South::None, West::None, ) => 17492,
                ( North::None, false, false, East::None, South::None, West::Low, ) => 17493,
                ( North::None, false, false, East::None, South::None, West::Tall, ) => 17494,
                ( North::None, true, true, East::None, South::Low, West::None, ) => 17495,
                ( North::None, true, true, East::None, South::Low, West::Low, ) => 17496,
                ( North::None, true, true, East::None, South::Low, West::Tall, ) => 17497,
                ( North::None, false, true, East::None, South::Low, West::None, ) => 17498,
                ( North::None, false, true, East::None, South::Low, West::Low, ) => 17499,
                ( North::None, false, true, East::None, South::Low, West::Tall, ) => 17500,
                ( North::None, true, false, East::None, South::Low, West::None, ) => 17501,
                ( North::None, true, false, East::None, South::Low, West::Low, ) => 17502,
                ( North::None, true, false, East::None, South::Low, West::Tall, ) => 17503,
                ( North::None, false, false, East::None, South::Low, West::None, ) => 17504,
                ( North::None, false, false, East::None, South::Low, West::Low, ) => 17505,
                ( North::None, false, false, East::None, South::Low, West::Tall, ) => 17506,
                ( North::None, true, true, East::None, South::Tall, West::None, ) => 17507,
                ( North::None, true, true, East::None, South::Tall, West::Low, ) => 17508,
                ( North::None, true, true, East::None, South::Tall, West::Tall, ) => 17509,
                ( North::None, false, true, East::None, South::Tall, West::None, ) => 17510,
                ( North::None, false, true, East::None, South::Tall, West::Low, ) => 17511,
                ( North::None, false, true, East::None, South::Tall, West::Tall, ) => 17512,
                ( North::None, true, false, East::None, South::Tall, West::None, ) => 17513,
                ( North::None, true, false, East::None, South::Tall, West::Low, ) => 17514,
                ( North::None, true, false, East::None, South::Tall, West::Tall, ) => 17515,
                ( North::None, false, false, East::None, South::Tall, West::None, ) => 17516,
                ( North::None, false, false, East::None, South::Tall, West::Low, ) => 17517,
                ( North::None, false, false, East::None, South::Tall, West::Tall, ) => 17518,
                ( North::Low, true, true, East::None, South::None, West::None, ) => 17519,
                ( North::Low, true, true, East::None, South::None, West::Low, ) => 17520,
                ( North::Low, true, true, East::None, South::None, West::Tall, ) => 17521,
                ( North::Low, false, true, East::None, South::None, West::None, ) => 17522,
                ( North::Low, false, true, East::None, South::None, West::Low, ) => 17523,
                ( North::Low, false, true, East::None, South::None, West::Tall, ) => 17524,
                ( North::Low, true, false, East::None, South::None, West::None, ) => 17525,
                ( North::Low, true, false, East::None, South::None, West::Low, ) => 17526,
                ( North::Low, true, false, East::None, South::None, West::Tall, ) => 17527,
                ( North::Low, false, false, East::None, South::None, West::None, ) => 17528,
                ( North::Low, false, false, East::None, South::None, West::Low, ) => 17529,
                ( North::Low, false, false, East::None, South::None, West::Tall, ) => 17530,
                ( North::Low, true, true, East::None, South::Low, West::None, ) => 17531,
                ( North::Low, true, true, East::None, South::Low, West::Low, ) => 17532,
                ( North::Low, true, true, East::None, South::Low, West::Tall, ) => 17533,
                ( North::Low, false, true, East::None, South::Low, West::None, ) => 17534,
                ( North::Low, false, true, East::None, South::Low, West::Low, ) => 17535,
                ( North::Low, false, true, East::None, South::Low, West::Tall, ) => 17536,
                ( North::Low, true, false, East::None, South::Low, West::None, ) => 17537,
                ( North::Low, true, false, East::None, South::Low, West::Low, ) => 17538,
                ( North::Low, true, false, East::None, South::Low, West::Tall, ) => 17539,
                ( North::Low, false, false, East::None, South::Low, West::None, ) => 17540,
                ( North::Low, false, false, East::None, South::Low, West::Low, ) => 17541,
                ( North::Low, false, false, East::None, South::Low, West::Tall, ) => 17542,
                ( North::Low, true, true, East::None, South::Tall, West::None, ) => 17543,
                ( North::Low, true, true, East::None, South::Tall, West::Low, ) => 17544,
                ( North::Low, true, true, East::None, South::Tall, West::Tall, ) => 17545,
                ( North::Low, false, true, East::None, South::Tall, West::None, ) => 17546,
                ( North::Low, false, true, East::None, South::Tall, West::Low, ) => 17547,
                ( North::Low, false, true, East::None, South::Tall, West::Tall, ) => 17548,
                ( North::Low, true, false, East::None, South::Tall, West::None, ) => 17549,
                ( North::Low, true, false, East::None, South::Tall, West::Low, ) => 17550,
                ( North::Low, true, false, East::None, South::Tall, West::Tall, ) => 17551,
                ( North::Low, false, false, East::None, South::Tall, West::None, ) => 17552,
                ( North::Low, false, false, East::None, South::Tall, West::Low, ) => 17553,
                ( North::Low, false, false, East::None, South::Tall, West::Tall, ) => 17554,
                ( North::Tall, true, true, East::None, South::None, West::None, ) => 17555,
                ( North::Tall, true, true, East::None, South::None, West::Low, ) => 17556,
                ( North::Tall, true, true, East::None, South::None, West::Tall, ) => 17557,
                ( North::Tall, false, true, East::None, South::None, West::None, ) => 17558,
                ( North::Tall, false, true, East::None, South::None, West::Low, ) => 17559,
                ( North::Tall, false, true, East::None, South::None, West::Tall, ) => 17560,
                ( North::Tall, true, false, East::None, South::None, West::None, ) => 17561,
                ( North::Tall, true, false, East::None, South::None, West::Low, ) => 17562,
                ( North::Tall, true, false, East::None, South::None, West::Tall, ) => 17563,
                ( North::Tall, false, false, East::None, South::None, West::None, ) => 17564,
                ( North::Tall, false, false, East::None, South::None, West::Low, ) => 17565,
                ( North::Tall, false, false, East::None, South::None, West::Tall, ) => 17566,
                ( North::Tall, true, true, East::None, South::Low, West::None, ) => 17567,
                ( North::Tall, true, true, East::None, South::Low, West::Low, ) => 17568,
                ( North::Tall, true, true, East::None, South::Low, West::Tall, ) => 17569,
                ( North::Tall, false, true, East::None, South::Low, West::None, ) => 17570,
                ( North::Tall, false, true, East::None, South::Low, West::Low, ) => 17571,
                ( North::Tall, false, true, East::None, South::Low, West::Tall, ) => 17572,
                ( North::Tall, true, false, East::None, South::Low, West::None, ) => 17573,
                ( North::Tall, true, false, East::None, South::Low, West::Low, ) => 17574,
                ( North::Tall, true, false, East::None, South::Low, West::Tall, ) => 17575,
                ( North::Tall, false, false, East::None, South::Low, West::None, ) => 17576,
                ( North::Tall, false, false, East::None, South::Low, West::Low, ) => 17577,
                ( North::Tall, false, false, East::None, South::Low, West::Tall, ) => 17578,
                ( North::Tall, true, true, East::None, South::Tall, West::None, ) => 17579,
                ( North::Tall, true, true, East::None, South::Tall, West::Low, ) => 17580,
                ( North::Tall, true, true, East::None, South::Tall, West::Tall, ) => 17581,
                ( North::Tall, false, true, East::None, South::Tall, West::None, ) => 17582,
                ( North::Tall, false, true, East::None, South::Tall, West::Low, ) => 17583,
                ( North::Tall, false, true, East::None, South::Tall, West::Tall, ) => 17584,
                ( North::Tall, true, false, East::None, South::Tall, West::None, ) => 17585,
                ( North::Tall, true, false, East::None, South::Tall, West::Low, ) => 17586,
                ( North::Tall, true, false, East::None, South::Tall, West::Tall, ) => 17587,
                ( North::Tall, false, false, East::None, South::Tall, West::None, ) => 17588,
                ( North::Tall, false, false, East::None, South::Tall, West::Low, ) => 17589,
                ( North::Tall, false, false, East::None, South::Tall, West::Tall, ) => 17590,
                ( North::None, true, true, East::Low, South::None, West::None, ) => 17591,
                ( North::None, true, true, East::Low, South::None, West::Low, ) => 17592,
                ( North::None, true, true, East::Low, South::None, West::Tall, ) => 17593,
                ( North::None, false, true, East::Low, South::None, West::None, ) => 17594,
                ( North::None, false, true, East::Low, South::None, West::Low, ) => 17595,
                ( North::None, false, true, East::Low, South::None, West::Tall, ) => 17596,
                ( North::None, true, false, East::Low, South::None, West::None, ) => 17597,
                ( North::None, true, false, East::Low, South::None, West::Low, ) => 17598,
                ( North::None, true, false, East::Low, South::None, West::Tall, ) => 17599,
                ( North::None, false, false, East::Low, South::None, West::None, ) => 17600,
                ( North::None, false, false, East::Low, South::None, West::Low, ) => 17601,
                ( North::None, false, false, East::Low, South::None, West::Tall, ) => 17602,
                ( North::None, true, true, East::Low, South::Low, West::None, ) => 17603,
                ( North::None, true, true, East::Low, South::Low, West::Low, ) => 17604,
                ( North::None, true, true, East::Low, South::Low, West::Tall, ) => 17605,
                ( North::None, false, true, East::Low, South::Low, West::None, ) => 17606,
                ( North::None, false, true, East::Low, South::Low, West::Low, ) => 17607,
                ( North::None, false, true, East::Low, South::Low, West::Tall, ) => 17608,
                ( North::None, true, false, East::Low, South::Low, West::None, ) => 17609,
                ( North::None, true, false, East::Low, South::Low, West::Low, ) => 17610,
                ( North::None, true, false, East::Low, South::Low, West::Tall, ) => 17611,
                ( North::None, false, false, East::Low, South::Low, West::None, ) => 17612,
                ( North::None, false, false, East::Low, South::Low, West::Low, ) => 17613,
                ( North::None, false, false, East::Low, South::Low, West::Tall, ) => 17614,
                ( North::None, true, true, East::Low, South::Tall, West::None, ) => 17615,
                ( North::None, true, true, East::Low, South::Tall, West::Low, ) => 17616,
                ( North::None, true, true, East::Low, South::Tall, West::Tall, ) => 17617,
                ( North::None, false, true, East::Low, South::Tall, West::None, ) => 17618,
                ( North::None, false, true, East::Low, South::Tall, West::Low, ) => 17619,
                ( North::None, false, true, East::Low, South::Tall, West::Tall, ) => 17620,
                ( North::None, true, false, East::Low, South::Tall, West::None, ) => 17621,
                ( North::None, true, false, East::Low, South::Tall, West::Low, ) => 17622,
                ( North::None, true, false, East::Low, South::Tall, West::Tall, ) => 17623,
                ( North::None, false, false, East::Low, South::Tall, West::None, ) => 17624,
                ( North::None, false, false, East::Low, South::Tall, West::Low, ) => 17625,
                ( North::None, false, false, East::Low, South::Tall, West::Tall, ) => 17626,
                ( North::Low, true, true, East::Low, South::None, West::None, ) => 17627,
                ( North::Low, true, true, East::Low, South::None, West::Low, ) => 17628,
                ( North::Low, true, true, East::Low, South::None, West::Tall, ) => 17629,
                ( North::Low, false, true, East::Low, South::None, West::None, ) => 17630,
                ( North::Low, false, true, East::Low, South::None, West::Low, ) => 17631,
                ( North::Low, false, true, East::Low, South::None, West::Tall, ) => 17632,
                ( North::Low, true, false, East::Low, South::None, West::None, ) => 17633,
                ( North::Low, true, false, East::Low, South::None, West::Low, ) => 17634,
                ( North::Low, true, false, East::Low, South::None, West::Tall, ) => 17635,
                ( North::Low, false, false, East::Low, South::None, West::None, ) => 17636,
                ( North::Low, false, false, East::Low, South::None, West::Low, ) => 17637,
                ( North::Low, false, false, East::Low, South::None, West::Tall, ) => 17638,
                ( North::Low, true, true, East::Low, South::Low, West::None, ) => 17639,
                ( North::Low, true, true, East::Low, South::Low, West::Low, ) => 17640,
                ( North::Low, true, true, East::Low, South::Low, West::Tall, ) => 17641,
                ( North::Low, false, true, East::Low, South::Low, West::None, ) => 17642,
                ( North::Low, false, true, East::Low, South::Low, West::Low, ) => 17643,
                ( North::Low, false, true, East::Low, South::Low, West::Tall, ) => 17644,
                ( North::Low, true, false, East::Low, South::Low, West::None, ) => 17645,
                ( North::Low, true, false, East::Low, South::Low, West::Low, ) => 17646,
                ( North::Low, true, false, East::Low, South::Low, West::Tall, ) => 17647,
                ( North::Low, false, false, East::Low, South::Low, West::None, ) => 17648,
                ( North::Low, false, false, East::Low, South::Low, West::Low, ) => 17649,
                ( North::Low, false, false, East::Low, South::Low, West::Tall, ) => 17650,
                ( North::Low, true, true, East::Low, South::Tall, West::None, ) => 17651,
                ( North::Low, true, true, East::Low, South::Tall, West::Low, ) => 17652,
                ( North::Low, true, true, East::Low, South::Tall, West::Tall, ) => 17653,
                ( North::Low, false, true, East::Low, South::Tall, West::None, ) => 17654,
                ( North::Low, false, true, East::Low, South::Tall, West::Low, ) => 17655,
                ( North::Low, false, true, East::Low, South::Tall, West::Tall, ) => 17656,
                ( North::Low, true, false, East::Low, South::Tall, West::None, ) => 17657,
                ( North::Low, true, false, East::Low, South::Tall, West::Low, ) => 17658,
                ( North::Low, true, false, East::Low, South::Tall, West::Tall, ) => 17659,
                ( North::Low, false, false, East::Low, South::Tall, West::None, ) => 17660,
                ( North::Low, false, false, East::Low, South::Tall, West::Low, ) => 17661,
                ( North::Low, false, false, East::Low, South::Tall, West::Tall, ) => 17662,
                ( North::Tall, true, true, East::Low, South::None, West::None, ) => 17663,
                ( North::Tall, true, true, East::Low, South::None, West::Low, ) => 17664,
                ( North::Tall, true, true, East::Low, South::None, West::Tall, ) => 17665,
                ( North::Tall, false, true, East::Low, South::None, West::None, ) => 17666,
                ( North::Tall, false, true, East::Low, South::None, West::Low, ) => 17667,
                ( North::Tall, false, true, East::Low, South::None, West::Tall, ) => 17668,
                ( North::Tall, true, false, East::Low, South::None, West::None, ) => 17669,
                ( North::Tall, true, false, East::Low, South::None, West::Low, ) => 17670,
                ( North::Tall, true, false, East::Low, South::None, West::Tall, ) => 17671,
                ( North::Tall, false, false, East::Low, South::None, West::None, ) => 17672,
                ( North::Tall, false, false, East::Low, South::None, West::Low, ) => 17673,
                ( North::Tall, false, false, East::Low, South::None, West::Tall, ) => 17674,
                ( North::Tall, true, true, East::Low, South::Low, West::None, ) => 17675,
                ( North::Tall, true, true, East::Low, South::Low, West::Low, ) => 17676,
                ( North::Tall, true, true, East::Low, South::Low, West::Tall, ) => 17677,
                ( North::Tall, false, true, East::Low, South::Low, West::None, ) => 17678,
                ( North::Tall, false, true, East::Low, South::Low, West::Low, ) => 17679,
                ( North::Tall, false, true, East::Low, South::Low, West::Tall, ) => 17680,
                ( North::Tall, true, false, East::Low, South::Low, West::None, ) => 17681,
                ( North::Tall, true, false, East::Low, South::Low, West::Low, ) => 17682,
                ( North::Tall, true, false, East::Low, South::Low, West::Tall, ) => 17683,
                ( North::Tall, false, false, East::Low, South::Low, West::None, ) => 17684,
                ( North::Tall, false, false, East::Low, South::Low, West::Low, ) => 17685,
                ( North::Tall, false, false, East::Low, South::Low, West::Tall, ) => 17686,
                ( North::Tall, true, true, East::Low, South::Tall, West::None, ) => 17687,
                ( North::Tall, true, true, East::Low, South::Tall, West::Low, ) => 17688,
                ( North::Tall, true, true, East::Low, South::Tall, West::Tall, ) => 17689,
                ( North::Tall, false, true, East::Low, South::Tall, West::None, ) => 17690,
                ( North::Tall, false, true, East::Low, South::Tall, West::Low, ) => 17691,
                ( North::Tall, false, true, East::Low, South::Tall, West::Tall, ) => 17692,
                ( North::Tall, true, false, East::Low, South::Tall, West::None, ) => 17693,
                ( North::Tall, true, false, East::Low, South::Tall, West::Low, ) => 17694,
                ( North::Tall, true, false, East::Low, South::Tall, West::Tall, ) => 17695,
                ( North::Tall, false, false, East::Low, South::Tall, West::None, ) => 17696,
                ( North::Tall, false, false, East::Low, South::Tall, West::Low, ) => 17697,
                ( North::Tall, false, false, East::Low, South::Tall, West::Tall, ) => 17698,
                ( North::None, true, true, East::Tall, South::None, West::None, ) => 17699,
                ( North::None, true, true, East::Tall, South::None, West::Low, ) => 17700,
                ( North::None, true, true, East::Tall, South::None, West::Tall, ) => 17701,
                ( North::None, false, true, East::Tall, South::None, West::None, ) => 17702,
                ( North::None, false, true, East::Tall, South::None, West::Low, ) => 17703,
                ( North::None, false, true, East::Tall, South::None, West::Tall, ) => 17704,
                ( North::None, true, false, East::Tall, South::None, West::None, ) => 17705,
                ( North::None, true, false, East::Tall, South::None, West::Low, ) => 17706,
                ( North::None, true, false, East::Tall, South::None, West::Tall, ) => 17707,
                ( North::None, false, false, East::Tall, South::None, West::None, ) => 17708,
                ( North::None, false, false, East::Tall, South::None, West::Low, ) => 17709,
                ( North::None, false, false, East::Tall, South::None, West::Tall, ) => 17710,
                ( North::None, true, true, East::Tall, South::Low, West::None, ) => 17711,
                ( North::None, true, true, East::Tall, South::Low, West::Low, ) => 17712,
                ( North::None, true, true, East::Tall, South::Low, West::Tall, ) => 17713,
                ( North::None, false, true, East::Tall, South::Low, West::None, ) => 17714,
                ( North::None, false, true, East::Tall, South::Low, West::Low, ) => 17715,
                ( North::None, false, true, East::Tall, South::Low, West::Tall, ) => 17716,
                ( North::None, true, false, East::Tall, South::Low, West::None, ) => 17717,
                ( North::None, true, false, East::Tall, South::Low, West::Low, ) => 17718,
                ( North::None, true, false, East::Tall, South::Low, West::Tall, ) => 17719,
                ( North::None, false, false, East::Tall, South::Low, West::None, ) => 17720,
                ( North::None, false, false, East::Tall, South::Low, West::Low, ) => 17721,
                ( North::None, false, false, East::Tall, South::Low, West::Tall, ) => 17722,
                ( North::None, true, true, East::Tall, South::Tall, West::None, ) => 17723,
                ( North::None, true, true, East::Tall, South::Tall, West::Low, ) => 17724,
                ( North::None, true, true, East::Tall, South::Tall, West::Tall, ) => 17725,
                ( North::None, false, true, East::Tall, South::Tall, West::None, ) => 17726,
                ( North::None, false, true, East::Tall, South::Tall, West::Low, ) => 17727,
                ( North::None, false, true, East::Tall, South::Tall, West::Tall, ) => 17728,
                ( North::None, true, false, East::Tall, South::Tall, West::None, ) => 17729,
                ( North::None, true, false, East::Tall, South::Tall, West::Low, ) => 17730,
                ( North::None, true, false, East::Tall, South::Tall, West::Tall, ) => 17731,
                ( North::None, false, false, East::Tall, South::Tall, West::None, ) => 17732,
                ( North::None, false, false, East::Tall, South::Tall, West::Low, ) => 17733,
                ( North::None, false, false, East::Tall, South::Tall, West::Tall, ) => 17734,
                ( North::Low, true, true, East::Tall, South::None, West::None, ) => 17735,
                ( North::Low, true, true, East::Tall, South::None, West::Low, ) => 17736,
                ( North::Low, true, true, East::Tall, South::None, West::Tall, ) => 17737,
                ( North::Low, false, true, East::Tall, South::None, West::None, ) => 17738,
                ( North::Low, false, true, East::Tall, South::None, West::Low, ) => 17739,
                ( North::Low, false, true, East::Tall, South::None, West::Tall, ) => 17740,
                ( North::Low, true, false, East::Tall, South::None, West::None, ) => 17741,
                ( North::Low, true, false, East::Tall, South::None, West::Low, ) => 17742,
                ( North::Low, true, false, East::Tall, South::None, West::Tall, ) => 17743,
                ( North::Low, false, false, East::Tall, South::None, West::None, ) => 17744,
                ( North::Low, false, false, East::Tall, South::None, West::Low, ) => 17745,
                ( North::Low, false, false, East::Tall, South::None, West::Tall, ) => 17746,
                ( North::Low, true, true, East::Tall, South::Low, West::None, ) => 17747,
                ( North::Low, true, true, East::Tall, South::Low, West::Low, ) => 17748,
                ( North::Low, true, true, East::Tall, South::Low, West::Tall, ) => 17749,
                ( North::Low, false, true, East::Tall, South::Low, West::None, ) => 17750,
                ( North::Low, false, true, East::Tall, South::Low, West::Low, ) => 17751,
                ( North::Low, false, true, East::Tall, South::Low, West::Tall, ) => 17752,
                ( North::Low, true, false, East::Tall, South::Low, West::None, ) => 17753,
                ( North::Low, true, false, East::Tall, South::Low, West::Low, ) => 17754,
                ( North::Low, true, false, East::Tall, South::Low, West::Tall, ) => 17755,
                ( North::Low, false, false, East::Tall, South::Low, West::None, ) => 17756,
                ( North::Low, false, false, East::Tall, South::Low, West::Low, ) => 17757,
                ( North::Low, false, false, East::Tall, South::Low, West::Tall, ) => 17758,
                ( North::Low, true, true, East::Tall, South::Tall, West::None, ) => 17759,
                ( North::Low, true, true, East::Tall, South::Tall, West::Low, ) => 17760,
                ( North::Low, true, true, East::Tall, South::Tall, West::Tall, ) => 17761,
                ( North::Low, false, true, East::Tall, South::Tall, West::None, ) => 17762,
                ( North::Low, false, true, East::Tall, South::Tall, West::Low, ) => 17763,
                ( North::Low, false, true, East::Tall, South::Tall, West::Tall, ) => 17764,
                ( North::Low, true, false, East::Tall, South::Tall, West::None, ) => 17765,
                ( North::Low, true, false, East::Tall, South::Tall, West::Low, ) => 17766,
                ( North::Low, true, false, East::Tall, South::Tall, West::Tall, ) => 17767,
                ( North::Low, false, false, East::Tall, South::Tall, West::None, ) => 17768,
                ( North::Low, false, false, East::Tall, South::Tall, West::Low, ) => 17769,
                ( North::Low, false, false, East::Tall, South::Tall, West::Tall, ) => 17770,
                ( North::Tall, true, true, East::Tall, South::None, West::None, ) => 17771,
                ( North::Tall, true, true, East::Tall, South::None, West::Low, ) => 17772,
                ( North::Tall, true, true, East::Tall, South::None, West::Tall, ) => 17773,
                ( North::Tall, false, true, East::Tall, South::None, West::None, ) => 17774,
                ( North::Tall, false, true, East::Tall, South::None, West::Low, ) => 17775,
                ( North::Tall, false, true, East::Tall, South::None, West::Tall, ) => 17776,
                ( North::Tall, true, false, East::Tall, South::None, West::None, ) => 17777,
                ( North::Tall, true, false, East::Tall, South::None, West::Low, ) => 17778,
                ( North::Tall, true, false, East::Tall, South::None, West::Tall, ) => 17779,
                ( North::Tall, false, false, East::Tall, South::None, West::None, ) => 17780,
                ( North::Tall, false, false, East::Tall, South::None, West::Low, ) => 17781,
                ( North::Tall, false, false, East::Tall, South::None, West::Tall, ) => 17782,
                ( North::Tall, true, true, East::Tall, South::Low, West::None, ) => 17783,
                ( North::Tall, true, true, East::Tall, South::Low, West::Low, ) => 17784,
                ( North::Tall, true, true, East::Tall, South::Low, West::Tall, ) => 17785,
                ( North::Tall, false, true, East::Tall, South::Low, West::None, ) => 17786,
                ( North::Tall, false, true, East::Tall, South::Low, West::Low, ) => 17787,
                ( North::Tall, false, true, East::Tall, South::Low, West::Tall, ) => 17788,
                ( North::Tall, true, false, East::Tall, South::Low, West::None, ) => 17789,
                ( North::Tall, true, false, East::Tall, South::Low, West::Low, ) => 17790,
                ( North::Tall, true, false, East::Tall, South::Low, West::Tall, ) => 17791,
                ( North::Tall, false, false, East::Tall, South::Low, West::None, ) => 17792,
                ( North::Tall, false, false, East::Tall, South::Low, West::Low, ) => 17793,
                ( North::Tall, false, false, East::Tall, South::Low, West::Tall, ) => 17794,
                ( North::Tall, true, true, East::Tall, South::Tall, West::None, ) => 17795,
                ( North::Tall, true, true, East::Tall, South::Tall, West::Low, ) => 17796,
                ( North::Tall, true, true, East::Tall, South::Tall, West::Tall, ) => 17797,
                ( North::Tall, false, true, East::Tall, South::Tall, West::None, ) => 17798,
                ( North::Tall, false, true, East::Tall, South::Tall, West::Low, ) => 17799,
                ( North::Tall, false, true, East::Tall, South::Tall, West::Tall, ) => 17800,
                ( North::Tall, true, false, East::Tall, South::Tall, West::None, ) => 17801,
                ( North::Tall, true, false, East::Tall, South::Tall, West::Low, ) => 17802,
                ( North::Tall, true, false, East::Tall, South::Tall, West::Tall, ) => 17803,
                ( North::Tall, false, false, East::Tall, South::Tall, West::None, ) => 17804,
                ( North::Tall, false, false, East::Tall, South::Tall, West::Low, ) => 17805,
                ( North::Tall, false, false, East::Tall, South::Tall, West::Tall, ) => 17806,
            })
        }
    }

    impl From<NetherBrickWall> for BlockState {
        #[inline(always)]
        fn from(value : NetherBrickWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for NetherBrickWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for NetherBrickWall { }

    impl Block for NetherBrickWall {
        const DEFAULT_STATE : Self = Self {
            north : North::None,
            waterlogged : false,
            up : true,
            east : East::None,
            south : South::None,
            west : West::None,
        };
    }

}

/// `minecraft:spore_blossom` block.
pub mod spore_blossom {
    use super::*;

    /// `minecraft:spore_blossom` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SporeBlossom;

    impl SporeBlossom {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(25883)
        }
    }

    impl From<SporeBlossom> for BlockState {
        #[inline(always)]
        fn from(value : SporeBlossom) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SporeBlossom {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SporeBlossom { }

    impl Block for SporeBlossom {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:diorite_slab` block.
pub mod diorite_slab {
    use super::*;

    /// `minecraft:diorite_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DioriteSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl DioriteSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 15209,
                ( false, Kind::Top, ) => 15210,
                ( true, Kind::Bottom, ) => 15211,
                ( false, Kind::Bottom, ) => 15212,
                ( true, Kind::Double, ) => 15213,
                ( false, Kind::Double, ) => 15214,
            })
        }
    }

    impl From<DioriteSlab> for BlockState {
        #[inline(always)]
        fn from(value : DioriteSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DioriteSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DioriteSlab { }

    impl Block for DioriteSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:bamboo_button` block.
pub mod bamboo_button {
    use super::*;

    /// `minecraft:bamboo_button` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooButton {
        /// `powered` state.
        pub powered : bool,
        /// `face` state.
        pub face : Face,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BambooButton {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, self.face, self.facing, )) {
                ( true, Face::Floor, Facing::North, ) => 9612,
                ( false, Face::Floor, Facing::North, ) => 9613,
                ( true, Face::Floor, Facing::South, ) => 9614,
                ( false, Face::Floor, Facing::South, ) => 9615,
                ( true, Face::Floor, Facing::West, ) => 9616,
                ( false, Face::Floor, Facing::West, ) => 9617,
                ( true, Face::Floor, Facing::East, ) => 9618,
                ( false, Face::Floor, Facing::East, ) => 9619,
                ( true, Face::Wall, Facing::North, ) => 9620,
                ( false, Face::Wall, Facing::North, ) => 9621,
                ( true, Face::Wall, Facing::South, ) => 9622,
                ( false, Face::Wall, Facing::South, ) => 9623,
                ( true, Face::Wall, Facing::West, ) => 9624,
                ( false, Face::Wall, Facing::West, ) => 9625,
                ( true, Face::Wall, Facing::East, ) => 9626,
                ( false, Face::Wall, Facing::East, ) => 9627,
                ( true, Face::Ceiling, Facing::North, ) => 9628,
                ( false, Face::Ceiling, Facing::North, ) => 9629,
                ( true, Face::Ceiling, Facing::South, ) => 9630,
                ( false, Face::Ceiling, Facing::South, ) => 9631,
                ( true, Face::Ceiling, Facing::West, ) => 9632,
                ( false, Face::Ceiling, Facing::West, ) => 9633,
                ( true, Face::Ceiling, Facing::East, ) => 9634,
                ( false, Face::Ceiling, Facing::East, ) => 9635,
            })
        }
    }

    impl From<BambooButton> for BlockState {
        #[inline(always)]
        fn from(value : BambooButton) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooButton {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooButton { }

    impl Block for BambooButton {
        const DEFAULT_STATE : Self = Self {
            powered : false,
            face : Face::Wall,
            facing : Facing::North,
        };
    }

}

/// `minecraft:purple_terracotta` block.
pub mod purple_terracotta {
    use super::*;

    /// `minecraft:purple_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleTerracotta;

    impl PurpleTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10175)
        }
    }

    impl From<PurpleTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : PurpleTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleTerracotta { }

    impl Block for PurpleTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:trial_spawner` block.
pub mod trial_spawner {
    use super::*;

    /// `minecraft:trial_spawner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct TrialSpawner {
        /// `ominous` state.
        pub ominous : bool,
        /// `trial_spawner_state` state.
        pub trial_spawner_state : TrialSpawnerState,
    }

    /// `trial_spawner_state` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum TrialSpawnerState {
        /// `inactive` variant.
        Inactive,
        /// `waiting_for_players` variant.
        WaitingForPlayers,
        /// `active` variant.
        Active,
        /// `waiting_for_reward_ejection` variant.
        WaitingForRewardEjection,
        /// `ejecting_reward` variant.
        EjectingReward,
        /// `cooldown` variant.
        Cooldown,
    }
    impl crate::Sealed for TrialSpawnerState { }
    impl BlockProperty for TrialSpawnerState { }

    impl TrialSpawner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.ominous, self.trial_spawner_state, )) {
                ( true, TrialSpawnerState::Inactive, ) => 27730,
                ( true, TrialSpawnerState::WaitingForPlayers, ) => 27731,
                ( true, TrialSpawnerState::Active, ) => 27732,
                ( true, TrialSpawnerState::WaitingForRewardEjection, ) => 27733,
                ( true, TrialSpawnerState::EjectingReward, ) => 27734,
                ( true, TrialSpawnerState::Cooldown, ) => 27735,
                ( false, TrialSpawnerState::Inactive, ) => 27736,
                ( false, TrialSpawnerState::WaitingForPlayers, ) => 27737,
                ( false, TrialSpawnerState::Active, ) => 27738,
                ( false, TrialSpawnerState::WaitingForRewardEjection, ) => 27739,
                ( false, TrialSpawnerState::EjectingReward, ) => 27740,
                ( false, TrialSpawnerState::Cooldown, ) => 27741,
            })
        }
    }

    impl From<TrialSpawner> for BlockState {
        #[inline(always)]
        fn from(value : TrialSpawner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for TrialSpawner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for TrialSpawner { }

    impl Block for TrialSpawner {
        const DEFAULT_STATE : Self = Self {
            ominous : false,
            trial_spawner_state : TrialSpawnerState::Inactive,
        };
    }

}

/// `minecraft:black_bed` block.
pub mod black_bed {
    use super::*;

    /// `minecraft:black_bed` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackBed {
        /// `occupied` state.
        pub occupied : bool,
        /// `part` state.
        pub part : Part,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `part` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Part {
        /// `head` variant.
        Head,
        /// `foot` variant.
        Foot,
    }
    impl crate::Sealed for Part { }
    impl BlockProperty for Part { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BlackBed {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.occupied, self.part, self.facing, )) {
                ( true, Part::Head, Facing::North, ) => 1971,
                ( true, Part::Foot, Facing::North, ) => 1972,
                ( false, Part::Head, Facing::North, ) => 1973,
                ( false, Part::Foot, Facing::North, ) => 1974,
                ( true, Part::Head, Facing::South, ) => 1975,
                ( true, Part::Foot, Facing::South, ) => 1976,
                ( false, Part::Head, Facing::South, ) => 1977,
                ( false, Part::Foot, Facing::South, ) => 1978,
                ( true, Part::Head, Facing::West, ) => 1979,
                ( true, Part::Foot, Facing::West, ) => 1980,
                ( false, Part::Head, Facing::West, ) => 1981,
                ( false, Part::Foot, Facing::West, ) => 1982,
                ( true, Part::Head, Facing::East, ) => 1983,
                ( true, Part::Foot, Facing::East, ) => 1984,
                ( false, Part::Head, Facing::East, ) => 1985,
                ( false, Part::Foot, Facing::East, ) => 1986,
            })
        }
    }

    impl From<BlackBed> for BlockState {
        #[inline(always)]
        fn from(value : BlackBed) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackBed {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackBed { }

    impl Block for BlackBed {
        const DEFAULT_STATE : Self = Self {
            occupied : false,
            part : Part::Foot,
            facing : Facing::North,
        };
    }

}

/// `minecraft:sandstone_slab` block.
pub mod sandstone_slab {
    use super::*;

    /// `minecraft:sandstone_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SandstoneSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl SandstoneSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 12129,
                ( Kind::Top, false, ) => 12130,
                ( Kind::Bottom, true, ) => 12131,
                ( Kind::Bottom, false, ) => 12132,
                ( Kind::Double, true, ) => 12133,
                ( Kind::Double, false, ) => 12134,
            })
        }
    }

    impl From<SandstoneSlab> for BlockState {
        #[inline(always)]
        fn from(value : SandstoneSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SandstoneSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SandstoneSlab { }

    impl Block for SandstoneSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:birch_hanging_sign` block.
pub mod birch_hanging_sign {
    use super::*;

    /// `minecraft:birch_hanging_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchHangingSign {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `attached` state.
        pub attached : bool,
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl BirchHangingSign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.attached, self.rotation, )) {
                ( true, true, Rotation::N0, ) => 5066,
                ( false, true, Rotation::N0, ) => 5067,
                ( true, true, Rotation::N1, ) => 5068,
                ( false, true, Rotation::N1, ) => 5069,
                ( true, true, Rotation::N2, ) => 5070,
                ( false, true, Rotation::N2, ) => 5071,
                ( true, true, Rotation::N3, ) => 5072,
                ( false, true, Rotation::N3, ) => 5073,
                ( true, true, Rotation::N4, ) => 5074,
                ( false, true, Rotation::N4, ) => 5075,
                ( true, true, Rotation::N5, ) => 5076,
                ( false, true, Rotation::N5, ) => 5077,
                ( true, true, Rotation::N6, ) => 5078,
                ( false, true, Rotation::N6, ) => 5079,
                ( true, true, Rotation::N7, ) => 5080,
                ( false, true, Rotation::N7, ) => 5081,
                ( true, true, Rotation::N8, ) => 5082,
                ( false, true, Rotation::N8, ) => 5083,
                ( true, true, Rotation::N9, ) => 5084,
                ( false, true, Rotation::N9, ) => 5085,
                ( true, true, Rotation::N10, ) => 5086,
                ( false, true, Rotation::N10, ) => 5087,
                ( true, true, Rotation::N11, ) => 5088,
                ( false, true, Rotation::N11, ) => 5089,
                ( true, true, Rotation::N12, ) => 5090,
                ( false, true, Rotation::N12, ) => 5091,
                ( true, true, Rotation::N13, ) => 5092,
                ( false, true, Rotation::N13, ) => 5093,
                ( true, true, Rotation::N14, ) => 5094,
                ( false, true, Rotation::N14, ) => 5095,
                ( true, true, Rotation::N15, ) => 5096,
                ( false, true, Rotation::N15, ) => 5097,
                ( true, false, Rotation::N0, ) => 5098,
                ( false, false, Rotation::N0, ) => 5099,
                ( true, false, Rotation::N1, ) => 5100,
                ( false, false, Rotation::N1, ) => 5101,
                ( true, false, Rotation::N2, ) => 5102,
                ( false, false, Rotation::N2, ) => 5103,
                ( true, false, Rotation::N3, ) => 5104,
                ( false, false, Rotation::N3, ) => 5105,
                ( true, false, Rotation::N4, ) => 5106,
                ( false, false, Rotation::N4, ) => 5107,
                ( true, false, Rotation::N5, ) => 5108,
                ( false, false, Rotation::N5, ) => 5109,
                ( true, false, Rotation::N6, ) => 5110,
                ( false, false, Rotation::N6, ) => 5111,
                ( true, false, Rotation::N7, ) => 5112,
                ( false, false, Rotation::N7, ) => 5113,
                ( true, false, Rotation::N8, ) => 5114,
                ( false, false, Rotation::N8, ) => 5115,
                ( true, false, Rotation::N9, ) => 5116,
                ( false, false, Rotation::N9, ) => 5117,
                ( true, false, Rotation::N10, ) => 5118,
                ( false, false, Rotation::N10, ) => 5119,
                ( true, false, Rotation::N11, ) => 5120,
                ( false, false, Rotation::N11, ) => 5121,
                ( true, false, Rotation::N12, ) => 5122,
                ( false, false, Rotation::N12, ) => 5123,
                ( true, false, Rotation::N13, ) => 5124,
                ( false, false, Rotation::N13, ) => 5125,
                ( true, false, Rotation::N14, ) => 5126,
                ( false, false, Rotation::N14, ) => 5127,
                ( true, false, Rotation::N15, ) => 5128,
                ( false, false, Rotation::N15, ) => 5129,
            })
        }
    }

    impl From<BirchHangingSign> for BlockState {
        #[inline(always)]
        fn from(value : BirchHangingSign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchHangingSign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchHangingSign { }

    impl Block for BirchHangingSign {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            attached : false,
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:brick_wall` block.
pub mod brick_wall {
    use super::*;

    /// `minecraft:brick_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrickWall {
        /// `north` state.
        pub north : North,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `up` state.
        pub up : bool,
        /// `west` state.
        pub west : West,
        /// `east` state.
        pub east : East,
        /// `south` state.
        pub south : South,
    }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    impl BrickWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.waterlogged, self.up, self.west, self.east, self.south, )) {
                ( North::None, true, true, West::None, East::None, South::None, ) => 15215,
                ( North::None, true, true, West::Low, East::None, South::None, ) => 15216,
                ( North::None, true, true, West::Tall, East::None, South::None, ) => 15217,
                ( North::None, false, true, West::None, East::None, South::None, ) => 15218,
                ( North::None, false, true, West::Low, East::None, South::None, ) => 15219,
                ( North::None, false, true, West::Tall, East::None, South::None, ) => 15220,
                ( North::None, true, false, West::None, East::None, South::None, ) => 15221,
                ( North::None, true, false, West::Low, East::None, South::None, ) => 15222,
                ( North::None, true, false, West::Tall, East::None, South::None, ) => 15223,
                ( North::None, false, false, West::None, East::None, South::None, ) => 15224,
                ( North::None, false, false, West::Low, East::None, South::None, ) => 15225,
                ( North::None, false, false, West::Tall, East::None, South::None, ) => 15226,
                ( North::None, true, true, West::None, East::None, South::Low, ) => 15227,
                ( North::None, true, true, West::Low, East::None, South::Low, ) => 15228,
                ( North::None, true, true, West::Tall, East::None, South::Low, ) => 15229,
                ( North::None, false, true, West::None, East::None, South::Low, ) => 15230,
                ( North::None, false, true, West::Low, East::None, South::Low, ) => 15231,
                ( North::None, false, true, West::Tall, East::None, South::Low, ) => 15232,
                ( North::None, true, false, West::None, East::None, South::Low, ) => 15233,
                ( North::None, true, false, West::Low, East::None, South::Low, ) => 15234,
                ( North::None, true, false, West::Tall, East::None, South::Low, ) => 15235,
                ( North::None, false, false, West::None, East::None, South::Low, ) => 15236,
                ( North::None, false, false, West::Low, East::None, South::Low, ) => 15237,
                ( North::None, false, false, West::Tall, East::None, South::Low, ) => 15238,
                ( North::None, true, true, West::None, East::None, South::Tall, ) => 15239,
                ( North::None, true, true, West::Low, East::None, South::Tall, ) => 15240,
                ( North::None, true, true, West::Tall, East::None, South::Tall, ) => 15241,
                ( North::None, false, true, West::None, East::None, South::Tall, ) => 15242,
                ( North::None, false, true, West::Low, East::None, South::Tall, ) => 15243,
                ( North::None, false, true, West::Tall, East::None, South::Tall, ) => 15244,
                ( North::None, true, false, West::None, East::None, South::Tall, ) => 15245,
                ( North::None, true, false, West::Low, East::None, South::Tall, ) => 15246,
                ( North::None, true, false, West::Tall, East::None, South::Tall, ) => 15247,
                ( North::None, false, false, West::None, East::None, South::Tall, ) => 15248,
                ( North::None, false, false, West::Low, East::None, South::Tall, ) => 15249,
                ( North::None, false, false, West::Tall, East::None, South::Tall, ) => 15250,
                ( North::Low, true, true, West::None, East::None, South::None, ) => 15251,
                ( North::Low, true, true, West::Low, East::None, South::None, ) => 15252,
                ( North::Low, true, true, West::Tall, East::None, South::None, ) => 15253,
                ( North::Low, false, true, West::None, East::None, South::None, ) => 15254,
                ( North::Low, false, true, West::Low, East::None, South::None, ) => 15255,
                ( North::Low, false, true, West::Tall, East::None, South::None, ) => 15256,
                ( North::Low, true, false, West::None, East::None, South::None, ) => 15257,
                ( North::Low, true, false, West::Low, East::None, South::None, ) => 15258,
                ( North::Low, true, false, West::Tall, East::None, South::None, ) => 15259,
                ( North::Low, false, false, West::None, East::None, South::None, ) => 15260,
                ( North::Low, false, false, West::Low, East::None, South::None, ) => 15261,
                ( North::Low, false, false, West::Tall, East::None, South::None, ) => 15262,
                ( North::Low, true, true, West::None, East::None, South::Low, ) => 15263,
                ( North::Low, true, true, West::Low, East::None, South::Low, ) => 15264,
                ( North::Low, true, true, West::Tall, East::None, South::Low, ) => 15265,
                ( North::Low, false, true, West::None, East::None, South::Low, ) => 15266,
                ( North::Low, false, true, West::Low, East::None, South::Low, ) => 15267,
                ( North::Low, false, true, West::Tall, East::None, South::Low, ) => 15268,
                ( North::Low, true, false, West::None, East::None, South::Low, ) => 15269,
                ( North::Low, true, false, West::Low, East::None, South::Low, ) => 15270,
                ( North::Low, true, false, West::Tall, East::None, South::Low, ) => 15271,
                ( North::Low, false, false, West::None, East::None, South::Low, ) => 15272,
                ( North::Low, false, false, West::Low, East::None, South::Low, ) => 15273,
                ( North::Low, false, false, West::Tall, East::None, South::Low, ) => 15274,
                ( North::Low, true, true, West::None, East::None, South::Tall, ) => 15275,
                ( North::Low, true, true, West::Low, East::None, South::Tall, ) => 15276,
                ( North::Low, true, true, West::Tall, East::None, South::Tall, ) => 15277,
                ( North::Low, false, true, West::None, East::None, South::Tall, ) => 15278,
                ( North::Low, false, true, West::Low, East::None, South::Tall, ) => 15279,
                ( North::Low, false, true, West::Tall, East::None, South::Tall, ) => 15280,
                ( North::Low, true, false, West::None, East::None, South::Tall, ) => 15281,
                ( North::Low, true, false, West::Low, East::None, South::Tall, ) => 15282,
                ( North::Low, true, false, West::Tall, East::None, South::Tall, ) => 15283,
                ( North::Low, false, false, West::None, East::None, South::Tall, ) => 15284,
                ( North::Low, false, false, West::Low, East::None, South::Tall, ) => 15285,
                ( North::Low, false, false, West::Tall, East::None, South::Tall, ) => 15286,
                ( North::Tall, true, true, West::None, East::None, South::None, ) => 15287,
                ( North::Tall, true, true, West::Low, East::None, South::None, ) => 15288,
                ( North::Tall, true, true, West::Tall, East::None, South::None, ) => 15289,
                ( North::Tall, false, true, West::None, East::None, South::None, ) => 15290,
                ( North::Tall, false, true, West::Low, East::None, South::None, ) => 15291,
                ( North::Tall, false, true, West::Tall, East::None, South::None, ) => 15292,
                ( North::Tall, true, false, West::None, East::None, South::None, ) => 15293,
                ( North::Tall, true, false, West::Low, East::None, South::None, ) => 15294,
                ( North::Tall, true, false, West::Tall, East::None, South::None, ) => 15295,
                ( North::Tall, false, false, West::None, East::None, South::None, ) => 15296,
                ( North::Tall, false, false, West::Low, East::None, South::None, ) => 15297,
                ( North::Tall, false, false, West::Tall, East::None, South::None, ) => 15298,
                ( North::Tall, true, true, West::None, East::None, South::Low, ) => 15299,
                ( North::Tall, true, true, West::Low, East::None, South::Low, ) => 15300,
                ( North::Tall, true, true, West::Tall, East::None, South::Low, ) => 15301,
                ( North::Tall, false, true, West::None, East::None, South::Low, ) => 15302,
                ( North::Tall, false, true, West::Low, East::None, South::Low, ) => 15303,
                ( North::Tall, false, true, West::Tall, East::None, South::Low, ) => 15304,
                ( North::Tall, true, false, West::None, East::None, South::Low, ) => 15305,
                ( North::Tall, true, false, West::Low, East::None, South::Low, ) => 15306,
                ( North::Tall, true, false, West::Tall, East::None, South::Low, ) => 15307,
                ( North::Tall, false, false, West::None, East::None, South::Low, ) => 15308,
                ( North::Tall, false, false, West::Low, East::None, South::Low, ) => 15309,
                ( North::Tall, false, false, West::Tall, East::None, South::Low, ) => 15310,
                ( North::Tall, true, true, West::None, East::None, South::Tall, ) => 15311,
                ( North::Tall, true, true, West::Low, East::None, South::Tall, ) => 15312,
                ( North::Tall, true, true, West::Tall, East::None, South::Tall, ) => 15313,
                ( North::Tall, false, true, West::None, East::None, South::Tall, ) => 15314,
                ( North::Tall, false, true, West::Low, East::None, South::Tall, ) => 15315,
                ( North::Tall, false, true, West::Tall, East::None, South::Tall, ) => 15316,
                ( North::Tall, true, false, West::None, East::None, South::Tall, ) => 15317,
                ( North::Tall, true, false, West::Low, East::None, South::Tall, ) => 15318,
                ( North::Tall, true, false, West::Tall, East::None, South::Tall, ) => 15319,
                ( North::Tall, false, false, West::None, East::None, South::Tall, ) => 15320,
                ( North::Tall, false, false, West::Low, East::None, South::Tall, ) => 15321,
                ( North::Tall, false, false, West::Tall, East::None, South::Tall, ) => 15322,
                ( North::None, true, true, West::None, East::Low, South::None, ) => 15323,
                ( North::None, true, true, West::Low, East::Low, South::None, ) => 15324,
                ( North::None, true, true, West::Tall, East::Low, South::None, ) => 15325,
                ( North::None, false, true, West::None, East::Low, South::None, ) => 15326,
                ( North::None, false, true, West::Low, East::Low, South::None, ) => 15327,
                ( North::None, false, true, West::Tall, East::Low, South::None, ) => 15328,
                ( North::None, true, false, West::None, East::Low, South::None, ) => 15329,
                ( North::None, true, false, West::Low, East::Low, South::None, ) => 15330,
                ( North::None, true, false, West::Tall, East::Low, South::None, ) => 15331,
                ( North::None, false, false, West::None, East::Low, South::None, ) => 15332,
                ( North::None, false, false, West::Low, East::Low, South::None, ) => 15333,
                ( North::None, false, false, West::Tall, East::Low, South::None, ) => 15334,
                ( North::None, true, true, West::None, East::Low, South::Low, ) => 15335,
                ( North::None, true, true, West::Low, East::Low, South::Low, ) => 15336,
                ( North::None, true, true, West::Tall, East::Low, South::Low, ) => 15337,
                ( North::None, false, true, West::None, East::Low, South::Low, ) => 15338,
                ( North::None, false, true, West::Low, East::Low, South::Low, ) => 15339,
                ( North::None, false, true, West::Tall, East::Low, South::Low, ) => 15340,
                ( North::None, true, false, West::None, East::Low, South::Low, ) => 15341,
                ( North::None, true, false, West::Low, East::Low, South::Low, ) => 15342,
                ( North::None, true, false, West::Tall, East::Low, South::Low, ) => 15343,
                ( North::None, false, false, West::None, East::Low, South::Low, ) => 15344,
                ( North::None, false, false, West::Low, East::Low, South::Low, ) => 15345,
                ( North::None, false, false, West::Tall, East::Low, South::Low, ) => 15346,
                ( North::None, true, true, West::None, East::Low, South::Tall, ) => 15347,
                ( North::None, true, true, West::Low, East::Low, South::Tall, ) => 15348,
                ( North::None, true, true, West::Tall, East::Low, South::Tall, ) => 15349,
                ( North::None, false, true, West::None, East::Low, South::Tall, ) => 15350,
                ( North::None, false, true, West::Low, East::Low, South::Tall, ) => 15351,
                ( North::None, false, true, West::Tall, East::Low, South::Tall, ) => 15352,
                ( North::None, true, false, West::None, East::Low, South::Tall, ) => 15353,
                ( North::None, true, false, West::Low, East::Low, South::Tall, ) => 15354,
                ( North::None, true, false, West::Tall, East::Low, South::Tall, ) => 15355,
                ( North::None, false, false, West::None, East::Low, South::Tall, ) => 15356,
                ( North::None, false, false, West::Low, East::Low, South::Tall, ) => 15357,
                ( North::None, false, false, West::Tall, East::Low, South::Tall, ) => 15358,
                ( North::Low, true, true, West::None, East::Low, South::None, ) => 15359,
                ( North::Low, true, true, West::Low, East::Low, South::None, ) => 15360,
                ( North::Low, true, true, West::Tall, East::Low, South::None, ) => 15361,
                ( North::Low, false, true, West::None, East::Low, South::None, ) => 15362,
                ( North::Low, false, true, West::Low, East::Low, South::None, ) => 15363,
                ( North::Low, false, true, West::Tall, East::Low, South::None, ) => 15364,
                ( North::Low, true, false, West::None, East::Low, South::None, ) => 15365,
                ( North::Low, true, false, West::Low, East::Low, South::None, ) => 15366,
                ( North::Low, true, false, West::Tall, East::Low, South::None, ) => 15367,
                ( North::Low, false, false, West::None, East::Low, South::None, ) => 15368,
                ( North::Low, false, false, West::Low, East::Low, South::None, ) => 15369,
                ( North::Low, false, false, West::Tall, East::Low, South::None, ) => 15370,
                ( North::Low, true, true, West::None, East::Low, South::Low, ) => 15371,
                ( North::Low, true, true, West::Low, East::Low, South::Low, ) => 15372,
                ( North::Low, true, true, West::Tall, East::Low, South::Low, ) => 15373,
                ( North::Low, false, true, West::None, East::Low, South::Low, ) => 15374,
                ( North::Low, false, true, West::Low, East::Low, South::Low, ) => 15375,
                ( North::Low, false, true, West::Tall, East::Low, South::Low, ) => 15376,
                ( North::Low, true, false, West::None, East::Low, South::Low, ) => 15377,
                ( North::Low, true, false, West::Low, East::Low, South::Low, ) => 15378,
                ( North::Low, true, false, West::Tall, East::Low, South::Low, ) => 15379,
                ( North::Low, false, false, West::None, East::Low, South::Low, ) => 15380,
                ( North::Low, false, false, West::Low, East::Low, South::Low, ) => 15381,
                ( North::Low, false, false, West::Tall, East::Low, South::Low, ) => 15382,
                ( North::Low, true, true, West::None, East::Low, South::Tall, ) => 15383,
                ( North::Low, true, true, West::Low, East::Low, South::Tall, ) => 15384,
                ( North::Low, true, true, West::Tall, East::Low, South::Tall, ) => 15385,
                ( North::Low, false, true, West::None, East::Low, South::Tall, ) => 15386,
                ( North::Low, false, true, West::Low, East::Low, South::Tall, ) => 15387,
                ( North::Low, false, true, West::Tall, East::Low, South::Tall, ) => 15388,
                ( North::Low, true, false, West::None, East::Low, South::Tall, ) => 15389,
                ( North::Low, true, false, West::Low, East::Low, South::Tall, ) => 15390,
                ( North::Low, true, false, West::Tall, East::Low, South::Tall, ) => 15391,
                ( North::Low, false, false, West::None, East::Low, South::Tall, ) => 15392,
                ( North::Low, false, false, West::Low, East::Low, South::Tall, ) => 15393,
                ( North::Low, false, false, West::Tall, East::Low, South::Tall, ) => 15394,
                ( North::Tall, true, true, West::None, East::Low, South::None, ) => 15395,
                ( North::Tall, true, true, West::Low, East::Low, South::None, ) => 15396,
                ( North::Tall, true, true, West::Tall, East::Low, South::None, ) => 15397,
                ( North::Tall, false, true, West::None, East::Low, South::None, ) => 15398,
                ( North::Tall, false, true, West::Low, East::Low, South::None, ) => 15399,
                ( North::Tall, false, true, West::Tall, East::Low, South::None, ) => 15400,
                ( North::Tall, true, false, West::None, East::Low, South::None, ) => 15401,
                ( North::Tall, true, false, West::Low, East::Low, South::None, ) => 15402,
                ( North::Tall, true, false, West::Tall, East::Low, South::None, ) => 15403,
                ( North::Tall, false, false, West::None, East::Low, South::None, ) => 15404,
                ( North::Tall, false, false, West::Low, East::Low, South::None, ) => 15405,
                ( North::Tall, false, false, West::Tall, East::Low, South::None, ) => 15406,
                ( North::Tall, true, true, West::None, East::Low, South::Low, ) => 15407,
                ( North::Tall, true, true, West::Low, East::Low, South::Low, ) => 15408,
                ( North::Tall, true, true, West::Tall, East::Low, South::Low, ) => 15409,
                ( North::Tall, false, true, West::None, East::Low, South::Low, ) => 15410,
                ( North::Tall, false, true, West::Low, East::Low, South::Low, ) => 15411,
                ( North::Tall, false, true, West::Tall, East::Low, South::Low, ) => 15412,
                ( North::Tall, true, false, West::None, East::Low, South::Low, ) => 15413,
                ( North::Tall, true, false, West::Low, East::Low, South::Low, ) => 15414,
                ( North::Tall, true, false, West::Tall, East::Low, South::Low, ) => 15415,
                ( North::Tall, false, false, West::None, East::Low, South::Low, ) => 15416,
                ( North::Tall, false, false, West::Low, East::Low, South::Low, ) => 15417,
                ( North::Tall, false, false, West::Tall, East::Low, South::Low, ) => 15418,
                ( North::Tall, true, true, West::None, East::Low, South::Tall, ) => 15419,
                ( North::Tall, true, true, West::Low, East::Low, South::Tall, ) => 15420,
                ( North::Tall, true, true, West::Tall, East::Low, South::Tall, ) => 15421,
                ( North::Tall, false, true, West::None, East::Low, South::Tall, ) => 15422,
                ( North::Tall, false, true, West::Low, East::Low, South::Tall, ) => 15423,
                ( North::Tall, false, true, West::Tall, East::Low, South::Tall, ) => 15424,
                ( North::Tall, true, false, West::None, East::Low, South::Tall, ) => 15425,
                ( North::Tall, true, false, West::Low, East::Low, South::Tall, ) => 15426,
                ( North::Tall, true, false, West::Tall, East::Low, South::Tall, ) => 15427,
                ( North::Tall, false, false, West::None, East::Low, South::Tall, ) => 15428,
                ( North::Tall, false, false, West::Low, East::Low, South::Tall, ) => 15429,
                ( North::Tall, false, false, West::Tall, East::Low, South::Tall, ) => 15430,
                ( North::None, true, true, West::None, East::Tall, South::None, ) => 15431,
                ( North::None, true, true, West::Low, East::Tall, South::None, ) => 15432,
                ( North::None, true, true, West::Tall, East::Tall, South::None, ) => 15433,
                ( North::None, false, true, West::None, East::Tall, South::None, ) => 15434,
                ( North::None, false, true, West::Low, East::Tall, South::None, ) => 15435,
                ( North::None, false, true, West::Tall, East::Tall, South::None, ) => 15436,
                ( North::None, true, false, West::None, East::Tall, South::None, ) => 15437,
                ( North::None, true, false, West::Low, East::Tall, South::None, ) => 15438,
                ( North::None, true, false, West::Tall, East::Tall, South::None, ) => 15439,
                ( North::None, false, false, West::None, East::Tall, South::None, ) => 15440,
                ( North::None, false, false, West::Low, East::Tall, South::None, ) => 15441,
                ( North::None, false, false, West::Tall, East::Tall, South::None, ) => 15442,
                ( North::None, true, true, West::None, East::Tall, South::Low, ) => 15443,
                ( North::None, true, true, West::Low, East::Tall, South::Low, ) => 15444,
                ( North::None, true, true, West::Tall, East::Tall, South::Low, ) => 15445,
                ( North::None, false, true, West::None, East::Tall, South::Low, ) => 15446,
                ( North::None, false, true, West::Low, East::Tall, South::Low, ) => 15447,
                ( North::None, false, true, West::Tall, East::Tall, South::Low, ) => 15448,
                ( North::None, true, false, West::None, East::Tall, South::Low, ) => 15449,
                ( North::None, true, false, West::Low, East::Tall, South::Low, ) => 15450,
                ( North::None, true, false, West::Tall, East::Tall, South::Low, ) => 15451,
                ( North::None, false, false, West::None, East::Tall, South::Low, ) => 15452,
                ( North::None, false, false, West::Low, East::Tall, South::Low, ) => 15453,
                ( North::None, false, false, West::Tall, East::Tall, South::Low, ) => 15454,
                ( North::None, true, true, West::None, East::Tall, South::Tall, ) => 15455,
                ( North::None, true, true, West::Low, East::Tall, South::Tall, ) => 15456,
                ( North::None, true, true, West::Tall, East::Tall, South::Tall, ) => 15457,
                ( North::None, false, true, West::None, East::Tall, South::Tall, ) => 15458,
                ( North::None, false, true, West::Low, East::Tall, South::Tall, ) => 15459,
                ( North::None, false, true, West::Tall, East::Tall, South::Tall, ) => 15460,
                ( North::None, true, false, West::None, East::Tall, South::Tall, ) => 15461,
                ( North::None, true, false, West::Low, East::Tall, South::Tall, ) => 15462,
                ( North::None, true, false, West::Tall, East::Tall, South::Tall, ) => 15463,
                ( North::None, false, false, West::None, East::Tall, South::Tall, ) => 15464,
                ( North::None, false, false, West::Low, East::Tall, South::Tall, ) => 15465,
                ( North::None, false, false, West::Tall, East::Tall, South::Tall, ) => 15466,
                ( North::Low, true, true, West::None, East::Tall, South::None, ) => 15467,
                ( North::Low, true, true, West::Low, East::Tall, South::None, ) => 15468,
                ( North::Low, true, true, West::Tall, East::Tall, South::None, ) => 15469,
                ( North::Low, false, true, West::None, East::Tall, South::None, ) => 15470,
                ( North::Low, false, true, West::Low, East::Tall, South::None, ) => 15471,
                ( North::Low, false, true, West::Tall, East::Tall, South::None, ) => 15472,
                ( North::Low, true, false, West::None, East::Tall, South::None, ) => 15473,
                ( North::Low, true, false, West::Low, East::Tall, South::None, ) => 15474,
                ( North::Low, true, false, West::Tall, East::Tall, South::None, ) => 15475,
                ( North::Low, false, false, West::None, East::Tall, South::None, ) => 15476,
                ( North::Low, false, false, West::Low, East::Tall, South::None, ) => 15477,
                ( North::Low, false, false, West::Tall, East::Tall, South::None, ) => 15478,
                ( North::Low, true, true, West::None, East::Tall, South::Low, ) => 15479,
                ( North::Low, true, true, West::Low, East::Tall, South::Low, ) => 15480,
                ( North::Low, true, true, West::Tall, East::Tall, South::Low, ) => 15481,
                ( North::Low, false, true, West::None, East::Tall, South::Low, ) => 15482,
                ( North::Low, false, true, West::Low, East::Tall, South::Low, ) => 15483,
                ( North::Low, false, true, West::Tall, East::Tall, South::Low, ) => 15484,
                ( North::Low, true, false, West::None, East::Tall, South::Low, ) => 15485,
                ( North::Low, true, false, West::Low, East::Tall, South::Low, ) => 15486,
                ( North::Low, true, false, West::Tall, East::Tall, South::Low, ) => 15487,
                ( North::Low, false, false, West::None, East::Tall, South::Low, ) => 15488,
                ( North::Low, false, false, West::Low, East::Tall, South::Low, ) => 15489,
                ( North::Low, false, false, West::Tall, East::Tall, South::Low, ) => 15490,
                ( North::Low, true, true, West::None, East::Tall, South::Tall, ) => 15491,
                ( North::Low, true, true, West::Low, East::Tall, South::Tall, ) => 15492,
                ( North::Low, true, true, West::Tall, East::Tall, South::Tall, ) => 15493,
                ( North::Low, false, true, West::None, East::Tall, South::Tall, ) => 15494,
                ( North::Low, false, true, West::Low, East::Tall, South::Tall, ) => 15495,
                ( North::Low, false, true, West::Tall, East::Tall, South::Tall, ) => 15496,
                ( North::Low, true, false, West::None, East::Tall, South::Tall, ) => 15497,
                ( North::Low, true, false, West::Low, East::Tall, South::Tall, ) => 15498,
                ( North::Low, true, false, West::Tall, East::Tall, South::Tall, ) => 15499,
                ( North::Low, false, false, West::None, East::Tall, South::Tall, ) => 15500,
                ( North::Low, false, false, West::Low, East::Tall, South::Tall, ) => 15501,
                ( North::Low, false, false, West::Tall, East::Tall, South::Tall, ) => 15502,
                ( North::Tall, true, true, West::None, East::Tall, South::None, ) => 15503,
                ( North::Tall, true, true, West::Low, East::Tall, South::None, ) => 15504,
                ( North::Tall, true, true, West::Tall, East::Tall, South::None, ) => 15505,
                ( North::Tall, false, true, West::None, East::Tall, South::None, ) => 15506,
                ( North::Tall, false, true, West::Low, East::Tall, South::None, ) => 15507,
                ( North::Tall, false, true, West::Tall, East::Tall, South::None, ) => 15508,
                ( North::Tall, true, false, West::None, East::Tall, South::None, ) => 15509,
                ( North::Tall, true, false, West::Low, East::Tall, South::None, ) => 15510,
                ( North::Tall, true, false, West::Tall, East::Tall, South::None, ) => 15511,
                ( North::Tall, false, false, West::None, East::Tall, South::None, ) => 15512,
                ( North::Tall, false, false, West::Low, East::Tall, South::None, ) => 15513,
                ( North::Tall, false, false, West::Tall, East::Tall, South::None, ) => 15514,
                ( North::Tall, true, true, West::None, East::Tall, South::Low, ) => 15515,
                ( North::Tall, true, true, West::Low, East::Tall, South::Low, ) => 15516,
                ( North::Tall, true, true, West::Tall, East::Tall, South::Low, ) => 15517,
                ( North::Tall, false, true, West::None, East::Tall, South::Low, ) => 15518,
                ( North::Tall, false, true, West::Low, East::Tall, South::Low, ) => 15519,
                ( North::Tall, false, true, West::Tall, East::Tall, South::Low, ) => 15520,
                ( North::Tall, true, false, West::None, East::Tall, South::Low, ) => 15521,
                ( North::Tall, true, false, West::Low, East::Tall, South::Low, ) => 15522,
                ( North::Tall, true, false, West::Tall, East::Tall, South::Low, ) => 15523,
                ( North::Tall, false, false, West::None, East::Tall, South::Low, ) => 15524,
                ( North::Tall, false, false, West::Low, East::Tall, South::Low, ) => 15525,
                ( North::Tall, false, false, West::Tall, East::Tall, South::Low, ) => 15526,
                ( North::Tall, true, true, West::None, East::Tall, South::Tall, ) => 15527,
                ( North::Tall, true, true, West::Low, East::Tall, South::Tall, ) => 15528,
                ( North::Tall, true, true, West::Tall, East::Tall, South::Tall, ) => 15529,
                ( North::Tall, false, true, West::None, East::Tall, South::Tall, ) => 15530,
                ( North::Tall, false, true, West::Low, East::Tall, South::Tall, ) => 15531,
                ( North::Tall, false, true, West::Tall, East::Tall, South::Tall, ) => 15532,
                ( North::Tall, true, false, West::None, East::Tall, South::Tall, ) => 15533,
                ( North::Tall, true, false, West::Low, East::Tall, South::Tall, ) => 15534,
                ( North::Tall, true, false, West::Tall, East::Tall, South::Tall, ) => 15535,
                ( North::Tall, false, false, West::None, East::Tall, South::Tall, ) => 15536,
                ( North::Tall, false, false, West::Low, East::Tall, South::Tall, ) => 15537,
                ( North::Tall, false, false, West::Tall, East::Tall, South::Tall, ) => 15538,
            })
        }
    }

    impl From<BrickWall> for BlockState {
        #[inline(always)]
        fn from(value : BrickWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrickWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrickWall { }

    impl Block for BrickWall {
        const DEFAULT_STATE : Self = Self {
            north : North::None,
            waterlogged : false,
            up : true,
            west : West::None,
            east : East::None,
            south : South::None,
        };
    }

}

/// `minecraft:emerald_block` block.
pub mod emerald_block {
    use super::*;

    /// `minecraft:emerald_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct EmeraldBlock;

    impl EmeraldBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(8449)
        }
    }

    impl From<EmeraldBlock> for BlockState {
        #[inline(always)]
        fn from(value : EmeraldBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for EmeraldBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for EmeraldBlock { }

    impl Block for EmeraldBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:poppy` block.
pub mod poppy {
    use super::*;

    /// `minecraft:poppy` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Poppy;

    impl Poppy {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2123)
        }
    }

    impl From<Poppy> for BlockState {
        #[inline(always)]
        fn from(value : Poppy) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Poppy {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Poppy { }

    impl Block for Poppy {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:potted_lily_of_the_valley` block.
pub mod potted_lily_of_the_valley {
    use super::*;

    /// `minecraft:potted_lily_of_the_valley` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedLilyOfTheValley;

    impl PottedLilyOfTheValley {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(9374)
        }
    }

    impl From<PottedLilyOfTheValley> for BlockState {
        #[inline(always)]
        fn from(value : PottedLilyOfTheValley) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedLilyOfTheValley {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedLilyOfTheValley { }

    impl Block for PottedLilyOfTheValley {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:purple_shulker_box` block.
pub mod purple_shulker_box {
    use super::*;

    /// `minecraft:purple_shulker_box` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PurpleShulkerBox {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `east` variant.
        East,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `up` variant.
        Up,
        /// `down` variant.
        Down,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl PurpleShulkerBox {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13651,
                ( Facing::East, ) => 13652,
                ( Facing::South, ) => 13653,
                ( Facing::West, ) => 13654,
                ( Facing::Up, ) => 13655,
                ( Facing::Down, ) => 13656,
            })
        }
    }

    impl From<PurpleShulkerBox> for BlockState {
        #[inline(always)]
        fn from(value : PurpleShulkerBox) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PurpleShulkerBox {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PurpleShulkerBox { }

    impl Block for PurpleShulkerBox {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::Up,
        };
    }

}

/// `minecraft:conduit` block.
pub mod conduit {
    use super::*;

    /// `minecraft:conduit` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Conduit {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl Conduit {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13997,
                ( false, ) => 13998,
            })
        }
    }

    impl From<Conduit> for BlockState {
        #[inline(always)]
        fn from(value : Conduit) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Conduit {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Conduit { }

    impl Block for Conduit {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:brown_glazed_terracotta` block.
pub mod brown_glazed_terracotta {
    use super::*;

    /// `minecraft:brown_glazed_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrownGlazedTerracotta {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BrownGlazedTerracotta {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 13735,
                ( Facing::South, ) => 13736,
                ( Facing::West, ) => 13737,
                ( Facing::East, ) => 13738,
            })
        }
    }

    impl From<BrownGlazedTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : BrownGlazedTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrownGlazedTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrownGlazedTerracotta { }

    impl Block for BrownGlazedTerracotta {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:smooth_stone` block.
pub mod smooth_stone {
    use super::*;

    /// `minecraft:smooth_stone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmoothStone;

    impl SmoothStone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(12201)
        }
    }

    impl From<SmoothStone> for BlockState {
        #[inline(always)]
        fn from(value : SmoothStone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmoothStone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmoothStone { }

    impl Block for SmoothStone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:birch_stairs` block.
pub mod birch_stairs {
    use super::*;

    /// `minecraft:birch_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchStairs {
        /// `shape` state.
        pub shape : Shape,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BirchStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.shape, self.waterlogged, self.half, self.facing, )) {
                ( Shape::Straight, true, Half::Top, Facing::North, ) => 8530,
                ( Shape::Straight, false, Half::Top, Facing::North, ) => 8531,
                ( Shape::InnerLeft, true, Half::Top, Facing::North, ) => 8532,
                ( Shape::InnerLeft, false, Half::Top, Facing::North, ) => 8533,
                ( Shape::InnerRight, true, Half::Top, Facing::North, ) => 8534,
                ( Shape::InnerRight, false, Half::Top, Facing::North, ) => 8535,
                ( Shape::OuterLeft, true, Half::Top, Facing::North, ) => 8536,
                ( Shape::OuterLeft, false, Half::Top, Facing::North, ) => 8537,
                ( Shape::OuterRight, true, Half::Top, Facing::North, ) => 8538,
                ( Shape::OuterRight, false, Half::Top, Facing::North, ) => 8539,
                ( Shape::Straight, true, Half::Bottom, Facing::North, ) => 8540,
                ( Shape::Straight, false, Half::Bottom, Facing::North, ) => 8541,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::North, ) => 8542,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::North, ) => 8543,
                ( Shape::InnerRight, true, Half::Bottom, Facing::North, ) => 8544,
                ( Shape::InnerRight, false, Half::Bottom, Facing::North, ) => 8545,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::North, ) => 8546,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::North, ) => 8547,
                ( Shape::OuterRight, true, Half::Bottom, Facing::North, ) => 8548,
                ( Shape::OuterRight, false, Half::Bottom, Facing::North, ) => 8549,
                ( Shape::Straight, true, Half::Top, Facing::South, ) => 8550,
                ( Shape::Straight, false, Half::Top, Facing::South, ) => 8551,
                ( Shape::InnerLeft, true, Half::Top, Facing::South, ) => 8552,
                ( Shape::InnerLeft, false, Half::Top, Facing::South, ) => 8553,
                ( Shape::InnerRight, true, Half::Top, Facing::South, ) => 8554,
                ( Shape::InnerRight, false, Half::Top, Facing::South, ) => 8555,
                ( Shape::OuterLeft, true, Half::Top, Facing::South, ) => 8556,
                ( Shape::OuterLeft, false, Half::Top, Facing::South, ) => 8557,
                ( Shape::OuterRight, true, Half::Top, Facing::South, ) => 8558,
                ( Shape::OuterRight, false, Half::Top, Facing::South, ) => 8559,
                ( Shape::Straight, true, Half::Bottom, Facing::South, ) => 8560,
                ( Shape::Straight, false, Half::Bottom, Facing::South, ) => 8561,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::South, ) => 8562,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::South, ) => 8563,
                ( Shape::InnerRight, true, Half::Bottom, Facing::South, ) => 8564,
                ( Shape::InnerRight, false, Half::Bottom, Facing::South, ) => 8565,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::South, ) => 8566,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::South, ) => 8567,
                ( Shape::OuterRight, true, Half::Bottom, Facing::South, ) => 8568,
                ( Shape::OuterRight, false, Half::Bottom, Facing::South, ) => 8569,
                ( Shape::Straight, true, Half::Top, Facing::West, ) => 8570,
                ( Shape::Straight, false, Half::Top, Facing::West, ) => 8571,
                ( Shape::InnerLeft, true, Half::Top, Facing::West, ) => 8572,
                ( Shape::InnerLeft, false, Half::Top, Facing::West, ) => 8573,
                ( Shape::InnerRight, true, Half::Top, Facing::West, ) => 8574,
                ( Shape::InnerRight, false, Half::Top, Facing::West, ) => 8575,
                ( Shape::OuterLeft, true, Half::Top, Facing::West, ) => 8576,
                ( Shape::OuterLeft, false, Half::Top, Facing::West, ) => 8577,
                ( Shape::OuterRight, true, Half::Top, Facing::West, ) => 8578,
                ( Shape::OuterRight, false, Half::Top, Facing::West, ) => 8579,
                ( Shape::Straight, true, Half::Bottom, Facing::West, ) => 8580,
                ( Shape::Straight, false, Half::Bottom, Facing::West, ) => 8581,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::West, ) => 8582,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::West, ) => 8583,
                ( Shape::InnerRight, true, Half::Bottom, Facing::West, ) => 8584,
                ( Shape::InnerRight, false, Half::Bottom, Facing::West, ) => 8585,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::West, ) => 8586,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::West, ) => 8587,
                ( Shape::OuterRight, true, Half::Bottom, Facing::West, ) => 8588,
                ( Shape::OuterRight, false, Half::Bottom, Facing::West, ) => 8589,
                ( Shape::Straight, true, Half::Top, Facing::East, ) => 8590,
                ( Shape::Straight, false, Half::Top, Facing::East, ) => 8591,
                ( Shape::InnerLeft, true, Half::Top, Facing::East, ) => 8592,
                ( Shape::InnerLeft, false, Half::Top, Facing::East, ) => 8593,
                ( Shape::InnerRight, true, Half::Top, Facing::East, ) => 8594,
                ( Shape::InnerRight, false, Half::Top, Facing::East, ) => 8595,
                ( Shape::OuterLeft, true, Half::Top, Facing::East, ) => 8596,
                ( Shape::OuterLeft, false, Half::Top, Facing::East, ) => 8597,
                ( Shape::OuterRight, true, Half::Top, Facing::East, ) => 8598,
                ( Shape::OuterRight, false, Half::Top, Facing::East, ) => 8599,
                ( Shape::Straight, true, Half::Bottom, Facing::East, ) => 8600,
                ( Shape::Straight, false, Half::Bottom, Facing::East, ) => 8601,
                ( Shape::InnerLeft, true, Half::Bottom, Facing::East, ) => 8602,
                ( Shape::InnerLeft, false, Half::Bottom, Facing::East, ) => 8603,
                ( Shape::InnerRight, true, Half::Bottom, Facing::East, ) => 8604,
                ( Shape::InnerRight, false, Half::Bottom, Facing::East, ) => 8605,
                ( Shape::OuterLeft, true, Half::Bottom, Facing::East, ) => 8606,
                ( Shape::OuterLeft, false, Half::Bottom, Facing::East, ) => 8607,
                ( Shape::OuterRight, true, Half::Bottom, Facing::East, ) => 8608,
                ( Shape::OuterRight, false, Half::Bottom, Facing::East, ) => 8609,
            })
        }
    }

    impl From<BirchStairs> for BlockState {
        #[inline(always)]
        fn from(value : BirchStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchStairs { }

    impl Block for BirchStairs {
        const DEFAULT_STATE : Self = Self {
            shape : Shape::Straight,
            waterlogged : false,
            half : Half::Bottom,
            facing : Facing::North,
        };
    }

}

/// `minecraft:cherry_sign` block.
pub mod cherry_sign {
    use super::*;

    /// `minecraft:cherry_sign` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CherrySign {
        /// `rotation` state.
        pub rotation : Rotation,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl CherrySign {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, self.waterlogged, )) {
                ( Rotation::N0, true, ) => 4494,
                ( Rotation::N0, false, ) => 4495,
                ( Rotation::N1, true, ) => 4496,
                ( Rotation::N1, false, ) => 4497,
                ( Rotation::N2, true, ) => 4498,
                ( Rotation::N2, false, ) => 4499,
                ( Rotation::N3, true, ) => 4500,
                ( Rotation::N3, false, ) => 4501,
                ( Rotation::N4, true, ) => 4502,
                ( Rotation::N4, false, ) => 4503,
                ( Rotation::N5, true, ) => 4504,
                ( Rotation::N5, false, ) => 4505,
                ( Rotation::N6, true, ) => 4506,
                ( Rotation::N6, false, ) => 4507,
                ( Rotation::N7, true, ) => 4508,
                ( Rotation::N7, false, ) => 4509,
                ( Rotation::N8, true, ) => 4510,
                ( Rotation::N8, false, ) => 4511,
                ( Rotation::N9, true, ) => 4512,
                ( Rotation::N9, false, ) => 4513,
                ( Rotation::N10, true, ) => 4514,
                ( Rotation::N10, false, ) => 4515,
                ( Rotation::N11, true, ) => 4516,
                ( Rotation::N11, false, ) => 4517,
                ( Rotation::N12, true, ) => 4518,
                ( Rotation::N12, false, ) => 4519,
                ( Rotation::N13, true, ) => 4520,
                ( Rotation::N13, false, ) => 4521,
                ( Rotation::N14, true, ) => 4522,
                ( Rotation::N14, false, ) => 4523,
                ( Rotation::N15, true, ) => 4524,
                ( Rotation::N15, false, ) => 4525,
            })
        }
    }

    impl From<CherrySign> for BlockState {
        #[inline(always)]
        fn from(value : CherrySign) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CherrySign {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CherrySign { }

    impl Block for CherrySign {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
            waterlogged : false,
        };
    }

}

/// `minecraft:crimson_trapdoor` block.
pub mod crimson_trapdoor {
    use super::*;

    /// `minecraft:crimson_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrimsonTrapdoor {
        /// `open` state.
        pub open : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `powered` state.
        pub powered : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl CrimsonTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.open, self.facing, self.half, self.powered, self.waterlogged, )) {
                ( true, Facing::North, Half::Top, true, true, ) => 19803,
                ( true, Facing::North, Half::Top, true, false, ) => 19804,
                ( true, Facing::North, Half::Top, false, true, ) => 19805,
                ( true, Facing::North, Half::Top, false, false, ) => 19806,
                ( false, Facing::North, Half::Top, true, true, ) => 19807,
                ( false, Facing::North, Half::Top, true, false, ) => 19808,
                ( false, Facing::North, Half::Top, false, true, ) => 19809,
                ( false, Facing::North, Half::Top, false, false, ) => 19810,
                ( true, Facing::North, Half::Bottom, true, true, ) => 19811,
                ( true, Facing::North, Half::Bottom, true, false, ) => 19812,
                ( true, Facing::North, Half::Bottom, false, true, ) => 19813,
                ( true, Facing::North, Half::Bottom, false, false, ) => 19814,
                ( false, Facing::North, Half::Bottom, true, true, ) => 19815,
                ( false, Facing::North, Half::Bottom, true, false, ) => 19816,
                ( false, Facing::North, Half::Bottom, false, true, ) => 19817,
                ( false, Facing::North, Half::Bottom, false, false, ) => 19818,
                ( true, Facing::South, Half::Top, true, true, ) => 19819,
                ( true, Facing::South, Half::Top, true, false, ) => 19820,
                ( true, Facing::South, Half::Top, false, true, ) => 19821,
                ( true, Facing::South, Half::Top, false, false, ) => 19822,
                ( false, Facing::South, Half::Top, true, true, ) => 19823,
                ( false, Facing::South, Half::Top, true, false, ) => 19824,
                ( false, Facing::South, Half::Top, false, true, ) => 19825,
                ( false, Facing::South, Half::Top, false, false, ) => 19826,
                ( true, Facing::South, Half::Bottom, true, true, ) => 19827,
                ( true, Facing::South, Half::Bottom, true, false, ) => 19828,
                ( true, Facing::South, Half::Bottom, false, true, ) => 19829,
                ( true, Facing::South, Half::Bottom, false, false, ) => 19830,
                ( false, Facing::South, Half::Bottom, true, true, ) => 19831,
                ( false, Facing::South, Half::Bottom, true, false, ) => 19832,
                ( false, Facing::South, Half::Bottom, false, true, ) => 19833,
                ( false, Facing::South, Half::Bottom, false, false, ) => 19834,
                ( true, Facing::West, Half::Top, true, true, ) => 19835,
                ( true, Facing::West, Half::Top, true, false, ) => 19836,
                ( true, Facing::West, Half::Top, false, true, ) => 19837,
                ( true, Facing::West, Half::Top, false, false, ) => 19838,
                ( false, Facing::West, Half::Top, true, true, ) => 19839,
                ( false, Facing::West, Half::Top, true, false, ) => 19840,
                ( false, Facing::West, Half::Top, false, true, ) => 19841,
                ( false, Facing::West, Half::Top, false, false, ) => 19842,
                ( true, Facing::West, Half::Bottom, true, true, ) => 19843,
                ( true, Facing::West, Half::Bottom, true, false, ) => 19844,
                ( true, Facing::West, Half::Bottom, false, true, ) => 19845,
                ( true, Facing::West, Half::Bottom, false, false, ) => 19846,
                ( false, Facing::West, Half::Bottom, true, true, ) => 19847,
                ( false, Facing::West, Half::Bottom, true, false, ) => 19848,
                ( false, Facing::West, Half::Bottom, false, true, ) => 19849,
                ( false, Facing::West, Half::Bottom, false, false, ) => 19850,
                ( true, Facing::East, Half::Top, true, true, ) => 19851,
                ( true, Facing::East, Half::Top, true, false, ) => 19852,
                ( true, Facing::East, Half::Top, false, true, ) => 19853,
                ( true, Facing::East, Half::Top, false, false, ) => 19854,
                ( false, Facing::East, Half::Top, true, true, ) => 19855,
                ( false, Facing::East, Half::Top, true, false, ) => 19856,
                ( false, Facing::East, Half::Top, false, true, ) => 19857,
                ( false, Facing::East, Half::Top, false, false, ) => 19858,
                ( true, Facing::East, Half::Bottom, true, true, ) => 19859,
                ( true, Facing::East, Half::Bottom, true, false, ) => 19860,
                ( true, Facing::East, Half::Bottom, false, true, ) => 19861,
                ( true, Facing::East, Half::Bottom, false, false, ) => 19862,
                ( false, Facing::East, Half::Bottom, true, true, ) => 19863,
                ( false, Facing::East, Half::Bottom, true, false, ) => 19864,
                ( false, Facing::East, Half::Bottom, false, true, ) => 19865,
                ( false, Facing::East, Half::Bottom, false, false, ) => 19866,
            })
        }
    }

    impl From<CrimsonTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : CrimsonTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrimsonTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrimsonTrapdoor { }

    impl Block for CrimsonTrapdoor {
        const DEFAULT_STATE : Self = Self {
            open : false,
            facing : Facing::North,
            half : Half::Bottom,
            powered : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:smooth_red_sandstone_slab` block.
pub mod smooth_red_sandstone_slab {
    use super::*;

    /// `minecraft:smooth_red_sandstone_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmoothRedSandstoneSlab {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `type` state.
        pub kind : Kind,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl SmoothRedSandstoneSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.kind, )) {
                ( true, Kind::Top, ) => 15143,
                ( false, Kind::Top, ) => 15144,
                ( true, Kind::Bottom, ) => 15145,
                ( false, Kind::Bottom, ) => 15146,
                ( true, Kind::Double, ) => 15147,
                ( false, Kind::Double, ) => 15148,
            })
        }
    }

    impl From<SmoothRedSandstoneSlab> for BlockState {
        #[inline(always)]
        fn from(value : SmoothRedSandstoneSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmoothRedSandstoneSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmoothRedSandstoneSlab { }

    impl Block for SmoothRedSandstoneSlab {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            kind : Kind::Bottom,
        };
    }

}

/// `minecraft:crying_obsidian` block.
pub mod crying_obsidian {
    use super::*;

    /// `minecraft:crying_obsidian` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CryingObsidian;

    impl CryingObsidian {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(20509)
        }
    }

    impl From<CryingObsidian> for BlockState {
        #[inline(always)]
        fn from(value : CryingObsidian) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CryingObsidian {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CryingObsidian { }

    impl Block for CryingObsidian {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:end_stone_brick_wall` block.
pub mod end_stone_brick_wall {
    use super::*;

    /// `minecraft:end_stone_brick_wall` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct EndStoneBrickWall {
        /// `north` state.
        pub north : North,
        /// `east` state.
        pub east : East,
        /// `west` state.
        pub west : West,
        /// `south` state.
        pub south : South,
        /// `up` state.
        pub up : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `north` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum North {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for North { }
    impl BlockProperty for North { }

    /// `east` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum East {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for East { }
    impl BlockProperty for East { }

    /// `west` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum West {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for West { }
    impl BlockProperty for West { }

    /// `south` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum South {
        /// `none` variant.
        None,
        /// `low` variant.
        Low,
        /// `tall` variant.
        Tall,
    }
    impl crate::Sealed for South { }
    impl BlockProperty for South { }

    impl EndStoneBrickWall {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.east, self.west, self.south, self.up, self.waterlogged, )) {
                ( North::None, East::None, West::None, South::None, true, true, ) => 18779,
                ( North::None, East::None, West::Low, South::None, true, true, ) => 18780,
                ( North::None, East::None, West::Tall, South::None, true, true, ) => 18781,
                ( North::None, East::None, West::None, South::None, true, false, ) => 18782,
                ( North::None, East::None, West::Low, South::None, true, false, ) => 18783,
                ( North::None, East::None, West::Tall, South::None, true, false, ) => 18784,
                ( North::None, East::None, West::None, South::None, false, true, ) => 18785,
                ( North::None, East::None, West::Low, South::None, false, true, ) => 18786,
                ( North::None, East::None, West::Tall, South::None, false, true, ) => 18787,
                ( North::None, East::None, West::None, South::None, false, false, ) => 18788,
                ( North::None, East::None, West::Low, South::None, false, false, ) => 18789,
                ( North::None, East::None, West::Tall, South::None, false, false, ) => 18790,
                ( North::None, East::None, West::None, South::Low, true, true, ) => 18791,
                ( North::None, East::None, West::Low, South::Low, true, true, ) => 18792,
                ( North::None, East::None, West::Tall, South::Low, true, true, ) => 18793,
                ( North::None, East::None, West::None, South::Low, true, false, ) => 18794,
                ( North::None, East::None, West::Low, South::Low, true, false, ) => 18795,
                ( North::None, East::None, West::Tall, South::Low, true, false, ) => 18796,
                ( North::None, East::None, West::None, South::Low, false, true, ) => 18797,
                ( North::None, East::None, West::Low, South::Low, false, true, ) => 18798,
                ( North::None, East::None, West::Tall, South::Low, false, true, ) => 18799,
                ( North::None, East::None, West::None, South::Low, false, false, ) => 18800,
                ( North::None, East::None, West::Low, South::Low, false, false, ) => 18801,
                ( North::None, East::None, West::Tall, South::Low, false, false, ) => 18802,
                ( North::None, East::None, West::None, South::Tall, true, true, ) => 18803,
                ( North::None, East::None, West::Low, South::Tall, true, true, ) => 18804,
                ( North::None, East::None, West::Tall, South::Tall, true, true, ) => 18805,
                ( North::None, East::None, West::None, South::Tall, true, false, ) => 18806,
                ( North::None, East::None, West::Low, South::Tall, true, false, ) => 18807,
                ( North::None, East::None, West::Tall, South::Tall, true, false, ) => 18808,
                ( North::None, East::None, West::None, South::Tall, false, true, ) => 18809,
                ( North::None, East::None, West::Low, South::Tall, false, true, ) => 18810,
                ( North::None, East::None, West::Tall, South::Tall, false, true, ) => 18811,
                ( North::None, East::None, West::None, South::Tall, false, false, ) => 18812,
                ( North::None, East::None, West::Low, South::Tall, false, false, ) => 18813,
                ( North::None, East::None, West::Tall, South::Tall, false, false, ) => 18814,
                ( North::Low, East::None, West::None, South::None, true, true, ) => 18815,
                ( North::Low, East::None, West::Low, South::None, true, true, ) => 18816,
                ( North::Low, East::None, West::Tall, South::None, true, true, ) => 18817,
                ( North::Low, East::None, West::None, South::None, true, false, ) => 18818,
                ( North::Low, East::None, West::Low, South::None, true, false, ) => 18819,
                ( North::Low, East::None, West::Tall, South::None, true, false, ) => 18820,
                ( North::Low, East::None, West::None, South::None, false, true, ) => 18821,
                ( North::Low, East::None, West::Low, South::None, false, true, ) => 18822,
                ( North::Low, East::None, West::Tall, South::None, false, true, ) => 18823,
                ( North::Low, East::None, West::None, South::None, false, false, ) => 18824,
                ( North::Low, East::None, West::Low, South::None, false, false, ) => 18825,
                ( North::Low, East::None, West::Tall, South::None, false, false, ) => 18826,
                ( North::Low, East::None, West::None, South::Low, true, true, ) => 18827,
                ( North::Low, East::None, West::Low, South::Low, true, true, ) => 18828,
                ( North::Low, East::None, West::Tall, South::Low, true, true, ) => 18829,
                ( North::Low, East::None, West::None, South::Low, true, false, ) => 18830,
                ( North::Low, East::None, West::Low, South::Low, true, false, ) => 18831,
                ( North::Low, East::None, West::Tall, South::Low, true, false, ) => 18832,
                ( North::Low, East::None, West::None, South::Low, false, true, ) => 18833,
                ( North::Low, East::None, West::Low, South::Low, false, true, ) => 18834,
                ( North::Low, East::None, West::Tall, South::Low, false, true, ) => 18835,
                ( North::Low, East::None, West::None, South::Low, false, false, ) => 18836,
                ( North::Low, East::None, West::Low, South::Low, false, false, ) => 18837,
                ( North::Low, East::None, West::Tall, South::Low, false, false, ) => 18838,
                ( North::Low, East::None, West::None, South::Tall, true, true, ) => 18839,
                ( North::Low, East::None, West::Low, South::Tall, true, true, ) => 18840,
                ( North::Low, East::None, West::Tall, South::Tall, true, true, ) => 18841,
                ( North::Low, East::None, West::None, South::Tall, true, false, ) => 18842,
                ( North::Low, East::None, West::Low, South::Tall, true, false, ) => 18843,
                ( North::Low, East::None, West::Tall, South::Tall, true, false, ) => 18844,
                ( North::Low, East::None, West::None, South::Tall, false, true, ) => 18845,
                ( North::Low, East::None, West::Low, South::Tall, false, true, ) => 18846,
                ( North::Low, East::None, West::Tall, South::Tall, false, true, ) => 18847,
                ( North::Low, East::None, West::None, South::Tall, false, false, ) => 18848,
                ( North::Low, East::None, West::Low, South::Tall, false, false, ) => 18849,
                ( North::Low, East::None, West::Tall, South::Tall, false, false, ) => 18850,
                ( North::Tall, East::None, West::None, South::None, true, true, ) => 18851,
                ( North::Tall, East::None, West::Low, South::None, true, true, ) => 18852,
                ( North::Tall, East::None, West::Tall, South::None, true, true, ) => 18853,
                ( North::Tall, East::None, West::None, South::None, true, false, ) => 18854,
                ( North::Tall, East::None, West::Low, South::None, true, false, ) => 18855,
                ( North::Tall, East::None, West::Tall, South::None, true, false, ) => 18856,
                ( North::Tall, East::None, West::None, South::None, false, true, ) => 18857,
                ( North::Tall, East::None, West::Low, South::None, false, true, ) => 18858,
                ( North::Tall, East::None, West::Tall, South::None, false, true, ) => 18859,
                ( North::Tall, East::None, West::None, South::None, false, false, ) => 18860,
                ( North::Tall, East::None, West::Low, South::None, false, false, ) => 18861,
                ( North::Tall, East::None, West::Tall, South::None, false, false, ) => 18862,
                ( North::Tall, East::None, West::None, South::Low, true, true, ) => 18863,
                ( North::Tall, East::None, West::Low, South::Low, true, true, ) => 18864,
                ( North::Tall, East::None, West::Tall, South::Low, true, true, ) => 18865,
                ( North::Tall, East::None, West::None, South::Low, true, false, ) => 18866,
                ( North::Tall, East::None, West::Low, South::Low, true, false, ) => 18867,
                ( North::Tall, East::None, West::Tall, South::Low, true, false, ) => 18868,
                ( North::Tall, East::None, West::None, South::Low, false, true, ) => 18869,
                ( North::Tall, East::None, West::Low, South::Low, false, true, ) => 18870,
                ( North::Tall, East::None, West::Tall, South::Low, false, true, ) => 18871,
                ( North::Tall, East::None, West::None, South::Low, false, false, ) => 18872,
                ( North::Tall, East::None, West::Low, South::Low, false, false, ) => 18873,
                ( North::Tall, East::None, West::Tall, South::Low, false, false, ) => 18874,
                ( North::Tall, East::None, West::None, South::Tall, true, true, ) => 18875,
                ( North::Tall, East::None, West::Low, South::Tall, true, true, ) => 18876,
                ( North::Tall, East::None, West::Tall, South::Tall, true, true, ) => 18877,
                ( North::Tall, East::None, West::None, South::Tall, true, false, ) => 18878,
                ( North::Tall, East::None, West::Low, South::Tall, true, false, ) => 18879,
                ( North::Tall, East::None, West::Tall, South::Tall, true, false, ) => 18880,
                ( North::Tall, East::None, West::None, South::Tall, false, true, ) => 18881,
                ( North::Tall, East::None, West::Low, South::Tall, false, true, ) => 18882,
                ( North::Tall, East::None, West::Tall, South::Tall, false, true, ) => 18883,
                ( North::Tall, East::None, West::None, South::Tall, false, false, ) => 18884,
                ( North::Tall, East::None, West::Low, South::Tall, false, false, ) => 18885,
                ( North::Tall, East::None, West::Tall, South::Tall, false, false, ) => 18886,
                ( North::None, East::Low, West::None, South::None, true, true, ) => 18887,
                ( North::None, East::Low, West::Low, South::None, true, true, ) => 18888,
                ( North::None, East::Low, West::Tall, South::None, true, true, ) => 18889,
                ( North::None, East::Low, West::None, South::None, true, false, ) => 18890,
                ( North::None, East::Low, West::Low, South::None, true, false, ) => 18891,
                ( North::None, East::Low, West::Tall, South::None, true, false, ) => 18892,
                ( North::None, East::Low, West::None, South::None, false, true, ) => 18893,
                ( North::None, East::Low, West::Low, South::None, false, true, ) => 18894,
                ( North::None, East::Low, West::Tall, South::None, false, true, ) => 18895,
                ( North::None, East::Low, West::None, South::None, false, false, ) => 18896,
                ( North::None, East::Low, West::Low, South::None, false, false, ) => 18897,
                ( North::None, East::Low, West::Tall, South::None, false, false, ) => 18898,
                ( North::None, East::Low, West::None, South::Low, true, true, ) => 18899,
                ( North::None, East::Low, West::Low, South::Low, true, true, ) => 18900,
                ( North::None, East::Low, West::Tall, South::Low, true, true, ) => 18901,
                ( North::None, East::Low, West::None, South::Low, true, false, ) => 18902,
                ( North::None, East::Low, West::Low, South::Low, true, false, ) => 18903,
                ( North::None, East::Low, West::Tall, South::Low, true, false, ) => 18904,
                ( North::None, East::Low, West::None, South::Low, false, true, ) => 18905,
                ( North::None, East::Low, West::Low, South::Low, false, true, ) => 18906,
                ( North::None, East::Low, West::Tall, South::Low, false, true, ) => 18907,
                ( North::None, East::Low, West::None, South::Low, false, false, ) => 18908,
                ( North::None, East::Low, West::Low, South::Low, false, false, ) => 18909,
                ( North::None, East::Low, West::Tall, South::Low, false, false, ) => 18910,
                ( North::None, East::Low, West::None, South::Tall, true, true, ) => 18911,
                ( North::None, East::Low, West::Low, South::Tall, true, true, ) => 18912,
                ( North::None, East::Low, West::Tall, South::Tall, true, true, ) => 18913,
                ( North::None, East::Low, West::None, South::Tall, true, false, ) => 18914,
                ( North::None, East::Low, West::Low, South::Tall, true, false, ) => 18915,
                ( North::None, East::Low, West::Tall, South::Tall, true, false, ) => 18916,
                ( North::None, East::Low, West::None, South::Tall, false, true, ) => 18917,
                ( North::None, East::Low, West::Low, South::Tall, false, true, ) => 18918,
                ( North::None, East::Low, West::Tall, South::Tall, false, true, ) => 18919,
                ( North::None, East::Low, West::None, South::Tall, false, false, ) => 18920,
                ( North::None, East::Low, West::Low, South::Tall, false, false, ) => 18921,
                ( North::None, East::Low, West::Tall, South::Tall, false, false, ) => 18922,
                ( North::Low, East::Low, West::None, South::None, true, true, ) => 18923,
                ( North::Low, East::Low, West::Low, South::None, true, true, ) => 18924,
                ( North::Low, East::Low, West::Tall, South::None, true, true, ) => 18925,
                ( North::Low, East::Low, West::None, South::None, true, false, ) => 18926,
                ( North::Low, East::Low, West::Low, South::None, true, false, ) => 18927,
                ( North::Low, East::Low, West::Tall, South::None, true, false, ) => 18928,
                ( North::Low, East::Low, West::None, South::None, false, true, ) => 18929,
                ( North::Low, East::Low, West::Low, South::None, false, true, ) => 18930,
                ( North::Low, East::Low, West::Tall, South::None, false, true, ) => 18931,
                ( North::Low, East::Low, West::None, South::None, false, false, ) => 18932,
                ( North::Low, East::Low, West::Low, South::None, false, false, ) => 18933,
                ( North::Low, East::Low, West::Tall, South::None, false, false, ) => 18934,
                ( North::Low, East::Low, West::None, South::Low, true, true, ) => 18935,
                ( North::Low, East::Low, West::Low, South::Low, true, true, ) => 18936,
                ( North::Low, East::Low, West::Tall, South::Low, true, true, ) => 18937,
                ( North::Low, East::Low, West::None, South::Low, true, false, ) => 18938,
                ( North::Low, East::Low, West::Low, South::Low, true, false, ) => 18939,
                ( North::Low, East::Low, West::Tall, South::Low, true, false, ) => 18940,
                ( North::Low, East::Low, West::None, South::Low, false, true, ) => 18941,
                ( North::Low, East::Low, West::Low, South::Low, false, true, ) => 18942,
                ( North::Low, East::Low, West::Tall, South::Low, false, true, ) => 18943,
                ( North::Low, East::Low, West::None, South::Low, false, false, ) => 18944,
                ( North::Low, East::Low, West::Low, South::Low, false, false, ) => 18945,
                ( North::Low, East::Low, West::Tall, South::Low, false, false, ) => 18946,
                ( North::Low, East::Low, West::None, South::Tall, true, true, ) => 18947,
                ( North::Low, East::Low, West::Low, South::Tall, true, true, ) => 18948,
                ( North::Low, East::Low, West::Tall, South::Tall, true, true, ) => 18949,
                ( North::Low, East::Low, West::None, South::Tall, true, false, ) => 18950,
                ( North::Low, East::Low, West::Low, South::Tall, true, false, ) => 18951,
                ( North::Low, East::Low, West::Tall, South::Tall, true, false, ) => 18952,
                ( North::Low, East::Low, West::None, South::Tall, false, true, ) => 18953,
                ( North::Low, East::Low, West::Low, South::Tall, false, true, ) => 18954,
                ( North::Low, East::Low, West::Tall, South::Tall, false, true, ) => 18955,
                ( North::Low, East::Low, West::None, South::Tall, false, false, ) => 18956,
                ( North::Low, East::Low, West::Low, South::Tall, false, false, ) => 18957,
                ( North::Low, East::Low, West::Tall, South::Tall, false, false, ) => 18958,
                ( North::Tall, East::Low, West::None, South::None, true, true, ) => 18959,
                ( North::Tall, East::Low, West::Low, South::None, true, true, ) => 18960,
                ( North::Tall, East::Low, West::Tall, South::None, true, true, ) => 18961,
                ( North::Tall, East::Low, West::None, South::None, true, false, ) => 18962,
                ( North::Tall, East::Low, West::Low, South::None, true, false, ) => 18963,
                ( North::Tall, East::Low, West::Tall, South::None, true, false, ) => 18964,
                ( North::Tall, East::Low, West::None, South::None, false, true, ) => 18965,
                ( North::Tall, East::Low, West::Low, South::None, false, true, ) => 18966,
                ( North::Tall, East::Low, West::Tall, South::None, false, true, ) => 18967,
                ( North::Tall, East::Low, West::None, South::None, false, false, ) => 18968,
                ( North::Tall, East::Low, West::Low, South::None, false, false, ) => 18969,
                ( North::Tall, East::Low, West::Tall, South::None, false, false, ) => 18970,
                ( North::Tall, East::Low, West::None, South::Low, true, true, ) => 18971,
                ( North::Tall, East::Low, West::Low, South::Low, true, true, ) => 18972,
                ( North::Tall, East::Low, West::Tall, South::Low, true, true, ) => 18973,
                ( North::Tall, East::Low, West::None, South::Low, true, false, ) => 18974,
                ( North::Tall, East::Low, West::Low, South::Low, true, false, ) => 18975,
                ( North::Tall, East::Low, West::Tall, South::Low, true, false, ) => 18976,
                ( North::Tall, East::Low, West::None, South::Low, false, true, ) => 18977,
                ( North::Tall, East::Low, West::Low, South::Low, false, true, ) => 18978,
                ( North::Tall, East::Low, West::Tall, South::Low, false, true, ) => 18979,
                ( North::Tall, East::Low, West::None, South::Low, false, false, ) => 18980,
                ( North::Tall, East::Low, West::Low, South::Low, false, false, ) => 18981,
                ( North::Tall, East::Low, West::Tall, South::Low, false, false, ) => 18982,
                ( North::Tall, East::Low, West::None, South::Tall, true, true, ) => 18983,
                ( North::Tall, East::Low, West::Low, South::Tall, true, true, ) => 18984,
                ( North::Tall, East::Low, West::Tall, South::Tall, true, true, ) => 18985,
                ( North::Tall, East::Low, West::None, South::Tall, true, false, ) => 18986,
                ( North::Tall, East::Low, West::Low, South::Tall, true, false, ) => 18987,
                ( North::Tall, East::Low, West::Tall, South::Tall, true, false, ) => 18988,
                ( North::Tall, East::Low, West::None, South::Tall, false, true, ) => 18989,
                ( North::Tall, East::Low, West::Low, South::Tall, false, true, ) => 18990,
                ( North::Tall, East::Low, West::Tall, South::Tall, false, true, ) => 18991,
                ( North::Tall, East::Low, West::None, South::Tall, false, false, ) => 18992,
                ( North::Tall, East::Low, West::Low, South::Tall, false, false, ) => 18993,
                ( North::Tall, East::Low, West::Tall, South::Tall, false, false, ) => 18994,
                ( North::None, East::Tall, West::None, South::None, true, true, ) => 18995,
                ( North::None, East::Tall, West::Low, South::None, true, true, ) => 18996,
                ( North::None, East::Tall, West::Tall, South::None, true, true, ) => 18997,
                ( North::None, East::Tall, West::None, South::None, true, false, ) => 18998,
                ( North::None, East::Tall, West::Low, South::None, true, false, ) => 18999,
                ( North::None, East::Tall, West::Tall, South::None, true, false, ) => 19000,
                ( North::None, East::Tall, West::None, South::None, false, true, ) => 19001,
                ( North::None, East::Tall, West::Low, South::None, false, true, ) => 19002,
                ( North::None, East::Tall, West::Tall, South::None, false, true, ) => 19003,
                ( North::None, East::Tall, West::None, South::None, false, false, ) => 19004,
                ( North::None, East::Tall, West::Low, South::None, false, false, ) => 19005,
                ( North::None, East::Tall, West::Tall, South::None, false, false, ) => 19006,
                ( North::None, East::Tall, West::None, South::Low, true, true, ) => 19007,
                ( North::None, East::Tall, West::Low, South::Low, true, true, ) => 19008,
                ( North::None, East::Tall, West::Tall, South::Low, true, true, ) => 19009,
                ( North::None, East::Tall, West::None, South::Low, true, false, ) => 19010,
                ( North::None, East::Tall, West::Low, South::Low, true, false, ) => 19011,
                ( North::None, East::Tall, West::Tall, South::Low, true, false, ) => 19012,
                ( North::None, East::Tall, West::None, South::Low, false, true, ) => 19013,
                ( North::None, East::Tall, West::Low, South::Low, false, true, ) => 19014,
                ( North::None, East::Tall, West::Tall, South::Low, false, true, ) => 19015,
                ( North::None, East::Tall, West::None, South::Low, false, false, ) => 19016,
                ( North::None, East::Tall, West::Low, South::Low, false, false, ) => 19017,
                ( North::None, East::Tall, West::Tall, South::Low, false, false, ) => 19018,
                ( North::None, East::Tall, West::None, South::Tall, true, true, ) => 19019,
                ( North::None, East::Tall, West::Low, South::Tall, true, true, ) => 19020,
                ( North::None, East::Tall, West::Tall, South::Tall, true, true, ) => 19021,
                ( North::None, East::Tall, West::None, South::Tall, true, false, ) => 19022,
                ( North::None, East::Tall, West::Low, South::Tall, true, false, ) => 19023,
                ( North::None, East::Tall, West::Tall, South::Tall, true, false, ) => 19024,
                ( North::None, East::Tall, West::None, South::Tall, false, true, ) => 19025,
                ( North::None, East::Tall, West::Low, South::Tall, false, true, ) => 19026,
                ( North::None, East::Tall, West::Tall, South::Tall, false, true, ) => 19027,
                ( North::None, East::Tall, West::None, South::Tall, false, false, ) => 19028,
                ( North::None, East::Tall, West::Low, South::Tall, false, false, ) => 19029,
                ( North::None, East::Tall, West::Tall, South::Tall, false, false, ) => 19030,
                ( North::Low, East::Tall, West::None, South::None, true, true, ) => 19031,
                ( North::Low, East::Tall, West::Low, South::None, true, true, ) => 19032,
                ( North::Low, East::Tall, West::Tall, South::None, true, true, ) => 19033,
                ( North::Low, East::Tall, West::None, South::None, true, false, ) => 19034,
                ( North::Low, East::Tall, West::Low, South::None, true, false, ) => 19035,
                ( North::Low, East::Tall, West::Tall, South::None, true, false, ) => 19036,
                ( North::Low, East::Tall, West::None, South::None, false, true, ) => 19037,
                ( North::Low, East::Tall, West::Low, South::None, false, true, ) => 19038,
                ( North::Low, East::Tall, West::Tall, South::None, false, true, ) => 19039,
                ( North::Low, East::Tall, West::None, South::None, false, false, ) => 19040,
                ( North::Low, East::Tall, West::Low, South::None, false, false, ) => 19041,
                ( North::Low, East::Tall, West::Tall, South::None, false, false, ) => 19042,
                ( North::Low, East::Tall, West::None, South::Low, true, true, ) => 19043,
                ( North::Low, East::Tall, West::Low, South::Low, true, true, ) => 19044,
                ( North::Low, East::Tall, West::Tall, South::Low, true, true, ) => 19045,
                ( North::Low, East::Tall, West::None, South::Low, true, false, ) => 19046,
                ( North::Low, East::Tall, West::Low, South::Low, true, false, ) => 19047,
                ( North::Low, East::Tall, West::Tall, South::Low, true, false, ) => 19048,
                ( North::Low, East::Tall, West::None, South::Low, false, true, ) => 19049,
                ( North::Low, East::Tall, West::Low, South::Low, false, true, ) => 19050,
                ( North::Low, East::Tall, West::Tall, South::Low, false, true, ) => 19051,
                ( North::Low, East::Tall, West::None, South::Low, false, false, ) => 19052,
                ( North::Low, East::Tall, West::Low, South::Low, false, false, ) => 19053,
                ( North::Low, East::Tall, West::Tall, South::Low, false, false, ) => 19054,
                ( North::Low, East::Tall, West::None, South::Tall, true, true, ) => 19055,
                ( North::Low, East::Tall, West::Low, South::Tall, true, true, ) => 19056,
                ( North::Low, East::Tall, West::Tall, South::Tall, true, true, ) => 19057,
                ( North::Low, East::Tall, West::None, South::Tall, true, false, ) => 19058,
                ( North::Low, East::Tall, West::Low, South::Tall, true, false, ) => 19059,
                ( North::Low, East::Tall, West::Tall, South::Tall, true, false, ) => 19060,
                ( North::Low, East::Tall, West::None, South::Tall, false, true, ) => 19061,
                ( North::Low, East::Tall, West::Low, South::Tall, false, true, ) => 19062,
                ( North::Low, East::Tall, West::Tall, South::Tall, false, true, ) => 19063,
                ( North::Low, East::Tall, West::None, South::Tall, false, false, ) => 19064,
                ( North::Low, East::Tall, West::Low, South::Tall, false, false, ) => 19065,
                ( North::Low, East::Tall, West::Tall, South::Tall, false, false, ) => 19066,
                ( North::Tall, East::Tall, West::None, South::None, true, true, ) => 19067,
                ( North::Tall, East::Tall, West::Low, South::None, true, true, ) => 19068,
                ( North::Tall, East::Tall, West::Tall, South::None, true, true, ) => 19069,
                ( North::Tall, East::Tall, West::None, South::None, true, false, ) => 19070,
                ( North::Tall, East::Tall, West::Low, South::None, true, false, ) => 19071,
                ( North::Tall, East::Tall, West::Tall, South::None, true, false, ) => 19072,
                ( North::Tall, East::Tall, West::None, South::None, false, true, ) => 19073,
                ( North::Tall, East::Tall, West::Low, South::None, false, true, ) => 19074,
                ( North::Tall, East::Tall, West::Tall, South::None, false, true, ) => 19075,
                ( North::Tall, East::Tall, West::None, South::None, false, false, ) => 19076,
                ( North::Tall, East::Tall, West::Low, South::None, false, false, ) => 19077,
                ( North::Tall, East::Tall, West::Tall, South::None, false, false, ) => 19078,
                ( North::Tall, East::Tall, West::None, South::Low, true, true, ) => 19079,
                ( North::Tall, East::Tall, West::Low, South::Low, true, true, ) => 19080,
                ( North::Tall, East::Tall, West::Tall, South::Low, true, true, ) => 19081,
                ( North::Tall, East::Tall, West::None, South::Low, true, false, ) => 19082,
                ( North::Tall, East::Tall, West::Low, South::Low, true, false, ) => 19083,
                ( North::Tall, East::Tall, West::Tall, South::Low, true, false, ) => 19084,
                ( North::Tall, East::Tall, West::None, South::Low, false, true, ) => 19085,
                ( North::Tall, East::Tall, West::Low, South::Low, false, true, ) => 19086,
                ( North::Tall, East::Tall, West::Tall, South::Low, false, true, ) => 19087,
                ( North::Tall, East::Tall, West::None, South::Low, false, false, ) => 19088,
                ( North::Tall, East::Tall, West::Low, South::Low, false, false, ) => 19089,
                ( North::Tall, East::Tall, West::Tall, South::Low, false, false, ) => 19090,
                ( North::Tall, East::Tall, West::None, South::Tall, true, true, ) => 19091,
                ( North::Tall, East::Tall, West::Low, South::Tall, true, true, ) => 19092,
                ( North::Tall, East::Tall, West::Tall, South::Tall, true, true, ) => 19093,
                ( North::Tall, East::Tall, West::None, South::Tall, true, false, ) => 19094,
                ( North::Tall, East::Tall, West::Low, South::Tall, true, false, ) => 19095,
                ( North::Tall, East::Tall, West::Tall, South::Tall, true, false, ) => 19096,
                ( North::Tall, East::Tall, West::None, South::Tall, false, true, ) => 19097,
                ( North::Tall, East::Tall, West::Low, South::Tall, false, true, ) => 19098,
                ( North::Tall, East::Tall, West::Tall, South::Tall, false, true, ) => 19099,
                ( North::Tall, East::Tall, West::None, South::Tall, false, false, ) => 19100,
                ( North::Tall, East::Tall, West::Low, South::Tall, false, false, ) => 19101,
                ( North::Tall, East::Tall, West::Tall, South::Tall, false, false, ) => 19102,
            })
        }
    }

    impl From<EndStoneBrickWall> for BlockState {
        #[inline(always)]
        fn from(value : EndStoneBrickWall) -> Self {
            value.to_block_state()
        }
    }

    impl Default for EndStoneBrickWall {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for EndStoneBrickWall { }

    impl Block for EndStoneBrickWall {
        const DEFAULT_STATE : Self = Self {
            north : North::None,
            east : East::None,
            west : West::None,
            south : South::None,
            up : true,
            waterlogged : false,
        };
    }

}

/// `minecraft:cracked_stone_bricks` block.
pub mod cracked_stone_bricks {
    use super::*;

    /// `minecraft:cracked_stone_bricks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CrackedStoneBricks;

    impl CrackedStoneBricks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(6782)
        }
    }

    impl From<CrackedStoneBricks> for BlockState {
        #[inline(always)]
        fn from(value : CrackedStoneBricks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CrackedStoneBricks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CrackedStoneBricks { }

    impl Block for CrackedStoneBricks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:orange_terracotta` block.
pub mod orange_terracotta {
    use super::*;

    /// `minecraft:orange_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OrangeTerracotta;

    impl OrangeTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10166)
        }
    }

    impl From<OrangeTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : OrangeTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OrangeTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OrangeTerracotta { }

    impl Block for OrangeTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:mossy_stone_brick_slab` block.
pub mod mossy_stone_brick_slab {
    use super::*;

    /// `minecraft:mossy_stone_brick_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MossyStoneBrickSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl MossyStoneBrickSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 15149,
                ( Kind::Top, false, ) => 15150,
                ( Kind::Bottom, true, ) => 15151,
                ( Kind::Bottom, false, ) => 15152,
                ( Kind::Double, true, ) => 15153,
                ( Kind::Double, false, ) => 15154,
            })
        }
    }

    impl From<MossyStoneBrickSlab> for BlockState {
        #[inline(always)]
        fn from(value : MossyStoneBrickSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MossyStoneBrickSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MossyStoneBrickSlab { }

    impl Block for MossyStoneBrickSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:reinforced_deepslate` block.
pub mod reinforced_deepslate {
    use super::*;

    /// `minecraft:reinforced_deepslate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ReinforcedDeepslate;

    impl ReinforcedDeepslate {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27665)
        }
    }

    impl From<ReinforcedDeepslate> for BlockState {
        #[inline(always)]
        fn from(value : ReinforcedDeepslate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ReinforcedDeepslate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ReinforcedDeepslate { }

    impl Block for ReinforcedDeepslate {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:dark_oak_pressure_plate` block.
pub mod dark_oak_pressure_plate {
    use super::*;

    /// `minecraft:dark_oak_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkOakPressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl DarkOakPressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 5904,
                ( false, ) => 5905,
            })
        }
    }

    impl From<DarkOakPressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : DarkOakPressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkOakPressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkOakPressurePlate { }

    impl Block for DarkOakPressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:cobbled_deepslate` block.
pub mod cobbled_deepslate {
    use super::*;

    /// `minecraft:cobbled_deepslate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CobbledDeepslate;

    impl CobbledDeepslate {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(25999)
        }
    }

    impl From<CobbledDeepslate> for BlockState {
        #[inline(always)]
        fn from(value : CobbledDeepslate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CobbledDeepslate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CobbledDeepslate { }

    impl Block for CobbledDeepslate {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:birch_fence_gate` block.
pub mod birch_fence_gate {
    use super::*;

    /// `minecraft:birch_fence_gate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BirchFenceGate {
        /// `in_wall` state.
        pub in_wall : bool,
        /// `powered` state.
        pub powered : bool,
        /// `open` state.
        pub open : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl BirchFenceGate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.in_wall, self.powered, self.open, self.facing, )) {
                ( true, true, true, Facing::North, ) => 12237,
                ( true, false, true, Facing::North, ) => 12238,
                ( true, true, false, Facing::North, ) => 12239,
                ( true, false, false, Facing::North, ) => 12240,
                ( false, true, true, Facing::North, ) => 12241,
                ( false, false, true, Facing::North, ) => 12242,
                ( false, true, false, Facing::North, ) => 12243,
                ( false, false, false, Facing::North, ) => 12244,
                ( true, true, true, Facing::South, ) => 12245,
                ( true, false, true, Facing::South, ) => 12246,
                ( true, true, false, Facing::South, ) => 12247,
                ( true, false, false, Facing::South, ) => 12248,
                ( false, true, true, Facing::South, ) => 12249,
                ( false, false, true, Facing::South, ) => 12250,
                ( false, true, false, Facing::South, ) => 12251,
                ( false, false, false, Facing::South, ) => 12252,
                ( true, true, true, Facing::West, ) => 12253,
                ( true, false, true, Facing::West, ) => 12254,
                ( true, true, false, Facing::West, ) => 12255,
                ( true, false, false, Facing::West, ) => 12256,
                ( false, true, true, Facing::West, ) => 12257,
                ( false, false, true, Facing::West, ) => 12258,
                ( false, true, false, Facing::West, ) => 12259,
                ( false, false, false, Facing::West, ) => 12260,
                ( true, true, true, Facing::East, ) => 12261,
                ( true, false, true, Facing::East, ) => 12262,
                ( true, true, false, Facing::East, ) => 12263,
                ( true, false, false, Facing::East, ) => 12264,
                ( false, true, true, Facing::East, ) => 12265,
                ( false, false, true, Facing::East, ) => 12266,
                ( false, true, false, Facing::East, ) => 12267,
                ( false, false, false, Facing::East, ) => 12268,
            })
        }
    }

    impl From<BirchFenceGate> for BlockState {
        #[inline(always)]
        fn from(value : BirchFenceGate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BirchFenceGate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BirchFenceGate { }

    impl Block for BirchFenceGate {
        const DEFAULT_STATE : Self = Self {
            in_wall : false,
            powered : false,
            open : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:lime_banner` block.
pub mod lime_banner {
    use super::*;

    /// `minecraft:lime_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LimeBanner {
        /// `rotation` state.
        pub rotation : Rotation,
    }

    /// `rotation` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Rotation {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Rotation { }
    impl BlockProperty for Rotation { }

    impl LimeBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.rotation, )) {
                ( Rotation::N0, ) => 11728,
                ( Rotation::N1, ) => 11729,
                ( Rotation::N2, ) => 11730,
                ( Rotation::N3, ) => 11731,
                ( Rotation::N4, ) => 11732,
                ( Rotation::N5, ) => 11733,
                ( Rotation::N6, ) => 11734,
                ( Rotation::N7, ) => 11735,
                ( Rotation::N8, ) => 11736,
                ( Rotation::N9, ) => 11737,
                ( Rotation::N10, ) => 11738,
                ( Rotation::N11, ) => 11739,
                ( Rotation::N12, ) => 11740,
                ( Rotation::N13, ) => 11741,
                ( Rotation::N14, ) => 11742,
                ( Rotation::N15, ) => 11743,
            })
        }
    }

    impl From<LimeBanner> for BlockState {
        #[inline(always)]
        fn from(value : LimeBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LimeBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LimeBanner { }

    impl Block for LimeBanner {
        const DEFAULT_STATE : Self = Self {
            rotation : Rotation::N0,
        };
    }

}

/// `minecraft:warped_fungus` block.
pub mod warped_fungus {
    use super::*;

    /// `minecraft:warped_fungus` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedFungus;

    impl WarpedFungus {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19647)
        }
    }

    impl From<WarpedFungus> for BlockState {
        #[inline(always)]
        fn from(value : WarpedFungus) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedFungus {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedFungus { }

    impl Block for WarpedFungus {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:polished_andesite` block.
pub mod polished_andesite {
    use super::*;

    /// `minecraft:polished_andesite` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedAndesite;

    impl PolishedAndesite {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(7)
        }
    }

    impl From<PolishedAndesite> for BlockState {
        #[inline(always)]
        fn from(value : PolishedAndesite) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedAndesite {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedAndesite { }

    impl Block for PolishedAndesite {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_oxidized_cut_copper_stairs` block.
pub mod waxed_oxidized_cut_copper_stairs {
    use super::*;

    /// `minecraft:waxed_oxidized_cut_copper_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedOxidizedCutCopperStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl WaxedOxidizedCutCopperStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, self.shape, self.half, )) {
                ( true, Facing::North, Shape::Straight, Half::Top, ) => 24368,
                ( false, Facing::North, Shape::Straight, Half::Top, ) => 24369,
                ( true, Facing::North, Shape::InnerLeft, Half::Top, ) => 24370,
                ( false, Facing::North, Shape::InnerLeft, Half::Top, ) => 24371,
                ( true, Facing::North, Shape::InnerRight, Half::Top, ) => 24372,
                ( false, Facing::North, Shape::InnerRight, Half::Top, ) => 24373,
                ( true, Facing::North, Shape::OuterLeft, Half::Top, ) => 24374,
                ( false, Facing::North, Shape::OuterLeft, Half::Top, ) => 24375,
                ( true, Facing::North, Shape::OuterRight, Half::Top, ) => 24376,
                ( false, Facing::North, Shape::OuterRight, Half::Top, ) => 24377,
                ( true, Facing::North, Shape::Straight, Half::Bottom, ) => 24378,
                ( false, Facing::North, Shape::Straight, Half::Bottom, ) => 24379,
                ( true, Facing::North, Shape::InnerLeft, Half::Bottom, ) => 24380,
                ( false, Facing::North, Shape::InnerLeft, Half::Bottom, ) => 24381,
                ( true, Facing::North, Shape::InnerRight, Half::Bottom, ) => 24382,
                ( false, Facing::North, Shape::InnerRight, Half::Bottom, ) => 24383,
                ( true, Facing::North, Shape::OuterLeft, Half::Bottom, ) => 24384,
                ( false, Facing::North, Shape::OuterLeft, Half::Bottom, ) => 24385,
                ( true, Facing::North, Shape::OuterRight, Half::Bottom, ) => 24386,
                ( false, Facing::North, Shape::OuterRight, Half::Bottom, ) => 24387,
                ( true, Facing::South, Shape::Straight, Half::Top, ) => 24388,
                ( false, Facing::South, Shape::Straight, Half::Top, ) => 24389,
                ( true, Facing::South, Shape::InnerLeft, Half::Top, ) => 24390,
                ( false, Facing::South, Shape::InnerLeft, Half::Top, ) => 24391,
                ( true, Facing::South, Shape::InnerRight, Half::Top, ) => 24392,
                ( false, Facing::South, Shape::InnerRight, Half::Top, ) => 24393,
                ( true, Facing::South, Shape::OuterLeft, Half::Top, ) => 24394,
                ( false, Facing::South, Shape::OuterLeft, Half::Top, ) => 24395,
                ( true, Facing::South, Shape::OuterRight, Half::Top, ) => 24396,
                ( false, Facing::South, Shape::OuterRight, Half::Top, ) => 24397,
                ( true, Facing::South, Shape::Straight, Half::Bottom, ) => 24398,
                ( false, Facing::South, Shape::Straight, Half::Bottom, ) => 24399,
                ( true, Facing::South, Shape::InnerLeft, Half::Bottom, ) => 24400,
                ( false, Facing::South, Shape::InnerLeft, Half::Bottom, ) => 24401,
                ( true, Facing::South, Shape::InnerRight, Half::Bottom, ) => 24402,
                ( false, Facing::South, Shape::InnerRight, Half::Bottom, ) => 24403,
                ( true, Facing::South, Shape::OuterLeft, Half::Bottom, ) => 24404,
                ( false, Facing::South, Shape::OuterLeft, Half::Bottom, ) => 24405,
                ( true, Facing::South, Shape::OuterRight, Half::Bottom, ) => 24406,
                ( false, Facing::South, Shape::OuterRight, Half::Bottom, ) => 24407,
                ( true, Facing::West, Shape::Straight, Half::Top, ) => 24408,
                ( false, Facing::West, Shape::Straight, Half::Top, ) => 24409,
                ( true, Facing::West, Shape::InnerLeft, Half::Top, ) => 24410,
                ( false, Facing::West, Shape::InnerLeft, Half::Top, ) => 24411,
                ( true, Facing::West, Shape::InnerRight, Half::Top, ) => 24412,
                ( false, Facing::West, Shape::InnerRight, Half::Top, ) => 24413,
                ( true, Facing::West, Shape::OuterLeft, Half::Top, ) => 24414,
                ( false, Facing::West, Shape::OuterLeft, Half::Top, ) => 24415,
                ( true, Facing::West, Shape::OuterRight, Half::Top, ) => 24416,
                ( false, Facing::West, Shape::OuterRight, Half::Top, ) => 24417,
                ( true, Facing::West, Shape::Straight, Half::Bottom, ) => 24418,
                ( false, Facing::West, Shape::Straight, Half::Bottom, ) => 24419,
                ( true, Facing::West, Shape::InnerLeft, Half::Bottom, ) => 24420,
                ( false, Facing::West, Shape::InnerLeft, Half::Bottom, ) => 24421,
                ( true, Facing::West, Shape::InnerRight, Half::Bottom, ) => 24422,
                ( false, Facing::West, Shape::InnerRight, Half::Bottom, ) => 24423,
                ( true, Facing::West, Shape::OuterLeft, Half::Bottom, ) => 24424,
                ( false, Facing::West, Shape::OuterLeft, Half::Bottom, ) => 24425,
                ( true, Facing::West, Shape::OuterRight, Half::Bottom, ) => 24426,
                ( false, Facing::West, Shape::OuterRight, Half::Bottom, ) => 24427,
                ( true, Facing::East, Shape::Straight, Half::Top, ) => 24428,
                ( false, Facing::East, Shape::Straight, Half::Top, ) => 24429,
                ( true, Facing::East, Shape::InnerLeft, Half::Top, ) => 24430,
                ( false, Facing::East, Shape::InnerLeft, Half::Top, ) => 24431,
                ( true, Facing::East, Shape::InnerRight, Half::Top, ) => 24432,
                ( false, Facing::East, Shape::InnerRight, Half::Top, ) => 24433,
                ( true, Facing::East, Shape::OuterLeft, Half::Top, ) => 24434,
                ( false, Facing::East, Shape::OuterLeft, Half::Top, ) => 24435,
                ( true, Facing::East, Shape::OuterRight, Half::Top, ) => 24436,
                ( false, Facing::East, Shape::OuterRight, Half::Top, ) => 24437,
                ( true, Facing::East, Shape::Straight, Half::Bottom, ) => 24438,
                ( false, Facing::East, Shape::Straight, Half::Bottom, ) => 24439,
                ( true, Facing::East, Shape::InnerLeft, Half::Bottom, ) => 24440,
                ( false, Facing::East, Shape::InnerLeft, Half::Bottom, ) => 24441,
                ( true, Facing::East, Shape::InnerRight, Half::Bottom, ) => 24442,
                ( false, Facing::East, Shape::InnerRight, Half::Bottom, ) => 24443,
                ( true, Facing::East, Shape::OuterLeft, Half::Bottom, ) => 24444,
                ( false, Facing::East, Shape::OuterLeft, Half::Bottom, ) => 24445,
                ( true, Facing::East, Shape::OuterRight, Half::Bottom, ) => 24446,
                ( false, Facing::East, Shape::OuterRight, Half::Bottom, ) => 24447,
            })
        }
    }

    impl From<WaxedOxidizedCutCopperStairs> for BlockState {
        #[inline(always)]
        fn from(value : WaxedOxidizedCutCopperStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedOxidizedCutCopperStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedOxidizedCutCopperStairs { }

    impl Block for WaxedOxidizedCutCopperStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
            shape : Shape::Straight,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:polished_andesite_slab` block.
pub mod polished_andesite_slab {
    use super::*;

    /// `minecraft:polished_andesite_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PolishedAndesiteSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl PolishedAndesiteSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 15203,
                ( Kind::Top, false, ) => 15204,
                ( Kind::Bottom, true, ) => 15205,
                ( Kind::Bottom, false, ) => 15206,
                ( Kind::Double, true, ) => 15207,
                ( Kind::Double, false, ) => 15208,
            })
        }
    }

    impl From<PolishedAndesiteSlab> for BlockState {
        #[inline(always)]
        fn from(value : PolishedAndesiteSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PolishedAndesiteSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PolishedAndesiteSlab { }

    impl Block for PolishedAndesiteSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:weathered_copper_door` block.
pub mod weathered_copper_door {
    use super::*;

    /// `minecraft:weathered_copper_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WeatheredCopperDoor {
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `hinge` state.
        pub hinge : Hinge,
        /// `open` state.
        pub open : bool,
        /// `powered` state.
        pub powered : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    impl WeatheredCopperDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.facing, self.hinge, self.open, self.powered, )) {
                ( Half::Upper, Facing::North, Hinge::Left, true, true, ) => 24904,
                ( Half::Upper, Facing::North, Hinge::Left, true, false, ) => 24905,
                ( Half::Upper, Facing::North, Hinge::Left, false, true, ) => 24906,
                ( Half::Upper, Facing::North, Hinge::Left, false, false, ) => 24907,
                ( Half::Upper, Facing::North, Hinge::Right, true, true, ) => 24908,
                ( Half::Upper, Facing::North, Hinge::Right, true, false, ) => 24909,
                ( Half::Upper, Facing::North, Hinge::Right, false, true, ) => 24910,
                ( Half::Upper, Facing::North, Hinge::Right, false, false, ) => 24911,
                ( Half::Lower, Facing::North, Hinge::Left, true, true, ) => 24912,
                ( Half::Lower, Facing::North, Hinge::Left, true, false, ) => 24913,
                ( Half::Lower, Facing::North, Hinge::Left, false, true, ) => 24914,
                ( Half::Lower, Facing::North, Hinge::Left, false, false, ) => 24915,
                ( Half::Lower, Facing::North, Hinge::Right, true, true, ) => 24916,
                ( Half::Lower, Facing::North, Hinge::Right, true, false, ) => 24917,
                ( Half::Lower, Facing::North, Hinge::Right, false, true, ) => 24918,
                ( Half::Lower, Facing::North, Hinge::Right, false, false, ) => 24919,
                ( Half::Upper, Facing::South, Hinge::Left, true, true, ) => 24920,
                ( Half::Upper, Facing::South, Hinge::Left, true, false, ) => 24921,
                ( Half::Upper, Facing::South, Hinge::Left, false, true, ) => 24922,
                ( Half::Upper, Facing::South, Hinge::Left, false, false, ) => 24923,
                ( Half::Upper, Facing::South, Hinge::Right, true, true, ) => 24924,
                ( Half::Upper, Facing::South, Hinge::Right, true, false, ) => 24925,
                ( Half::Upper, Facing::South, Hinge::Right, false, true, ) => 24926,
                ( Half::Upper, Facing::South, Hinge::Right, false, false, ) => 24927,
                ( Half::Lower, Facing::South, Hinge::Left, true, true, ) => 24928,
                ( Half::Lower, Facing::South, Hinge::Left, true, false, ) => 24929,
                ( Half::Lower, Facing::South, Hinge::Left, false, true, ) => 24930,
                ( Half::Lower, Facing::South, Hinge::Left, false, false, ) => 24931,
                ( Half::Lower, Facing::South, Hinge::Right, true, true, ) => 24932,
                ( Half::Lower, Facing::South, Hinge::Right, true, false, ) => 24933,
                ( Half::Lower, Facing::South, Hinge::Right, false, true, ) => 24934,
                ( Half::Lower, Facing::South, Hinge::Right, false, false, ) => 24935,
                ( Half::Upper, Facing::West, Hinge::Left, true, true, ) => 24936,
                ( Half::Upper, Facing::West, Hinge::Left, true, false, ) => 24937,
                ( Half::Upper, Facing::West, Hinge::Left, false, true, ) => 24938,
                ( Half::Upper, Facing::West, Hinge::Left, false, false, ) => 24939,
                ( Half::Upper, Facing::West, Hinge::Right, true, true, ) => 24940,
                ( Half::Upper, Facing::West, Hinge::Right, true, false, ) => 24941,
                ( Half::Upper, Facing::West, Hinge::Right, false, true, ) => 24942,
                ( Half::Upper, Facing::West, Hinge::Right, false, false, ) => 24943,
                ( Half::Lower, Facing::West, Hinge::Left, true, true, ) => 24944,
                ( Half::Lower, Facing::West, Hinge::Left, true, false, ) => 24945,
                ( Half::Lower, Facing::West, Hinge::Left, false, true, ) => 24946,
                ( Half::Lower, Facing::West, Hinge::Left, false, false, ) => 24947,
                ( Half::Lower, Facing::West, Hinge::Right, true, true, ) => 24948,
                ( Half::Lower, Facing::West, Hinge::Right, true, false, ) => 24949,
                ( Half::Lower, Facing::West, Hinge::Right, false, true, ) => 24950,
                ( Half::Lower, Facing::West, Hinge::Right, false, false, ) => 24951,
                ( Half::Upper, Facing::East, Hinge::Left, true, true, ) => 24952,
                ( Half::Upper, Facing::East, Hinge::Left, true, false, ) => 24953,
                ( Half::Upper, Facing::East, Hinge::Left, false, true, ) => 24954,
                ( Half::Upper, Facing::East, Hinge::Left, false, false, ) => 24955,
                ( Half::Upper, Facing::East, Hinge::Right, true, true, ) => 24956,
                ( Half::Upper, Facing::East, Hinge::Right, true, false, ) => 24957,
                ( Half::Upper, Facing::East, Hinge::Right, false, true, ) => 24958,
                ( Half::Upper, Facing::East, Hinge::Right, false, false, ) => 24959,
                ( Half::Lower, Facing::East, Hinge::Left, true, true, ) => 24960,
                ( Half::Lower, Facing::East, Hinge::Left, true, false, ) => 24961,
                ( Half::Lower, Facing::East, Hinge::Left, false, true, ) => 24962,
                ( Half::Lower, Facing::East, Hinge::Left, false, false, ) => 24963,
                ( Half::Lower, Facing::East, Hinge::Right, true, true, ) => 24964,
                ( Half::Lower, Facing::East, Hinge::Right, true, false, ) => 24965,
                ( Half::Lower, Facing::East, Hinge::Right, false, true, ) => 24966,
                ( Half::Lower, Facing::East, Hinge::Right, false, false, ) => 24967,
            })
        }
    }

    impl From<WeatheredCopperDoor> for BlockState {
        #[inline(always)]
        fn from(value : WeatheredCopperDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WeatheredCopperDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WeatheredCopperDoor { }

    impl Block for WeatheredCopperDoor {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
            facing : Facing::North,
            hinge : Hinge::Left,
            open : false,
            powered : false,
        };
    }

}

/// `minecraft:white_concrete_powder` block.
pub mod white_concrete_powder {
    use super::*;

    /// `minecraft:white_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WhiteConcretePowder;

    impl WhiteConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13767)
        }
    }

    impl From<WhiteConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : WhiteConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WhiteConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WhiteConcretePowder { }

    impl Block for WhiteConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:magenta_wool` block.
pub mod magenta_wool {
    use super::*;

    /// `minecraft:magenta_wool` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct MagentaWool;

    impl MagentaWool {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2095)
        }
    }

    impl From<MagentaWool> for BlockState {
        #[inline(always)]
        fn from(value : MagentaWool) -> Self {
            value.to_block_state()
        }
    }

    impl Default for MagentaWool {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for MagentaWool { }

    impl Block for MagentaWool {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:fire_coral_fan` block.
pub mod fire_coral_fan {
    use super::*;

    /// `minecraft:fire_coral_fan` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct FireCoralFan {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl FireCoralFan {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13904,
                ( false, ) => 13905,
            })
        }
    }

    impl From<FireCoralFan> for BlockState {
        #[inline(always)]
        fn from(value : FireCoralFan) -> Self {
            value.to_block_state()
        }
    }

    impl Default for FireCoralFan {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for FireCoralFan { }

    impl Block for FireCoralFan {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:deepslate_tile_stairs` block.
pub mod deepslate_tile_stairs {
    use super::*;

    /// `minecraft:deepslate_tile_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateTileStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
        /// `shape` state.
        pub shape : Shape,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    impl DeepslateTileStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, self.half, self.shape, )) {
                ( true, Facing::North, Half::Top, Shape::Straight, ) => 26822,
                ( false, Facing::North, Half::Top, Shape::Straight, ) => 26823,
                ( true, Facing::North, Half::Top, Shape::InnerLeft, ) => 26824,
                ( false, Facing::North, Half::Top, Shape::InnerLeft, ) => 26825,
                ( true, Facing::North, Half::Top, Shape::InnerRight, ) => 26826,
                ( false, Facing::North, Half::Top, Shape::InnerRight, ) => 26827,
                ( true, Facing::North, Half::Top, Shape::OuterLeft, ) => 26828,
                ( false, Facing::North, Half::Top, Shape::OuterLeft, ) => 26829,
                ( true, Facing::North, Half::Top, Shape::OuterRight, ) => 26830,
                ( false, Facing::North, Half::Top, Shape::OuterRight, ) => 26831,
                ( true, Facing::North, Half::Bottom, Shape::Straight, ) => 26832,
                ( false, Facing::North, Half::Bottom, Shape::Straight, ) => 26833,
                ( true, Facing::North, Half::Bottom, Shape::InnerLeft, ) => 26834,
                ( false, Facing::North, Half::Bottom, Shape::InnerLeft, ) => 26835,
                ( true, Facing::North, Half::Bottom, Shape::InnerRight, ) => 26836,
                ( false, Facing::North, Half::Bottom, Shape::InnerRight, ) => 26837,
                ( true, Facing::North, Half::Bottom, Shape::OuterLeft, ) => 26838,
                ( false, Facing::North, Half::Bottom, Shape::OuterLeft, ) => 26839,
                ( true, Facing::North, Half::Bottom, Shape::OuterRight, ) => 26840,
                ( false, Facing::North, Half::Bottom, Shape::OuterRight, ) => 26841,
                ( true, Facing::South, Half::Top, Shape::Straight, ) => 26842,
                ( false, Facing::South, Half::Top, Shape::Straight, ) => 26843,
                ( true, Facing::South, Half::Top, Shape::InnerLeft, ) => 26844,
                ( false, Facing::South, Half::Top, Shape::InnerLeft, ) => 26845,
                ( true, Facing::South, Half::Top, Shape::InnerRight, ) => 26846,
                ( false, Facing::South, Half::Top, Shape::InnerRight, ) => 26847,
                ( true, Facing::South, Half::Top, Shape::OuterLeft, ) => 26848,
                ( false, Facing::South, Half::Top, Shape::OuterLeft, ) => 26849,
                ( true, Facing::South, Half::Top, Shape::OuterRight, ) => 26850,
                ( false, Facing::South, Half::Top, Shape::OuterRight, ) => 26851,
                ( true, Facing::South, Half::Bottom, Shape::Straight, ) => 26852,
                ( false, Facing::South, Half::Bottom, Shape::Straight, ) => 26853,
                ( true, Facing::South, Half::Bottom, Shape::InnerLeft, ) => 26854,
                ( false, Facing::South, Half::Bottom, Shape::InnerLeft, ) => 26855,
                ( true, Facing::South, Half::Bottom, Shape::InnerRight, ) => 26856,
                ( false, Facing::South, Half::Bottom, Shape::InnerRight, ) => 26857,
                ( true, Facing::South, Half::Bottom, Shape::OuterLeft, ) => 26858,
                ( false, Facing::South, Half::Bottom, Shape::OuterLeft, ) => 26859,
                ( true, Facing::South, Half::Bottom, Shape::OuterRight, ) => 26860,
                ( false, Facing::South, Half::Bottom, Shape::OuterRight, ) => 26861,
                ( true, Facing::West, Half::Top, Shape::Straight, ) => 26862,
                ( false, Facing::West, Half::Top, Shape::Straight, ) => 26863,
                ( true, Facing::West, Half::Top, Shape::InnerLeft, ) => 26864,
                ( false, Facing::West, Half::Top, Shape::InnerLeft, ) => 26865,
                ( true, Facing::West, Half::Top, Shape::InnerRight, ) => 26866,
                ( false, Facing::West, Half::Top, Shape::InnerRight, ) => 26867,
                ( true, Facing::West, Half::Top, Shape::OuterLeft, ) => 26868,
                ( false, Facing::West, Half::Top, Shape::OuterLeft, ) => 26869,
                ( true, Facing::West, Half::Top, Shape::OuterRight, ) => 26870,
                ( false, Facing::West, Half::Top, Shape::OuterRight, ) => 26871,
                ( true, Facing::West, Half::Bottom, Shape::Straight, ) => 26872,
                ( false, Facing::West, Half::Bottom, Shape::Straight, ) => 26873,
                ( true, Facing::West, Half::Bottom, Shape::InnerLeft, ) => 26874,
                ( false, Facing::West, Half::Bottom, Shape::InnerLeft, ) => 26875,
                ( true, Facing::West, Half::Bottom, Shape::InnerRight, ) => 26876,
                ( false, Facing::West, Half::Bottom, Shape::InnerRight, ) => 26877,
                ( true, Facing::West, Half::Bottom, Shape::OuterLeft, ) => 26878,
                ( false, Facing::West, Half::Bottom, Shape::OuterLeft, ) => 26879,
                ( true, Facing::West, Half::Bottom, Shape::OuterRight, ) => 26880,
                ( false, Facing::West, Half::Bottom, Shape::OuterRight, ) => 26881,
                ( true, Facing::East, Half::Top, Shape::Straight, ) => 26882,
                ( false, Facing::East, Half::Top, Shape::Straight, ) => 26883,
                ( true, Facing::East, Half::Top, Shape::InnerLeft, ) => 26884,
                ( false, Facing::East, Half::Top, Shape::InnerLeft, ) => 26885,
                ( true, Facing::East, Half::Top, Shape::InnerRight, ) => 26886,
                ( false, Facing::East, Half::Top, Shape::InnerRight, ) => 26887,
                ( true, Facing::East, Half::Top, Shape::OuterLeft, ) => 26888,
                ( false, Facing::East, Half::Top, Shape::OuterLeft, ) => 26889,
                ( true, Facing::East, Half::Top, Shape::OuterRight, ) => 26890,
                ( false, Facing::East, Half::Top, Shape::OuterRight, ) => 26891,
                ( true, Facing::East, Half::Bottom, Shape::Straight, ) => 26892,
                ( false, Facing::East, Half::Bottom, Shape::Straight, ) => 26893,
                ( true, Facing::East, Half::Bottom, Shape::InnerLeft, ) => 26894,
                ( false, Facing::East, Half::Bottom, Shape::InnerLeft, ) => 26895,
                ( true, Facing::East, Half::Bottom, Shape::InnerRight, ) => 26896,
                ( false, Facing::East, Half::Bottom, Shape::InnerRight, ) => 26897,
                ( true, Facing::East, Half::Bottom, Shape::OuterLeft, ) => 26898,
                ( false, Facing::East, Half::Bottom, Shape::OuterLeft, ) => 26899,
                ( true, Facing::East, Half::Bottom, Shape::OuterRight, ) => 26900,
                ( false, Facing::East, Half::Bottom, Shape::OuterRight, ) => 26901,
            })
        }
    }

    impl From<DeepslateTileStairs> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateTileStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateTileStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateTileStairs { }

    impl Block for DeepslateTileStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
            half : Half::Bottom,
            shape : Shape::Straight,
        };
    }

}

/// `minecraft:grindstone` block.
pub mod grindstone {
    use super::*;

    /// `minecraft:grindstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Grindstone {
        /// `facing` state.
        pub facing : Facing,
        /// `face` state.
        pub face : Face,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `face` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Face {
        /// `floor` variant.
        Floor,
        /// `wall` variant.
        Wall,
        /// `ceiling` variant.
        Ceiling,
    }
    impl crate::Sealed for Face { }
    impl BlockProperty for Face { }

    impl Grindstone {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.face, )) {
                ( Facing::North, Face::Floor, ) => 19493,
                ( Facing::South, Face::Floor, ) => 19494,
                ( Facing::West, Face::Floor, ) => 19495,
                ( Facing::East, Face::Floor, ) => 19496,
                ( Facing::North, Face::Wall, ) => 19497,
                ( Facing::South, Face::Wall, ) => 19498,
                ( Facing::West, Face::Wall, ) => 19499,
                ( Facing::East, Face::Wall, ) => 19500,
                ( Facing::North, Face::Ceiling, ) => 19501,
                ( Facing::South, Face::Ceiling, ) => 19502,
                ( Facing::West, Face::Ceiling, ) => 19503,
                ( Facing::East, Face::Ceiling, ) => 19504,
            })
        }
    }

    impl From<Grindstone> for BlockState {
        #[inline(always)]
        fn from(value : Grindstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Grindstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Grindstone { }

    impl Block for Grindstone {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            face : Face::Wall,
        };
    }

}

/// `minecraft:potted_flowering_azalea_bush` block.
pub mod potted_flowering_azalea_bush {
    use super::*;

    /// `minecraft:potted_flowering_azalea_bush` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct PottedFloweringAzaleaBush;

    impl PottedFloweringAzaleaBush {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(27654)
        }
    }

    impl From<PottedFloweringAzaleaBush> for BlockState {
        #[inline(always)]
        fn from(value : PottedFloweringAzaleaBush) -> Self {
            value.to_block_state()
        }
    }

    impl Default for PottedFloweringAzaleaBush {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for PottedFloweringAzaleaBush { }

    impl Block for PottedFloweringAzaleaBush {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:cobweb` block.
pub mod cobweb {
    use super::*;

    /// `minecraft:cobweb` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Cobweb;

    impl Cobweb {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2047)
        }
    }

    impl From<Cobweb> for BlockState {
        #[inline(always)]
        fn from(value : Cobweb) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Cobweb {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Cobweb { }

    impl Block for Cobweb {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:chiseled_red_sandstone` block.
pub mod chiseled_red_sandstone {
    use super::*;

    /// `minecraft:chiseled_red_sandstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ChiseledRedSandstone;

    impl ChiseledRedSandstone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11969)
        }
    }

    impl From<ChiseledRedSandstone> for BlockState {
        #[inline(always)]
        fn from(value : ChiseledRedSandstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ChiseledRedSandstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ChiseledRedSandstone { }

    impl Block for ChiseledRedSandstone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:blackstone_slab` block.
pub mod blackstone_slab {
    use super::*;

    /// `minecraft:blackstone_slab` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackstoneSlab {
        /// `type` state.
        pub kind : Kind,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `type` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Kind {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
        /// `double` variant.
        Double,
    }
    impl crate::Sealed for Kind { }
    impl BlockProperty for Kind { }

    impl BlackstoneSlab {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.kind, self.waterlogged, )) {
                ( Kind::Top, true, ) => 20925,
                ( Kind::Top, false, ) => 20926,
                ( Kind::Bottom, true, ) => 20927,
                ( Kind::Bottom, false, ) => 20928,
                ( Kind::Double, true, ) => 20929,
                ( Kind::Double, false, ) => 20930,
            })
        }
    }

    impl From<BlackstoneSlab> for BlockState {
        #[inline(always)]
        fn from(value : BlackstoneSlab) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackstoneSlab {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackstoneSlab { }

    impl Block for BlackstoneSlab {
        const DEFAULT_STATE : Self = Self {
            kind : Kind::Bottom,
            waterlogged : false,
        };
    }

}

/// `minecraft:deepslate_gold_ore` block.
pub mod deepslate_gold_ore {
    use super::*;

    /// `minecraft:deepslate_gold_ore` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateGoldOre;

    impl DeepslateGoldOre {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(130)
        }
    }

    impl From<DeepslateGoldOre> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateGoldOre) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateGoldOre {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateGoldOre { }

    impl Block for DeepslateGoldOre {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:weathered_copper_trapdoor` block.
pub mod weathered_copper_trapdoor {
    use super::*;

    /// `minecraft:weathered_copper_trapdoor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WeatheredCopperTrapdoor {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `half` state.
        pub half : Half,
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
        /// `open` state.
        pub open : bool,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WeatheredCopperTrapdoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.half, self.facing, self.powered, self.open, )) {
                ( true, Half::Top, Facing::North, true, true, ) => 25416,
                ( false, Half::Top, Facing::North, true, true, ) => 25417,
                ( true, Half::Top, Facing::North, false, true, ) => 25418,
                ( false, Half::Top, Facing::North, false, true, ) => 25419,
                ( true, Half::Top, Facing::North, true, false, ) => 25420,
                ( false, Half::Top, Facing::North, true, false, ) => 25421,
                ( true, Half::Top, Facing::North, false, false, ) => 25422,
                ( false, Half::Top, Facing::North, false, false, ) => 25423,
                ( true, Half::Bottom, Facing::North, true, true, ) => 25424,
                ( false, Half::Bottom, Facing::North, true, true, ) => 25425,
                ( true, Half::Bottom, Facing::North, false, true, ) => 25426,
                ( false, Half::Bottom, Facing::North, false, true, ) => 25427,
                ( true, Half::Bottom, Facing::North, true, false, ) => 25428,
                ( false, Half::Bottom, Facing::North, true, false, ) => 25429,
                ( true, Half::Bottom, Facing::North, false, false, ) => 25430,
                ( false, Half::Bottom, Facing::North, false, false, ) => 25431,
                ( true, Half::Top, Facing::South, true, true, ) => 25432,
                ( false, Half::Top, Facing::South, true, true, ) => 25433,
                ( true, Half::Top, Facing::South, false, true, ) => 25434,
                ( false, Half::Top, Facing::South, false, true, ) => 25435,
                ( true, Half::Top, Facing::South, true, false, ) => 25436,
                ( false, Half::Top, Facing::South, true, false, ) => 25437,
                ( true, Half::Top, Facing::South, false, false, ) => 25438,
                ( false, Half::Top, Facing::South, false, false, ) => 25439,
                ( true, Half::Bottom, Facing::South, true, true, ) => 25440,
                ( false, Half::Bottom, Facing::South, true, true, ) => 25441,
                ( true, Half::Bottom, Facing::South, false, true, ) => 25442,
                ( false, Half::Bottom, Facing::South, false, true, ) => 25443,
                ( true, Half::Bottom, Facing::South, true, false, ) => 25444,
                ( false, Half::Bottom, Facing::South, true, false, ) => 25445,
                ( true, Half::Bottom, Facing::South, false, false, ) => 25446,
                ( false, Half::Bottom, Facing::South, false, false, ) => 25447,
                ( true, Half::Top, Facing::West, true, true, ) => 25448,
                ( false, Half::Top, Facing::West, true, true, ) => 25449,
                ( true, Half::Top, Facing::West, false, true, ) => 25450,
                ( false, Half::Top, Facing::West, false, true, ) => 25451,
                ( true, Half::Top, Facing::West, true, false, ) => 25452,
                ( false, Half::Top, Facing::West, true, false, ) => 25453,
                ( true, Half::Top, Facing::West, false, false, ) => 25454,
                ( false, Half::Top, Facing::West, false, false, ) => 25455,
                ( true, Half::Bottom, Facing::West, true, true, ) => 25456,
                ( false, Half::Bottom, Facing::West, true, true, ) => 25457,
                ( true, Half::Bottom, Facing::West, false, true, ) => 25458,
                ( false, Half::Bottom, Facing::West, false, true, ) => 25459,
                ( true, Half::Bottom, Facing::West, true, false, ) => 25460,
                ( false, Half::Bottom, Facing::West, true, false, ) => 25461,
                ( true, Half::Bottom, Facing::West, false, false, ) => 25462,
                ( false, Half::Bottom, Facing::West, false, false, ) => 25463,
                ( true, Half::Top, Facing::East, true, true, ) => 25464,
                ( false, Half::Top, Facing::East, true, true, ) => 25465,
                ( true, Half::Top, Facing::East, false, true, ) => 25466,
                ( false, Half::Top, Facing::East, false, true, ) => 25467,
                ( true, Half::Top, Facing::East, true, false, ) => 25468,
                ( false, Half::Top, Facing::East, true, false, ) => 25469,
                ( true, Half::Top, Facing::East, false, false, ) => 25470,
                ( false, Half::Top, Facing::East, false, false, ) => 25471,
                ( true, Half::Bottom, Facing::East, true, true, ) => 25472,
                ( false, Half::Bottom, Facing::East, true, true, ) => 25473,
                ( true, Half::Bottom, Facing::East, false, true, ) => 25474,
                ( false, Half::Bottom, Facing::East, false, true, ) => 25475,
                ( true, Half::Bottom, Facing::East, true, false, ) => 25476,
                ( false, Half::Bottom, Facing::East, true, false, ) => 25477,
                ( true, Half::Bottom, Facing::East, false, false, ) => 25478,
                ( false, Half::Bottom, Facing::East, false, false, ) => 25479,
            })
        }
    }

    impl From<WeatheredCopperTrapdoor> for BlockState {
        #[inline(always)]
        fn from(value : WeatheredCopperTrapdoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WeatheredCopperTrapdoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WeatheredCopperTrapdoor { }

    impl Block for WeatheredCopperTrapdoor {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            half : Half::Bottom,
            facing : Facing::North,
            powered : false,
            open : false,
        };
    }

}

/// `minecraft:brewing_stand` block.
pub mod brewing_stand {
    use super::*;

    /// `minecraft:brewing_stand` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrewingStand {
        /// `has_bottle_2` state.
        pub has_bottle_2 : bool,
        /// `has_bottle_0` state.
        pub has_bottle_0 : bool,
        /// `has_bottle_1` state.
        pub has_bottle_1 : bool,
    }

    impl BrewingStand {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.has_bottle_2, self.has_bottle_0, self.has_bottle_1, )) {
                ( true, true, true, ) => 8174,
                ( false, true, true, ) => 8175,
                ( true, true, false, ) => 8176,
                ( false, true, false, ) => 8177,
                ( true, false, true, ) => 8178,
                ( false, false, true, ) => 8179,
                ( true, false, false, ) => 8180,
                ( false, false, false, ) => 8181,
            })
        }
    }

    impl From<BrewingStand> for BlockState {
        #[inline(always)]
        fn from(value : BrewingStand) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrewingStand {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrewingStand { }

    impl Block for BrewingStand {
        const DEFAULT_STATE : Self = Self {
            has_bottle_2 : false,
            has_bottle_0 : false,
            has_bottle_1 : false,
        };
    }

}

/// `minecraft:black_stained_glass_pane` block.
pub mod black_stained_glass_pane {
    use super::*;

    /// `minecraft:black_stained_glass_pane` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackStainedGlassPane {
        /// `west` state.
        pub west : bool,
        /// `south` state.
        pub south : bool,
        /// `east` state.
        pub east : bool,
        /// `north` state.
        pub north : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl BlackStainedGlassPane {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.west, self.south, self.east, self.north, self.waterlogged, )) {
                ( true, true, true, true, true, ) => 10661,
                ( false, true, true, true, true, ) => 10662,
                ( true, true, true, true, false, ) => 10663,
                ( false, true, true, true, false, ) => 10664,
                ( true, false, true, true, true, ) => 10665,
                ( false, false, true, true, true, ) => 10666,
                ( true, false, true, true, false, ) => 10667,
                ( false, false, true, true, false, ) => 10668,
                ( true, true, true, false, true, ) => 10669,
                ( false, true, true, false, true, ) => 10670,
                ( true, true, true, false, false, ) => 10671,
                ( false, true, true, false, false, ) => 10672,
                ( true, false, true, false, true, ) => 10673,
                ( false, false, true, false, true, ) => 10674,
                ( true, false, true, false, false, ) => 10675,
                ( false, false, true, false, false, ) => 10676,
                ( true, true, false, true, true, ) => 10677,
                ( false, true, false, true, true, ) => 10678,
                ( true, true, false, true, false, ) => 10679,
                ( false, true, false, true, false, ) => 10680,
                ( true, false, false, true, true, ) => 10681,
                ( false, false, false, true, true, ) => 10682,
                ( true, false, false, true, false, ) => 10683,
                ( false, false, false, true, false, ) => 10684,
                ( true, true, false, false, true, ) => 10685,
                ( false, true, false, false, true, ) => 10686,
                ( true, true, false, false, false, ) => 10687,
                ( false, true, false, false, false, ) => 10688,
                ( true, false, false, false, true, ) => 10689,
                ( false, false, false, false, true, ) => 10690,
                ( true, false, false, false, false, ) => 10691,
                ( false, false, false, false, false, ) => 10692,
            })
        }
    }

    impl From<BlackStainedGlassPane> for BlockState {
        #[inline(always)]
        fn from(value : BlackStainedGlassPane) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackStainedGlassPane {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackStainedGlassPane { }

    impl Block for BlackStainedGlassPane {
        const DEFAULT_STATE : Self = Self {
            west : false,
            south : false,
            east : false,
            north : false,
            waterlogged : false,
        };
    }

}

/// `minecraft:black_concrete_powder` block.
pub mod black_concrete_powder {
    use super::*;

    /// `minecraft:black_concrete_powder` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BlackConcretePowder;

    impl BlackConcretePowder {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(13782)
        }
    }

    impl From<BlackConcretePowder> for BlockState {
        #[inline(always)]
        fn from(value : BlackConcretePowder) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BlackConcretePowder {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BlackConcretePowder { }

    impl Block for BlackConcretePowder {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:calibrated_sculk_sensor` block.
pub mod calibrated_sculk_sensor {
    use super::*;

    /// `minecraft:calibrated_sculk_sensor` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CalibratedSculkSensor {
        /// `sculk_sensor_phase` state.
        pub sculk_sensor_phase : SculkSensorPhase,
        /// `power` state.
        pub power : Power,
        /// `facing` state.
        pub facing : Facing,
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    /// `sculk_sensor_phase` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum SculkSensorPhase {
        /// `inactive` variant.
        Inactive,
        /// `active` variant.
        Active,
        /// `cooldown` variant.
        Cooldown,
    }
    impl crate::Sealed for SculkSensorPhase { }
    impl BlockProperty for SculkSensorPhase { }

    /// `power` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Power {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
        /// `5` variant.
        N5,
        /// `6` variant.
        N6,
        /// `7` variant.
        N7,
        /// `8` variant.
        N8,
        /// `9` variant.
        N9,
        /// `10` variant.
        N10,
        /// `11` variant.
        N11,
        /// `12` variant.
        N12,
        /// `13` variant.
        N13,
        /// `14` variant.
        N14,
        /// `15` variant.
        N15,
    }
    impl crate::Sealed for Power { }
    impl BlockProperty for Power { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CalibratedSculkSensor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.sculk_sensor_phase, self.power, self.facing, self.waterlogged, )) {
                ( SculkSensorPhase::Inactive, Power::N0, Facing::North, true, ) => 23475,
                ( SculkSensorPhase::Inactive, Power::N0, Facing::North, false, ) => 23476,
                ( SculkSensorPhase::Active, Power::N0, Facing::North, true, ) => 23477,
                ( SculkSensorPhase::Active, Power::N0, Facing::North, false, ) => 23478,
                ( SculkSensorPhase::Cooldown, Power::N0, Facing::North, true, ) => 23479,
                ( SculkSensorPhase::Cooldown, Power::N0, Facing::North, false, ) => 23480,
                ( SculkSensorPhase::Inactive, Power::N1, Facing::North, true, ) => 23481,
                ( SculkSensorPhase::Inactive, Power::N1, Facing::North, false, ) => 23482,
                ( SculkSensorPhase::Active, Power::N1, Facing::North, true, ) => 23483,
                ( SculkSensorPhase::Active, Power::N1, Facing::North, false, ) => 23484,
                ( SculkSensorPhase::Cooldown, Power::N1, Facing::North, true, ) => 23485,
                ( SculkSensorPhase::Cooldown, Power::N1, Facing::North, false, ) => 23486,
                ( SculkSensorPhase::Inactive, Power::N2, Facing::North, true, ) => 23487,
                ( SculkSensorPhase::Inactive, Power::N2, Facing::North, false, ) => 23488,
                ( SculkSensorPhase::Active, Power::N2, Facing::North, true, ) => 23489,
                ( SculkSensorPhase::Active, Power::N2, Facing::North, false, ) => 23490,
                ( SculkSensorPhase::Cooldown, Power::N2, Facing::North, true, ) => 23491,
                ( SculkSensorPhase::Cooldown, Power::N2, Facing::North, false, ) => 23492,
                ( SculkSensorPhase::Inactive, Power::N3, Facing::North, true, ) => 23493,
                ( SculkSensorPhase::Inactive, Power::N3, Facing::North, false, ) => 23494,
                ( SculkSensorPhase::Active, Power::N3, Facing::North, true, ) => 23495,
                ( SculkSensorPhase::Active, Power::N3, Facing::North, false, ) => 23496,
                ( SculkSensorPhase::Cooldown, Power::N3, Facing::North, true, ) => 23497,
                ( SculkSensorPhase::Cooldown, Power::N3, Facing::North, false, ) => 23498,
                ( SculkSensorPhase::Inactive, Power::N4, Facing::North, true, ) => 23499,
                ( SculkSensorPhase::Inactive, Power::N4, Facing::North, false, ) => 23500,
                ( SculkSensorPhase::Active, Power::N4, Facing::North, true, ) => 23501,
                ( SculkSensorPhase::Active, Power::N4, Facing::North, false, ) => 23502,
                ( SculkSensorPhase::Cooldown, Power::N4, Facing::North, true, ) => 23503,
                ( SculkSensorPhase::Cooldown, Power::N4, Facing::North, false, ) => 23504,
                ( SculkSensorPhase::Inactive, Power::N5, Facing::North, true, ) => 23505,
                ( SculkSensorPhase::Inactive, Power::N5, Facing::North, false, ) => 23506,
                ( SculkSensorPhase::Active, Power::N5, Facing::North, true, ) => 23507,
                ( SculkSensorPhase::Active, Power::N5, Facing::North, false, ) => 23508,
                ( SculkSensorPhase::Cooldown, Power::N5, Facing::North, true, ) => 23509,
                ( SculkSensorPhase::Cooldown, Power::N5, Facing::North, false, ) => 23510,
                ( SculkSensorPhase::Inactive, Power::N6, Facing::North, true, ) => 23511,
                ( SculkSensorPhase::Inactive, Power::N6, Facing::North, false, ) => 23512,
                ( SculkSensorPhase::Active, Power::N6, Facing::North, true, ) => 23513,
                ( SculkSensorPhase::Active, Power::N6, Facing::North, false, ) => 23514,
                ( SculkSensorPhase::Cooldown, Power::N6, Facing::North, true, ) => 23515,
                ( SculkSensorPhase::Cooldown, Power::N6, Facing::North, false, ) => 23516,
                ( SculkSensorPhase::Inactive, Power::N7, Facing::North, true, ) => 23517,
                ( SculkSensorPhase::Inactive, Power::N7, Facing::North, false, ) => 23518,
                ( SculkSensorPhase::Active, Power::N7, Facing::North, true, ) => 23519,
                ( SculkSensorPhase::Active, Power::N7, Facing::North, false, ) => 23520,
                ( SculkSensorPhase::Cooldown, Power::N7, Facing::North, true, ) => 23521,
                ( SculkSensorPhase::Cooldown, Power::N7, Facing::North, false, ) => 23522,
                ( SculkSensorPhase::Inactive, Power::N8, Facing::North, true, ) => 23523,
                ( SculkSensorPhase::Inactive, Power::N8, Facing::North, false, ) => 23524,
                ( SculkSensorPhase::Active, Power::N8, Facing::North, true, ) => 23525,
                ( SculkSensorPhase::Active, Power::N8, Facing::North, false, ) => 23526,
                ( SculkSensorPhase::Cooldown, Power::N8, Facing::North, true, ) => 23527,
                ( SculkSensorPhase::Cooldown, Power::N8, Facing::North, false, ) => 23528,
                ( SculkSensorPhase::Inactive, Power::N9, Facing::North, true, ) => 23529,
                ( SculkSensorPhase::Inactive, Power::N9, Facing::North, false, ) => 23530,
                ( SculkSensorPhase::Active, Power::N9, Facing::North, true, ) => 23531,
                ( SculkSensorPhase::Active, Power::N9, Facing::North, false, ) => 23532,
                ( SculkSensorPhase::Cooldown, Power::N9, Facing::North, true, ) => 23533,
                ( SculkSensorPhase::Cooldown, Power::N9, Facing::North, false, ) => 23534,
                ( SculkSensorPhase::Inactive, Power::N10, Facing::North, true, ) => 23535,
                ( SculkSensorPhase::Inactive, Power::N10, Facing::North, false, ) => 23536,
                ( SculkSensorPhase::Active, Power::N10, Facing::North, true, ) => 23537,
                ( SculkSensorPhase::Active, Power::N10, Facing::North, false, ) => 23538,
                ( SculkSensorPhase::Cooldown, Power::N10, Facing::North, true, ) => 23539,
                ( SculkSensorPhase::Cooldown, Power::N10, Facing::North, false, ) => 23540,
                ( SculkSensorPhase::Inactive, Power::N11, Facing::North, true, ) => 23541,
                ( SculkSensorPhase::Inactive, Power::N11, Facing::North, false, ) => 23542,
                ( SculkSensorPhase::Active, Power::N11, Facing::North, true, ) => 23543,
                ( SculkSensorPhase::Active, Power::N11, Facing::North, false, ) => 23544,
                ( SculkSensorPhase::Cooldown, Power::N11, Facing::North, true, ) => 23545,
                ( SculkSensorPhase::Cooldown, Power::N11, Facing::North, false, ) => 23546,
                ( SculkSensorPhase::Inactive, Power::N12, Facing::North, true, ) => 23547,
                ( SculkSensorPhase::Inactive, Power::N12, Facing::North, false, ) => 23548,
                ( SculkSensorPhase::Active, Power::N12, Facing::North, true, ) => 23549,
                ( SculkSensorPhase::Active, Power::N12, Facing::North, false, ) => 23550,
                ( SculkSensorPhase::Cooldown, Power::N12, Facing::North, true, ) => 23551,
                ( SculkSensorPhase::Cooldown, Power::N12, Facing::North, false, ) => 23552,
                ( SculkSensorPhase::Inactive, Power::N13, Facing::North, true, ) => 23553,
                ( SculkSensorPhase::Inactive, Power::N13, Facing::North, false, ) => 23554,
                ( SculkSensorPhase::Active, Power::N13, Facing::North, true, ) => 23555,
                ( SculkSensorPhase::Active, Power::N13, Facing::North, false, ) => 23556,
                ( SculkSensorPhase::Cooldown, Power::N13, Facing::North, true, ) => 23557,
                ( SculkSensorPhase::Cooldown, Power::N13, Facing::North, false, ) => 23558,
                ( SculkSensorPhase::Inactive, Power::N14, Facing::North, true, ) => 23559,
                ( SculkSensorPhase::Inactive, Power::N14, Facing::North, false, ) => 23560,
                ( SculkSensorPhase::Active, Power::N14, Facing::North, true, ) => 23561,
                ( SculkSensorPhase::Active, Power::N14, Facing::North, false, ) => 23562,
                ( SculkSensorPhase::Cooldown, Power::N14, Facing::North, true, ) => 23563,
                ( SculkSensorPhase::Cooldown, Power::N14, Facing::North, false, ) => 23564,
                ( SculkSensorPhase::Inactive, Power::N15, Facing::North, true, ) => 23565,
                ( SculkSensorPhase::Inactive, Power::N15, Facing::North, false, ) => 23566,
                ( SculkSensorPhase::Active, Power::N15, Facing::North, true, ) => 23567,
                ( SculkSensorPhase::Active, Power::N15, Facing::North, false, ) => 23568,
                ( SculkSensorPhase::Cooldown, Power::N15, Facing::North, true, ) => 23569,
                ( SculkSensorPhase::Cooldown, Power::N15, Facing::North, false, ) => 23570,
                ( SculkSensorPhase::Inactive, Power::N0, Facing::South, true, ) => 23571,
                ( SculkSensorPhase::Inactive, Power::N0, Facing::South, false, ) => 23572,
                ( SculkSensorPhase::Active, Power::N0, Facing::South, true, ) => 23573,
                ( SculkSensorPhase::Active, Power::N0, Facing::South, false, ) => 23574,
                ( SculkSensorPhase::Cooldown, Power::N0, Facing::South, true, ) => 23575,
                ( SculkSensorPhase::Cooldown, Power::N0, Facing::South, false, ) => 23576,
                ( SculkSensorPhase::Inactive, Power::N1, Facing::South, true, ) => 23577,
                ( SculkSensorPhase::Inactive, Power::N1, Facing::South, false, ) => 23578,
                ( SculkSensorPhase::Active, Power::N1, Facing::South, true, ) => 23579,
                ( SculkSensorPhase::Active, Power::N1, Facing::South, false, ) => 23580,
                ( SculkSensorPhase::Cooldown, Power::N1, Facing::South, true, ) => 23581,
                ( SculkSensorPhase::Cooldown, Power::N1, Facing::South, false, ) => 23582,
                ( SculkSensorPhase::Inactive, Power::N2, Facing::South, true, ) => 23583,
                ( SculkSensorPhase::Inactive, Power::N2, Facing::South, false, ) => 23584,
                ( SculkSensorPhase::Active, Power::N2, Facing::South, true, ) => 23585,
                ( SculkSensorPhase::Active, Power::N2, Facing::South, false, ) => 23586,
                ( SculkSensorPhase::Cooldown, Power::N2, Facing::South, true, ) => 23587,
                ( SculkSensorPhase::Cooldown, Power::N2, Facing::South, false, ) => 23588,
                ( SculkSensorPhase::Inactive, Power::N3, Facing::South, true, ) => 23589,
                ( SculkSensorPhase::Inactive, Power::N3, Facing::South, false, ) => 23590,
                ( SculkSensorPhase::Active, Power::N3, Facing::South, true, ) => 23591,
                ( SculkSensorPhase::Active, Power::N3, Facing::South, false, ) => 23592,
                ( SculkSensorPhase::Cooldown, Power::N3, Facing::South, true, ) => 23593,
                ( SculkSensorPhase::Cooldown, Power::N3, Facing::South, false, ) => 23594,
                ( SculkSensorPhase::Inactive, Power::N4, Facing::South, true, ) => 23595,
                ( SculkSensorPhase::Inactive, Power::N4, Facing::South, false, ) => 23596,
                ( SculkSensorPhase::Active, Power::N4, Facing::South, true, ) => 23597,
                ( SculkSensorPhase::Active, Power::N4, Facing::South, false, ) => 23598,
                ( SculkSensorPhase::Cooldown, Power::N4, Facing::South, true, ) => 23599,
                ( SculkSensorPhase::Cooldown, Power::N4, Facing::South, false, ) => 23600,
                ( SculkSensorPhase::Inactive, Power::N5, Facing::South, true, ) => 23601,
                ( SculkSensorPhase::Inactive, Power::N5, Facing::South, false, ) => 23602,
                ( SculkSensorPhase::Active, Power::N5, Facing::South, true, ) => 23603,
                ( SculkSensorPhase::Active, Power::N5, Facing::South, false, ) => 23604,
                ( SculkSensorPhase::Cooldown, Power::N5, Facing::South, true, ) => 23605,
                ( SculkSensorPhase::Cooldown, Power::N5, Facing::South, false, ) => 23606,
                ( SculkSensorPhase::Inactive, Power::N6, Facing::South, true, ) => 23607,
                ( SculkSensorPhase::Inactive, Power::N6, Facing::South, false, ) => 23608,
                ( SculkSensorPhase::Active, Power::N6, Facing::South, true, ) => 23609,
                ( SculkSensorPhase::Active, Power::N6, Facing::South, false, ) => 23610,
                ( SculkSensorPhase::Cooldown, Power::N6, Facing::South, true, ) => 23611,
                ( SculkSensorPhase::Cooldown, Power::N6, Facing::South, false, ) => 23612,
                ( SculkSensorPhase::Inactive, Power::N7, Facing::South, true, ) => 23613,
                ( SculkSensorPhase::Inactive, Power::N7, Facing::South, false, ) => 23614,
                ( SculkSensorPhase::Active, Power::N7, Facing::South, true, ) => 23615,
                ( SculkSensorPhase::Active, Power::N7, Facing::South, false, ) => 23616,
                ( SculkSensorPhase::Cooldown, Power::N7, Facing::South, true, ) => 23617,
                ( SculkSensorPhase::Cooldown, Power::N7, Facing::South, false, ) => 23618,
                ( SculkSensorPhase::Inactive, Power::N8, Facing::South, true, ) => 23619,
                ( SculkSensorPhase::Inactive, Power::N8, Facing::South, false, ) => 23620,
                ( SculkSensorPhase::Active, Power::N8, Facing::South, true, ) => 23621,
                ( SculkSensorPhase::Active, Power::N8, Facing::South, false, ) => 23622,
                ( SculkSensorPhase::Cooldown, Power::N8, Facing::South, true, ) => 23623,
                ( SculkSensorPhase::Cooldown, Power::N8, Facing::South, false, ) => 23624,
                ( SculkSensorPhase::Inactive, Power::N9, Facing::South, true, ) => 23625,
                ( SculkSensorPhase::Inactive, Power::N9, Facing::South, false, ) => 23626,
                ( SculkSensorPhase::Active, Power::N9, Facing::South, true, ) => 23627,
                ( SculkSensorPhase::Active, Power::N9, Facing::South, false, ) => 23628,
                ( SculkSensorPhase::Cooldown, Power::N9, Facing::South, true, ) => 23629,
                ( SculkSensorPhase::Cooldown, Power::N9, Facing::South, false, ) => 23630,
                ( SculkSensorPhase::Inactive, Power::N10, Facing::South, true, ) => 23631,
                ( SculkSensorPhase::Inactive, Power::N10, Facing::South, false, ) => 23632,
                ( SculkSensorPhase::Active, Power::N10, Facing::South, true, ) => 23633,
                ( SculkSensorPhase::Active, Power::N10, Facing::South, false, ) => 23634,
                ( SculkSensorPhase::Cooldown, Power::N10, Facing::South, true, ) => 23635,
                ( SculkSensorPhase::Cooldown, Power::N10, Facing::South, false, ) => 23636,
                ( SculkSensorPhase::Inactive, Power::N11, Facing::South, true, ) => 23637,
                ( SculkSensorPhase::Inactive, Power::N11, Facing::South, false, ) => 23638,
                ( SculkSensorPhase::Active, Power::N11, Facing::South, true, ) => 23639,
                ( SculkSensorPhase::Active, Power::N11, Facing::South, false, ) => 23640,
                ( SculkSensorPhase::Cooldown, Power::N11, Facing::South, true, ) => 23641,
                ( SculkSensorPhase::Cooldown, Power::N11, Facing::South, false, ) => 23642,
                ( SculkSensorPhase::Inactive, Power::N12, Facing::South, true, ) => 23643,
                ( SculkSensorPhase::Inactive, Power::N12, Facing::South, false, ) => 23644,
                ( SculkSensorPhase::Active, Power::N12, Facing::South, true, ) => 23645,
                ( SculkSensorPhase::Active, Power::N12, Facing::South, false, ) => 23646,
                ( SculkSensorPhase::Cooldown, Power::N12, Facing::South, true, ) => 23647,
                ( SculkSensorPhase::Cooldown, Power::N12, Facing::South, false, ) => 23648,
                ( SculkSensorPhase::Inactive, Power::N13, Facing::South, true, ) => 23649,
                ( SculkSensorPhase::Inactive, Power::N13, Facing::South, false, ) => 23650,
                ( SculkSensorPhase::Active, Power::N13, Facing::South, true, ) => 23651,
                ( SculkSensorPhase::Active, Power::N13, Facing::South, false, ) => 23652,
                ( SculkSensorPhase::Cooldown, Power::N13, Facing::South, true, ) => 23653,
                ( SculkSensorPhase::Cooldown, Power::N13, Facing::South, false, ) => 23654,
                ( SculkSensorPhase::Inactive, Power::N14, Facing::South, true, ) => 23655,
                ( SculkSensorPhase::Inactive, Power::N14, Facing::South, false, ) => 23656,
                ( SculkSensorPhase::Active, Power::N14, Facing::South, true, ) => 23657,
                ( SculkSensorPhase::Active, Power::N14, Facing::South, false, ) => 23658,
                ( SculkSensorPhase::Cooldown, Power::N14, Facing::South, true, ) => 23659,
                ( SculkSensorPhase::Cooldown, Power::N14, Facing::South, false, ) => 23660,
                ( SculkSensorPhase::Inactive, Power::N15, Facing::South, true, ) => 23661,
                ( SculkSensorPhase::Inactive, Power::N15, Facing::South, false, ) => 23662,
                ( SculkSensorPhase::Active, Power::N15, Facing::South, true, ) => 23663,
                ( SculkSensorPhase::Active, Power::N15, Facing::South, false, ) => 23664,
                ( SculkSensorPhase::Cooldown, Power::N15, Facing::South, true, ) => 23665,
                ( SculkSensorPhase::Cooldown, Power::N15, Facing::South, false, ) => 23666,
                ( SculkSensorPhase::Inactive, Power::N0, Facing::West, true, ) => 23667,
                ( SculkSensorPhase::Inactive, Power::N0, Facing::West, false, ) => 23668,
                ( SculkSensorPhase::Active, Power::N0, Facing::West, true, ) => 23669,
                ( SculkSensorPhase::Active, Power::N0, Facing::West, false, ) => 23670,
                ( SculkSensorPhase::Cooldown, Power::N0, Facing::West, true, ) => 23671,
                ( SculkSensorPhase::Cooldown, Power::N0, Facing::West, false, ) => 23672,
                ( SculkSensorPhase::Inactive, Power::N1, Facing::West, true, ) => 23673,
                ( SculkSensorPhase::Inactive, Power::N1, Facing::West, false, ) => 23674,
                ( SculkSensorPhase::Active, Power::N1, Facing::West, true, ) => 23675,
                ( SculkSensorPhase::Active, Power::N1, Facing::West, false, ) => 23676,
                ( SculkSensorPhase::Cooldown, Power::N1, Facing::West, true, ) => 23677,
                ( SculkSensorPhase::Cooldown, Power::N1, Facing::West, false, ) => 23678,
                ( SculkSensorPhase::Inactive, Power::N2, Facing::West, true, ) => 23679,
                ( SculkSensorPhase::Inactive, Power::N2, Facing::West, false, ) => 23680,
                ( SculkSensorPhase::Active, Power::N2, Facing::West, true, ) => 23681,
                ( SculkSensorPhase::Active, Power::N2, Facing::West, false, ) => 23682,
                ( SculkSensorPhase::Cooldown, Power::N2, Facing::West, true, ) => 23683,
                ( SculkSensorPhase::Cooldown, Power::N2, Facing::West, false, ) => 23684,
                ( SculkSensorPhase::Inactive, Power::N3, Facing::West, true, ) => 23685,
                ( SculkSensorPhase::Inactive, Power::N3, Facing::West, false, ) => 23686,
                ( SculkSensorPhase::Active, Power::N3, Facing::West, true, ) => 23687,
                ( SculkSensorPhase::Active, Power::N3, Facing::West, false, ) => 23688,
                ( SculkSensorPhase::Cooldown, Power::N3, Facing::West, true, ) => 23689,
                ( SculkSensorPhase::Cooldown, Power::N3, Facing::West, false, ) => 23690,
                ( SculkSensorPhase::Inactive, Power::N4, Facing::West, true, ) => 23691,
                ( SculkSensorPhase::Inactive, Power::N4, Facing::West, false, ) => 23692,
                ( SculkSensorPhase::Active, Power::N4, Facing::West, true, ) => 23693,
                ( SculkSensorPhase::Active, Power::N4, Facing::West, false, ) => 23694,
                ( SculkSensorPhase::Cooldown, Power::N4, Facing::West, true, ) => 23695,
                ( SculkSensorPhase::Cooldown, Power::N4, Facing::West, false, ) => 23696,
                ( SculkSensorPhase::Inactive, Power::N5, Facing::West, true, ) => 23697,
                ( SculkSensorPhase::Inactive, Power::N5, Facing::West, false, ) => 23698,
                ( SculkSensorPhase::Active, Power::N5, Facing::West, true, ) => 23699,
                ( SculkSensorPhase::Active, Power::N5, Facing::West, false, ) => 23700,
                ( SculkSensorPhase::Cooldown, Power::N5, Facing::West, true, ) => 23701,
                ( SculkSensorPhase::Cooldown, Power::N5, Facing::West, false, ) => 23702,
                ( SculkSensorPhase::Inactive, Power::N6, Facing::West, true, ) => 23703,
                ( SculkSensorPhase::Inactive, Power::N6, Facing::West, false, ) => 23704,
                ( SculkSensorPhase::Active, Power::N6, Facing::West, true, ) => 23705,
                ( SculkSensorPhase::Active, Power::N6, Facing::West, false, ) => 23706,
                ( SculkSensorPhase::Cooldown, Power::N6, Facing::West, true, ) => 23707,
                ( SculkSensorPhase::Cooldown, Power::N6, Facing::West, false, ) => 23708,
                ( SculkSensorPhase::Inactive, Power::N7, Facing::West, true, ) => 23709,
                ( SculkSensorPhase::Inactive, Power::N7, Facing::West, false, ) => 23710,
                ( SculkSensorPhase::Active, Power::N7, Facing::West, true, ) => 23711,
                ( SculkSensorPhase::Active, Power::N7, Facing::West, false, ) => 23712,
                ( SculkSensorPhase::Cooldown, Power::N7, Facing::West, true, ) => 23713,
                ( SculkSensorPhase::Cooldown, Power::N7, Facing::West, false, ) => 23714,
                ( SculkSensorPhase::Inactive, Power::N8, Facing::West, true, ) => 23715,
                ( SculkSensorPhase::Inactive, Power::N8, Facing::West, false, ) => 23716,
                ( SculkSensorPhase::Active, Power::N8, Facing::West, true, ) => 23717,
                ( SculkSensorPhase::Active, Power::N8, Facing::West, false, ) => 23718,
                ( SculkSensorPhase::Cooldown, Power::N8, Facing::West, true, ) => 23719,
                ( SculkSensorPhase::Cooldown, Power::N8, Facing::West, false, ) => 23720,
                ( SculkSensorPhase::Inactive, Power::N9, Facing::West, true, ) => 23721,
                ( SculkSensorPhase::Inactive, Power::N9, Facing::West, false, ) => 23722,
                ( SculkSensorPhase::Active, Power::N9, Facing::West, true, ) => 23723,
                ( SculkSensorPhase::Active, Power::N9, Facing::West, false, ) => 23724,
                ( SculkSensorPhase::Cooldown, Power::N9, Facing::West, true, ) => 23725,
                ( SculkSensorPhase::Cooldown, Power::N9, Facing::West, false, ) => 23726,
                ( SculkSensorPhase::Inactive, Power::N10, Facing::West, true, ) => 23727,
                ( SculkSensorPhase::Inactive, Power::N10, Facing::West, false, ) => 23728,
                ( SculkSensorPhase::Active, Power::N10, Facing::West, true, ) => 23729,
                ( SculkSensorPhase::Active, Power::N10, Facing::West, false, ) => 23730,
                ( SculkSensorPhase::Cooldown, Power::N10, Facing::West, true, ) => 23731,
                ( SculkSensorPhase::Cooldown, Power::N10, Facing::West, false, ) => 23732,
                ( SculkSensorPhase::Inactive, Power::N11, Facing::West, true, ) => 23733,
                ( SculkSensorPhase::Inactive, Power::N11, Facing::West, false, ) => 23734,
                ( SculkSensorPhase::Active, Power::N11, Facing::West, true, ) => 23735,
                ( SculkSensorPhase::Active, Power::N11, Facing::West, false, ) => 23736,
                ( SculkSensorPhase::Cooldown, Power::N11, Facing::West, true, ) => 23737,
                ( SculkSensorPhase::Cooldown, Power::N11, Facing::West, false, ) => 23738,
                ( SculkSensorPhase::Inactive, Power::N12, Facing::West, true, ) => 23739,
                ( SculkSensorPhase::Inactive, Power::N12, Facing::West, false, ) => 23740,
                ( SculkSensorPhase::Active, Power::N12, Facing::West, true, ) => 23741,
                ( SculkSensorPhase::Active, Power::N12, Facing::West, false, ) => 23742,
                ( SculkSensorPhase::Cooldown, Power::N12, Facing::West, true, ) => 23743,
                ( SculkSensorPhase::Cooldown, Power::N12, Facing::West, false, ) => 23744,
                ( SculkSensorPhase::Inactive, Power::N13, Facing::West, true, ) => 23745,
                ( SculkSensorPhase::Inactive, Power::N13, Facing::West, false, ) => 23746,
                ( SculkSensorPhase::Active, Power::N13, Facing::West, true, ) => 23747,
                ( SculkSensorPhase::Active, Power::N13, Facing::West, false, ) => 23748,
                ( SculkSensorPhase::Cooldown, Power::N13, Facing::West, true, ) => 23749,
                ( SculkSensorPhase::Cooldown, Power::N13, Facing::West, false, ) => 23750,
                ( SculkSensorPhase::Inactive, Power::N14, Facing::West, true, ) => 23751,
                ( SculkSensorPhase::Inactive, Power::N14, Facing::West, false, ) => 23752,
                ( SculkSensorPhase::Active, Power::N14, Facing::West, true, ) => 23753,
                ( SculkSensorPhase::Active, Power::N14, Facing::West, false, ) => 23754,
                ( SculkSensorPhase::Cooldown, Power::N14, Facing::West, true, ) => 23755,
                ( SculkSensorPhase::Cooldown, Power::N14, Facing::West, false, ) => 23756,
                ( SculkSensorPhase::Inactive, Power::N15, Facing::West, true, ) => 23757,
                ( SculkSensorPhase::Inactive, Power::N15, Facing::West, false, ) => 23758,
                ( SculkSensorPhase::Active, Power::N15, Facing::West, true, ) => 23759,
                ( SculkSensorPhase::Active, Power::N15, Facing::West, false, ) => 23760,
                ( SculkSensorPhase::Cooldown, Power::N15, Facing::West, true, ) => 23761,
                ( SculkSensorPhase::Cooldown, Power::N15, Facing::West, false, ) => 23762,
                ( SculkSensorPhase::Inactive, Power::N0, Facing::East, true, ) => 23763,
                ( SculkSensorPhase::Inactive, Power::N0, Facing::East, false, ) => 23764,
                ( SculkSensorPhase::Active, Power::N0, Facing::East, true, ) => 23765,
                ( SculkSensorPhase::Active, Power::N0, Facing::East, false, ) => 23766,
                ( SculkSensorPhase::Cooldown, Power::N0, Facing::East, true, ) => 23767,
                ( SculkSensorPhase::Cooldown, Power::N0, Facing::East, false, ) => 23768,
                ( SculkSensorPhase::Inactive, Power::N1, Facing::East, true, ) => 23769,
                ( SculkSensorPhase::Inactive, Power::N1, Facing::East, false, ) => 23770,
                ( SculkSensorPhase::Active, Power::N1, Facing::East, true, ) => 23771,
                ( SculkSensorPhase::Active, Power::N1, Facing::East, false, ) => 23772,
                ( SculkSensorPhase::Cooldown, Power::N1, Facing::East, true, ) => 23773,
                ( SculkSensorPhase::Cooldown, Power::N1, Facing::East, false, ) => 23774,
                ( SculkSensorPhase::Inactive, Power::N2, Facing::East, true, ) => 23775,
                ( SculkSensorPhase::Inactive, Power::N2, Facing::East, false, ) => 23776,
                ( SculkSensorPhase::Active, Power::N2, Facing::East, true, ) => 23777,
                ( SculkSensorPhase::Active, Power::N2, Facing::East, false, ) => 23778,
                ( SculkSensorPhase::Cooldown, Power::N2, Facing::East, true, ) => 23779,
                ( SculkSensorPhase::Cooldown, Power::N2, Facing::East, false, ) => 23780,
                ( SculkSensorPhase::Inactive, Power::N3, Facing::East, true, ) => 23781,
                ( SculkSensorPhase::Inactive, Power::N3, Facing::East, false, ) => 23782,
                ( SculkSensorPhase::Active, Power::N3, Facing::East, true, ) => 23783,
                ( SculkSensorPhase::Active, Power::N3, Facing::East, false, ) => 23784,
                ( SculkSensorPhase::Cooldown, Power::N3, Facing::East, true, ) => 23785,
                ( SculkSensorPhase::Cooldown, Power::N3, Facing::East, false, ) => 23786,
                ( SculkSensorPhase::Inactive, Power::N4, Facing::East, true, ) => 23787,
                ( SculkSensorPhase::Inactive, Power::N4, Facing::East, false, ) => 23788,
                ( SculkSensorPhase::Active, Power::N4, Facing::East, true, ) => 23789,
                ( SculkSensorPhase::Active, Power::N4, Facing::East, false, ) => 23790,
                ( SculkSensorPhase::Cooldown, Power::N4, Facing::East, true, ) => 23791,
                ( SculkSensorPhase::Cooldown, Power::N4, Facing::East, false, ) => 23792,
                ( SculkSensorPhase::Inactive, Power::N5, Facing::East, true, ) => 23793,
                ( SculkSensorPhase::Inactive, Power::N5, Facing::East, false, ) => 23794,
                ( SculkSensorPhase::Active, Power::N5, Facing::East, true, ) => 23795,
                ( SculkSensorPhase::Active, Power::N5, Facing::East, false, ) => 23796,
                ( SculkSensorPhase::Cooldown, Power::N5, Facing::East, true, ) => 23797,
                ( SculkSensorPhase::Cooldown, Power::N5, Facing::East, false, ) => 23798,
                ( SculkSensorPhase::Inactive, Power::N6, Facing::East, true, ) => 23799,
                ( SculkSensorPhase::Inactive, Power::N6, Facing::East, false, ) => 23800,
                ( SculkSensorPhase::Active, Power::N6, Facing::East, true, ) => 23801,
                ( SculkSensorPhase::Active, Power::N6, Facing::East, false, ) => 23802,
                ( SculkSensorPhase::Cooldown, Power::N6, Facing::East, true, ) => 23803,
                ( SculkSensorPhase::Cooldown, Power::N6, Facing::East, false, ) => 23804,
                ( SculkSensorPhase::Inactive, Power::N7, Facing::East, true, ) => 23805,
                ( SculkSensorPhase::Inactive, Power::N7, Facing::East, false, ) => 23806,
                ( SculkSensorPhase::Active, Power::N7, Facing::East, true, ) => 23807,
                ( SculkSensorPhase::Active, Power::N7, Facing::East, false, ) => 23808,
                ( SculkSensorPhase::Cooldown, Power::N7, Facing::East, true, ) => 23809,
                ( SculkSensorPhase::Cooldown, Power::N7, Facing::East, false, ) => 23810,
                ( SculkSensorPhase::Inactive, Power::N8, Facing::East, true, ) => 23811,
                ( SculkSensorPhase::Inactive, Power::N8, Facing::East, false, ) => 23812,
                ( SculkSensorPhase::Active, Power::N8, Facing::East, true, ) => 23813,
                ( SculkSensorPhase::Active, Power::N8, Facing::East, false, ) => 23814,
                ( SculkSensorPhase::Cooldown, Power::N8, Facing::East, true, ) => 23815,
                ( SculkSensorPhase::Cooldown, Power::N8, Facing::East, false, ) => 23816,
                ( SculkSensorPhase::Inactive, Power::N9, Facing::East, true, ) => 23817,
                ( SculkSensorPhase::Inactive, Power::N9, Facing::East, false, ) => 23818,
                ( SculkSensorPhase::Active, Power::N9, Facing::East, true, ) => 23819,
                ( SculkSensorPhase::Active, Power::N9, Facing::East, false, ) => 23820,
                ( SculkSensorPhase::Cooldown, Power::N9, Facing::East, true, ) => 23821,
                ( SculkSensorPhase::Cooldown, Power::N9, Facing::East, false, ) => 23822,
                ( SculkSensorPhase::Inactive, Power::N10, Facing::East, true, ) => 23823,
                ( SculkSensorPhase::Inactive, Power::N10, Facing::East, false, ) => 23824,
                ( SculkSensorPhase::Active, Power::N10, Facing::East, true, ) => 23825,
                ( SculkSensorPhase::Active, Power::N10, Facing::East, false, ) => 23826,
                ( SculkSensorPhase::Cooldown, Power::N10, Facing::East, true, ) => 23827,
                ( SculkSensorPhase::Cooldown, Power::N10, Facing::East, false, ) => 23828,
                ( SculkSensorPhase::Inactive, Power::N11, Facing::East, true, ) => 23829,
                ( SculkSensorPhase::Inactive, Power::N11, Facing::East, false, ) => 23830,
                ( SculkSensorPhase::Active, Power::N11, Facing::East, true, ) => 23831,
                ( SculkSensorPhase::Active, Power::N11, Facing::East, false, ) => 23832,
                ( SculkSensorPhase::Cooldown, Power::N11, Facing::East, true, ) => 23833,
                ( SculkSensorPhase::Cooldown, Power::N11, Facing::East, false, ) => 23834,
                ( SculkSensorPhase::Inactive, Power::N12, Facing::East, true, ) => 23835,
                ( SculkSensorPhase::Inactive, Power::N12, Facing::East, false, ) => 23836,
                ( SculkSensorPhase::Active, Power::N12, Facing::East, true, ) => 23837,
                ( SculkSensorPhase::Active, Power::N12, Facing::East, false, ) => 23838,
                ( SculkSensorPhase::Cooldown, Power::N12, Facing::East, true, ) => 23839,
                ( SculkSensorPhase::Cooldown, Power::N12, Facing::East, false, ) => 23840,
                ( SculkSensorPhase::Inactive, Power::N13, Facing::East, true, ) => 23841,
                ( SculkSensorPhase::Inactive, Power::N13, Facing::East, false, ) => 23842,
                ( SculkSensorPhase::Active, Power::N13, Facing::East, true, ) => 23843,
                ( SculkSensorPhase::Active, Power::N13, Facing::East, false, ) => 23844,
                ( SculkSensorPhase::Cooldown, Power::N13, Facing::East, true, ) => 23845,
                ( SculkSensorPhase::Cooldown, Power::N13, Facing::East, false, ) => 23846,
                ( SculkSensorPhase::Inactive, Power::N14, Facing::East, true, ) => 23847,
                ( SculkSensorPhase::Inactive, Power::N14, Facing::East, false, ) => 23848,
                ( SculkSensorPhase::Active, Power::N14, Facing::East, true, ) => 23849,
                ( SculkSensorPhase::Active, Power::N14, Facing::East, false, ) => 23850,
                ( SculkSensorPhase::Cooldown, Power::N14, Facing::East, true, ) => 23851,
                ( SculkSensorPhase::Cooldown, Power::N14, Facing::East, false, ) => 23852,
                ( SculkSensorPhase::Inactive, Power::N15, Facing::East, true, ) => 23853,
                ( SculkSensorPhase::Inactive, Power::N15, Facing::East, false, ) => 23854,
                ( SculkSensorPhase::Active, Power::N15, Facing::East, true, ) => 23855,
                ( SculkSensorPhase::Active, Power::N15, Facing::East, false, ) => 23856,
                ( SculkSensorPhase::Cooldown, Power::N15, Facing::East, true, ) => 23857,
                ( SculkSensorPhase::Cooldown, Power::N15, Facing::East, false, ) => 23858,
            })
        }
    }

    impl From<CalibratedSculkSensor> for BlockState {
        #[inline(always)]
        fn from(value : CalibratedSculkSensor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CalibratedSculkSensor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CalibratedSculkSensor { }

    impl Block for CalibratedSculkSensor {
        const DEFAULT_STATE : Self = Self {
            sculk_sensor_phase : SculkSensorPhase::Inactive,
            power : Power::N0,
            facing : Facing::North,
            waterlogged : false,
        };
    }

}

/// `minecraft:cyan_wall_banner` block.
pub mod cyan_wall_banner {
    use super::*;

    /// `minecraft:cyan_wall_banner` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct CyanWallBanner {
        /// `facing` state.
        pub facing : Facing,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl CyanWallBanner {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, )) {
                ( Facing::North, ) => 11940,
                ( Facing::South, ) => 11941,
                ( Facing::West, ) => 11942,
                ( Facing::East, ) => 11943,
            })
        }
    }

    impl From<CyanWallBanner> for BlockState {
        #[inline(always)]
        fn from(value : CyanWallBanner) -> Self {
            value.to_block_state()
        }
    }

    impl Default for CyanWallBanner {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for CyanWallBanner { }

    impl Block for CyanWallBanner {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
        };
    }

}

/// `minecraft:allium` block.
pub mod allium {
    use super::*;

    /// `minecraft:allium` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Allium;

    impl Allium {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(2125)
        }
    }

    impl From<Allium> for BlockState {
        #[inline(always)]
        fn from(value : Allium) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Allium {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Allium { }

    impl Block for Allium {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:light_gray_terracotta` block.
pub mod light_gray_terracotta {
    use super::*;

    /// `minecraft:light_gray_terracotta` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightGrayTerracotta;

    impl LightGrayTerracotta {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(10173)
        }
    }

    impl From<LightGrayTerracotta> for BlockState {
        #[inline(always)]
        fn from(value : LightGrayTerracotta) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightGrayTerracotta {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightGrayTerracotta { }

    impl Block for LightGrayTerracotta {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:stripped_cherry_wood` block.
pub mod stripped_cherry_wood {
    use super::*;

    /// `minecraft:stripped_cherry_wood` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct StrippedCherryWood {
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl StrippedCherryWood {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.axis, )) {
                ( Axis::X, ) => 240,
                ( Axis::Y, ) => 241,
                ( Axis::Z, ) => 242,
            })
        }
    }

    impl From<StrippedCherryWood> for BlockState {
        #[inline(always)]
        fn from(value : StrippedCherryWood) -> Self {
            value.to_block_state()
        }
    }

    impl Default for StrippedCherryWood {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for StrippedCherryWood { }

    impl Block for StrippedCherryWood {
        const DEFAULT_STATE : Self = Self {
            axis : Axis::Y,
        };
    }

}

/// `minecraft:zombie_wall_head` block.
pub mod zombie_wall_head {
    use super::*;

    /// `minecraft:zombie_wall_head` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct ZombieWallHead {
        /// `facing` state.
        pub facing : Facing,
        /// `powered` state.
        pub powered : bool,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl ZombieWallHead {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.facing, self.powered, )) {
                ( Facing::North, true, ) => 9748,
                ( Facing::North, false, ) => 9749,
                ( Facing::South, true, ) => 9750,
                ( Facing::South, false, ) => 9751,
                ( Facing::West, true, ) => 9752,
                ( Facing::West, false, ) => 9753,
                ( Facing::East, true, ) => 9754,
                ( Facing::East, false, ) => 9755,
            })
        }
    }

    impl From<ZombieWallHead> for BlockState {
        #[inline(always)]
        fn from(value : ZombieWallHead) -> Self {
            value.to_block_state()
        }
    }

    impl Default for ZombieWallHead {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for ZombieWallHead { }

    impl Block for ZombieWallHead {
        const DEFAULT_STATE : Self = Self {
            facing : Facing::North,
            powered : false,
        };
    }

}

/// `minecraft:barrier` block.
pub mod barrier {
    use super::*;

    /// `minecraft:barrier` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Barrier {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl Barrier {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 11254,
                ( false, ) => 11255,
            })
        }
    }

    impl From<Barrier> for BlockState {
        #[inline(always)]
        fn from(value : Barrier) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Barrier {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Barrier { }

    impl Block for Barrier {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
        };
    }

}

/// `minecraft:amethyst_block` block.
pub mod amethyst_block {
    use super::*;

    /// `minecraft:amethyst_block` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct AmethystBlock;

    impl AmethystBlock {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(22091)
        }
    }

    impl From<AmethystBlock> for BlockState {
        #[inline(always)]
        fn from(value : AmethystBlock) -> Self {
            value.to_block_state()
        }
    }

    impl Default for AmethystBlock {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for AmethystBlock { }

    impl Block for AmethystBlock {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_weathered_cut_copper_stairs` block.
pub mod waxed_weathered_cut_copper_stairs {
    use super::*;

    /// `minecraft:waxed_weathered_cut_copper_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedWeatheredCutCopperStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `facing` state.
        pub facing : Facing,
        /// `shape` state.
        pub shape : Shape,
        /// `half` state.
        pub half : Half,
    }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl WaxedWeatheredCutCopperStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.facing, self.shape, self.half, )) {
                ( true, Facing::North, Shape::Straight, Half::Top, ) => 24448,
                ( false, Facing::North, Shape::Straight, Half::Top, ) => 24449,
                ( true, Facing::North, Shape::InnerLeft, Half::Top, ) => 24450,
                ( false, Facing::North, Shape::InnerLeft, Half::Top, ) => 24451,
                ( true, Facing::North, Shape::InnerRight, Half::Top, ) => 24452,
                ( false, Facing::North, Shape::InnerRight, Half::Top, ) => 24453,
                ( true, Facing::North, Shape::OuterLeft, Half::Top, ) => 24454,
                ( false, Facing::North, Shape::OuterLeft, Half::Top, ) => 24455,
                ( true, Facing::North, Shape::OuterRight, Half::Top, ) => 24456,
                ( false, Facing::North, Shape::OuterRight, Half::Top, ) => 24457,
                ( true, Facing::North, Shape::Straight, Half::Bottom, ) => 24458,
                ( false, Facing::North, Shape::Straight, Half::Bottom, ) => 24459,
                ( true, Facing::North, Shape::InnerLeft, Half::Bottom, ) => 24460,
                ( false, Facing::North, Shape::InnerLeft, Half::Bottom, ) => 24461,
                ( true, Facing::North, Shape::InnerRight, Half::Bottom, ) => 24462,
                ( false, Facing::North, Shape::InnerRight, Half::Bottom, ) => 24463,
                ( true, Facing::North, Shape::OuterLeft, Half::Bottom, ) => 24464,
                ( false, Facing::North, Shape::OuterLeft, Half::Bottom, ) => 24465,
                ( true, Facing::North, Shape::OuterRight, Half::Bottom, ) => 24466,
                ( false, Facing::North, Shape::OuterRight, Half::Bottom, ) => 24467,
                ( true, Facing::South, Shape::Straight, Half::Top, ) => 24468,
                ( false, Facing::South, Shape::Straight, Half::Top, ) => 24469,
                ( true, Facing::South, Shape::InnerLeft, Half::Top, ) => 24470,
                ( false, Facing::South, Shape::InnerLeft, Half::Top, ) => 24471,
                ( true, Facing::South, Shape::InnerRight, Half::Top, ) => 24472,
                ( false, Facing::South, Shape::InnerRight, Half::Top, ) => 24473,
                ( true, Facing::South, Shape::OuterLeft, Half::Top, ) => 24474,
                ( false, Facing::South, Shape::OuterLeft, Half::Top, ) => 24475,
                ( true, Facing::South, Shape::OuterRight, Half::Top, ) => 24476,
                ( false, Facing::South, Shape::OuterRight, Half::Top, ) => 24477,
                ( true, Facing::South, Shape::Straight, Half::Bottom, ) => 24478,
                ( false, Facing::South, Shape::Straight, Half::Bottom, ) => 24479,
                ( true, Facing::South, Shape::InnerLeft, Half::Bottom, ) => 24480,
                ( false, Facing::South, Shape::InnerLeft, Half::Bottom, ) => 24481,
                ( true, Facing::South, Shape::InnerRight, Half::Bottom, ) => 24482,
                ( false, Facing::South, Shape::InnerRight, Half::Bottom, ) => 24483,
                ( true, Facing::South, Shape::OuterLeft, Half::Bottom, ) => 24484,
                ( false, Facing::South, Shape::OuterLeft, Half::Bottom, ) => 24485,
                ( true, Facing::South, Shape::OuterRight, Half::Bottom, ) => 24486,
                ( false, Facing::South, Shape::OuterRight, Half::Bottom, ) => 24487,
                ( true, Facing::West, Shape::Straight, Half::Top, ) => 24488,
                ( false, Facing::West, Shape::Straight, Half::Top, ) => 24489,
                ( true, Facing::West, Shape::InnerLeft, Half::Top, ) => 24490,
                ( false, Facing::West, Shape::InnerLeft, Half::Top, ) => 24491,
                ( true, Facing::West, Shape::InnerRight, Half::Top, ) => 24492,
                ( false, Facing::West, Shape::InnerRight, Half::Top, ) => 24493,
                ( true, Facing::West, Shape::OuterLeft, Half::Top, ) => 24494,
                ( false, Facing::West, Shape::OuterLeft, Half::Top, ) => 24495,
                ( true, Facing::West, Shape::OuterRight, Half::Top, ) => 24496,
                ( false, Facing::West, Shape::OuterRight, Half::Top, ) => 24497,
                ( true, Facing::West, Shape::Straight, Half::Bottom, ) => 24498,
                ( false, Facing::West, Shape::Straight, Half::Bottom, ) => 24499,
                ( true, Facing::West, Shape::InnerLeft, Half::Bottom, ) => 24500,
                ( false, Facing::West, Shape::InnerLeft, Half::Bottom, ) => 24501,
                ( true, Facing::West, Shape::InnerRight, Half::Bottom, ) => 24502,
                ( false, Facing::West, Shape::InnerRight, Half::Bottom, ) => 24503,
                ( true, Facing::West, Shape::OuterLeft, Half::Bottom, ) => 24504,
                ( false, Facing::West, Shape::OuterLeft, Half::Bottom, ) => 24505,
                ( true, Facing::West, Shape::OuterRight, Half::Bottom, ) => 24506,
                ( false, Facing::West, Shape::OuterRight, Half::Bottom, ) => 24507,
                ( true, Facing::East, Shape::Straight, Half::Top, ) => 24508,
                ( false, Facing::East, Shape::Straight, Half::Top, ) => 24509,
                ( true, Facing::East, Shape::InnerLeft, Half::Top, ) => 24510,
                ( false, Facing::East, Shape::InnerLeft, Half::Top, ) => 24511,
                ( true, Facing::East, Shape::InnerRight, Half::Top, ) => 24512,
                ( false, Facing::East, Shape::InnerRight, Half::Top, ) => 24513,
                ( true, Facing::East, Shape::OuterLeft, Half::Top, ) => 24514,
                ( false, Facing::East, Shape::OuterLeft, Half::Top, ) => 24515,
                ( true, Facing::East, Shape::OuterRight, Half::Top, ) => 24516,
                ( false, Facing::East, Shape::OuterRight, Half::Top, ) => 24517,
                ( true, Facing::East, Shape::Straight, Half::Bottom, ) => 24518,
                ( false, Facing::East, Shape::Straight, Half::Bottom, ) => 24519,
                ( true, Facing::East, Shape::InnerLeft, Half::Bottom, ) => 24520,
                ( false, Facing::East, Shape::InnerLeft, Half::Bottom, ) => 24521,
                ( true, Facing::East, Shape::InnerRight, Half::Bottom, ) => 24522,
                ( false, Facing::East, Shape::InnerRight, Half::Bottom, ) => 24523,
                ( true, Facing::East, Shape::OuterLeft, Half::Bottom, ) => 24524,
                ( false, Facing::East, Shape::OuterLeft, Half::Bottom, ) => 24525,
                ( true, Facing::East, Shape::OuterRight, Half::Bottom, ) => 24526,
                ( false, Facing::East, Shape::OuterRight, Half::Bottom, ) => 24527,
            })
        }
    }

    impl From<WaxedWeatheredCutCopperStairs> for BlockState {
        #[inline(always)]
        fn from(value : WaxedWeatheredCutCopperStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedWeatheredCutCopperStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedWeatheredCutCopperStairs { }

    impl Block for WaxedWeatheredCutCopperStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            facing : Facing::North,
            shape : Shape::Straight,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:light_blue_carpet` block.
pub mod light_blue_carpet {
    use super::*;

    /// `minecraft:light_blue_carpet` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct LightBlueCarpet;

    impl LightBlueCarpet {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11620)
        }
    }

    impl From<LightBlueCarpet> for BlockState {
        #[inline(always)]
        fn from(value : LightBlueCarpet) -> Self {
            value.to_block_state()
        }
    }

    impl Default for LightBlueCarpet {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for LightBlueCarpet { }

    impl Block for LightBlueCarpet {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:rose_bush` block.
pub mod rose_bush {
    use super::*;

    /// `minecraft:rose_bush` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct RoseBush {
        /// `half` state.
        pub half : Half,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl RoseBush {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, )) {
                ( Half::Upper, ) => 11640,
                ( Half::Lower, ) => 11641,
            })
        }
    }

    impl From<RoseBush> for BlockState {
        #[inline(always)]
        fn from(value : RoseBush) -> Self {
            value.to_block_state()
        }
    }

    impl Default for RoseBush {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for RoseBush { }

    impl Block for RoseBush {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
        };
    }

}

/// `minecraft:green_candle` block.
pub mod green_candle {
    use super::*;

    /// `minecraft:green_candle` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct GreenCandle {
        /// `lit` state.
        pub lit : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `candles` state.
        pub candles : Candles,
    }

    /// `candles` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Candles {
        /// `1` variant.
        N1,
        /// `2` variant.
        N2,
        /// `3` variant.
        N3,
        /// `4` variant.
        N4,
    }
    impl crate::Sealed for Candles { }
    impl BlockProperty for Candles { }

    impl GreenCandle {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.lit, self.waterlogged, self.candles, )) {
                ( true, true, Candles::N1, ) => 22009,
                ( true, false, Candles::N1, ) => 22010,
                ( false, true, Candles::N1, ) => 22011,
                ( false, false, Candles::N1, ) => 22012,
                ( true, true, Candles::N2, ) => 22013,
                ( true, false, Candles::N2, ) => 22014,
                ( false, true, Candles::N2, ) => 22015,
                ( false, false, Candles::N2, ) => 22016,
                ( true, true, Candles::N3, ) => 22017,
                ( true, false, Candles::N3, ) => 22018,
                ( false, true, Candles::N3, ) => 22019,
                ( false, false, Candles::N3, ) => 22020,
                ( true, true, Candles::N4, ) => 22021,
                ( true, false, Candles::N4, ) => 22022,
                ( false, true, Candles::N4, ) => 22023,
                ( false, false, Candles::N4, ) => 22024,
            })
        }
    }

    impl From<GreenCandle> for BlockState {
        #[inline(always)]
        fn from(value : GreenCandle) -> Self {
            value.to_block_state()
        }
    }

    impl Default for GreenCandle {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for GreenCandle { }

    impl Block for GreenCandle {
        const DEFAULT_STATE : Self = Self {
            lit : false,
            waterlogged : false,
            candles : Candles::N1,
        };
    }

}

/// `minecraft:bamboo_pressure_plate` block.
pub mod bamboo_pressure_plate {
    use super::*;

    /// `minecraft:bamboo_pressure_plate` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BambooPressurePlate {
        /// `powered` state.
        pub powered : bool,
    }

    impl BambooPressurePlate {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.powered, )) {
                ( true, ) => 5910,
                ( false, ) => 5911,
            })
        }
    }

    impl From<BambooPressurePlate> for BlockState {
        #[inline(always)]
        fn from(value : BambooPressurePlate) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BambooPressurePlate {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BambooPressurePlate { }

    impl Block for BambooPressurePlate {
        const DEFAULT_STATE : Self = Self {
            powered : false,
        };
    }

}

/// `minecraft:brain_coral` block.
pub mod brain_coral {
    use super::*;

    /// `minecraft:brain_coral` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct BrainCoral {
        /// `waterlogged` state.
        pub waterlogged : bool,
    }

    impl BrainCoral {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, )) {
                ( true, ) => 13880,
                ( false, ) => 13881,
            })
        }
    }

    impl From<BrainCoral> for BlockState {
        #[inline(always)]
        fn from(value : BrainCoral) -> Self {
            value.to_block_state()
        }
    }

    impl Default for BrainCoral {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for BrainCoral { }

    impl Block for BrainCoral {
        const DEFAULT_STATE : Self = Self {
            waterlogged : true,
        };
    }

}

/// `minecraft:chain` block.
pub mod chain {
    use super::*;

    /// `minecraft:chain` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct Chain {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `axis` state.
        pub axis : Axis,
    }

    /// `axis` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Axis {
        /// `x` variant.
        X,
        /// `y` variant.
        Y,
        /// `z` variant.
        Z,
    }
    impl crate::Sealed for Axis { }
    impl BlockProperty for Axis { }

    impl Chain {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.axis, )) {
                ( true, Axis::X, ) => 7016,
                ( false, Axis::X, ) => 7017,
                ( true, Axis::Y, ) => 7018,
                ( false, Axis::Y, ) => 7019,
                ( true, Axis::Z, ) => 7020,
                ( false, Axis::Z, ) => 7021,
            })
        }
    }

    impl From<Chain> for BlockState {
        #[inline(always)]
        fn from(value : Chain) -> Self {
            value.to_block_state()
        }
    }

    impl Default for Chain {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for Chain { }

    impl Block for Chain {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            axis : Axis::Y,
        };
    }

}

/// `minecraft:deepslate_brick_stairs` block.
pub mod deepslate_brick_stairs {
    use super::*;

    /// `minecraft:deepslate_brick_stairs` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DeepslateBrickStairs {
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `shape` state.
        pub shape : Shape,
        /// `facing` state.
        pub facing : Facing,
        /// `half` state.
        pub half : Half,
    }

    /// `shape` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Shape {
        /// `straight` variant.
        Straight,
        /// `inner_left` variant.
        InnerLeft,
        /// `inner_right` variant.
        InnerRight,
        /// `outer_left` variant.
        OuterLeft,
        /// `outer_right` variant.
        OuterRight,
    }
    impl crate::Sealed for Shape { }
    impl BlockProperty for Shape { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `top` variant.
        Top,
        /// `bottom` variant.
        Bottom,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    impl DeepslateBrickStairs {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.waterlogged, self.shape, self.facing, self.half, )) {
                ( true, Shape::Straight, Facing::North, Half::Top, ) => 27233,
                ( false, Shape::Straight, Facing::North, Half::Top, ) => 27234,
                ( true, Shape::InnerLeft, Facing::North, Half::Top, ) => 27235,
                ( false, Shape::InnerLeft, Facing::North, Half::Top, ) => 27236,
                ( true, Shape::InnerRight, Facing::North, Half::Top, ) => 27237,
                ( false, Shape::InnerRight, Facing::North, Half::Top, ) => 27238,
                ( true, Shape::OuterLeft, Facing::North, Half::Top, ) => 27239,
                ( false, Shape::OuterLeft, Facing::North, Half::Top, ) => 27240,
                ( true, Shape::OuterRight, Facing::North, Half::Top, ) => 27241,
                ( false, Shape::OuterRight, Facing::North, Half::Top, ) => 27242,
                ( true, Shape::Straight, Facing::North, Half::Bottom, ) => 27243,
                ( false, Shape::Straight, Facing::North, Half::Bottom, ) => 27244,
                ( true, Shape::InnerLeft, Facing::North, Half::Bottom, ) => 27245,
                ( false, Shape::InnerLeft, Facing::North, Half::Bottom, ) => 27246,
                ( true, Shape::InnerRight, Facing::North, Half::Bottom, ) => 27247,
                ( false, Shape::InnerRight, Facing::North, Half::Bottom, ) => 27248,
                ( true, Shape::OuterLeft, Facing::North, Half::Bottom, ) => 27249,
                ( false, Shape::OuterLeft, Facing::North, Half::Bottom, ) => 27250,
                ( true, Shape::OuterRight, Facing::North, Half::Bottom, ) => 27251,
                ( false, Shape::OuterRight, Facing::North, Half::Bottom, ) => 27252,
                ( true, Shape::Straight, Facing::South, Half::Top, ) => 27253,
                ( false, Shape::Straight, Facing::South, Half::Top, ) => 27254,
                ( true, Shape::InnerLeft, Facing::South, Half::Top, ) => 27255,
                ( false, Shape::InnerLeft, Facing::South, Half::Top, ) => 27256,
                ( true, Shape::InnerRight, Facing::South, Half::Top, ) => 27257,
                ( false, Shape::InnerRight, Facing::South, Half::Top, ) => 27258,
                ( true, Shape::OuterLeft, Facing::South, Half::Top, ) => 27259,
                ( false, Shape::OuterLeft, Facing::South, Half::Top, ) => 27260,
                ( true, Shape::OuterRight, Facing::South, Half::Top, ) => 27261,
                ( false, Shape::OuterRight, Facing::South, Half::Top, ) => 27262,
                ( true, Shape::Straight, Facing::South, Half::Bottom, ) => 27263,
                ( false, Shape::Straight, Facing::South, Half::Bottom, ) => 27264,
                ( true, Shape::InnerLeft, Facing::South, Half::Bottom, ) => 27265,
                ( false, Shape::InnerLeft, Facing::South, Half::Bottom, ) => 27266,
                ( true, Shape::InnerRight, Facing::South, Half::Bottom, ) => 27267,
                ( false, Shape::InnerRight, Facing::South, Half::Bottom, ) => 27268,
                ( true, Shape::OuterLeft, Facing::South, Half::Bottom, ) => 27269,
                ( false, Shape::OuterLeft, Facing::South, Half::Bottom, ) => 27270,
                ( true, Shape::OuterRight, Facing::South, Half::Bottom, ) => 27271,
                ( false, Shape::OuterRight, Facing::South, Half::Bottom, ) => 27272,
                ( true, Shape::Straight, Facing::West, Half::Top, ) => 27273,
                ( false, Shape::Straight, Facing::West, Half::Top, ) => 27274,
                ( true, Shape::InnerLeft, Facing::West, Half::Top, ) => 27275,
                ( false, Shape::InnerLeft, Facing::West, Half::Top, ) => 27276,
                ( true, Shape::InnerRight, Facing::West, Half::Top, ) => 27277,
                ( false, Shape::InnerRight, Facing::West, Half::Top, ) => 27278,
                ( true, Shape::OuterLeft, Facing::West, Half::Top, ) => 27279,
                ( false, Shape::OuterLeft, Facing::West, Half::Top, ) => 27280,
                ( true, Shape::OuterRight, Facing::West, Half::Top, ) => 27281,
                ( false, Shape::OuterRight, Facing::West, Half::Top, ) => 27282,
                ( true, Shape::Straight, Facing::West, Half::Bottom, ) => 27283,
                ( false, Shape::Straight, Facing::West, Half::Bottom, ) => 27284,
                ( true, Shape::InnerLeft, Facing::West, Half::Bottom, ) => 27285,
                ( false, Shape::InnerLeft, Facing::West, Half::Bottom, ) => 27286,
                ( true, Shape::InnerRight, Facing::West, Half::Bottom, ) => 27287,
                ( false, Shape::InnerRight, Facing::West, Half::Bottom, ) => 27288,
                ( true, Shape::OuterLeft, Facing::West, Half::Bottom, ) => 27289,
                ( false, Shape::OuterLeft, Facing::West, Half::Bottom, ) => 27290,
                ( true, Shape::OuterRight, Facing::West, Half::Bottom, ) => 27291,
                ( false, Shape::OuterRight, Facing::West, Half::Bottom, ) => 27292,
                ( true, Shape::Straight, Facing::East, Half::Top, ) => 27293,
                ( false, Shape::Straight, Facing::East, Half::Top, ) => 27294,
                ( true, Shape::InnerLeft, Facing::East, Half::Top, ) => 27295,
                ( false, Shape::InnerLeft, Facing::East, Half::Top, ) => 27296,
                ( true, Shape::InnerRight, Facing::East, Half::Top, ) => 27297,
                ( false, Shape::InnerRight, Facing::East, Half::Top, ) => 27298,
                ( true, Shape::OuterLeft, Facing::East, Half::Top, ) => 27299,
                ( false, Shape::OuterLeft, Facing::East, Half::Top, ) => 27300,
                ( true, Shape::OuterRight, Facing::East, Half::Top, ) => 27301,
                ( false, Shape::OuterRight, Facing::East, Half::Top, ) => 27302,
                ( true, Shape::Straight, Facing::East, Half::Bottom, ) => 27303,
                ( false, Shape::Straight, Facing::East, Half::Bottom, ) => 27304,
                ( true, Shape::InnerLeft, Facing::East, Half::Bottom, ) => 27305,
                ( false, Shape::InnerLeft, Facing::East, Half::Bottom, ) => 27306,
                ( true, Shape::InnerRight, Facing::East, Half::Bottom, ) => 27307,
                ( false, Shape::InnerRight, Facing::East, Half::Bottom, ) => 27308,
                ( true, Shape::OuterLeft, Facing::East, Half::Bottom, ) => 27309,
                ( false, Shape::OuterLeft, Facing::East, Half::Bottom, ) => 27310,
                ( true, Shape::OuterRight, Facing::East, Half::Bottom, ) => 27311,
                ( false, Shape::OuterRight, Facing::East, Half::Bottom, ) => 27312,
            })
        }
    }

    impl From<DeepslateBrickStairs> for BlockState {
        #[inline(always)]
        fn from(value : DeepslateBrickStairs) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DeepslateBrickStairs {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DeepslateBrickStairs { }

    impl Block for DeepslateBrickStairs {
        const DEFAULT_STATE : Self = Self {
            waterlogged : false,
            shape : Shape::Straight,
            facing : Facing::North,
            half : Half::Bottom,
        };
    }

}

/// `minecraft:smooth_red_sandstone` block.
pub mod smooth_red_sandstone {
    use super::*;

    /// `minecraft:smooth_red_sandstone` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SmoothRedSandstone;

    impl SmoothRedSandstone {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(12204)
        }
    }

    impl From<SmoothRedSandstone> for BlockState {
        #[inline(always)]
        fn from(value : SmoothRedSandstone) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SmoothRedSandstone {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SmoothRedSandstone { }

    impl Block for SmoothRedSandstone {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:waxed_exposed_copper_door` block.
pub mod waxed_exposed_copper_door {
    use super::*;

    /// `minecraft:waxed_exposed_copper_door` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WaxedExposedCopperDoor {
        /// `half` state.
        pub half : Half,
        /// `open` state.
        pub open : bool,
        /// `hinge` state.
        pub hinge : Hinge,
        /// `powered` state.
        pub powered : bool,
        /// `facing` state.
        pub facing : Facing,
    }

    /// `half` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Half {
        /// `upper` variant.
        Upper,
        /// `lower` variant.
        Lower,
    }
    impl crate::Sealed for Half { }
    impl BlockProperty for Half { }

    /// `hinge` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Hinge {
        /// `left` variant.
        Left,
        /// `right` variant.
        Right,
    }
    impl crate::Sealed for Hinge { }
    impl BlockProperty for Hinge { }

    /// `facing` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Facing {
        /// `north` variant.
        North,
        /// `south` variant.
        South,
        /// `west` variant.
        West,
        /// `east` variant.
        East,
    }
    impl crate::Sealed for Facing { }
    impl BlockProperty for Facing { }

    impl WaxedExposedCopperDoor {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.half, self.open, self.hinge, self.powered, self.facing, )) {
                ( Half::Upper, true, Hinge::Left, true, Facing::North, ) => 25032,
                ( Half::Upper, true, Hinge::Left, false, Facing::North, ) => 25033,
                ( Half::Upper, false, Hinge::Left, true, Facing::North, ) => 25034,
                ( Half::Upper, false, Hinge::Left, false, Facing::North, ) => 25035,
                ( Half::Upper, true, Hinge::Right, true, Facing::North, ) => 25036,
                ( Half::Upper, true, Hinge::Right, false, Facing::North, ) => 25037,
                ( Half::Upper, false, Hinge::Right, true, Facing::North, ) => 25038,
                ( Half::Upper, false, Hinge::Right, false, Facing::North, ) => 25039,
                ( Half::Lower, true, Hinge::Left, true, Facing::North, ) => 25040,
                ( Half::Lower, true, Hinge::Left, false, Facing::North, ) => 25041,
                ( Half::Lower, false, Hinge::Left, true, Facing::North, ) => 25042,
                ( Half::Lower, false, Hinge::Left, false, Facing::North, ) => 25043,
                ( Half::Lower, true, Hinge::Right, true, Facing::North, ) => 25044,
                ( Half::Lower, true, Hinge::Right, false, Facing::North, ) => 25045,
                ( Half::Lower, false, Hinge::Right, true, Facing::North, ) => 25046,
                ( Half::Lower, false, Hinge::Right, false, Facing::North, ) => 25047,
                ( Half::Upper, true, Hinge::Left, true, Facing::South, ) => 25048,
                ( Half::Upper, true, Hinge::Left, false, Facing::South, ) => 25049,
                ( Half::Upper, false, Hinge::Left, true, Facing::South, ) => 25050,
                ( Half::Upper, false, Hinge::Left, false, Facing::South, ) => 25051,
                ( Half::Upper, true, Hinge::Right, true, Facing::South, ) => 25052,
                ( Half::Upper, true, Hinge::Right, false, Facing::South, ) => 25053,
                ( Half::Upper, false, Hinge::Right, true, Facing::South, ) => 25054,
                ( Half::Upper, false, Hinge::Right, false, Facing::South, ) => 25055,
                ( Half::Lower, true, Hinge::Left, true, Facing::South, ) => 25056,
                ( Half::Lower, true, Hinge::Left, false, Facing::South, ) => 25057,
                ( Half::Lower, false, Hinge::Left, true, Facing::South, ) => 25058,
                ( Half::Lower, false, Hinge::Left, false, Facing::South, ) => 25059,
                ( Half::Lower, true, Hinge::Right, true, Facing::South, ) => 25060,
                ( Half::Lower, true, Hinge::Right, false, Facing::South, ) => 25061,
                ( Half::Lower, false, Hinge::Right, true, Facing::South, ) => 25062,
                ( Half::Lower, false, Hinge::Right, false, Facing::South, ) => 25063,
                ( Half::Upper, true, Hinge::Left, true, Facing::West, ) => 25064,
                ( Half::Upper, true, Hinge::Left, false, Facing::West, ) => 25065,
                ( Half::Upper, false, Hinge::Left, true, Facing::West, ) => 25066,
                ( Half::Upper, false, Hinge::Left, false, Facing::West, ) => 25067,
                ( Half::Upper, true, Hinge::Right, true, Facing::West, ) => 25068,
                ( Half::Upper, true, Hinge::Right, false, Facing::West, ) => 25069,
                ( Half::Upper, false, Hinge::Right, true, Facing::West, ) => 25070,
                ( Half::Upper, false, Hinge::Right, false, Facing::West, ) => 25071,
                ( Half::Lower, true, Hinge::Left, true, Facing::West, ) => 25072,
                ( Half::Lower, true, Hinge::Left, false, Facing::West, ) => 25073,
                ( Half::Lower, false, Hinge::Left, true, Facing::West, ) => 25074,
                ( Half::Lower, false, Hinge::Left, false, Facing::West, ) => 25075,
                ( Half::Lower, true, Hinge::Right, true, Facing::West, ) => 25076,
                ( Half::Lower, true, Hinge::Right, false, Facing::West, ) => 25077,
                ( Half::Lower, false, Hinge::Right, true, Facing::West, ) => 25078,
                ( Half::Lower, false, Hinge::Right, false, Facing::West, ) => 25079,
                ( Half::Upper, true, Hinge::Left, true, Facing::East, ) => 25080,
                ( Half::Upper, true, Hinge::Left, false, Facing::East, ) => 25081,
                ( Half::Upper, false, Hinge::Left, true, Facing::East, ) => 25082,
                ( Half::Upper, false, Hinge::Left, false, Facing::East, ) => 25083,
                ( Half::Upper, true, Hinge::Right, true, Facing::East, ) => 25084,
                ( Half::Upper, true, Hinge::Right, false, Facing::East, ) => 25085,
                ( Half::Upper, false, Hinge::Right, true, Facing::East, ) => 25086,
                ( Half::Upper, false, Hinge::Right, false, Facing::East, ) => 25087,
                ( Half::Lower, true, Hinge::Left, true, Facing::East, ) => 25088,
                ( Half::Lower, true, Hinge::Left, false, Facing::East, ) => 25089,
                ( Half::Lower, false, Hinge::Left, true, Facing::East, ) => 25090,
                ( Half::Lower, false, Hinge::Left, false, Facing::East, ) => 25091,
                ( Half::Lower, true, Hinge::Right, true, Facing::East, ) => 25092,
                ( Half::Lower, true, Hinge::Right, false, Facing::East, ) => 25093,
                ( Half::Lower, false, Hinge::Right, true, Facing::East, ) => 25094,
                ( Half::Lower, false, Hinge::Right, false, Facing::East, ) => 25095,
            })
        }
    }

    impl From<WaxedExposedCopperDoor> for BlockState {
        #[inline(always)]
        fn from(value : WaxedExposedCopperDoor) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WaxedExposedCopperDoor {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WaxedExposedCopperDoor { }

    impl Block for WaxedExposedCopperDoor {
        const DEFAULT_STATE : Self = Self {
            half : Half::Lower,
            open : false,
            hinge : Hinge::Left,
            powered : false,
            facing : Facing::North,
        };
    }

}

/// `minecraft:dark_prismarine` block.
pub mod dark_prismarine {
    use super::*;

    /// `minecraft:dark_prismarine` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct DarkPrismarine;

    impl DarkPrismarine {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(11354)
        }
    }

    impl From<DarkPrismarine> for BlockState {
        #[inline(always)]
        fn from(value : DarkPrismarine) -> Self {
            value.to_block_state()
        }
    }

    impl Default for DarkPrismarine {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for DarkPrismarine { }

    impl Block for DarkPrismarine {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:spruce_sapling` block.
pub mod spruce_sapling {
    use super::*;

    /// `minecraft:spruce_sapling` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SpruceSapling {
        /// `stage` state.
        pub stage : Stage,
    }

    /// `stage` state.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub enum Stage {
        /// `0` variant.
        N0,
        /// `1` variant.
        N1,
    }
    impl crate::Sealed for Stage { }
    impl BlockProperty for Stage { }

    impl SpruceSapling {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.stage, )) {
                ( Stage::N0, ) => 31,
                ( Stage::N1, ) => 32,
            })
        }
    }

    impl From<SpruceSapling> for BlockState {
        #[inline(always)]
        fn from(value : SpruceSapling) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SpruceSapling {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SpruceSapling { }

    impl Block for SpruceSapling {
        const DEFAULT_STATE : Self = Self {
            stage : Stage::N0,
        };
    }

}

/// `minecraft:oxidized_chiseled_copper` block.
pub mod oxidized_chiseled_copper {
    use super::*;

    /// `minecraft:oxidized_chiseled_copper` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct OxidizedChiseledCopper;

    impl OxidizedChiseledCopper {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(24008)
        }
    }

    impl From<OxidizedChiseledCopper> for BlockState {
        #[inline(always)]
        fn from(value : OxidizedChiseledCopper) -> Self {
            value.to_block_state()
        }
    }

    impl Default for OxidizedChiseledCopper {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for OxidizedChiseledCopper { }

    impl Block for OxidizedChiseledCopper {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:warped_planks` block.
pub mod warped_planks {
    use super::*;

    /// `minecraft:warped_planks` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct WarpedPlanks;

    impl WarpedPlanks {
        /// Get this block as a [`BlockState`] ID.
        #[inline(always)]
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(19722)
        }
    }

    impl From<WarpedPlanks> for BlockState {
        #[inline(always)]
        fn from(value : WarpedPlanks) -> Self {
            value.to_block_state()
        }
    }

    impl Default for WarpedPlanks {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for WarpedPlanks { }

    impl Block for WarpedPlanks {
        const DEFAULT_STATE : Self = Self;
    }

}

/// `minecraft:sculk_vein` block.
pub mod sculk_vein {
    use super::*;

    /// `minecraft:sculk_vein` block.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
    pub struct SculkVein {
        /// `north` state.
        pub north : bool,
        /// `waterlogged` state.
        pub waterlogged : bool,
        /// `up` state.
        pub up : bool,
        /// `west` state.
        pub west : bool,
        /// `east` state.
        pub east : bool,
        /// `down` state.
        pub down : bool,
        /// `south` state.
        pub south : bool,
    }

    impl SculkVein {
        /// Get this block as a [`BlockState`] ID.
        pub const fn to_block_state(&self) -> BlockState {
            BlockState::from_raw_id(match (( self.north, self.waterlogged, self.up, self.west, self.east, self.down, self.south, )) {
                ( true, true, true, true, true, true, true, ) => 23860,
                ( true, true, true, false, true, true, true, ) => 23861,
                ( true, false, true, true, true, true, true, ) => 23862,
                ( true, false, true, false, true, true, true, ) => 23863,
                ( true, true, false, true, true, true, true, ) => 23864,
                ( true, true, false, false, true, true, true, ) => 23865,
                ( true, false, false, true, true, true, true, ) => 23866,
                ( true, false, false, false, true, true, true, ) => 23867,
                ( true, true, true, true, true, true, false, ) => 23868,
                ( true, true, true, false, true, true, false, ) => 23869,
                ( true, false, true, true, true, true, false, ) => 23870,
                ( true, false, true, false, true, true, false, ) => 23871,
                ( true, true, false, true, true, true, false, ) => 23872,
                ( true, true, false, false, true, true, false, ) => 23873,
                ( true, false, false, true, true, true, false, ) => 23874,
                ( true, false, false, false, true, true, false, ) => 23875,
                ( false, true, true, true, true, true, true, ) => 23876,
                ( false, true, true, false, true, true, true, ) => 23877,
                ( false, false, true, true, true, true, true, ) => 23878,
                ( false, false, true, false, true, true, true, ) => 23879,
                ( false, true, false, true, true, true, true, ) => 23880,
                ( false, true, false, false, true, true, true, ) => 23881,
                ( false, false, false, true, true, true, true, ) => 23882,
                ( false, false, false, false, true, true, true, ) => 23883,
                ( false, true, true, true, true, true, false, ) => 23884,
                ( false, true, true, false, true, true, false, ) => 23885,
                ( false, false, true, true, true, true, false, ) => 23886,
                ( false, false, true, false, true, true, false, ) => 23887,
                ( false, true, false, true, true, true, false, ) => 23888,
                ( false, true, false, false, true, true, false, ) => 23889,
                ( false, false, false, true, true, true, false, ) => 23890,
                ( false, false, false, false, true, true, false, ) => 23891,
                ( true, true, true, true, false, true, true, ) => 23892,
                ( true, true, true, false, false, true, true, ) => 23893,
                ( true, false, true, true, false, true, true, ) => 23894,
                ( true, false, true, false, false, true, true, ) => 23895,
                ( true, true, false, true, false, true, true, ) => 23896,
                ( true, true, false, false, false, true, true, ) => 23897,
                ( true, false, false, true, false, true, true, ) => 23898,
                ( true, false, false, false, false, true, true, ) => 23899,
                ( true, true, true, true, false, true, false, ) => 23900,
                ( true, true, true, false, false, true, false, ) => 23901,
                ( true, false, true, true, false, true, false, ) => 23902,
                ( true, false, true, false, false, true, false, ) => 23903,
                ( true, true, false, true, false, true, false, ) => 23904,
                ( true, true, false, false, false, true, false, ) => 23905,
                ( true, false, false, true, false, true, false, ) => 23906,
                ( true, false, false, false, false, true, false, ) => 23907,
                ( false, true, true, true, false, true, true, ) => 23908,
                ( false, true, true, false, false, true, true, ) => 23909,
                ( false, false, true, true, false, true, true, ) => 23910,
                ( false, false, true, false, false, true, true, ) => 23911,
                ( false, true, false, true, false, true, true, ) => 23912,
                ( false, true, false, false, false, true, true, ) => 23913,
                ( false, false, false, true, false, true, true, ) => 23914,
                ( false, false, false, false, false, true, true, ) => 23915,
                ( false, true, true, true, false, true, false, ) => 23916,
                ( false, true, true, false, false, true, false, ) => 23917,
                ( false, false, true, true, false, true, false, ) => 23918,
                ( false, false, true, false, false, true, false, ) => 23919,
                ( false, true, false, true, false, true, false, ) => 23920,
                ( false, true, false, false, false, true, false, ) => 23921,
                ( false, false, false, true, false, true, false, ) => 23922,
                ( false, false, false, false, false, true, false, ) => 23923,
                ( true, true, true, true, true, false, true, ) => 23924,
                ( true, true, true, false, true, false, true, ) => 23925,
                ( true, false, true, true, true, false, true, ) => 23926,
                ( true, false, true, false, true, false, true, ) => 23927,
                ( true, true, false, true, true, false, true, ) => 23928,
                ( true, true, false, false, true, false, true, ) => 23929,
                ( true, false, false, true, true, false, true, ) => 23930,
                ( true, false, false, false, true, false, true, ) => 23931,
                ( true, true, true, true, true, false, false, ) => 23932,
                ( true, true, true, false, true, false, false, ) => 23933,
                ( true, false, true, true, true, false, false, ) => 23934,
                ( true, false, true, false, true, false, false, ) => 23935,
                ( true, true, false, true, true, false, false, ) => 23936,
                ( true, true, false, false, true, false, false, ) => 23937,
                ( true, false, false, true, true, false, false, ) => 23938,
                ( true, false, false, false, true, false, false, ) => 23939,
                ( false, true, true, true, true, false, true, ) => 23940,
                ( false, true, true, false, true, false, true, ) => 23941,
                ( false, false, true, true, true, false, true, ) => 23942,
                ( false, false, true, false, true, false, true, ) => 23943,
                ( false, true, false, true, true, false, true, ) => 23944,
                ( false, true, false, false, true, false, true, ) => 23945,
                ( false, false, false, true, true, false, true, ) => 23946,
                ( false, false, false, false, true, false, true, ) => 23947,
                ( false, true, true, true, true, false, false, ) => 23948,
                ( false, true, true, false, true, false, false, ) => 23949,
                ( false, false, true, true, true, false, false, ) => 23950,
                ( false, false, true, false, true, false, false, ) => 23951,
                ( false, true, false, true, true, false, false, ) => 23952,
                ( false, true, false, false, true, false, false, ) => 23953,
                ( false, false, false, true, true, false, false, ) => 23954,
                ( false, false, false, false, true, false, false, ) => 23955,
                ( true, true, true, true, false, false, true, ) => 23956,
                ( true, true, true, false, false, false, true, ) => 23957,
                ( true, false, true, true, false, false, true, ) => 23958,
                ( true, false, true, false, false, false, true, ) => 23959,
                ( true, true, false, true, false, false, true, ) => 23960,
                ( true, true, false, false, false, false, true, ) => 23961,
                ( true, false, false, true, false, false, true, ) => 23962,
                ( true, false, false, false, false, false, true, ) => 23963,
                ( true, true, true, true, false, false, false, ) => 23964,
                ( true, true, true, false, false, false, false, ) => 23965,
                ( true, false, true, true, false, false, false, ) => 23966,
                ( true, false, true, false, false, false, false, ) => 23967,
                ( true, true, false, true, false, false, false, ) => 23968,
                ( true, true, false, false, false, false, false, ) => 23969,
                ( true, false, false, true, false, false, false, ) => 23970,
                ( true, false, false, false, false, false, false, ) => 23971,
                ( false, true, true, true, false, false, true, ) => 23972,
                ( false, true, true, false, false, false, true, ) => 23973,
                ( false, false, true, true, false, false, true, ) => 23974,
                ( false, false, true, false, false, false, true, ) => 23975,
                ( false, true, false, true, false, false, true, ) => 23976,
                ( false, true, false, false, false, false, true, ) => 23977,
                ( false, false, false, true, false, false, true, ) => 23978,
                ( false, false, false, false, false, false, true, ) => 23979,
                ( false, true, true, true, false, false, false, ) => 23980,
                ( false, true, true, false, false, false, false, ) => 23981,
                ( false, false, true, true, false, false, false, ) => 23982,
                ( false, false, true, false, false, false, false, ) => 23983,
                ( false, true, false, true, false, false, false, ) => 23984,
                ( false, true, false, false, false, false, false, ) => 23985,
                ( false, false, false, true, false, false, false, ) => 23986,
                ( false, false, false, false, false, false, false, ) => 23987,
            })
        }
    }

    impl From<SculkVein> for BlockState {
        #[inline(always)]
        fn from(value : SculkVein) -> Self {
            value.to_block_state()
        }
    }

    impl Default for SculkVein {
        #[inline(always)]
        fn default() -> Self {
            Self::DEFAULT_STATE
        }
    }
    impl crate::Sealed for SculkVein { }

    impl Block for SculkVein {
        const DEFAULT_STATE : Self = Self {
            north : false,
            waterlogged : false,
            up : false,
            west : false,
            east : false,
            down : false,
            south : false,
        };
    }

}

